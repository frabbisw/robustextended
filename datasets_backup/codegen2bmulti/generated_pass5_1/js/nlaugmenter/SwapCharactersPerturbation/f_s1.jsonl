{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": false, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const thresholdSquared = threshold * threshold;\n  const minDistance = sortedNumbers.reduce((min, current, index) => {\n    const distance = Math.abs(sortedNumbers[index] - current);\n    return distance < min? distance : min;\n  }, Infinity);\n  return minDistance < thresholdSquared;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this fnuction is a string contianing multiple gruops of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate grousp are balanced (each open brace is properly closed) and not nseted within each other\n  Ignoer ayn spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input to this fnuction is a string contianing multiple gruops of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate grousp are balanced (each open brace is properly closed) and not nseted within each other\n  Ignoer ayn spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let open_paren_count_max = 0;\n  let open_paren_count_min = 0;\n  let open_paren_count_max_min = 0;\n  let open_paren_count_max_min_max = 0;\n  let open_paren_count_max_min_min = 0;\n  let open_paren_count_max_min_min_max = 0;\n  let open_paren_count_max_min_min_min = 0;\n  let open_paren_count_max_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindorme */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gniven strig is a palindorme */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = postfix.length > prefix.length? postfix : prefix;\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = postfix.length > prefix.length? postfix : prefix;\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = postfix.length > prefix.length? postfix : prefix;\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = postfix.length > prefix.length? postfix : prefix;\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = postfix.length > prefix.length? postfix : prefix;\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = postfix.length > prefix.length? postfix : prefix;\n  return result;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = []\n  let n1 = n\n  let n2 = n\n  let n3 = n\n  let n4 = n\n  let n5 = n\n  let n6 = n\n  let n7 = n\n  let n8 = n\n  let n9 = n\n  let n10 = n\n  let n11 = n\n  let n12 = n\n  let n13 = n\n  let n14 = n\n  let n15 = n\n  let n16 = n\n  let n17 = n\n  let n18 = n\n  let n19 = n\n  let n20 = n\n  let n21 = n\n  let n22 = n\n  let n23 = n\n  let n24 = n\n  let n25 = n\n  let n26 = n\n  let n27 = n\n  let n28 = n\n  let n29 = n\n  let n30 = n\n  let n31 = n\n  let n32 = n\n  let n33 = n\n  let n34 = n\n  let n35 = n\n  let n36 = n\n  let n37 = n\n  let n38 = n\n  let n39 = n\n  let n40 = n\n  let n41 = n\n  let n42 = n\n  let n43 = n\n  let n44 = n\n  let n45 = n\n  let n46 = n\n  let n47 = n\n  let n48 = n\n  let n49 = n\n  let n50 = n\n  let n51 = n\n  let n52 = n\n  let n53 = n\n  let n54 = n\n  let n55 = n\n  let n56 = n\n  let n57 = n\n  let n58 = n\n  let n59 = n\n  let n60 = n\n  let n61 = n\n  let n62 = n\n  let n63 = n\n  let n64 = n\n  let n65 = n\n  let n66 = n\n  let n67 = n\n  let n68 = n\n  let n69 = n\n  let n70 = n\n  let n71 = n\n  let n72 = n\n  let n73 = n\n  let n74 = n\n  let n75 = n\n  let n76 = n\n  let n77 = n\n  let n78 = n\n  let n79 = n\n  let n80 = n\n  let n81 = n\n  let n82 = n\n  let n83 = n\n  let n84 = n\n  let n85 = n\n  let n86 = n\n  let n87 = n\n  let n88 = n\n  let n89 = n\n  let n90 = n\n  let n91 = n\n  let n92 = n\n  let n93 = n\n  let n94 = n\n  let n95 = n\n  let n96 = n\n  let n97 = n\n  let n98 = n\n  let n99 = n\n  let n100 = n\n  let n101 = n\n  let n102 = n\n  let n103 = n\n  let n104 = n\n  let n105 = n\n  let n106 = n\n  let n107 = n\n  let n108 = n\n  let n109 = n\n  let n110 = n\n  let n111 = n\n  let n112 = n\n  let n113 = n\n  let n114 = n\n  let n115 = n\n  let n116 = n\n  let n117 = n\n  let n118 = n\n  let n119 = n\n  let n120 = n\n  let n121 = n\n  let n122 = n\n  let n123 = n\n  let n124 = n\n  let n125 = n\n  let n126 = n\n  let n127 = n\n  let n128 = n\n  let n129 = n\n  let n130 = n\n  let n131 = n\n  let n132 = n\n  let n133 = n\n  let n134 = n\n  let n135 = n\n  let n136 = n\n  let n137 = n\n  let n138 = n\n  let n139 = n\n  let n140 = n\n  let n141 = n\n  let n142 = n\n  let n143 = n\n  let n144 = n\n  let n145 = n\n  let n146 = n\n  let n147 = n\n  let n148 = n\n  let n149 = n\n  let n150 = n\n  let n151 = n\n  let n152 = n\n  let n153 = n\n  let n154 = n\n  let n155 = n\n  let n156 = n\n  let n157 = n\n  let n158 = n\n  let n159 = n\n  let n160 = n\n  let n161 = n\n  let n162 = n\n  let n163 = n\n  let n164 = n\n  let n165 = n\n  let n166 = n\n  let n167 = n\n  let n168 = n\n  let n169 = n\n  let n170 = n\n  let n171 = n\n  let n172 = n\n  let n173 = n\n  let n174 = n\n  let n175 = n\n  let n176 = n\n  let n177 = n\n  let n178 = n\n  let n179 = n\n  let n180 = n\n  let n181 = n\n  let n182 = n\n  let n183 = n\n  let n184 = n\n  let n185 = n\n  let n186 = n\n  let n187 = n\n  let n188 = n\n  let n189 = n\n  let n190 = n\n  let n191 = n\n  let n192 = n\n  let n193 = n\n  let n194 = n\n  let n195 = n\n  let n196 = n\n  let n197 = n\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString12 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString13 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString14 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString15 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString16 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString17 = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,;\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst wordsString18 = (s) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = (x + y) / 2;\n  if (x > mid) {\n    return chooseNum(x, mid);\n  }\n  return chooseNum(mid, y);\n};\n\nconst main = () => {\n  console.log(chooseNum(12, 15));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive nitegers n and m, and your task is to comptue the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is gretaer than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are given two positive nitegers n and m, and your task is to comptue the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is gretaer than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  const binary = avg.toString(2);\n  if (binary.length > 1) {\n    return binary.substr(0, binary.length - 1);\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implement the function f that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f2 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f3 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f4 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f5 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f6 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f7 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f8 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f9 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f10 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f11 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f12 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f13 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f14 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f15 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1);\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconst f16 = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a opsitive itneger n, return a tuple that has the number of even and odd\n  inetger palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a opsitive itneger n, return a tuple that has the number of even and odd\n  inetger palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0;\n  const odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const isPalindrome = isPalindrome(i);\n    if (isPalindrome) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  unmbers in the array will eb randomly oredred. Your task is to deteirmne fi\n  it is opssibel ot get an array ostred in non-edcreasing order by performing \n  teh following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  unmbers in the array will eb randomly oredred. Your task is to deteirmne fi\n  it is opssibel ot get an array ostred in non-edcreasing order by performing \n  teh following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall10 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = arr[i] > res? arr[i] : res;\n  }\n  arr.unshift(res);\n  return arr.sort((a, b) => a - b)\n   .shift() === res;\n};\n\nconst moveOneBall11 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let res = arr[0];\n  for (let i = 1; i < arr.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two srtings a adn b consisting only of 1s and 0s.\n  Perfomr binary OXR on these inputs nda return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input are two srtings a adn b consisting only of 1s and 0s.\n  Perfomr binary OXR on these inputs nda return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '1';\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  stringXor\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  if (lst1Len!== lst2Len) {\n    return \"NO\";\n  }\n  const lst1Even = lst1.filter(e => e % 2 === 0);\n  const lst2Even = lst2.filter(e => e % 2 === 0);\n  if (lst1Even.length === lst2Even.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let letterCount = {};\n  let letterCounts = [];\n  let letterCountsLength = 0;\n  let letterCountsLengthMax = 0;\n  let letterCountsLengthMin = 0;\n  let letterCountsLengthMaxMin = 0;\n  let letterCountsLengthMaxMinMax = 0;\n  let letterCountsLengthMaxMinMin = 0;\n  let letterCountsLengthMaxMinMax = 0;\n  let letterCountsLengthMaxMinMax = 0;\n  let letterCountsLengthMaxMinMaxMax = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;\n  let letterCountsLengthMaxMinMaxMin = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result.split('').reverse().join('') === result;\n  return [result, isPalindrome];\n};\n\nconst reverseDeleteTest = (s, c) => {\n  let [result, isPalindrome] = reverseDelete(s, c);\n  console.log(`reverseDelete(s, c) = ${result}, ${isPalindrome}`);\n};\n\nreverseDeleteTest('abcde', 'ae');\nreverseDeleteTest('abcdef', 'b');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverseDeleteTest('abcdedcba', 'ab');\nreverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of itnegers nums, find the miniumm sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of itnegers nums, find the miniumm sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    const sum = nums[i];\n    while (i + 1 < nums.length && nums[i + 1] >= 0) {\n      sum += nums[i + 1];\n      i++;\n    }\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. aEch row represents a single well,\n  and each 1 in a row represents a snigle unit of water.\n  Each well has a corresponding bucket that can be uesd to extract water rfom it, \n  and all buckest have the same capacity.\n  Your task is to use the buckest to empty the wells.\n  Ouptut the number of times you need to olwer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. aEch row represents a single well,\n  and each 1 in a row represents a snigle unit of water.\n  Each well has a corresponding bucket that can be uesd to extract water rfom it, \n  and all buckest have the same capacity.\n  Your task is to use the buckest to empty the wells.\n  Ouptut the number of times you need to olwer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    buckets.push([]);\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i].push(j);\n      }\n    }\n  }\n  let maxFill = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    let bucket = buckets[i];\n    let bucketCapacity = capacity;\n    let bucketFill = 0;\n    while (bucketFill < bucketCapacity) {\n      let bucketIndex = Math.floor(Math.random() * bucket.length);\n      let bucketValue = bucket[bucketIndex];\n      bucketCapacity -= bucketValue;\n      bucketFill += bucketValue;\n      bucket.splice(bucketIndex, 1);\n    }\n    maxFill = Math.max(maxFill, bucketFill);\n  }\n  return maxFill;\n};\n\nconst test = [\n  [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]],\n  [[0, 0, 0], [0, 0, 0]],\n  [[0, 0, 0], [0, 0, 0]]\n];\n\nconsole.log(maxFill(test[0], 1));\nconsole.log(maxFill(test[1], 2));\nconsole.log(maxFill(test[2], 5));\nconsole.log(maxFill(test[3], 10));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4];\n  console.log(sortArray(arr));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n cnosonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n cnosonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You rae given a word. Your task is to find the closset vowel that stands between \n  two consonants from the rigth side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above cnoiditon. \n\n  Yuo amy assume that the given string conitans Engilhs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You rae given a word. Your task is to find the closset vowel that stands between \n  two consonants from the rigth side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above cnoiditon. \n\n  Yuo amy assume that the given string conitans Engilhs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let len = word.length;\n  let i = 0;\n  let j = 0;\n  let closestVowel = \"\";\n  while (i < len) {\n    let currentChar = word[i];\n    let currentCharIndex = vowels.indexOf(currentChar);\n    if (currentCharIndex!== -1) {\n      closestVowel = currentChar;\n      i++;\n    } else {\n      while (j < consonants.length) {\n        let nextChar = word[i + j];\n        let nextCharIndex = consonants.indexOf(nextChar);\n        if (nextCharIndex!== -1) {\n          closestVowel = consonants[nextCharIndex];\n          i++;\n          j++;\n          break;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strinsg conisst of open\n  parentheses '(' or cloes parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some odrer, that the resulting string will be good.\n  A stirng S is considered to be good if and only if all parentheses in S\n  are blaacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are given a list of two strings, both strinsg conisst of open\n  parentheses '(' or cloes parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some odrer, that the resulting string will be good.\n  A stirng S is considered to be good if and only if all parentheses in S\n  are blaacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== '(' && lst[i]!== ')') {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Retrun null in case the niptu list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Retrun null in case the niptu list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  }, -Infinity);\n\n  const maxIndex = arr.findIndex(item => item > max);\n\n  if (maxIndex === -1) {\n    return arr;\n  }\n\n  const maxArr = arr.slice(0, maxIndex + 1);\n\n  if (maxIndex + 1 === k) {\n    return maxArr;\n  }\n\n  return maximum(maxArr, k - 1);\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  const maxDigit = Math.max(...arr.slice(0, k));\n  return sum + maxDigit;\n};\n\nexport default addElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddCollatz = [];\n  let evenCollatz = [];\n  let evenCollatzIndex = 0;\n  let oddCollatzIndex = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatz", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  const day = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[0], 10);\n  const days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 4 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 6 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 9 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 11 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day < 1 || month === 4 && day < 1 || month === 6 && day < 1 || month === 9 && day < 1) {\n    return false;\n  }\n  if (month === 2 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 4 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 6 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 9 && day > days[month - 1]) {\n    return false;\n  }\n  if (month === 11 && day > days[month - 1]) {\n    return false;\n  }\n  if (year < 1000 || year > 2099) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    if (txt[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": false, "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) return false;\n    if (lst[i] < lst[j]) {\n      i++;\n      continue;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  if (start1 >= start2 && start1 <= end2) {\n    return \"YES\";\n  }\n  if (start2 >= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = intersection;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multilpied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multilpied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const visited = new Set();\n  const minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const curr = grid[i][j];\n      if (visited.has(curr)) continue;\n      visited.add(curr);\n      const next = [...grid,...visited];\n      const nextMinPath = minPaths(next, k);\n      minPath.push(...nextMinPath);\n    }\n  }\n  return minPath;\n};\n\nconst minPaths = (grid, k) => {\n  const visited = new Set();\n  const minPath = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const curr = grid[i][j];\n      if (visited.has(curr)) continue;\n      visited.add(curr);\n      const next = [...grid,...visited];\n      const nextMinPath = minPaths(next, k);\n      minPath.push(...nextMinPath);\n    }\n  }\n  return minPath;\n};\n\nconst test = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n  const k = 3;\n  console.log(minPath(grid, k));\n};\n\nif (typeof module!== 'undefined') {\n  module.exports = minPath;\n  module.exports.test = test;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of tow integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return a greatest common divisor of tow integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n\n  if (a === b) {\n    return a;\n  }\n\n  if (a > b) {\n    return greatestCommonDivisor(b, a % b);\n  }\n\n  return greatestCommonDivisor(a, b % a);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequnece, it was studied deeply by mathematiicans in \n  the last couple cneturies. Hwoever, what people don't know is Triobnacci sequence.\n  Triobnacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n si even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequnece, it was studied deeply by mathematiicans in \n  the last couple cneturies. Hwoever, what people don't know is Triobnacci sequence.\n  Triobnacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n si even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [1, 3, 2, 8];\n  let c = [1, 3, 2, 8];\n  let d = [1, 3, 2, 8];\n  let i = 0;\n  while (i < n) {\n    a[i] = a[i] + a[i + 1];\n    b[i] = b[i] + b[i + 1];\n    c[i] = c[i] + c[i + 1];\n    d[i] = d[i] + d[i + 1];\n    i++;\n  }\n  return [...a,...b,...c,...d];\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive itneger n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive itneger n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 0) return 0\n  let result = 1\n  for (let i = 1; i <= Math.floor(n); i++) {\n    result *= i\n  }\n  return result\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You rae givne a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You rae givne a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1, 2, 3]))\nconsole.log(sumSquares2([1, 4, 9]))\nconsole.log(sumSquares2([1, 3, 5, 7]))\nconsole.log(sumSquares2([1.4, 4.2, 0]))\nconsole.log(sumSquares2([-2.4, 1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n  * Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n  * Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n  * Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n  * Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n  * Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsALetter2,\n  checkIfLastCharIsALetter3,\n  checkIfLastCharIsALetter4,\n  checkIfLastCharIsALetter5,\n  checkIfLastCharIsALetter6\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr.length;\n  let l = arr.length;\n  let m = arr.length;\n  let n = arr.length;\n  let o = arr.length;\n  let p = arr.length;\n  let q = arr.length;\n  let r = arr.length;\n  let s = arr.length;\n  let t = arr.length;\n  let u = arr.length;\n  let v = arr.length;\n  let w = arr.length;\n  let x = arr.length;\n  let y = arr.length;\n  let z = arr.length;\n  let a = arr.length;\n  let b = arr.length;\n  let c = arr.length;\n  let d = arr.length;\n  let e = arr.length;\n  let f = arr.length;\n  let g = arr.length;\n  let h = arr.length;\n  let i = arr.length;\n  let j = arr.length;\n  let k = arr.length;\n  let l = arr.length;\n  let m = arr.length;\n  let n = arr.length;\n  let o = arr.length;\n  let p = arr.length;\n  let q = arr.length;\n  let r = arr.length;\n  let s = arr.length;\n  let t = arr.length;\n  let u = arr.length;\n  let v = arr.length;\n  let w = arr.length;\n  let x = arr.length;\n  let y = arr.length;\n  let z = arr.length;\n  let a = arr.length;\n  let b = arr.length;\n  let c = arr.length;\n  let d = arr.length;\n  let e = arr.length;\n  let f = arr.length;\n  let g = arr.length;\n  let h = arr.length;\n  let i = arr.length;\n  let j = arr.length;\n  let k = arr.length;\n  let l = arr.length;\n  let m = arr.length;\n  let n = arr.length;\n  let o = arr.length;\n  let p = arr.length;\n  let q = arr.length;\n  let r = arr.length;\n  let s = arr.length;\n  let t = arr.length;\n  let u = arr.length;\n  let v = arr.length;\n  let w = arr.length;\n  let x = arr.length;\n  let y = arr.length;\n  let z = arr.length;\n  let a = arr.length;\n  let b = arr.length;\n  let c = arr.length;\n  let d = arr.length;\n  let e = arr.length;\n  let f = arr.length;\n  let g = arr.length;\n  let h = arr.length;\n  let i = arr.length;\n  let j = arr.length;\n  let k = arr.length;\n  let l = arr.length;\n  let m = arr.length;\n  let n = arr.length;\n  let o = arr.length;\n  let p = arr.length;\n  let q = arr.length;\n  let r = arr.length;\n  let s = arr.length;\n  let t = arr.length;\n  let u = arr.length;\n  let v = arr.length;\n  let w = arr.length;\n  let x = arr.length;\n  let y = arr.length;\n  let z = arr.length;\n  let a = arr.length;\n  let b = arr.length;\n  let c = arr.length;\n  let d = arr.length;\n  let e = arr.length;\n  let f = arr.length;\n  let g = arr.length;\n  let h = arr.length;\n  let i = arr.length;\n  let j = arr.length;\n  let k = arr.length;\n  let l = arr.length;\n  let m = arr.length;\n  let n = arr.length;\n  let o = arr.length;\n  let p = arr.length;\n  let q = arr.length;\n  let r = arr.length;\n  let s = arr.length;\n  let t = arr.length;\n  let u = arr.length;\n  let v = arr.length;\n  let w = arr.length;\n  let x = arr.length;\n  let y = arr.length;\n  let z = arr.length;\n  let a = arr.length;\n  let b = arr.length;\n  let c = arr.length;\n  let d = arr.length;\n  let e = arr.length;\n  let f = arr.length;\n  let g = arr.length;\n  let h = arr.length;\n  let i = arr.length;\n  let j = arr.length;\n  let k = arr.length;\n  let l = arr.length;\n  let m = arr.length;\n  let n = arr.length;\n  let o = arr.length;\n  let p = arr.length;\n  let q = arr.length;\n  let r = arr.length;\n  let s = arr.length;\n  let t = arr.length;\n  let u = arr.length;\n  let v = arr.length;\n  let w = arr.length;\n  let x = arr.length;\n  let y = arr.length;\n  let z = arr.length;\n  let a = arr.length;\n  let b = arr.length;\n  let c = arr.length;\n  let d = arr.length;\n  let e = arr.length;\n  let f = arr.length;\n  let g = arr.length;\n  let h = arr.length;\n  let i = arr.length;\n  let j = arr.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' si\n  the largest of neagtive integesr, and 'b' is the smllaest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' si\n  the largest of neagtive integesr, and 'b' is the smllaest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n\n  const max = lst.reduce((max, val) => {\n    if (val < 0) {\n      return val;\n    }\n    if (max < val) {\n      return val;\n    }\n    return max;\n  }, -Infinity);\n\n  const min = lst.reduce((min, val) => {\n    if (val > 0) {\n      return val;\n    }\n    if (min > val) {\n      return val;\n    }\n    return min;\n  }, Infinity);\n\n  return [max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a.localeCompare(b);\n    }\n    else {\n      return a.localeCompare(b);\n    }\n  }\n  else if (typeof b === \"string\") {\n    return b.localeCompare(a);\n  }\n  else {\n    return a > b? a : b;\n  }\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a.localeCompare(b);\n    }\n    else {\n      return a.localeCompare(b);\n    }\n  }\n  else if (typeof b === \"string\") {\n    return b.localeCompare(a);\n  }\n  else {\n    return a > b? a : b;\n  }\n};\n\nconst compareThree = (a, b, c) => {\n  if (a === b && a === c) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (typeof c === \"string\") {\n        return a.localeCompare(b) > a.localeCompare(c)? a : c;\n      }\n      else {\n        return a.localeCompare(b);\n      }\n    }\n    else {\n      if (typeof c === \"string\") {\n        return a.localeCompare(c);\n      }\n      else {\n        return a.localeCompare(b);\n      }\n    }\n  }\n  else if (typeof b === \"string\") {\n    if (typeof c === \"string\") {\n      return b.localeCompare(c);\n    }\n    else {\n      return b.localeCompare(a);\n    }\n  }\n  else {\n    if (typeof c === \"string\") {\n      return c.localeCompare(a);\n    }\n    else {\n      return c.localeCompare(b);\n    }\n  }\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a === b && a === c && a === d) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (typeof c === \"string\") {\n        if (typeof d === \"string\") {\n          return a.localeCompare(b) > a.localeCompare(c)? a : c;\n        }\n        else {\n          return a.localeCompare(b) > a.localeCompare(d)? a : d;\n        }\n      }\n      else {\n        if (typeof d === \"string\") {\n          return a.localeCompare(c) > a.localeCompare(d)? a : d;\n        }\n        else {\n          return a.localeCompare(c);\n        }\n      }\n    }\n    else {\n      if (typeof c === \"string\") {\n        if (typeof d === \"string\") {\n          return b.localeCompare(c) > b.localeCompare(d)? b : d;\n        }\n        else {\n          return b.localeCompare(c);\n        }\n      }\n      else {\n        if (typeof d === \"string\") {\n          return c.localeCompare(b) > c.localeCompare(d)? c : d;\n        }\n        else {\n          return c.localeCompare(b);\n        }\n      }\n    }\n  }\n  else if (typeof b === \"string\") {\n    if (typeof c === \"string\") {\n      if (typeof d === \"string\") {\n        return b.localeCompare(d) > b.localeCompare(c)? b : c;\n      }\n      else {\n        return b.localeCompare(d);\n      }\n    }\n    else {\n      if (typeof d === \"string\") {\n        return b.localeCompare(c) > b.localeCompare(d)? b : d;\n      }\n      else {\n        return b.localeCompare(c);\n      }\n    }\n  }\n  else {\n    if (typeof c === \"string\") {\n      if (typeof d === \"string\") {\n        return c.localeCompare(d) > c.localeCompare(b)? c : b;\n      }\n      else {\n        return c.localeCompare(b);\n      }\n    }\n    else {\n      if (typeof d === \"string\") {\n        return c.localeCompare(b) > c.localeCompare(d)? c : d;\n      }\n      else {\n        return c.localeCompare(b);\n      }\n    }\n  }\n};\n\nconst compareFive = (a, b, c, d, e) => {\n  if (a === b && a === c && a === d && a === e) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (typeof c === \"string\") {\n        if (typeof d === \"string\") {\n          if (typeof e === \"string\") {\n            return a.localeCompare(b) > a.localeCompare(c)? a : c;\n          }\n          else {\n            return a.localeCompare(b) > a.localeCompare(e)? a : e;\n          }\n        }\n        else {\n          if (typeof e === \"string\") {\n            ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 == 0;\n};\n\nmodule.exports = {\n  isEqualToSumEven\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braizlian factoaril si defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Braizlian factoaril si defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The input to specialFactorial must be a positive integer.');\n  }\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromEnd = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStart = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStartAndEnd = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromEndAndStart = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStartAndEnd = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStartAndEndAndStart = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromEndAndStart = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromEndAndStartAndStart = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStartAndEndAndStart = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStartAndEndAndStartAndEnd = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortset to longest of the input string\n  * @param {string} string\n  * @return {string[]}\n  */\nconst allSuffixesFromStartAndEndAndStartAndEndAndEnd = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substring(0, current.length - 1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nmodule.exports = fixSpaces\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which taeks a srtign representing a file's name, and returns\n  'Yes' if the the file's name is valid, nad returns 'No' ohterwise.\n  A file's name is consiedred to be valid if and only if all the following conditions \n  are met:\n  - Three shoudl not be more thna there digits ('0'-'9') in hte file's anme.\n  - The file's name contains exactyl one dot '.'\n  - The substring before the dot should not be emtpy, nad it satrts with a lteter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot shoudl be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function which taeks a srtign representing a file's name, and returns\n  'Yes' if the the file's name is valid, nad returns 'No' ohterwise.\n  A file's name is consiedred to be valid if and only if all the following conditions \n  are met:\n  - Three shoudl not be more thna there digits ('0'-'9') in hte file's anme.\n  - The file's name contains exactyl one dot '.'\n  - The substring before the dot should not be emtpy, nad it satrts with a lteter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot shoudl be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase();\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_substring = file_name_check.substring(0, file_name_check_length);\n  let file_name_check_substring_length = file_name_check_substring.length;\n  let file_name_check_substring_letters = file_name_check_substring.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letters_length = file_name_check_substring_letters.length;\n  if (file_name_check_length < 3 || file_name_check_length > 4 || file_name_check_substring_letters_length < 1 || file_name_check_substring_letters_length > file_name_check_substring_length) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/\\./g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring.match(/[a-zA-Z0-9]/g)!== null) {\n    return 'No';\n  }\n  if (file_name_check_substring", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will atke a list of integers. For all entries in the list, the function sahll square the integer entyr if its index is a \n  multiple of 3 and will cube the nietger entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This function will atke a list of integers. For all entries in the list, the function sahll square the integer entyr if its index is a \n  multiple of 3 and will cube the nietger entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n//console.log(sumSquares([1,2,3]));\n//console.log(sumSquares([]));\n//console.log(sumSquares([-1,-5,2,-1,-5]));\n\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let word = '';\n  let wordLength = 0;\n  let i = 0;\n  while (i < sentence.length) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n      wordLength = 0;\n    } else {\n      word += sentence[i];\n      wordLength++;\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xn = x.split(\"/\");\n  const nn = n.split(\"/\");\n  const xnumerator = xn[0];\n  const xdenominator = xn[1];\n  const nnumerator = nn[0];\n  const ndenominator = nn[1];\n  const xnumeratorInt = parseInt(xnumerator);\n  const xdenominatorInt = parseInt(xdenominator);\n  const nnumeratorInt = parseInt(nnumerator);\n  const ndenominatorInt = parseInt(ndenominator);\n  const xnumeratorIntMod = xnumeratorInt % ndenominatorInt;\n  const xdenominatorIntMod = xdenominatorInt % ndenominatorInt;\n  const xnumeratorIntModInt = xnumeratorInt % nnumeratorInt;\n  const xdenominatorIntModInt = xdenominatorInt % ndenominatorInt;\n  const xnumeratorIntModIntMod = xnumeratorIntMod % nnumeratorIntMod;\n  const xdenominatorIntModIntMod = xdenominatorIntMod % ndenominatorIntMod;\n  const xnumeratorIntModIntModMod = xnumeratorIntMod % nnumeratorIntModMod;\n  const xdenominatorIntModIntModMod = xdenominatorIntMod % ndenominatorIntModMod;\n  const xnumeratorIntModIntModModMod = xnumeratorIntModInt % nnumeratorIntModModMod;\n  const xdenominatorIntModIntModModMod = xdenominatorIntModInt % ndenominatorIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntMod % nnumeratorIntModModModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModMod % ndenominatorIntModModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod;\n  const xnumeratorIntModIntModModModMod = xnumeratorIntModIntModModModMod % nnumeratorIntModModIntModModModMod;\n  const xdenominatorIntModIntModModModMod = xdenominatorIntModIntModModModMod % ndenominatorIntModIntModModModMod", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints15 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints16 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 10 === 0 && nums[i] % 100!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          maxTriples++;\n        }\n      }\n    }\n  }\n  return maxTriples;\n};\n\nconst test = () => {\n  assert(getMaxTriples(5) === 1);\n  assert(getMaxTriples(6) === 1);\n  assert(getMaxTriples(7) === 1);\n  assert(getMaxTriples(8) === 1);\n  assert(getMaxTriples(9) === 1);\n  assert(getMaxTriples(10) === 1);\n  assert(getMaxTriples(11) === 1);\n  assert(getMaxTriples(12) === 1);\n  assert(getMaxTriples(13) === 1);\n  assert(getMaxTriples(14) === 1);\n  assert(getMaxTriples(15) === 1);\n  assert(getMaxTriples(16) === 1);\n  assert(getMaxTriples(17) === 1);\n  assert(getMaxTriples(18) === 1);\n  assert(getMaxTriples(19) === 1);\n  assert(getMaxTriples(20) === 1);\n  assert(getMaxTriples(21) === 1);\n  assert(getMaxTriples(22) === 1);\n  assert(getMaxTriples(23) === 1);\n  assert(getMaxTriples(24) === 1);\n  assert(getMaxTriples(25) === 1);\n  assert(getMaxTriples(26) === 1);\n  assert(getMaxTriples(27) === 1);\n  assert(getMaxTriples(28) === 1);\n  assert(getMaxTriples(29) === 1);\n  assert(getMaxTriples(30) === 1);\n  assert(getMaxTriples(31) === 1);\n  assert(getMaxTriples(32) === 1);\n  assert(getMaxTriples(33) === 1);\n  assert(getMaxTriples(34) === 1);\n  assert(getMaxTriples(35) === 1);\n  assert(getMaxTriples(36) === 1);\n  assert(getMaxTriples(37) === 1);\n  assert(getMaxTriples(38) === 1);\n  assert(getMaxTriples(39) === 1);\n  assert(getMaxTriples(40) === 1);\n  assert(getMaxTriples(41) === 1);\n  assert(getMaxTriples(42) === 1);\n  assert(getMaxTriples(43) === 1);\n  assert(getMaxTriples(44) === 1);\n  assert(getMaxTriples(45) === 1);\n  assert(getMaxTriples(46) === 1);\n  assert(getMaxTriples(47) === 1);\n  assert(getMaxTriples(48) === 1);\n  assert(getMaxTriples(49) === 1);\n  assert(getMaxTriples(50) === 1);\n  assert(getMaxTriples(51) === 1);\n  assert(getMaxTriples(52) === 1);\n  assert(getMaxTriples(53) === 1);\n  assert(getMaxTriples(54) === 1);\n  assert(getMaxTriples(55) === 1);\n  assert(getMaxTriples(56) === 1);\n  assert(getMaxTriples(57) === 1);\n  assert(getMaxTriples(58) === 1);\n  assert(getMaxTriples(59) === 1);\n  assert(getMaxTriples(60) === 1);\n  assert(getMaxTriples(61) === 1);\n  assert(getMaxTriples(62) === 1);\n  assert(getMaxTriples(63) === 1);\n  assert(getMaxTriples(64) === 1);\n  assert(getMaxTriples(65) === 1);\n  assert(getMaxTriples(66) === 1);\n  assert(getMaxTriples(67) === 1);\n  assert(getMaxTriples(68) === 1);\n  assert(getMaxTriples(69) === 1);\n  assert(getMaxTriples(70) === 1);\n  assert(getMaxTriples(71) === 1);\n  assert(getMaxTriples(72) === 1);\n  assert(getMaxTriples(73) === 1);\n  assert(getMaxTriples(74) === 1);\n  assert(getMaxTriples(75) === 1);\n  assert(getMaxTriples(76) === 1);\n  assert(getMaxTriples(77) === 1);\n  assert(getMaxTriples(78) === 1);\n  assert(getMaxTriples(79) === 1);\n  assert(getMaxTriples(80) === 1);\n  assert(getMaxTriples(81) === 1);\n  assert(getMaxTriples(82) === 1);\n  assert(getMaxTriples(83) === 1);\n  assert(getMaxTriples(84) === 1);\n  assert(getMaxTriples(85) === 1);\n  assert(getMaxTriples(86) === 1);\n  assert(getMaxTriples(87) === 1);\n  assert(getMaxTriples(88) === 1);\n  assert(getMaxTriples(89) === 1);\n  assert(getMaxTriples", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = []\n  let i = 0\n  while (i < planet1.length) {\n    if (planet1[i] === planet2[i]) {\n      i++\n    } else {\n      break\n    }\n  }\n  if (i === planet1.length) {\n    return []\n  }\n  while (i < planet2.length) {\n    if (planet1[i] === planet2[i]) {\n      i++\n    } else {\n      break\n    }\n  }\n  if (i === planet2.length) {\n    return []\n  }\n  let j = planet1.length\n  while (j < planet2.length) {\n    if (planet1[j] === planet2[j]) {\n      j++\n    } else {\n      break\n    }\n  }\n  if (j === planet2.length) {\n    return []\n  }\n  let k = planet1.length\n  while (k < planet2.length) {\n    if (planet1[k] === planet2[k]) {\n      k++\n    } else {\n      break\n    }\n  }\n  if (k === planet2.length) {\n    return []\n  }\n  let l = planet1.length\n  while (l < planet2.length) {\n    if (planet1[l] === planet2[l]) {\n      l++\n    } else {\n      break\n    }\n  }\n  if (l === planet2.length) {\n    return []\n  }\n  let planets = []\n  for (let i = planet1.length; i < planet2.length; i++) {\n    let planet = planet1[i]\n    let planet2 = planet2[i]\n    let planet3 = planet2[i]\n    let planet4 = planet2[i]\n    let planet5 = planet2[i]\n    let planet6 = planet2[i]\n    let planet7 = planet2[i]\n    let planet8 = planet2[i]\n    let planet9 = planet2[i]\n    let planet10 = planet2[i]\n    let planet11 = planet2[i]\n    let planet12 = planet2[i]\n    let planet13 = planet2[i]\n    let planet14 = planet2[i]\n    let planet15 = planet2[i]\n    let planet16 = planet2[i]\n    let planet17 = planet2[i]\n    let planet18 = planet2[i]\n    let planet19 = planet2[i]\n    let planet20 = planet2[i]\n    let planet21 = planet2[i]\n    let planet22 = planet2[i]\n    let planet23 = planet2[i]\n    let planet24 = planet2[i]\n    let planet25 = planet2[i]\n    let planet26 = planet2[i]\n    let planet27 = planet2[i]\n    let planet28 = planet2[i]\n    let planet29 = planet2[i]\n    let planet30 = planet2[i]\n    let planet31 = planet2[i]\n    let planet32 = planet2[i]\n    let planet33 = planet2[i]\n    let planet34 = planet2[i]\n    let planet35 = planet2[i]\n    let planet36 = planet2[i]\n    let planet37 = planet2[i]\n    let planet38 = planet2[i]\n    let planet39 = planet2[i]\n    let planet40 = planet2[i]\n    let planet41 = planet2[i]\n    let planet42 = planet2[i]\n    let planet43 = planet2[i]\n    let planet44 = planet2[i]\n    let planet45 = planet2[i]\n    let planet46 = planet2[i]\n    let planet47 = planet2[i]\n    let planet48 = planet2[i]\n    let planet49 = planet2[i]\n    let planet50 = planet2[i]\n    let planet51 = planet2[i]\n    let planet52 = planet2[i]\n    let planet53 = planet2[i]\n    let planet54 = planet2[i]\n    let planet55 = planet2[i]\n    let planet56 = planet2[i]\n    let planet57 = planet2[i]\n    let planet58 = planet2[i]\n    let planet59 = planet2[i]\n    let planet60 = planet2[i]\n    let planet61 = planet2[i]\n    let planet62 = planet2[i]\n    let planet63 = planet2[i]\n    let planet64 = planet2[i]\n    let planet65 = planet2[i]\n    let planet66 = planet2[i]\n    let planet67 = planet2[i]\n    let planet68 = planet2[i]\n    let planet69 = planet2[i]\n    let planet70 = planet2[i]\n    let planet71 = planet2[i]\n    let planet72 = planet2[i]\n    let planet73 = planet2[i]\n    let planet74 = planet2[i]\n    let planet75 = planet2[i]\n    let planet76 = planet2[i]\n    let planet77 = planet2[i]\n    let planet78 = planet2[i]\n    let planet79 = planet2[i]\n    let planet80 = planet2[i]\n    let planet81 = planet2[i]\n    let planet82 = planet2[i]\n    let planet83 = planet2[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Wrtie a function thta cacepts a list of strings as a parameter,\n  deletes the strings that ahve odd lengths from it,\n  and returns the rseultde list iwth a sortde order,\n  Teh list is always a list of strings and never an arrya of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that ruel.\n  If two words have hte same length, sort the list alphabetically.\n  The funciton should return a list of strings in sorted order.\n  You may assume that all owrds will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Wrtie a function thta cacepts a list of strings as a parameter,\n  deletes the strings that ahve odd lengths from it,\n  and returns the rseultde list iwth a sortde order,\n  Teh list is always a list of strings and never an arrya of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that ruel.\n  If two words have hte same length, sort the list alphabetically.\n  The funciton should return a list of strings in sorted order.\n  You may assume that all owrds will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < lst_sorted.length; i++) {\n    sum += lst_sorted[i].length;\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nmodule.exports = {\n  sortedListSum,\n  list_sort\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1} `\n  }\n  return s\n}\n\n/* Return a string contaiing the numbers from 0 upto n inclusive.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = (n, x, y) => {\n  console.log(xOrY(n, x, y));\n};\n\ntest(7, 34, 12);\ntest(15, 8, 5);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gievn a list of numbers, return the sum of squreas of the numbers\n  in the list that are odd. Ignore numbers that are neagtive or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Gievn a list of numbers, return the sum of squreas of the numbers\n  in the list that are odd. Ignore numbers that are neagtive or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remmeber that feeling when the result of osme long-awaited\n  event is finally knonw. The feelings and thoughts you have at that moment are\n  defiintley owrth noting down and comparing.\n  Your task is to edtermine if a person correctly guessed the results of a number of matcehs.\n  You are gievn two arrays of scores and guesses of equal length, where each index shows a macth. \n  Return an array fo the same length denotnig how far off each guess was. If they have guessed correctly,\n  the value is 0, and fi not, the value is the absoluet difference ebtween the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think we all remmeber that feeling when the result of osme long-awaited\n  event is finally knonw. The feelings and thoughts you have at that moment are\n  defiintley owrth noting down and comparing.\n  Your task is to edtermine if a person correctly guessed the results of a number of matcehs.\n  You are gievn two arrays of scores and guesses of equal length, where each index shows a macth. \n  Return an array fo the same length denotnig how far off each guess was. If they have guessed correctly,\n  the value is 0, and fi not, the value is the absoluet difference ebtween the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.map(score => score.score);\n  const guesses = game.map(guess => guess.guess);\n  const result = [];\n  for (let i = 0; i < scores.length; i++) {\n    const guess = guesses[i];\n    const score = scores[i];\n    if (guess === score) {\n      result[i] = 0;\n    } else {\n      const distance = Math.abs(guess - score);\n      result[i] = distance;\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_map = {};\n  extensions.forEach(extension => {\n    extension_map[extension.toUpperCase()] = extension.toLowerCase();\n  });\n\n  const strength = 0;\n  const strongest_extension = '';\n  for (const extension of extensions) {\n    const strength_extension = extension_map[extension.toUpperCase()];\n    if (strength_extension!== undefined) {\n      if (strength_extension > strength) {\n        strength = strength_extension;\n        strongest_extension = extension;\n      }\n    }\n  }\n\n  return `${class_name}.${strongest_extension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are gvein 2 words. You need to return rtue if the second wodr ro any fo its rotations is a subsrting in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are gvein 2 words. You need to return rtue if the second wodr ro any fo its rotations is a subsrting in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] === bb[j]) {\n      i++;\n      j++;\n    } else if (aa[i] < bb[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return (i === aa.length && j === bb.length);\n};\n\nconst isPalindrome = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck2 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck3 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck4 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck5 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck6 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck7 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck8 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck9 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck10 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck11 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck12 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given na integer. return a tuple that has the number of even and odd dgiits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given na integer. return a tuple that has the number of even and odd dgiits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in lwoercsae.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in lwoercsae.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanpassed": 1, "run_status": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A rihgt-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A rihgt-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a;\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accpets a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique characters. If multiple strings hvae maximum number of unqiue\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function that accpets a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique characters. If multiple strings hvae maximum number of unqiue\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let current = words[i];\n    if (current.length > max.length) {\n      max = current;\n      maxIndex = i;\n    } else if (current.length === max.length) {\n      if (current < max) {\n        max = current;\n        maxIndex = i;\n      }\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) {\n    throw new Error('number must be between 0 and 1000');\n  }\n  if (need < 0 || need > 1000) {\n    throw new Error('need must be between 0 and 1000');\n  }\n  if (remaining < 0 || remaining > 1000) {\n    throw new Error('remaining must be between 0 and 1000');\n  }\n  let result = [];\n  let total = 0;\n  let left = 0;\n  while (total < need) {\n    total += number;\n    left += number;\n    number = Math.floor(left / need);\n    result.push(number);\n    left -= number * need;\n  }\n  result.push(left);\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many disintct charactres (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a string, find out how many disintct charactres (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!== char.toUpperCase() && char!== char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operatorList = operator.split(',');\n  const operandList = operand.split(',');\n  let i = 0;\n  let j = 0;\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === operandList[j]) {\n      result.push(operatorList[i]);\n      i++;\n      j++;\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[j] + operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[j] * operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[j] / operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '//') {\n      result.push(operandList[j] // operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '**') {\n      result.push(Math.pow(operandList[j], operandList[j + 1]));\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its caes from lower to upper or vise versa, \n  otherwies keep it as it is.\n  If the string contains no letters, reverse eth stinrg.\n  The function should return the resulted srting.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its caes from lower to upper or vise versa, \n  otherwies keep it as it is.\n  If the string contains no letters, reverse eth stinrg.\n  The function should return the resulted srting.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve2 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve3 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve4 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve5 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve6 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve7 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/)) {\n          temp[i] = temp[i].toUpperCase();\n        } else {\n          temp[i] = temp[i].toLowerCase();\n        }\n      } else {\n        temp[i] = temp[i];\n      }\n    }\n    result = temp.join('');\n  }\n  return result;\n};\n\nconst solve8 = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let temp = s.split('');\n    for (let i = 0; i < temp.length; i++) {\n      if (temp[i].match(/[a-z]/)) {\n        if (temp[i].match(/[a-z]/))", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": false, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given tow positive integers a nad b, return the even digits between a\n  and b, in asecnding order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given tow positive integers a nad b, return the even digits between a\n  and b, in asecnding order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musiacl notes in a spceial ASCII format.\n  Your task is to parse this strnig and return list of integers corresponding to how mayn beats does each\n  not slat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half ntoe, latss two beats\n  '.|' - quater note, lasts noe beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input to this function is a string representing musiacl notes in a spceial ASCII format.\n  Your task is to parse this strnig and return list of integers corresponding to how mayn beats does each\n  not slat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half ntoe, latss two beats\n  '.|' - quater note, lasts noe beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i].length === 0) {\n      continue;\n    }\n    if (music_array[i][0] === 'o') {\n      music_list.push(4);\n    } else if (music_array[i][0] === 'o|') {\n      music_list.push(2);\n    } else if (music_array[i][0] === '.') {\n      music_list.push(1);\n    }\n  }\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Fnid how many times a given substring can be found in teh oriignal string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Fnid how many times a given substring can be found in teh oriignal string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decmial part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decmial part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  return decimals;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the lcosest to each\n  other and return them in order (samller number, larger nmuber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the lcosest to each\n  other and return them in order (samller number, larger nmuber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements2 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements3 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements4 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements5 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements6 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements7 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    } else if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nconst findClosestElements8 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pyhton values olny for intgeers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter given list of any pyhton values olny for intgeers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any pyhton values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/*\n  Filter given list of any pyhton values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given list of any pyhton values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any pyhton values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/*\n  Filter given list of any pyhton values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [['a', 3.14, 5]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [['1', '2', '3'], {}, []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => typeof v === 'array');\n};\n\n/*\n  Filter given list of any pyhton values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [function()]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [function()]\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/*\n  Filter given list of any pyhton values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/*\n  Filter given list of any pyhton values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [['a', 3.14, 5]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [['1', '2', '3'], {}, []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => typeof v === 'array');\n};\n\n/*\n  Filter given list of any pyhton values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [function()]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [function()]\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/*\n  Filter given list of any pyhton values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/*\n  Filter given list of any pyhton values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [['a', 3.14, 5]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [['1', '2', '3'], {}, []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => typeof v === 'array');\n};\n\n/*\n  Filter given list of any pyhton values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [function()]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [function()]\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/*\n  Filter given list of any pyhton values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/*\n  Filter given list of any pyhton values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [['a', 3.14, 5]]\n  >>> filterArrays([1, 2, 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\nmodule.exports = strlen;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the alrgest number taht divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a given number n, find the alrgest number taht divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return largest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number that is greater than n and is evenly divisible by n.\n  For a given number n, find the smallest number taht divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  7\n  */\nconst smallestDiv", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n      lst.push(n / i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst primeFactors = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst primeFactors2 = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst primeFactors3 = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst primeFactors4 = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst primeFactors5 = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst primeFactors6 = (n) => {\n  let lst = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      lst.push(i);\n    }\n    i++;\n  }\n  return lst;\n};\n\n/*\n  Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integers, reomve all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates14 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates15 = (numbers) => {\n  let i = 0;\n  let j = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip loweracse characters to uppercaes and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a given string, flip loweracse characters to uppercaes and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all lowercase letters replaced with\n  uppercase letters.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toTitleCase = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase2 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase3 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase4 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase5 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase6 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase7 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase8 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase9 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase10 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with\n  lowercase letters.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase11 = (string)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Convert a string to a number\n  >>> str2num('1')\n  1\n  >>> str2num('1.1')\n  1.1\n  */\nconst str2num = (str) => {\n  if (str.length === 0) {\n    return 0;\n  }\n  return parseFloat(str);\n};\n\n/*\n  Convert a number to a string\n  >>> num2str(1)\n  '1'\n  */\nconst num2str = (num) => {\n  if (num === 0) {\n    return '0';\n  }\n  return num.toString();\n};\n\n/*\n  Convert a string to a boolean\n  >>> str2bool('1')\n  true\n  >>> str2bool('0')\n  false\n  */\nconst str2bool = (str) => {\n  if (str === '1' || str === 'true') {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Convert a boolean to a string\n  >>> bool2str(true)\n  '1'\n  >>> bool2str(false)\n  '0'\n  */\nconst bool2str = (bool) => {\n  if (bool) {\n    return '1';\n  }\n  return '0';\n};\n\n/*\n  Convert a string to a date\n  >>> str2date('2016-01-01')\n  '2016-01-01'\n  */\nconst str2date = (str) => {\n  if (str.length === 0) {\n    return '';\n  }\n  return new Date(str);\n};\n\n/*\n  Convert a date to a string\n  >>> date2str(new Date('2016-01-01'))\n  '2016-01-01'\n  */\nconst date2str = (date) => {\n  if (date === null) {\n    return '';\n  }\n  return date.toISOString();\n};\n\n/*\n  Convert a string to a time\n  >>> str2time('2016-01-01T12:00:00')\n  '2016-01-01T12:00:00'\n  */\nconst str2time = (str) => {\n  if (str.length === 0) {\n    return '';\n  }\n  return new Date(str).toISOString();\n};\n\n/*\n  Convert a time to a string\n  >>> time2str(new Date('2016-01-01T12:00:00'))\n  '2016-01-01T12:00:00'\n  */\nconst time2str = (date) => {\n  if (date === null) {\n    return '';\n  }\n  return date.toISOString();\n};\n\n/*\n  Convert a string to a date and time\n  >>> str2datetime('2016-01-01T12:00:00')\n  '2016-01-01T12:00:00'\n  */\nconst str2datetime = (str) => {\n  if (str.length === 0) {\n    return '';\n  }\n  return new Date(str).toISOString();\n};\n\n/*\n  Convert a date and time to a string\n  >>> datetime2str(new Date('2016-01-01T12:00:00'))\n  '2016-01-01T12:00:00'\n  */\nconst datetime2str = (date) => {\n  if (date === null) {\n    return '';\n  }\n  return date.toISOString();\n};\n\n/*\n  Convert a string to a number and time\n  >>> str2numtime('1.1')\n  1.1\n  */\nconst str2numtime = (str) => {\n  if (str.length === 0) {\n    return 0;\n  }\n  return parseFloat(str);\n};\n\n/*\n  Convert a number and time to a string\n  >>> numtime2str(1.1)\n  '1.1'\n  */\nconst numtime2str = (num) => {\n  if (num === 0) {\n    return '0';\n  }\n  return num.toString();\n};\n\n/*\n  Convert a string to a number and time\n  >>> str2numtime('1.1')\n  1.1\n  */\nconst str2numtime = (str) => {\n  if (str.length === 0) {\n    return 0;\n  }\n  return parseFloat(str);\n};\n\n/*\n  Convert a number and time to a string\n  >>> numtime2str(1.1)\n  '1.1'\n  */\nconst numtime2str = (num) => {\n  if (num === 0) {\n    return '0';\n  }\n  return num.toString();\n};\n\n/*\n  Convert a string to a number and time\n  >>> str2numtime('1.1')\n  1.1\n  */\nconst str2numtime = (str) => {\n  if (str.length === 0) {\n    return 0;\n  }\n  return parseFloat(str);\n};\n\n/*\n  Convert a number and time to a string\n  >>> numtime2str(1.1)\n  '1.1'\n  */\nconst numtime2str = (num) => {\n  if (num === 0) {\n    return '0';\n  }\n  return num.toString();\n};\n\nmodule.exports = {\n  concatenate,\n  str2num,\n  num2str,\n  str2bool,\n  bool2str,\n  str2date,\n  date2str,\n  str2time,\n  time2str,\n  str2datetime,\n  datetime2str,\n  str2numtime,\n  numtime2str,\n  str2date,\n  date2str,\n  str2time,\n  time2str,\n  str2numtime,\n  numtime2str\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContains = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByStartsWith = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByEndsWith = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAny = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAny([], 'a')\n  []\n  >>> filterByContainsAny(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAll = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAnyOf = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAnyOf([], 'a')\n  []\n  >>> filterByContainsAnyOf(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAnyOfAny = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAnyOfAny([], 'a')\n  []\n  >>> filterByContainsAnyOfAny(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAnyOfAnyAny = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAnyOfAnyAny([], 'a')\n  []\n  >>> filterByContainsAnyOfAnyAny(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAnyOfAnyAnyAny = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAnyOfAnyAnyAny([], 'a')\n  []\n  >>> filterByContainsAnyOfAnyAnyAny(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAnyOfAnyAnyAnyAny = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/*\n  Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAnyOfAnyAnyAnyAny([], 'a')\n  []\n  >>> filterByContainsAnyOfAnyAnyAnyAny(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['array', 'bcd', 'cde']\n  */\nconst filterByContainsAnyOfAnyAnyAnyAnyAny = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByS", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* Yuo're givne a list of edposit and withdrawal operations on a bank acconut that starts wiht\n  zero balance. oYur task is to detect if at any point the balance of accoutn afllls bleow zero, and\n  at that point fucntion should return true. Otherwise ti should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* Yuo're givne a list of edposit and withdrawal operations on a bank acconut that starts wiht\n  zero balance. oYur task is to detect if at any point the balance of accoutn afllls bleow zero, and\n  at that point fucntion should return true. Otherwise ti should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let isBelowZero = false;\n  operations.forEach((operation) => {\n    balance += operation;\n    if (balance < 0) {\n      isBelowZero = true;\n    }\n  });\n  return isBelowZero;\n};\n\nmodule.exports = {\n  belowZero\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return noly positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return noly positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Return only the negative numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only the even numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getEven = (l) => {\n  return l.filter((x) => x % 2 === 0);\n};\n\n/**\n  * Return only the odd numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getOdd = (l) => {\n  return l.filter((x) => x % 2!== 0);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegativeNumbers = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveNumbers = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getEvenNumbers = (l) => {\n  return l.filter((x) => x % 2 === 0);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getOddNumbers = (l) => {\n  return l.filter((x) => x % 2!== 0);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersInRange = (l, start, end) => {\n  return l.filter((x) => x > start && x < end);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegativeNumbersInRange = (l, start, end) => {\n  return l.filter((x) => x < start || x > end);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveNumbersInRange = (l, start, end) => {\n  return l.filter((x) => x > start && x < end);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getEvenNumbersInRange = (l, start, end) => {\n  return l.filter((x) => x % 2 === 0 && x > start && x < end);\n};\n\n/**\n  * Return only the numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getOddNumbersInRange = (l, start, end) => {\n  return l.filter((x) => x % 2!== 0 && x > start && x < end);\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getEven,\n  getOdd,\n  getNumbers,\n  getNegativeNumbers,\n  getPositiveNumbers,\n  getEvenNumbers,\n  getOddNumbers,\n  getNumbersInRange,\n  getNegativeNumbersInRange,\n  getPositiveNumbersInRange,\n  getEvenNumbersInRange,\n  getOddNumbersInRange\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": false, "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 127 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 439 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 449 === 0) return false;\n  if (n % 457 === 0) return false;\n  if (n % 461 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return false;\n  if (n % 479 === 0) return false;\n  if (n % 487 === 0) return false;\n  if (n % 491 === 0) return false;\n  if (n % 499 === 0) return false;\n  if (n % 503 === 0) return false;\n  if (n % 509 === 0) return false;\n  if (n % 521 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 541 === 0) return false;\n  if (n % 547 === 0) return false;\n  if (n % 557 === 0) return false;\n  if (n % 563 === 0) return false;\n  if (n % 569 === 0) return false;\n  if (n % 571 === 0) return false;\n  if (n % 577 === 0) return false;\n  if (n % 587 === 0) return false;\n  if (n % 593", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poylnomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only ezro ipont, even if there are many.\n  Moreoevr, findZero only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates poylnomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only ezro ipont, even if there are many.\n  Moreoevr, findZero only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = xs[0];\n  let i = 1;\n  while (i < xs.length && xs[i]!== 0) {\n    x = xs[i];\n    i++;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficinets xs at point x.\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n      i++;\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    if (j === 0 || l[i]!== l[j]) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let fizz = 0;\n  let buzz = 0;\n  let n1 = n;\n  let n2 = n;\n  while (n1 > 0) {\n    i = n1 % 10;\n    if (i === 7 || i === 13) {\n      fizz = 1;\n    }\n    if (i === 3 || i === 5 || i === 15 || i === 17) {\n      buzz = 1;\n    }\n    n1 = n1 / 10;\n    if (fizz === 1 && buzz === 1) {\n      k++;\n    }\n    if (fizz === 1 && buzz === 0) {\n      k++;\n    }\n    if (fizz === 0 && buzz === 1) {\n      k++;\n    }\n    if (fizz === 0 && buzz === 0) {\n      k++;\n    }\n  }\n  return k;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l2 = []\n  while (i < l.length) {\n    while (j < l.length && l[j] < l[i]) {\n      j++\n    }\n    if (j < l.length) {\n      l2[k] = l[i]\n      i++\n      k++\n    }\n  }\n  return l2\n}\n\nexport default sortEven\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    let j = i;\n    while (j < n) {\n      fib = fib + j;\n      j = j + i;\n    }\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n) {\n    fib = fib + i;\n    i = i + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib10 = (n) => {\n  let i = 2;\n  let fib = 2;\n  while (i < n)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a igven list of input numbers, calculaet Mean Asbolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a igven list of input numbers, calculaet Mean Asbolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  let i = 0\n  for (i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean += numbers[i]\n  }\n  mean = mean / numbers.length\n  return sum / numbers.length\n}\n\nmodule.exports = meanAbsoluteDeviation\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (n) => {\n  let collision = 0;\n  let cars = [];\n  let cars_left = [];\n  let cars_right = [];\n  let cars_left_left = [];\n  let cars_left_right = [];\n  let cars_right_left = [];\n  let cars_right_right = [];\n  let cars_left_left_left = [];\n  let cars_left_left_right = [];\n  let cars_left_right_left = [];\n  let cars_left_right_right = [];\n  let cars_right_left_left = [];\n  let cars_right_left_right = [];\n  let cars_right_right_left = [];\n  let cars_right_right_right = [];\n  let cars_left_left_left_left = [];\n  let cars_left_left_left_right = [];\n  let cars_left_left_right_left = [];\n  let cars_left_left_right_right = [];\n  let cars_left_right_left_left = [];\n  let cars_left_right_left_right = [];\n  let cars_left_right_right_left = [];\n  let cars_left_right_right_right = [];\n  let cars_right_left_left_left = [];\n  let cars_right_left_left_right = [];\n  let cars_right_left_right_left = [];\n  let cars_right_left_right_right = [];\n  let cars_right_right_left_left = [];\n  let cars_right_right_left_right = [];\n  let cars_right_right_right_left = [];\n  let cars_right_right_right_right = [];\n  let cars_left_left_left_left_left = [];\n  let cars_left_left_left_left_right = [];\n  let cars_left_left_left_right_left = [];\n  let cars_left_left_left_right_right = [];\n  let cars_left_left_right_left_left = [];\n  let cars_left_left_right_left_right = [];\n  let cars_left_left_right_right_left = [];\n  let cars_left_left_right_right_right = [];\n  let cars_left_right_left_left_left = [];\n  let cars_left_right_left_left_right = [];\n  let cars_left_right_left_right_left = [];\n  let cars_left_right_left_right_right = [];\n  let cars_left_right_right_left_left = [];\n  let cars_left_right_right_left_right = [];\n  let cars_left_right_right_right_left = [];\n  let cars_left_right_right_right_right = [];\n  let cars_left_left_left_left_left_left = [];\n  let cars_left_left_left_left_left_right = [];\n  let cars_left_left_left_left_right_left = [];\n  let cars_left_left_left_left_right_right = [];\n  let cars_left_left_left_right_left_left = [];\n  let cars_left_left_left_right_left_right = [];\n  let cars_left_left_left_right_right_left = [];\n  let cars_left_left_left_right_right_right = [];\n  let cars_left_left_right_left_left_left = [];\n  let cars_left_left_right_left_left_right = [];\n  let cars_left_left_right_left_right_right = [];\n  let cars_left_left_right_right_left_left = [];\n  let cars_left_left_right_right_left_right = [];\n  let cars_left_left_right_right_right_left = [];\n  let cars_left_left_right_right_right_right = [];\n  let cars_left_right_left_left_left_left = [];\n  let cars_left_right_left_left_left_right = [];\n  let cars_left_right_left_left_right_left = [];\n  let cars_left_right_left_left_right_right = [];\n  let cars_left_right_left_right_right_left = [];\n  let cars_left_right_left_right_right_right = [];\n  let cars_left_right_right_left_left_left = [];\n  let cars_left_right_right_left_left_right = [];\n  let cars_left_right_right_left_right_right = [];\n  let cars_left_right_right_right_left_left = [];\n  let cars_left_right_right_right_left_right = [];\n  let cars_left_right_right_right_right_left = [];\n  let cars_left_right_right_right_right_right = [];\n  let cars_left_left_left_left_left_left = [];\n  let cars_left_left_left_left_left_right = [];\n  let cars_left_left_left_left_right_left = [];\n  let cars_left_left_left_left_right_right = [];\n  let cars_left_left_left_right_left_left = [];\n  let cars_left_left_left_right_left_right = [];\n  let cars_left_left_left_right_right_left = [];\n  let cars_left_left_left_right_right_right = [];\n  let cars_left_left_right_left_left_left = [];\n  let cars_left_left_right_left_left_right = [];\n  let cars_left_left_right_left_right_right = [];\n  let cars", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i]);\n    i++;\n    j--;\n  }\n  result.push(l[i]);\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> inc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": false, "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return stirgn representation fater the conversion.\n  base numbers are less thna 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n  return stirgn representation fater the conversion.\n  base numbers are less thna 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = String.fromCharCode(x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/**\n  * Change base of input number x to base.\n  * @param {Number} x\n  * @param {Number} base\n  * @returns {String}\n  */\nconst changeBase2 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = String.fromCharCode(x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString2 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString3 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString4 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString5 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString6 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString7 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString8 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString9 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString10 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString11 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString12 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);\n  }\n  return str;\n};\n\n/**\n  * Convert base to string.\n  * @param {Number} base\n  * @returns {String}\n  */\nconst baseToString13 = (base) => {\n  let str = '';\n  while (base > 0) {\n    str = String.fromCharCode(base % 10) + str;\n    base = Math.floor(base / 10);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a square.\n  >>> squareArea(5, 3)\n  25\n  */\nconst squareArea = (a, h) => {\n  return (a * a);\n};\n\n/*Given length of a side and ihgh return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  25\n  */\nconst rectangleArea = (a, h) => {\n  return (a * a) + (h * h);\n};\n\n/*Given length of a side and ihgh return area for a circle.\n  >>> circleArea(5, 3)\n  25\n  */\nconst circleArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a ellipse.\n  >>> ellipseArea(5, 3)\n  25\n  */\nconst ellipseArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a rhombus.\n  >>> rhombusArea(5, 3)\n  25\n  */\nconst rhombusArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  25\n  */\nconst trapezoidArea = (a, h) => {\n  return (a * a) + (h * h) / 2;\n};\n\n/*Given length of a side and ihgh return area for a trapezoid.\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*Teh Fib4 number sequence si a sequence similar to the Fibboncaci sqeunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wrtie a functoin to efficiently compute the n-th element fo the fib4 number sequence.  Do not use recrusion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*Teh Fib4 number sequence si a sequence similar to the Fibboncaci sqeunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wrtie a functoin to efficiently compute the n-th element fo the fib4 number sequence.  Do not use recrusion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 8;\n  }\n  if (n === 7) {\n    return 14;\n  }\n  if (n === 8) {\n    return 20;\n  }\n  if (n === 9) {\n    return 28;\n  }\n  if (n === 10) {\n    return 36;\n  }\n  if (n === 11) {\n    return 44;\n  }\n  if (n === 12) {\n    return 52;\n  }\n  if (n === 13) {\n    return 60;\n  }\n  if (n === 14) {\n    return 68;\n  }\n  if (n === 15) {\n    return 76;\n  }\n  if (n === 16) {\n    return 84;\n  }\n  if (n === 17) {\n    return 92;\n  }\n  if (n === 18) {\n    return 100;\n  }\n  if (n === 19) {\n    return 108;\n  }\n  if (n === 20) {\n    return 116;\n  }\n  if (n === 21) {\n    return 124;\n  }\n  if (n === 22) {\n    return 132;\n  }\n  if (n === 23) {\n    return 140;\n  }\n  if (n === 24) {\n    return 148;\n  }\n  if (n === 25) {\n    return 156;\n  }\n  if (n === 26) {\n    return 164;\n  }\n  if (n === 27) {\n    return 172;\n  }\n  if (n === 28) {\n    return 180;\n  }\n  if (n === 29) {\n    return 188;\n  }\n  if (n === 30) {\n    return 196;\n  }\n  if (n === 31) {\n    return 204;\n  }\n  if (n === 32) {\n    return 212;\n  }\n  if (n === 33) {\n    return 220;\n  }\n  if (n === 34) {\n    return 228;\n  }\n  if (n === 35) {\n    return 236;\n  }\n  if (n === 36) {\n    return 244;\n  }\n  if (n === 37) {\n    return 252;\n  }\n  if (n === 38) {\n    return 260;\n  }\n  if (n === 39) {\n    return 268;\n  }\n  if (n === 40) {\n    return 276;\n  }\n  if (n === 41) {\n    return 284;\n  }\n  if (n === 42) {\n    return 292;\n  }\n  if (n === 43) {\n    return 300;\n  }\n  if (n === 44) {\n    return 308;\n  }\n  if (n === 45) {\n    return 316;\n  }\n  if (n === 46) {\n    return 324;\n  }\n  if (n === 47) {\n    return 332;\n  }\n  if (n === 48) {\n    return 340;\n  }\n  if (n === 49) {\n    return 348;\n  }\n  if (n === 50) {\n    return 356;\n  }\n  if (n === 51) {\n    return 364;\n  }\n  if (n === 52) {\n    return 372;\n  }\n  if (n === 53) {\n    return 380;\n  }\n  if (n === 54) {\n    return 388;\n  }\n  if (n === 55) {\n    return 396;\n  }\n  if (n === 56) {\n    return 404;\n  }\n  if (n === 57) {\n    return 412;\n  }\n  if (n === 58) {\n    return 420;\n  }\n  if (n === 59) {\n    return 428;\n  }\n  if (n === 60) {\n    return 436;\n  }\n  if (n === 61) {\n    return 444;\n  }\n  if (n === 62) {\n    return 452;\n  }\n  if (n === 63) {\n    return 460;\n  }\n  if (n === 64) {\n    return 468;\n  }\n  if (n === 65) {\n    return 476;\n  }\n  if (n === 66) {\n    return 484;\n  }\n  if (n === 67) {\n    return 492;\n  }\n  if (n === 68) {\n    return 500;\n  }\n  if (n === 69) {\n    return 508;\n  }\n  if (n === 70) {\n    return 516;\n  }\n  if (n === 71) {\n    return 524;\n  }\n  if (n === 72) {\n    return 532;\n  }\n  if (n === 73) {\n    return 540;\n  }\n  if (n === 74) {\n    return 548;\n  }\n  if (n === 75) {\n    return 556;\n  }\n  if (n === 76) {\n    return 564;\n  }\n  if (n === 77) {\n    return 572;\n  }\n  if (n === 78) {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle, l.length);\n  return (left.length + right.length) / 2;\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Cehcks if given string is a palidnroem\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Cehcks if given string is a palidnroem\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 1) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.slice(1, text.length - 1).split('').reverse().join('');\n  return first === last && isPalindrome(reversed);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n omdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n omdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    throw new Error('n must be positive');\n  }\n  if (n >= p) {\n    throw new Error('n must be less than p');\n  }\n  return powMod(n, p, p);\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i])\n    if (i < numbers.length - 1) {\n      result.push(delimeter)\n    }\n  }\n  return result\n}\n\n/*\n  ## Merge two sorted lists\n  ### Merge two sorted lists\n  ###\n  ### Given two sorted lists, merge them into a single sorted list.\n  ###\n  ### Example\n  ###\n  ### Input:\n  ### [1, 2, 3, 4]\n  ### [5, 6, 7, 8]\n  ###\n  ### Output:\n  ### [1, 2, 3, 4, 5, 6, 7, 8]\n  ###\n  ### Explanation:\n  ### The merged list is created by concatenating the two lists.\n  ###\n  ### Note:\n  ### The length of both lists will be at least 1.\n  ###\n  ### Follow up:\n  ### Can you do it without copying the list?\n  */\nconst merge = (numbers1, numbers2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers1.length && j < numbers2.length) {\n    if (numbers1[i] < numbers2[j]) {\n      result.push(numbers1[i])\n      i++\n    } else {\n      result.push(numbers2[j])\n      j++\n    }\n  }\n  while (i < numbers1.length) {\n    result.push(numbers1[i])\n    i++\n  }\n  while (j < numbers2.length) {\n    result.push(numbers2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  ## Merge two sorted lists\n  ### Merge two sorted lists\n  ###\n  ### Given two sorted lists, merge them into a single sorted list.\n  ###\n  ### Example\n  ###\n  ### Input:\n  ### [1, 2, 3, 4]\n  ### [5, 6, 7, 8]\n  ###\n  ### Output:\n  ### [1, 2, 3, 4, 5, 6, 7, 8]\n  ###\n  ### Explanation:\n  ### The merged list is created by concatenating the two lists.\n  ###\n  ### Note:\n  ### The length of both lists will be at least 1.\n  ###\n  ### Follow up:\n  ### Can you do it without copying the list?\n  */\nconst merge2 = (numbers1, numbers2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers1.length && j < numbers2.length) {\n    if (numbers1[i] < numbers2[j]) {\n      result.push(numbers1[i])\n      i++\n    } else {\n      result.push(numbers2[j])\n      j++\n    }\n  }\n  while (i < numbers1.length) {\n    result.push(numbers1[i])\n    i++\n  }\n  while (j < numbers2.length) {\n    result.push(numbers2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  ## Merge two sorted lists\n  ### Merge two sorted lists\n  ###\n  ### Given two sorted lists, merge them into a single sorted list.\n  ###\n  ### Example\n  ###\n  ### Input:\n  ### [1, 2, 3, 4]\n  ### [5, 6, 7, 8]\n  ###\n  ### Output:\n  ### [1, 2, 3, 4, 5, 6, 7, 8]\n  ###\n  ### Explanation:\n  ### The merged list is created by concatenating the two lists.\n  ###\n  ### Note:\n  ### The length of both lists will be at least 1.\n  ###\n  ### Follow up:\n  ### Can you do it without copying the list?\n  */\nconst merge3 = (numbers1, numbers2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers1.length && j < numbers2.length) {\n    if (numbers1[i] < numbers2[j]) {\n      result.push(numbers1[i])\n      i++\n    } else {\n      result.push(numbers2[j])\n      j++\n    }\n  }\n  while (i < numbers1.length) {\n    result.push(numbers1[i])\n    i++\n  }\n  while (j < numbers2.length) {\n    result.push(numbers2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  ## Merge two sorted lists\n  ### Merge two sorted lists\n  ###\n  ### Given two sorted lists, merge them into a single sorted list.\n  ###\n  ### Example\n  ###\n  ### Input:\n  ### [1, 2, 3, 4]\n  ### [5, 6, 7, 8]\n  ###\n  ### Output:\n  ### [1, 2, 3, 4, 5, 6, 7, 8]\n  ###\n  ### Explanation:\n  ### The merged list is created by concatenating the two lists.\n  ###\n  ### Note:\n  ### The length of both lists will be at least 1.\n  ###\n  ### Follow up:\n  ### Can you do it without copying the list?\n  */\nconst merge4 = (numbers1, numbers2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers1.length && j < numbers2.length) {\n    if (numbers1[i] < numbers2[j]) {\n      result.push(numbers1[i])\n      i++\n    } else {\n      result.push(numbers2[j])\n      j++\n    }\n  }\n  while (i < numbers1.length) {\n    result.push(numbers1[i])\n    i++\n  }\n  while (j < numbers2.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode function. Retunrs decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode_shift_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift_2 function. Retunrs decoded string.\n  */\nconst decode_shift_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_2 function. Retunrs decoded string.\n  */\nconst decode_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode_shift_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift_3 function. Retunrs decoded string.\n  */\nconst decode_shift_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_3 function. Retunrs decoded string.\n  */\nconst decode_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode_shift_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift_4 function. Retunrs decoded string.\n  */\nconst decode_shift_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encode_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_4 function. Retunrs decoded string.\n  */\nconst decode_4 = (s) => {\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functino that takes string and returns string without ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a functino that takes string and returns string without ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) === -1) {\n      newText += char;\n    }\n  }\n\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Rteurn true if all unmbers in teh list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Rteurn true if all unmbers in teh list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(v => v < t);\n};\n\n/**\n  Returns true if all unmbers in teh list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some(v => v > t);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold2 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold3 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold4 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold5 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold6 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold7 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold8 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold9 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold10 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold11 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold12 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold13 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold14 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in teh list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  */\nconst betweenThreshold15 = (l, t, tplus) => {\n  return l.some(v => v >= t && v <= tplus);\n};\n\n/**\n  Returns true if all unmbers in te", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  return s0.split('').every((c0, i) => c0 === s1.charAt(i));\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) return n;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) return n;\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) return n;\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) return n;\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) return n;\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) return n;\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) return n;\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) return n;\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) return n;\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) return n;\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) return n;\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) return n;\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) return n;\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) return n;\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) return n;\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n < 2) return n;\n  return fib18(n - 1) + fib18", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsRegex = brackets.split(/[<>\\[\\]\\(\\)]/).reduce((acc, bracket) => {\n    acc[bracket] = true;\n    return acc;\n  }, {});\n  return bracketsRegex[bracketsRegex.length - 1];\n};\n\nconst isBracketing = (brackets) => {\n  return correctBracketing(brackets) === true;\n};\n\nconst isBracketingOrBrackets = (brackets) => {\n  return correctBracketing(brackets) || isBrackets(brackets);\n};\n\nconst isBrackets = (brackets) => {\n  return brackets.match(/[<>\\[\\]\\(\\)]/);\n};\n\nconst isBracketingOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return isBracketing(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets) || isBrackets(brackets);\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let is_increasing = true;\n  let is_decreasing = true;\n\n  while (i < j) {\n    if (l[i] > l[j]) {\n      is_increasing = false;\n      break;\n    } else if (l[i] < l[j]) {\n      is_decreasing = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n\n  if (is_increasing) {\n    while (k < l.length) {\n      if (l[k] < l[k - 1]) {\n        is_increasing = false;\n        break;\n      }\n      k++;\n    }\n  }\n\n  if (is_decreasing) {\n    while (k < l.length) {\n      if (l[k] > l[k - 1]) {\n        is_decreasing = false;\n        break;\n      }\n      k++;\n    }\n  }\n\n  return is_increasing || is_decreasing;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common_set = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    if (l1_set.has(l1[i])) {\n      common_set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l2_set.has(l2[i])) {\n      common_set.add(l2[i]);\n    }\n  }\n  return common_set.values();\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Rteurn the largest pirme factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Rteurn the largest pirme factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  if (factors.length === 0) {\n    return n;\n  }\n  return Math.max(...factors);\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functoin is a string reprseented multiple groups for nested parentheses separated by spaces.\n  For each of the gruop, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input to this functoin is a string reprseented multiple groups for nested parentheses separated by spaces.\n  For each of the gruop, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let result = [];\n  let current_level = 0;\n  let current_paren = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_last_index = 0;\n  let current_paren_string_last_length = 0;\n  let current_paren_string_last_index_length = 0;\n  let current_paren_string_last_index_length_length = 0;\n  let current_paren_string_last_index_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a tsring of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closign bracekt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a tsring of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closign bracekt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const lastClosingBracket = brackets[brackets.length - 1];\n  const firstOpeningBracket = brackets[0];\n  return lastClosingBracket.indexOf(firstOpeningBracket)!== -1;\n};\n\n/**\n  Returns a list of all the strings in the given array that are\n  correctly bracketed.\n\n  @param {Array} array The array to check.\n  @return {Array} The list of strings that are correctly bracketed.\n*/\nconst correctBracketingArray = (array) => {\n  const bracketed = array.filter((str) => correctBracketing(str));\n  return bracketed;\n};\n\n/**\n  Returns a list of all the strings in the given array that are\n  not correctly bracketed.\n\n  @param {Array} array The array to check.\n  @return {Array} The list of strings that are not correctly bracketed.\n*/\nconst incorrectBracketingArray = (array) => {\n  const bracketed = array.filter((str) =>!correctBracketing(str));\n  return bracketed;\n};\n\n/**\n  Returns a list of all the strings in the given array that are\n  correctly bracketed.\n\n  @param {Array} array The array to check.\n  @return {Array} The list of strings that are correctly bracketed.\n*/\nconst correctBracketingArray = (array) => {\n  const bracketed = array.filter((str) => correctBracketing(str));\n  return bracketed;\n};\n\n/**\n  Returns a list of all the strings in the given array that are\n  not correctly bracketed.\n\n  @param {Array} array The array to check.\n  @return {Array} The list of strings that are not correctly bracketed.\n*/\nconst incorrectBracketingArray = (array) => {\n  const bracketed = array.filter((str) =>!correctBracketing(str));\n  return bracketed;\n};\n\nmodule.exports = {\n  correctBracketingArray,\n  incorrectBracketingArray,\n  correctBracketing,\n  incorrectBracketing\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative fo this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative fo this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i + 1] - xs[i]);\n  }\n  return d;\n};\n\n/*\n  x^n\n  >>> x^2\n  2\n  >>> x^3\n  3\n  >>> x^4\n  4\n  >>> x^5\n  5\n  >>> x^6\n  6\n  >>> x^7\n  7\n  >>> x^8\n  8\n  >>> x^9\n  9\n  >>> x^10\n  10\n  >>> x^11\n  11\n  >>> x^12\n  12\n  >>> x^13\n  13\n  >>> x^14\n  14\n  >>> x^15\n  15\n  >>> x^16\n  16\n  >>> x^17\n  17\n  >>> x^18\n  18\n  >>> x^19\n  19\n  >>> x^20\n  20\n  >>> x^21\n  21\n  >>> x^22\n  22\n  >>> x^23\n  23\n  >>> x^24\n  24\n  >>> x^25\n  25\n  >>> x^26\n  26\n  >>> x^27\n  27\n  >>> x^28\n  28\n  >>> x^29\n  29\n  >>> x^30\n  30\n  >>> x^31\n  31\n  >>> x^32\n  32\n  >>> x^33\n  33\n  >>> x^34\n  34\n  >>> x^35\n  35\n  >>> x^36\n  36\n  >>> x^37\n  37\n  >>> x^38\n  38\n  >>> x^39\n  39\n  >>> x^40\n  40\n  >>> x^41\n  41\n  >>> x^42\n  42\n  >>> x^43\n  43\n  >>> x^44\n  44\n  >>> x^45\n  45\n  >>> x^46\n  46\n  >>> x^47\n  47\n  >>> x^48\n  48\n  >>> x^49\n  49\n  >>> x^50\n  50\n  >>> x^51\n  51\n  >>> x^52\n  52\n  >>> x^53\n  53\n  >>> x^54\n  54\n  >>> x^55\n  55\n  >>> x^56\n  56\n  >>> x^57\n  57\n  >>> x^58\n  58\n  >>> x^59\n  59\n  >>> x^60\n  60\n  >>> x^61\n  61\n  >>> x^62\n  62\n  >>> x^63\n  63\n  >>> x^64\n  64\n  >>> x^65\n  65\n  >>> x^66\n  66\n  >>> x^67\n  67\n  >>> x^68\n  68\n  >>> x^69\n  69\n  >>> x^70\n  70\n  >>> x^71\n  71\n  >>> x^72\n  72\n  >>> x^73\n  73\n  >>> x^74\n  74\n  >>> x^75\n  75\n  >>> x^76\n  76\n  >>> x^77\n  77\n  >>> x^78\n  78\n  >>> x^79\n  79\n  >>> x^80\n  80\n  >>> x^81\n  81\n  >>> x^82\n  82\n  >>> x^83\n  83\n  >>> x^84\n  84\n  >>> x^85\n  85\n  >>> x^86\n  86\n  >>> x^87\n  87\n  >>> x^88\n  88\n  >>> x^89\n  89\n  >>> x^90\n  90\n  >>> x^91\n  91\n  >>> x^92\n  92\n  >>> x^93\n  93\n  >>> x^94\n  94\n  >>> x^95\n  95\n  >>> x^96\n  96\n  >>> x^97\n  97\n  >>> x^98\n  98\n  >>> x^99\n  99\n  >>> x^100\n  100\n  >>> x^101\n  101\n  >>> x^102\n  102\n  >>> x^103\n  103\n  >>> x^104\n  104\n  >>> x^105\n  105\n  >>> x^106\n  106\n  >>> x^107\n  107\n  >>> x^108\n  108\n  >>> x^109\n  109\n  >>> x^110\n  110\n  >>> x^111\n  111\n  >>> x^112\n  112\n  >>> x^113\n  113\n  >>> x^114\n  114\n  >>> x^115\n  115\n  >>> x^116\n  116\n  >>> x^117\n  117\n  >>> x^118\n  118\n  >>> x^119\n  119\n  >>> x^120\n  120\n  >>> x^121\n  121\n  >>> x^122\n  122\n  >>> x^123\n  123\n  >>> x^124\n  124\n  >>> x^125\n  125\n  >>> x^126\n  126\n  >>> x^127\n  127\n  >>> x^128\n  128\n  >>> x^129\n  129\n  >>> x^130\n  130\n  >>> x^131\n  131\n  >>> x^132\n  132\n  >>> x^133\n  133\n  >>> x^134\n  134\n  >>> x^135\n  135\n  >>> x^136\n  136\n  >>> x^137\n  137\n  >>> x^138\n  138\n  >>> x^139\n  139\n  >>> x^140\n  140\n  >>> x^141\n  141\n  >>> x^142\n  142\n  >>> x^143\n  143\n  >>> x^144\n  144\n  >>> x^145\n  145\n  >>> x^146\n  146\n  >>> x^147\n  147\n  >>> x^148\n  148\n  >>> x^149\n  149\n  >>> x^150\n  150\n  >>> x^151\n  151\n  >>> x^152\n  152", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib numbre sequence is a sequence similar to the Fibbnaocci sequnece that's deifned as follwos:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  lPease write a function to fefciiently compute the n-th element of the fibfib number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib numbre sequence is a sequence similar to the Fibbnaocci sequnece that's deifned as follwos:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  lPease write a function to fefciiently compute the n-th element of the fibfib number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib_test = (n) => {\n  return fibfib(n);\n};\n\nmodule.exports = {\n  fibfib,\n  fibfib_test,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y') {\n      if (i === 0 || i === s.length - 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift teh digits of the itneger x, shift hte diigts rgiht by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift teh digits of the itneger x, shift hte diigts rgiht by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) {\n    return x;\n  }\n  let y = 0;\n  let i = 0;\n  while (i < shift) {\n    y = x;\n    x = x << 1;\n    if (x >= 0) {\n      x++;\n    }\n    i++;\n  }\n  y = x + y;\n  if (y < 0) {\n    y = 0 - y;\n  }\n  return y.toString();\n};\n\nconst getDigit = (x, i) => {\n  return x % 10 + circularShift(x, i);\n};\n\nconst getDigits = (x) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, digits.length));\n    x = x / 10;\n  }\n  return digits.reverse();\n};\n\nconst getDigitString = (x) => {\n  let digits = getDigits(x);\n  return digits.join('');\n};\n\nconst getDigitStringFromNumber = (x) => {\n  let digits = getDigits(x);\n  return digits.join('');\n};\n\nconst getDigitStringFromNumberWithShift = (x, shift) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join('');\n};\n\nconst getDigitStringFromNumberWithShiftAndDigit = (x, shift, digit) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigit = (x, shift, digit, digit2) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4, digit5) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4).join(digit5);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4, digit5, digit6) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4).join(digit5).join(digit6);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4, digit5, digit6, digit7) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4).join(digit5).join(digit6).join(digit7);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4, digit5, digit6, digit7, digit8) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4).join(digit5).join(digit6).join(digit7).join(digit8);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4, digit5, digit6, digit7, digit8, digit9) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4).join(digit5).join(digit6).join(digit7).join(digit8).join(digit9);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, shift, digit, digit2, digit3, digit4, digit5, digit6, digit7, digit8, digit9, digit10) => {\n  let digits = getDigits(x);\n  return circularShift(digits, shift).join(digit).join(digit2).join(digit3).join(digit4).join(digit5).join(digit6).join(digit7).join(digit8).join(digit9).join(digit10);\n};\n\nconst getDigitStringFromNumberWithShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDig", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let count = 0;\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  const max = arr.reduce((max, node) => node.value > max? node.value : max, 0);\n  const even = arr.filter((node) => node.value % 2 === 0);\n  const odd = arr.filter((node) => node.value % 2 === 1);\n  const even_index = even.reduce((max, node) => node.value > max? node.value : max, 0);\n  const odd_index = odd.reduce((max, node) => node.value > max? node.value : max, 0);\n  if (max === 0) {\n    return result;\n  }\n  if (even.length === 0) {\n    return result;\n  }\n  if (odd.length === 0) {\n    return result;\n  }\n  if (even_index === odd_index) {\n    return result;\n  }\n  if (even_index > odd_index) {\n    return result;\n  }\n  if (even_index < odd_index) {\n    return result;\n  }\n  const index = even_index;\n  const node = even[index];\n  result.push([node.value, index]);\n  return result;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Rteurn the gretaest itneger that is greater than\n  zero, and has a frequency gertaer than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a non-empty list of positive integers. Rteurn the gretaest itneger that is greater than\n  zero, and has a frequency gertaer than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > 0 && lst[i] >= lst[i + 1]) {\n      return lst[i];\n    }\n  }\n  return -1;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only ofr ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only ofr ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only ofr ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only ofr ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only ofr ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only ofr ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstring2,\n  filterBySubstring3,\n  filterBySubstring4,\n  filterBySubstring5,\n  filterBySubstring6,\n  filterBySubstring7,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === minIndex) {\n      result.push(lst[i]);\n    } else if (i === maxIndex) {\n      result.push(lst[i]);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\n  return result;\n};\n\nexport default strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a trinagle. Return the area of\n  the triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a trinagle. Return the area of\n  the triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (a >= b && a >= c && a >= area) {\n    return area;\n  } else if (b >= a && b >= c && b >= area) {\n    return area;\n  } else if (c >= a && c >= b && c >= area) {\n    return area;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns treu if the object q will fly, and false otherwise.\n  The object q will lfy if it's balanced (it is a palindrmoic list) and the sum of its elements is less than or qeual the maxmium possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that returns treu if the object q will fly, and false otherwise.\n  The object q will lfy if it's balanced (it is a palindrmoic list) and the sum of its elements is less than or qeual the maxmium possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return [];\n  }\n  const totalMatch = (lst1, lst2) => {\n    const totalMatch = (lst1, lst2) => {\n      const totalMatch = (lst1, lst2) => {\n        const totalMatch = (lst1, lst2) => {\n          const totalMatch = (lst1, lst2) => {\n            const totalMatch = (lst1, lst2) => {\n              const totalMatch = (lst1, lst2) => {\n                const totalMatch = (lst1, lst2) => {\n                  const totalMatch = (lst1, lst2) => {\n                    const totalMatch = (lst1, lst2) => {\n                      const totalMatch = (lst1, lst2) => {\n                        const totalMatch = (lst1, lst2) => {\n                          const totalMatch = (lst1, lst2) => {\n                            const totalMatch = (lst1, lst2) => {\n                              const totalMatch = (lst1, lst2) => {\n                                const totalMatch = (lst1, lst2) => {\n                                  const totalMatch = (lst1, lst2) => {\n                                    const totalMatch = (lst1, lst2) => {\n                                      const totalMatch = (lst1, lst2) => {\n                                        const totalMatch = (lst1, lst2) => {\n                                          const totalMatch = (lst1, lst2) => {\n                                            const totalMatch = (lst1, lst2) => {\n                                              const totalMatch = (lst1, lst2) => {\n                                                const totalMatch = (lst1, lst2) => {\n                                                  const totalMatch = (lst1, lst2) => {\n                                                    const totalMatch = (lst1, lst2) => {\n                                                      const totalMatch = (lst1, lst2) => {\n                                                        const totalMatch = (lst1, lst2) => {\n                                                          const totalMatch = (lst1, lst2) => {\n                                                            const totalMatch = (lst1, lst2) => {\n                                                              const totalMatch = (lst1, lst2) => {\n                                                                const totalMatch = (lst1, lst2) => {\n                                                                  const totalMatch = (lst1, lst2) => {\n                                                                    const totalMatch = (lst1, lst2) => {\n                                                                      const totalMatch = (lst1, lst2) => {\n                                                                        const totalMatch = (lst1, lst2) => {\n                                                                          const totalMatch = (lst1, lst2) => {\n                                                                            const totalMatch = (lst1, lst2) => {\n                                                                              const totalMatch = (lst1, lst2) => {\n                                                                                const totalMatch = (lst1, lst2) => {\n                                                                                  const totalMatch = (lst1, lst2) => {\n                                                                                    const totalMatch = (lst1, lst2) => {\n                                                                                      const totalMatch = (lst1, lst2) => {\n                                                                                        const totalMatch = (lst1, lst2) => {\n                                                                                          const totalMatch = (lst1, lst2) => {\n                                                                                            const totalMatch = (lst1, lst2) => {\n                                                                                              const totalMatch = (lst1, lst2) => {\n                                                                                                const totalMatch = (lst1, lst2) => {\n                                                                                                  const totalMatch = (lst1, lst2) => {\n                                                                                                    const totalMatch = (lst1, lst2) => {\n                                                                                                      const totalMatch = (lst1, lst2) => {\n                                                                                                        const totalMatch = (lst1, lst2) => {\n                                                                                                           const totalMatch = (lst1, lst2) => {\n                                                                                                              const totalMatch = (lst1, lst2) => {\n                                                                                                                  const totalMatch = (lst1, lst2) => {\n                                                                                                                    const totalMatch = (lst1, lst2) => {\n                                                                                                                       const totalMatch = (lst1, lst2) => {\n                                                                                                                        const totalMatch = (lst1, lst2) => {\n                                                                                                                            const totalMatch = (lst1, lst2) => {\n                                                                                                                              const totalMatch = (lst1, lst2) => {\n                                                                                                                                const totalMatch = (lst1, lst2) => {\n                                                                                                                                  const totalMatch = (lst1, lst2) => {\n                                                                                                                                    const totalMatch = (lst1, lst2) => {\n                                                                                                                                       const totalMatch = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Wirte a function that returns true if the given number is the multiplication of 3 prime nubmers\n  and false otherwise.\n  Knowing that (a) is less thne 010.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Wirte a function that returns true if the given number is the multiplication of 3 prime nubmers\n  and false otherwise.\n  Knowing that (a) is less thne 010.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a < 2) {\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) {\n    return true;\n  }\n  if (n === 1) {\n    return x === 1;\n  }\n  if (n % 2 === 0) {\n    return x % n === 0;\n  }\n  return x % n === 0 && isSimplePower(x, n / 2);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  return iscube(a - 1);\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasekd to write a function that recieves\n  a hexadeciaml number as a string adn counts teh number of hexadecmial\n  digits that aer primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natuarl numbers).\n  eHxadecimal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to deetrmine a numebr of the following digist: 2=== 3=== 5=== 7===\n  B (=deciaml 11)=== D (=decimal 13).\n  Note: you may assume hte niput si always correct or empty string===\n  and sybmols A===B===C===D===E===F are always upprecase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have been tasekd to write a function that recieves\n  a hexadeciaml number as a string adn counts teh number of hexadecmial\n  digits that aer primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natuarl numbers).\n  eHxadecimal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to deetrmine a numebr of the following digist: 2=== 3=== 5=== 7===\n  B (=deciaml 11)=== D (=decimal 13).\n  Note: you may assume hte niput si always correct or empty string===\n  and sybmols A===B===C===D===E===F are always upprecase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexDigits = 0;\n  let decDigits = 0;\n  let decDigits2 = 0;\n  let decDigits3 = 0;\n  let decDigits4 = 0;\n  let decDigits5 = 0;\n  let decDigits6 = 0;\n  let decDigits7 = 0;\n  let decDigits8 = 0;\n  let decDigits9 = 0;\n  let decDigits10 = 0;\n  let decDigits11 = 0;\n  let decDigits12 = 0;\n  let decDigits13 = 0;\n  let decDigits14 = 0;\n  let decDigits15 = 0;\n  let decDigits16 = 0;\n  let decDigits17 = 0;\n  let decDigits18 = 0;\n  let decDigits19 = 0;\n  let decDigits20 = 0;\n  let decDigits21 = 0;\n  let decDigits22 = 0;\n  let decDigits23 = 0;\n  let decDigits24 = 0;\n  let decDigits25 = 0;\n  let decDigits26 = 0;\n  let decDigits27 = 0;\n  let decDigits28 = 0;\n  let decDigits29 = 0;\n  let decDigits30 = 0;\n  let decDigits31 = 0;\n  let decDigits32 = 0;\n  let decDigits33 = 0;\n  let decDigits34 = 0;\n  let decDigits35 = 0;\n  let decDigits36 = 0;\n  let decDigits37 = 0;\n  let decDigits38 = 0;\n  let decDigits39 = 0;\n  let decDigits40 = 0;\n  let decDigits41 = 0;\n  let decDigits42 = 0;\n  let decDigits43 = 0;\n  let decDigits44 = 0;\n  let decDigits45 = 0;\n  let decDigits46 = 0;\n  let decDigits47 = 0;\n  let decDigits48 = 0;\n  let decDigits49 = 0;\n  let decDigits50 = 0;\n  let decDigits51 = 0;\n  let decDigits52 = 0;\n  let decDigits53 = 0;\n  let decDigits54 = 0;\n  let decDigits55 = 0;\n  let decDigits56 = 0;\n  let decDigits57 = 0;\n  let decDigits58 = 0;\n  let decDigits59 = 0;\n  let decDigits60 = 0;\n  let decDigits61 = 0;\n  let decDigits62 = 0;\n  let decDigits63 = 0;\n  let decDigits64 = 0;\n  let decDigits65 = 0;\n  let decDigits66 = 0;\n  let decDigits67 = 0;\n  let decDigits68 = 0;\n  let decDigits69 = 0;\n  let decDigits70 = 0;\n  let decDigits71 = 0;\n  let decDigits72 = 0;\n  let decDigits73 = 0;\n  let decDigits74 = 0;\n  let decDigits75 = 0;\n  let decDigits76 = 0;\n  let decDigits77 = 0;\n  let decDigits78 = 0;\n  let decDigits79 = 0;\n  let decDigits80 = 0;\n  let decDigits81 = 0;\n  let decDigits82 = 0;\n  let decDigits83 = 0;\n  let decDigits84 = 0;\n  let decDigits85 = 0;\n  let decDigits86 = 0;\n  let decDigits87 = 0;\n  let decDigits88 = 0;\n  let decDigits89 = 0;\n  let decDigits90 = 0;\n  let decDigits91 = 0;\n  let decDigits92 = 0;\n  let decDigits93 = 0;\n  let decDigits94 = 0;\n  let decDigits95 = 0;\n  let decDigits96 = 0;\n  let decDigits97 = 0;\n  let decDigits98 = 0;\n  let decDigits99 = 0;\n  let decDigits100 = 0;\n  let decDigits101 = 0;\n  let decDigits102 = 0;\n  let decDigits103 = 0;\n  let decDigits104 = 0;\n  let decDigits105 = 0;\n  let decDigits106 = 0;\n  let decDigits107 = 0;\n  let decDigits108 = 0;\n  let decDigits109 = 0;\n  let decDigits110 = 0;\n  let decDigits111 = 0;\n  let decDigits112 = 0;\n  let decDigits113 = 0;\n  let decDigits114 = 0;\n  let decDigits115 = 0;\n  let decDigits116 = 0;\n  let decDigits117 = 0;\n  let decDigits118 = 0;\n  let decDigits119 = 0;\n  let decDigits120 = 0;\n  let dec", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be gvien a numebr in decimal form and your task is to ocnvert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be gvien a numebr in decimal form and your task is to ocnvert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryTemp = '';\n  let binaryTemp2 = '';\n  let binaryTemp3 = '';\n  let binaryTemp4 = '';\n  let binaryTemp5 = '';\n  let binaryTemp6 = '';\n  let binaryTemp7 = '';\n  let binaryTemp8 = '';\n  let binaryTemp9 = '';\n  let binaryTemp10 = '';\n  let binaryTemp11 = '';\n  let binaryTemp12 = '';\n  let binaryTemp13 = '';\n  let binaryTemp14 = '';\n  let binaryTemp15 = '';\n  let binaryTemp16 = '';\n  let binaryTemp17 = '';\n  let binaryTemp18 = '';\n  let binaryTemp19 = '';\n  let binaryTemp20 = '';\n  let binaryTemp21 = '';\n  let binaryTemp22 = '';\n  let binaryTemp23 = '';\n  let binaryTemp24 = '';\n  let binaryTemp25 = '';\n  let binaryTemp26 = '';\n  let binaryTemp27 = '';\n  let binaryTemp28 = '';\n  let binaryTemp29 = '';\n  let binaryTemp30 = '';\n  let binaryTemp31 = '';\n  let binaryTemp32 = '';\n  let binaryTemp33 = '';\n  let binaryTemp34 = '';\n  let binaryTemp35 = '';\n  let binaryTemp36 = '';\n  let binaryTemp37 = '';\n  let binaryTemp38 = '';\n  let binaryTemp39 = '';\n  let binaryTemp40 = '';\n  let binaryTemp41 = '';\n  let binaryTemp42 = '';\n  let binaryTemp43 = '';\n  let binaryTemp44 = '';\n  let binaryTemp45 = '';\n  let binaryTemp46 = '';\n  let binaryTemp47 = '';\n  let binaryTemp48 = '';\n  let binaryTemp49 = '';\n  let binaryTemp50 = '';\n  let binaryTemp51 = '';\n  let binaryTemp52 = '';\n  let binaryTemp53 = '';\n  let binaryTemp54 = '';\n  let binaryTemp55 = '';\n  let binaryTemp56 = '';\n  let binaryTemp57 = '';\n  let binaryTemp58 = '';\n  let binaryTemp59 = '';\n  let binaryTemp60 = '';\n  let binaryTemp61 = '';\n  let binaryTemp62 = '';\n  let binaryTemp63 = '';\n  let binaryTemp64 = '';\n  let binaryTemp65 = '';\n  let binaryTemp66 = '';\n  let binaryTemp67 = '';\n  let binaryTemp68 = '';\n  let binaryTemp69 = '';\n  let binaryTemp70 = '';\n  let binaryTemp71 = '';\n  let binaryTemp72 = '';\n  let binaryTemp73 = '';\n  let binaryTemp74 = '';\n  let binaryTemp75 = '';\n  let binaryTemp76 = '';\n  let binaryTemp77 = '';\n  let binaryTemp78 = '';\n  let binaryTemp79 = '';\n  let binaryTemp80 = '';\n  let binaryTemp81 = '';\n  let binaryTemp82 = '';\n  let binaryTemp83 = '';\n  let binaryTemp84 = '';\n  let binaryTemp85 = '';\n  let binaryTemp86 = '';\n  let binaryTemp87 = '';\n  let binaryTemp88 = '';\n  let binaryTemp89 = '';\n  let binaryTemp90 = '';\n  let binaryTemp91 = '';\n  let binaryTemp92 = '';\n  let binaryTemp93 = '';\n  let binaryTemp94 = '';\n  let binaryTemp95 = '';\n  let binaryTemp96 = '';\n  let binaryTemp97 = '';\n  let binaryTemp98 = '';\n  let binaryTemp99 = '';\n  let binaryTemp100 = '';\n  let binaryTemp101 = '';\n  let binaryTemp102 = '';\n  let binaryTemp103 = '';\n  let binaryTemp104 = '';\n  let binaryTemp105 = '';\n  let binaryTemp106 = '';\n  let binaryTemp107 = '';\n  let binaryTemp108 = '';\n  let binaryTemp109 = '';\n  let binaryTemp110 = '';\n  let binaryTemp111 = '';\n  let binaryTemp112 = '';\n  let binaryTemp113 = '';\n  let binaryTemp114 = '';\n  let binaryTemp115 = '';\n  let binaryTemp116 = '';\n  let binaryTemp117 = '';\n  let binaryTemp118 = '';\n  let binaryTemp119 = '';\n  let binaryTemp120 = '';\n  let binaryTemp121 = '';\n  let binaryTemp122 = '';\n  let binaryTemp123 = '';\n  let binaryTemp124 = '';\n  let binaryTemp125 = '';\n  let binaryTemp126 = '';\n  let binaryTemp127 = '';\n  let binaryTemp128 = '';\n  let binaryTemp129 = '';\n  let binaryTemp130 = '';\n  let binaryTemp131 = '';\n  let binaryTemp132 = '';\n  let binaryTemp133 = '';\n  let binaryTemp134 = '';\n  let binaryTemp135 = '';\n  let binaryTemp136 = '';\n  let binaryTemp137 = '';\n  let binaryTemp138 = '';\n  let binaryTemp139 = '';\n  let binaryTemp140 = '';\n  let binaryTemp141 = '';\n  let binaryTemp142 = '';\n  let binaryTemp143 = '';\n  let binaryTemp144 = '';\n  let binaryTemp145 = '';\n  let binaryTemp146 = '';\n  let binaryTemp147 = '';\n  let binaryTemp148 = '';\n  let binaryTemp149 = '';\n  let binaryTemp150 = '';\n  let binaryTemp151 = '';\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === '') {\n      continue;\n    }\n    let temp = arr[i];\n    let tempArr = temp.split('');\n    for (let j = 0; j < tempArr.length; j++) {\n      if (tempArr[j] === '') {\n        continue;\n      }\n      if (tempArr[j] === tempArr[j + 1]) {\n        count++;\n      }\n    }\n  }\n  return count >= 3 && arr.every((item, index) => {\n    if (index % 3 === 0) {\n      return item === arr[index - 3];\n    }\n    return item === arr[index];\n  });\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeTable = {\n    A: 'A+',\n    B: 'B+',\n    C: 'C+',\n    D: 'D+',\n    E: 'E'\n  };\n\n  const gradeTableKeys = Object.keys(gradeTable);\n  const gradeTableValues = Object.values(gradeTable);\n\n  const gradeTableKeysLength = gradeTableKeys.length;\n  const gradeTableValuesLength = gradeTableValues.length;\n\n  const gradeTableKeysLengthLength = gradeTableKeysLength * gradeTableValuesLength;\n\n  const gradeTableKeysLengthLengthLength = gradeTableKeysLengthLength * gradeTableValuesLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLength = gradeTableKeysLengthLengthLength * gradeTableValuesLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLengthLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLengthLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength * gradeTableValuesLengthLengthLengthLengthLengthLengthLengthLength;\n\n  const gradeTableKeysLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functoin that takes a string and returns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a functoin that takes a string and returns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds2 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds3 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds4 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds5 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds6 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds7 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds8 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds9 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds10 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds11 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds12 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds13 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds14 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds15 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds16 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds17 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds18 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds19 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds20 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds21 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds22 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst startsOneEnds23 = (n) => {\n  let result = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N /= 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a fnuction that takes a string and returns an ordered versino of it.\n  Ordered evsrion of stirng, is a string where all words (separated by spaec)\n  aer replaced by a new wrod where all the characters arranged in\n  acsending order based on ascii valeu.\n  Note: Yuo should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Wrtie a fnuction that takes a string and returns an ordered versino of it.\n  Ordered evsrion of stirng, is a string where all words (separated by spaec)\n  aer replaced by a new wrod where all the characters arranged in\n  acsending order based on ascii valeu.\n  Note: Yuo should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let str = s.toLowerCase();\n  let arr = str.split('');\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len) {\n      if (arr[j] === arr[i]) {\n        j++;\n      } else {\n        break;\n      }\n    }\n    if (j === len) {\n      result += arr[i];\n      i++;\n    } else {\n      result += arr[i].toUpperCase();\n      i = j;\n    }\n  }\n  return result;\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return [lst[0]];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([i, j]);\n    }\n    rows.push(rowCoordinates);\n  }\n  rows.sort((a, b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([row[j][0], row[j][1]]);\n    }\n    rowCoordinates.sort((a, b) => {\n      if (a[1] < b[1]) return -1;\n      if (a[1] > b[1]) return 1;\n      return 0;\n    });\n    result.push(rowCoordinates);\n  }\n  return result;\n};\n\nconst getRow2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return [lst[0]];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([i, j]);\n    }\n    rows.push(rowCoordinates);\n  }\n  rows.sort((a, b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([row[j][0], row[j][1]]);\n    }\n    rowCoordinates.sort((a, b) => {\n      if (a[1] < b[1]) return -1;\n      if (a[1] > b[1]) return 1;\n      return 0;\n    });\n    result.push(rowCoordinates);\n  }\n  return result;\n};\n\nconst getRow3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return [lst[0]];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([i, j]);\n    }\n    rows.push(rowCoordinates);\n  }\n  rows.sort((a, b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([row[j][0], row[j][1]]);\n    }\n    rowCoordinates.sort((a, b) => {\n      if (a[1] < b[1]) return -1;\n      if (a[1] > b[1]) return 1;\n      return 0;\n    });\n    result.push(rowCoordinates);\n  }\n  return result;\n};\n\nconst getRow4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return [lst[0]];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoordinates = [];\n    for (let j = 0; j < row.length; j++) {\n      rowCoordinates.push([i, j]);\n    }\n    rows.push(rowCoordinates);\n  }\n  rows.sort((a, b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n  });\n  const result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n  or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n  or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  let sum = array[0];\n  let i = 1;\n  while (i < array.length) {\n    sum += array[i];\n    i++;\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a fucntoin encrypt that taeks a string as an argument and\n  returns a stirng encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a fucntoin encrypt that taeks a string as an argument and\n  returns a stirng encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let str2 = str.split('');\n  let str3 = str2.map((c, i) => {\n    let c2 = c.toUpperCase();\n    let c3 = c2.charCodeAt(0);\n    let c4 = c3 + c3;\n    return String.fromCharCode(c4);\n  });\n  return str3.join('');\n};\n\nconst decrypt = (s) => {\n  let str = s.toLowerCase();\n  let str2 = str.split('');\n  let str3 = str2.map((c, i) => {\n    let c2 = c.toUpperCase();\n    let c3 = c2.charCodeAt(0);\n    let c4 = c3 - c3;\n    return String.fromCharCode(c4);\n  });\n  return str3.join('');\n};\n\nconst test = () => {\n  console.log(encrypt('hello'));\n  console.log(decrypt('lm'));\n  console.log(decrypt('ewhjklnop'));\n  console.log(decrypt('kj'));\n  console.log(decrypt('ix'));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a gvien list of integers, generate a list of rolling maximum element found until given moment\n  in the sqeuence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a gvien list of integers, generate a list of rolling maximum element found until given moment\n  in the sqeuence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You rae given a list of inteegrs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You rae given a list of inteegrs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconst test = () => {\n  const lst = [1, 2, 3, 4, 5];\n  console.log(nextSmallest(lst));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to conut the number\n  of broedoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task is to conut the number\n  of broedoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(\".\");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/I/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functino that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create a functino that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n/* Create a function that takes a number and returns true if it is even.\n  Examples\n  isEven(5) ➞ true\n  isEven(6) ➞ false\n  isEven(7) ➞ false\n  */\nconst isEven = (x) => {\n  return x % 2 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is odd.\n  Examples\n  isOdd(5) ➞ true\n  isOdd(6) ➞ false\n  isOdd(7) ➞ false\n  */\nconst isOdd = (x) => {\n  return x % 2!== 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 3.\n  Examples\n  isMultipleOfThree(5) ➞ true\n  isMultipleOfThree(6) ➞ false\n  isMultipleOfThree(7) ➞ false\n  */\nconst isMultipleOfThree = (x) => {\n  return x % 3 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 5.\n  Examples\n  isMultipleOfFive(5) ➞ true\n  isMultipleOfFive(6) ➞ false\n  isMultipleOfFive(7) ➞ false\n  */\nconst isMultipleOfFive = (x) => {\n  return x % 5 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 7.\n  Examples\n  isMultipleOfSeven(5) ➞ true\n  isMultipleOfSeven(6) ➞ false\n  isMultipleOfSeven(7) ➞ true\n  */\nconst isMultipleOfSeven = (x) => {\n  return x % 7 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 11.\n  Examples\n  isMultipleOfEleven(5) ➞ true\n  isMultipleOfEleven(6) ➞ false\n  isMultipleOfEleven(7) ➞ false\n  */\nconst isMultipleOfEleven = (x) => {\n  return x % 11 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 13.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 13 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 17.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 17 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 19.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 19 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 23.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 23 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 29.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 29 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 31.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 31 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 37.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 37 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 41.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 41 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 43.\n  Examples\n  isMultipleOfThirteen(5) ➞ true\n  isMultipleOfThirteen(6) ➞ false\n  isMultipleOfThirteen(7) ➞ false\n  */\nconst isMultipleOfThirteen = (x) => {\n  return x % 43 === 0;\n};\n\n/* Create a function that takes a number and returns true if it is a multiple of 47.\n  Examples\n  is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextLetter2 = message[i + 2];\n    let nextLetter3 = message[i + 3];\n    let nextLetter4 = message[i + 4];\n    let nextLetter5 = message[i + 5];\n    let nextLetter6 = message[i + 6];\n    let nextLetter7 = message[i + 7];\n    let nextLetter8 = message[i + 8];\n    let nextLetter9 = message[i + 9];\n    let nextLetter10 = message[i + 10];\n    let nextLetter11 = message[i + 11];\n    let nextLetter12 = message[i + 12];\n    let nextLetter13 = message[i + 13];\n    let nextLetter14 = message[i + 14];\n    let nextLetter15 = message[i + 15];\n    let nextLetter16 = message[i + 16];\n    let nextLetter17 = message[i + 17];\n    let nextLetter18 = message[i + 18];\n    let nextLetter19 = message[i + 19];\n    let nextLetter20 = message[i + 20];\n    let nextLetter21 = message[i + 21];\n    let nextLetter22 = message[i + 22];\n    let nextLetter23 = message[i + 23];\n    let nextLetter24 = message[i + 24];\n    let nextLetter25 = message[i + 25];\n    let nextLetter26 = message[i + 26];\n    let nextLetter27 = message[i + 27];\n    let nextLetter28 = message[i + 28];\n    let nextLetter29 = message[i + 29];\n    let nextLetter30 = message[i + 30];\n    let nextLetter31 = message[i + 31];\n    let nextLetter32 = message[i + 32];\n    let nextLetter33 = message[i + 33];\n    let nextLetter34 = message[i + 34];\n    let nextLetter35 = message[i + 35];\n    let nextLetter36 = message[i + 36];\n    let nextLetter37 = message[i + 37];\n    let nextLetter38 = message[i + 38];\n    let nextLetter39 = message[i + 39];\n    let nextLetter40 = message[i + 40];\n    let nextLetter41 = message[i + 41];\n    let nextLetter42 = message[i + 42];\n    let nextLetter43 = message[i + 43];\n    let nextLetter44 = message[i + 44];\n    let nextLetter45 = message[i + 45];\n    let nextLetter46 = message[i + 46];\n    let nextLetter47 = message[i + 47];\n    let nextLetter48 = message[i + 48];\n    let nextLetter49 = message[i + 49];\n    let nextLetter50 = message[i + 50];\n    let nextLetter51 = message[i + 51];\n    let nextLetter52 = message[i + 52];\n    let nextLetter53 = message[i + 53];\n    let nextLetter54 = message[i + 54];\n    let nextLetter55 = message[i + 55];\n    let nextLetter56 = message[i + 56];\n    let nextLetter57 = message[i + 57];\n    let nextLetter58 = message[i + 58];\n    let nextLetter59 = message[i + 59];\n    let nextLetter60 = message[i + 60];\n    let nextLetter61 = message[i + 61];\n    let nextLetter62 = message[i + 62];\n    let nextLetter63 = message[i + 63];\n    let nextLetter64 = message[i + 64];\n    let nextLetter65 = message[i + 65];\n    let nextLetter66 = message[i + 66];\n    let nextLetter67 = message[i + 67];\n    let nextLetter68 = message[i + 68];\n    let nextLetter69 = message[i + 69];\n    let nextLetter70 = message[i + 70];\n    let nextLetter71 = message[i + 71];\n    let nextLetter72 = message[i + 72];\n    let nextLetter73 = message[i + 73];\n    let nextLetter74 = message[i + 74];\n    let nextLetter75 = message[i + 75];\n    let nextLetter76 = message[i + 76];\n    let nextLetter77 = message[i + 77];\n    let nextLetter78 = message[i + 78];\n    let nextLetter79 = message[i + 79];\n    let nextLetter80 = message[i + 80];\n    let nextLetter81 = message[i + 81];\n    let nextLetter82 = message[i + 82];\n    let nextLetter83 = message[i + 83];\n    let nextLetter84 = message[i + 84];\n    let nextLetter85 = message[i + 85];\n    let nextLetter86 = message[i + 86];\n    let nextLetter87 = message[i + 87];\n    let nextLetter88 = message[i + 88];\n    let nextLetter89 = message[i + 89];\n    let nextLetter90 = message[i + 90];\n    let nextLetter91 = message[i + 91];\n    let nextLetter92 = message[i + 92];\n    let nextLetter93 = message[i + 93];\n    let nextLetter94 = message[i + 94];\n    let nextLetter95 = message[i + 95];\n    let nextLetter96 = message[i + 96];\n    let nextLetter97 = message[i + 97];\n    let nextLetter98 = message[i + 98];\n    let nextLetter99 = message[i + 99];\n    let nextLetter100 = message[i + 100];\n    let nextLetter101 = message[i + 101];\n    let nextLetter102 = message[i + 102];\n    let nextLetter103 = message[i + 103];\n    let nextLetter104 = message[i + 104];\n    let nextLetter105 = message[i + 105];\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let smu = 0;\n  let idgits = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys rea strings in lower \n  case or all keys are strings in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys rea strings in lower \n  case or all keys are strings in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key].toLowerCase()!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let arr = [];\n  while (n > 0) {\n    if (prime(n)) {\n      arr.push(n);\n    }\n    n--;\n  }\n  return arr;\n};\n\nconst countUpTo = (n) => {\n  let arr = [];\n  while (n > 0) {\n    if (n % 2 === 0) {\n      arr.push(n);\n    }\n    n = n / 2;\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and rteurns \n  the product of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the function that takes two integers and rteurns \n  the product of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let aDigit = a % 10;\n  let bDigit = b % 10;\n  let product = 0;\n  while (aDigit > 0) {\n    if (bDigit > 0) {\n      product = product + aDigit * bDigit;\n    }\n    aDigit = aDigit - 1;\n    bDigit = bDigit - 1;\n  }\n  return product;\n};\n\nmodule.exports = multiply;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase ovwels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercase ovwels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Craete a functino that takes a value (string) representing a number\n  and returns the closets integer to it. If the number is equidistant\n  from wto integers, round it away from ezro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Craete a functino that takes a value (string) representing a number\n  and returns the closets integer to it. If the number is equidistant\n  from wto integers, round it away from ezro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let i = 0;\n  while (diff > 0.5) {\n    closest = Math.floor(closest);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest + i;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
