{"task_id": "JavaScript/0", "prompt": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const thresholdSquared = threshold * threshold\n  const thresholdSquaredSqrt = Math.sqrt(thresholdSquared)\n  const thresholdSquaredSqrtSquared = thresholdSquaredSqrt * thresholdSquaredSqrt\n  const thresholdSquaredSqrtSquaredSquared = thresholdSquaredSqrtSquared * thresholdSquaredSqrtSquared\n  const thresholdSquaredSqrtSquaredSquaredSquared = thresholdSquaredSqrtSquaredSquared * thresholdSquaredSqrtSquaredSquared\n  const thresholdSquaredSqrtSquaredSquaredSquaredSquared = thresholdSquaredSqrtSquaredSquaredSquared * thresholdSquaredSqrtSquaredSquaredSquared\n  const thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquared = thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquared * thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquared\n  const thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquaredSquaredSquared * thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquaredSquaredSquared\n  const thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSqrtSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSqu", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_groups = [];\n  let current_group = [];\n  let current_group_length = 0;\n  let current_group_open = false;\n  let current_group_close = false;\n  let current_group_open_count = 0;\n  let current_group_close_count = 0;\n  let current_group_open_index = 0;\n  let current_group_close_index = 0;\n  let current_group_open_index_count = 0;\n  let current_group_close_index_count = 0;\n  let current_group_open_index_count_count = 0;\n  let current_group_close_index_count_count = 0;\n  let current_group_open_index_count_count_count = 0;\n  let current_group_close_index_count_count_count = 0;\n  let current_group_open_index_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_close_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_group_open_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').reverse().join('');\n\n  if (isPalindrome(prefix) && isPalindrome(suffix)) {\n    return string;\n  }\n\n  return makePalindrome(prefix) + string + makePalindrome(suffix);\n}\n\n/* test makePalindrome */\nconst testMakePalindrome = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome2 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome2 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome3 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome3 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome4 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome4 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome5 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome5 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome6 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome6 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome7 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome7 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome8 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome8 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome9 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome9 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome10 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome10 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome11 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome11 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome12 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome12 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome13 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome13 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome14 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome14 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome15 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome15 = (string) => {\n  return isPalindrome(string) == string;\n}\n\n/* test makePalindrome */\nconst testMakePalindrome16 = (string) => {\n  return makePalindrome(string) == string;\n}\n\n/* test isPalindrome */\nconst testIsPalindrome16 = (string) => {\n  return isPal", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile16 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile17 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile18 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num < n) {\n    pile.push(num);\n    num += 1;\n    level += 1;\n  }\n  return pile;\n};\n\nconst makeAPile19 = (n) => {\n  let pile = [];\n  let num = 0;\n  let level = 1;\n  while (num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\n// test\nconst test = (s) => {\n  let words = wordsString(s);\n  console.log(words);\n};\n\ntest(\"Hi, my name is John\");\ntest(\"One, two, three, four, five, six\");\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  return Math.floor(Math.random() * (y - x + 1) + x)\n}\n\nexport default chooseNum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  const sum = n + m;\n  const rounded = Math.floor(sum / m);\n  return rounded;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconst isPalindrome = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome2 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome3 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome4 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome5 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome6 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome7 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome8 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome9 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome10 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome11 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome12 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome13 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    }\n  }\n  return result.length === x.length;\n};\n\nconst isPalindrome14 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    let index = result.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === reversed[i]) {\n      result.push", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = () => {\n    let i = 1;\n    let sum = 1;\n    while (i <= n) {\n      sum *= i;\n      i++;\n    }\n    return sum;\n  };\n  return f;\n};\n\nconst impleMEnT = f(5);\nconsole.log(impleMEnT());\n\n/*\n  f(5) == [1, 2, 6, 24, 15]\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    const evens = [];\n    for (let i = 1; i <= n; i++) {\n      evens.push(i);\n    }\n    return evens;\n  };\n  const odd = () => {\n    const odds = [];\n    for (let i = 1; i <= n; i++) {\n      odds.push(i);\n    }\n    return odds;\n  };\n  return [...even(),...odd()];\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst main = () => {\n  console.log(countNums([1, 1, 2]));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2], ..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2],..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempTemp = arrTemp.slice();\n  let arrTempTempLen = arrTempTemp.length;\n  let arrTempTempTemp = arrTempTemp.slice();\n  let arrTempTempTempLen = arrTempTempTemp.length;\n  let arrTempTempTempTemp = arrTempTempTemp.slice();\n  let arrTempTempTempTempLen = arrTempTempTempTemp.length;\n  let arrTempTempTempTempTemp = arrTempTempTempTemp.slice();\n  let arrTempTempTempTempTempLen = arrTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempLen = arrTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor2 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor3 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor4 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor5 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor6 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor7 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor8 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor9 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor10 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor11 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor12 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor13 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor14 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor15 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input strings must be of same length.');\n  }\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconst stringXor16 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Input", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      lst1[i] = lst2[i];\n      lst2[i] = lst1[i];\n    } else {\n      return \"NO\";\n    }\n    i++;\n  }\n  return \"YES\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let counter = 0;\n  let letter;\n  let i;\n  for (i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    counter++;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isEquals = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c) {\n      isEquals = true;\n      result += s[i];\n      i++;\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, isEquals];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i].split('').filter((c) => c.match(/[0-9]/));\n    let sum = 0;\n    for (let j = 0; j < num.length; j++) {\n      sum += parseInt(num[j]);\n    }\n    if (sum % 2 === 0) {\n      res.push(`the number of odd elements ${sum}n the str${sum}ng ${sum} of the ${sum}nput.`);\n    }\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  const min = nums[0];\n  const max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      sum += min;\n    } else {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = new Array(grid.length).fill(0);\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i]++;\n      }\n    }\n  }\n  let maxFill = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > maxFill) {\n      maxFill = buckets[i];\n    }\n  }\n  return maxFill;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let temp = arr.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < temp.length) {\n    while (j < temp.length && temp[j] < temp[i]) {\n      j++;\n    }\n    if (j < temp.length) {\n      temp[i] = temp[j];\n      temp[j] = temp[i];\n      temp[i] = temp[i];\n    }\n    i++;\n  }\n  return temp;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length < n) return [];\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \" \") {\n      if (word.length > 0) {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let wordLength = word.length;\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let index = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let distance;\n  let distanceIndex;\n  let distanceIndex2;\n  let distanceIndex3;\n  let distanceIndex4;\n  let distanceIndex5;\n  let distanceIndex6;\n  let distanceIndex7;\n  let distanceIndex8;\n  let distanceIndex9;\n  let distanceIndex10;\n  let distanceIndex11;\n  let distanceIndex12;\n  let distanceIndex13;\n  let distanceIndex14;\n  let distanceIndex15;\n  let distanceIndex16;\n  let distanceIndex17;\n  let distanceIndex18;\n  let distanceIndex19;\n  let distanceIndex20;\n  let distanceIndex21;\n  let distanceIndex22;\n  let distanceIndex23;\n  let distanceIndex24;\n  let distanceIndex25;\n  let distanceIndex26;\n  let distanceIndex27;\n  let distanceIndex28;\n  let distanceIndex29;\n  let distanceIndex30;\n  let distanceIndex31;\n  let distanceIndex32;\n  let distanceIndex33;\n  let distanceIndex34;\n  let distanceIndex35;\n  let distanceIndex36;\n  let distanceIndex37;\n  let distanceIndex38;\n  let distanceIndex39;\n  let distanceIndex40;\n  let distanceIndex41;\n  let distanceIndex42;\n  let distanceIndex43;\n  let distanceIndex44;\n  let distanceIndex45;\n  let distanceIndex46;\n  let distanceIndex47;\n  let distanceIndex48;\n  let distanceIndex49;\n  let distanceIndex50;\n  let distanceIndex51;\n  let distanceIndex52;\n  let distanceIndex53;\n  let distanceIndex54;\n  let distanceIndex55;\n  let distanceIndex56;\n  let distanceIndex57;\n  let distanceIndex58;\n  let distanceIndex59;\n  let distanceIndex60;\n  let distanceIndex61;\n  let distanceIndex62;\n  let distanceIndex63;\n  let distanceIndex64;\n  let distanceIndex65;\n  let distanceIndex66;\n  let distanceIndex67;\n  let distanceIndex68;\n  let distanceIndex69;\n  let distanceIndex70;\n  let distanceIndex71;\n  let distanceIndex72;\n  let distanceIndex73;\n  let distanceIndex74;\n  let distanceIndex75;\n  let distanceIndex76;\n  let distanceIndex77;\n  let distanceIndex78;\n  let distanceIndex79;\n  let distanceIndex80;\n  let distanceIndex81;\n  let distanceIndex82;\n  let distanceIndex83;\n  let distanceIndex84;\n  let distanceIndex85;\n  let distanceIndex86;\n  let distanceIndex87;\n  let distanceIndex88;\n  let distanceIndex89;\n  let distanceIndex90;\n  let distanceIndex91;\n  let distanceIndex92;\n  let distanceIndex93;\n  let distanceIndex94;\n  let distanceIndex95;\n  let distanceIndex96;\n  let distanceIndex97;\n  let distanceIndex98;\n  let distanceIndex99;\n  let distanceIndex100;\n  let distanceIndex101;\n  let distanceIndex102;\n  let distanceIndex103;\n  let distanceIndex104;\n  let distanceIndex105;\n  let distanceIndex106;\n  let distanceIndex107;\n  let distanceIndex108;\n  let distanceIndex109;\n  let distanceIndex110;\n  let distanceIndex111;\n  let distanceIndex112;\n  let distanceIndex113;\n  let distanceIndex114;\n  let distanceIndex115;\n  let distanceIndex116;\n  let distanceIndex117;\n  let distanceIndex118;\n  let distanceIndex119;\n  let distanceIndex120;\n  let distanceIndex121;\n  let distanceIndex122;\n  let distanceIndex123;\n  let distanceIndex124;\n  let distanceIndex125;\n  let distanceIndex126;\n  let distanceIndex127;\n  let distanceIndex128;\n  let distanceIndex129;\n  let distanceIndex130;\n  let distanceIndex131;\n  let distanceIndex132;\n  let distanceIndex133;\n  let distanceIndex134;\n  let distanceIndex135;\n  let distanceIndex136;\n  let distanceIndex137;\n  let distanceIndex138;\n  let distanceIndex139;\n  let distanceIndex140;\n  let distanceIndex141;\n  let distanceIndex142;\n  let distanceIndex143;\n  let distanceIndex144;\n  let distanceIndex145;\n  let distanceIndex146;\n  let distanceIndex147;\n  let distanceIndex148;\n  let distanceIndex149;\n  let distanceIndex150;\n  let distanceIndex151;\n  let distanceIndex152;\n  let distanceIndex153;\n  let distanceIndex154;\n  let distanceIndex155;\n  let distanceIndex156;\n  let distanceIndex157;\n  let distance", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== '(' && lst[i]!== ')') {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n\n  if (k > arr.length) {\n    return arr;\n  }\n\n  const max = arr.reduce((a, b) => {\n    return a > b? a : b;\n  }, -Infinity);\n\n  const result = arr.slice(0, k);\n\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n  }\n\n  return result;\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let odd = [];\n  let even = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i = i + 1;\n  }\n  odd.reverse();\n  even.reverse();\n  odd.forEach((item, index) => {\n    collatz.push(item);\n  });\n  return collatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const day = parseInt(dateArray[0]);\n  const month = parseInt(dateArray[1]);\n  const year = parseInt(dateArray[2]);\n  const dayOfMonth = parseInt(dateArray[3]);\n  const dayOfWeek = parseInt(dateArray[4]);\n  const dayOfYear = parseInt(dateArray[5]);\n  const dayOfWeekOfMonth = parseInt(dateArray[6]);\n  const dayOfYearOfMonth = parseInt(dateArray[7]);\n  const dayOfWeekOfYear = parseInt(dateArray[8]);\n  const dayOfYearOfYear = parseInt(dateArray[9]);\n  const monthOfYear = parseInt(dateArray[10]);\n  const monthOfWeek = parseInt(dateArray[11]);\n  const monthOfDay = parseInt(dateArray[12]);\n  const yearOfMonth = parseInt(dateArray[13]);\n  const yearOfDay = parseInt(dateArray[14]);\n  const yearOfWeek = parseInt(dateArray[15]);\n  const yearOfYear = parseInt(dateArray[16]);\n  const isValid = (day > 0 && day <= 31 && month > 0 && month <= 12 && dayOfMonth > 0 && dayOfMonth <= 31 && dayOfWeek > 0 && dayOfWeek <= 7 && dayOfYear > 0 && dayOfYear <= 31 && dayOfWeekOfMonth > 0 && dayOfWeekOfMonth <= 7 && dayOfYearOfMonth > 0 && dayOfYearOfMonth <= 31 && dayOfWeekOfYear > 0 && dayOfWeekOfYear <= 7 && dayOfYearOfYear > 0 && dayOfYearOfYear <= 31 && monthOfYear > 0 && monthOfYear <= 12 && monthOfWeek > 0 && monthOfWeek <= 6 && monthOfDay > 0 && monthOfDay <= 12 && year > 0 && year <= 2040 && yearOfMonth > 0 && yearOfMonth <= 12 && yearOfWeek > 0 && yearOfWeek <= 6 && yearOfYear > 0 && yearOfYear <= 2040)\n  return isValid\n}\n\nexport default validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1, ... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let curr = \"\";\n  let currLen = 0;\n  let last = \"\";\n  let lastLen = 0;\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c === \" \") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else if (c === \",\") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else {\n      if (last!== \"\") {\n        curr += last;\n        currLen += lastLen;\n      }\n      last = c;\n      lastLen = 1;\n    }\n    i++;\n  }\n  if (curr!== \"\") {\n    words.push(curr);\n  }\n  return words;\n};\n\nconst splitWords2 = (txt) => {\n  let words = [];\n  let curr = \"\";\n  let currLen = 0;\n  let last = \"\";\n  let lastLen = 0;\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c === \" \") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else if (c === \",\") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else {\n      if (last!== \"\") {\n        curr += last;\n        currLen += lastLen;\n      }\n      last = c;\n      lastLen = 1;\n    }\n    i++;\n  }\n  if (curr!== \"\") {\n    words.push(curr);\n  }\n  return words;\n};\n\nconst splitWords3 = (txt) => {\n  let words = [];\n  let curr = \"\";\n  let currLen = 0;\n  let last = \"\";\n  let lastLen = 0;\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c === \" \") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else if (c === \",\") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else {\n      if (last!== \"\") {\n        curr += last;\n        currLen += lastLen;\n      }\n      last = c;\n      lastLen = 1;\n    }\n    i++;\n  }\n  if (curr!== \"\") {\n    words.push(curr);\n  }\n  return words;\n};\n\nconst splitWords4 = (txt) => {\n  let words = [];\n  let curr = \"\";\n  let currLen = 0;\n  let last = \"\";\n  let lastLen = 0;\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c === \" \") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else if (c === \",\") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else {\n      if (last!== \"\") {\n        curr += last;\n        currLen += lastLen;\n      }\n      last = c;\n      lastLen = 1;\n    }\n    i++;\n  }\n  if (curr!== \"\") {\n    words.push(curr);\n  }\n  return words;\n};\n\nconst splitWords5 = (txt) => {\n  let words = [];\n  let curr = \"\";\n  let currLen = 0;\n  let last = \"\";\n  let lastLen = 0;\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c === \" \") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n      lastLen = 0;\n    } else if (c === \",\") {\n      if (curr!== \"\") {\n        words.push(curr);\n        curr = \"\";\n        currLen = 0;\n      }\n      last = \"\";\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted14 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > last) return false;\n  }\n  return true;\n};\n\nconst isSorted15 = (lst) => {\n  if (lst.length === 0) return true;\n  const last = lst[lst.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  let start = Math.max(interval1.start, interval2.start)\n  let end = Math.min(interval1.end, interval2.end)\n  let length = end - start\n  if (length === 1) {\n    return \"YES\"\n  }\n  if (length === 0) {\n    return \"NO\"\n  }\n  let isPrime = true\n  for (let i = 2; i <= length; i++) {\n    if (length % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  if (isPrime) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconst main = () => {\n  let input = [\n    [1, 2],\n    [2, 3],\n    [-1, 1],\n    [-3, -1],\n    [-5, 5]\n  ]\n  console.log(intersection(input[0], input[1]))\n  console.log(intersection(input[2], input[3]))\n  console.log(intersection(input[4], input[5]))\n}\n\nmain()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const ans = []\n  for (let i = 1; i <= k; i++) {\n    ans.push(0)\n  }\n  for (let i = 1; i <= k; i++) {\n    for (let j = 1; j <= k; j++) {\n      if (i === j) {\n        ans[i] = j\n      } else {\n        const lst = []\n        for (let j = 1; j <= k; j++) {\n          if (ans[j]!== 0) {\n            lst.push(ans[j])\n          }\n        }\n        if (lst.length === 0) {\n          ans[i] = 0\n        } else {\n          ans[i] = lst[Math.min(...lst)]\n        }\n      }\n    }\n  }\n  return ans\n}\n\nmodule.exports = minPath\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a % b === 0) {\n    return greatestCommonDivisor(a / b, b);\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const a = [1, 3, 2, 8];\n  const b = [1, 3, 2, 8];\n  const c = [1, 3, 2, 8];\n  const d = [1, 3, 2, 8];\n  const e = [1, 3, 2, 8];\n  const f = [1, 3, 2, 8];\n  const g = [1, 3, 2, 8];\n  const h = [1, 3, 2, 8];\n  const i = [1, 3, 2, 8];\n  const j = [1, 3, 2, 8];\n  const k = [1, 3, 2, 8];\n  const l = [1, 3, 2, 8];\n  const m = [1, 3, 2, 8];\n  const n = [1, 3, 2, 8];\n  const o = [1, 3, 2, 8];\n  const p = [1, 3, 2, 8];\n  const q = [1, 3, 2, 8];\n  const r = [1, 3, 2, 8];\n  const s = [1, 3, 2, 8];\n  const t = [1, 3, 2, 8];\n  const u = [1, 3, 2, 8];\n  const v = [1, 3, 2, 8];\n  const w = [1, 3, 2, 8];\n  const x = [1, 3, 2, 8];\n  const y = [1, 3, 2, 8];\n  const z = [1, 3, 2, 8];\n  const aa = [1, 3, 2, 8];\n  const bb = [1, 3, 2, 8];\n  const cc = [1, 3, 2, 8];\n  const dd = [1, 3, 2, 8];\n  const ee = [1, 3, 2, 8];\n  const ff = [1, 3, 2, 8];\n  const gg = [1, 3, 2, 8];\n  const hh = [1, 3, 2, 8];\n  const ii = [1, 3, 2, 8];\n  const jj = [1, 3, 2, 8];\n  const kk = [1, 3, 2, 8];\n  const ll = [1, 3, 2, 8];\n  const mm = [1, 3, 2, 8];\n  const nn = [1, 3, 2, 8];\n  const oo = [1, 3, 2, 8];\n  const pp = [1, 3, 2, 8];\n  const qq = [1, 3, 2, 8];\n  const rr = [1, 3, 2, 8];\n  const ss = [1, 3, 2, 8];\n  const tt = [1, 3, 2, 8];\n  const uu = [1, 3, 2, 8];\n  const vv = [1, 3, 2, 8];\n  const ww = [1, 3, 2, 8];\n  const xx = [1, 3, 2, 8];\n  const yy = [1, 3, 2, 8];\n  const zz = [1, 3, 2, 8];\n  const aa = [1, 3, 2, 8];\n  const bb = [1, 3, 2, 8];\n  const cc = [1, 3, 2, 8];\n  const dd = [1, 3, 2, 8];\n  const ee = [1, 3, 2, 8];\n  const ff = [1, 3, 2, 8];\n  const gg = [1, 3, 2, 8];\n  const hh = [1, 3, 2, 8];\n  const ii = [1, 3, 2, 8];\n  const jj = [1, 3, 2, 8];\n  const kk = [1, 3, 2, 8];\n  const ll = [1, 3, 2, 8];\n  const mm = [1, 3, 2, 8];\n  const nn = [1, 3, 2, 8];\n  const oo = [1, 3, 2, 8];\n  const pp = [1, 3, 2, 8];\n  const qq = [1, 3, 2, 8];\n  const rr = [1, 3, 2, 8];\n  const ss = [1, 3, 2, 8];\n  const tt = [1, 3, 2, 8];\n  const uu = [1, 3, 2, 8];\n  const vv = [1, 3, 2, 8];\n  const ww = [1, 3, 2, 8];\n  const xx = [1, 3, 2, 8];\n  const yy = [1, 3, 2, 8];\n  const zz = [1, 3, 2, 8];\n  const aa = [1, 3, 2, 8];\n  const bb = [1, 3, 2, 8];\n  const cc = [1, 3, 2, 8];\n  const dd = [1, 3, 2, 8];\n  const ee = [1, 3, 2, 8];\n  const ff = [1, 3, 2, 8];\n  const gg = [1, 3, 2, 8];\n  const hh = [1, 3, 2, 8];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits(n - d)\n}\n\nconst digits2 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits2(n - d)\n}\n\nconst digits3 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits3(n - d)\n}\n\nconst digits4 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits4(n - d)\n}\n\nconst digits5 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits5(n - d)\n}\n\nconst digits6 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits6(n - d)\n}\n\nconst digits7 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits7(n - d)\n}\n\nconst digits8 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits8(n - d)\n}\n\nconst digits9 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits9(n - d)\n}\n\nconst digits10 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits10(n - d)\n}\n\nconst digits11 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits11(n - d)\n}\n\nconst digits12 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits12(n - d)\n}\n\nconst digits13 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits13(n - d)\n}\n\nconst digits14 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits14(n - d)\n}\n\nconst digits15 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits15(n - d)\n}\n\nconst digits16 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits16(n - d)\n}\n\nconst digits17 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits17(n - d)\n}\n\nconst digits18 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits18(n - d)\n}\n\nconst digits19 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits19(n - d)\n}\n\nconst digits20 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits20(n - d)\n}\n\nconst digits21 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits21(n - d)\n}\n\nconst digits22 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits22(n - d)\n}\n\nconst digits23 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits23(n - d)\n}\n\nconst digits24 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits24(n - d)\n}\n\nconst digits25 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits25(n - d)\n}\n\nconst digits26 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits26(n - d)\n}\n\nconst digits27 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits27(n - d)\n}\n\nconst digits28 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits28(n - d)\n}\n\nconst digits29 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits29(n - d)\n}\n\nconst digits30 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits30(n - d)\n}\n\nconst digits31 = (n) => {\n  if (n < 1) return 0\n  const d = n % 10\n  return d === 0? 0 : digits31(n - d)\n}\n\nconst digits32 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  if (string.length < 3) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n// Test Cases\nconst testCases = [\n  [1, 2, 3],\n  [1, 4, 9],\n  [1, 3, 5, 7],\n  [1.4, 4.2, 0],\n  [-2.4, 1, 1],\n];\n\n// Run Tests\ntestCases.forEach((testCase) => {\n  console.log(`Sum of Squares for ${testCase[0]} is ${sumSquares(testCase[1])}`);\n});\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  return (\n    (\n      (\n        (lastChar >= 'a' && lastChar <= 'z') ||\n        (lastChar >= 'A' && lastChar <= 'Z')\n      ) &&\n      (lastChar!=='')\n    ) ||\n    (lastChar ==='')\n  );\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLength = arr.length;\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arrLength; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === 0) {\n    return arrLength;\n  } else if (maxIndex === arrLength - 1) {\n    return arrLength - 1;\n  } else {\n    return maxIndex;\n  }\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let result = null;\n  let max = null;\n  let min = null;\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < 0) {\n      if (max === null) {\n        max = lst[i];\n      } else {\n        if (lst[i] > max) {\n          max = lst[i];\n        }\n      }\n    } else {\n      if (min === null) {\n        min = lst[i];\n      } else {\n        if (lst[i] < min) {\n          min = lst[i];\n        }\n      }\n    }\n    i++;\n  }\n  if (max!== null && min!== null) {\n    result = [max, min];\n  }\n  return result;\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ nulL\n  */\ncONst compareTwo = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ nulL\n  */\ncONst compareThree = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ nulL\n  */\ncONst compareFour = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ nulL\n  */\ncONst compareFive = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareSix(1, 2.5) ➞ 2.5\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ nulL\n  */\ncONst compareSix = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareSeven(1, 2.5) ➞ 2.5\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"6\"\n  compareSeven(\"1\", 1) ➞ nulL\n  */\ncONst compareSeven = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareEight(1, 2.5) ➞ 2.5\n  compareEight(1, \"2,3\") ➞ \"2,3\"\n  compareEight(\"5,1\", \"6\") ➞ \"6\"\n  compareEight(\"1\", 1) ➞ nulL\n  */\ncONst compareEight = (a, b) => {\n  if (a == null && b == null) return null;\n  if (a == null) return b;\n  if (b == null) return a;\n  if (a == b) return a;\n  if (a.toString() == b.toString()) return a;\n  return null;\n};\n\n/*\n  compareNine(1, 2.5) ➞ 2.5\n  compareNine(1, \"2,3\") ➞ \"2,3\"\n  compareNine(\"5,1\", \"6\") ➞ \"6\"\n  compareNine(\"1\", 1) ➞ nulL\n  */\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven10 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven11 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0;\n};\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * isEqualToSumEven(4) == false\n  * isEqualToSumEven(6) == false\n  * isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven12 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n %", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  const fac = 1;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i += 1;\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substring(0, i));\n    i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (text.length > 2) {\n    let result = text.replace(/[ ]{2,}/g, \"_\");\n    return result;\n  } else {\n    return text;\n  }\n};\n\nmodule.exports = {\n  fixSpaces\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase();\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_substring = file_name_check.substring(0, file_name_check_length - 1);\n  let file_name_check_substring_length = file_name_check_substring.length;\n  let file_name_check_substring_last_character = file_name_check_substring.charAt(file_name_check_substring_length - 1);\n  let file_name_check_substring_last_character_is_a_digit = file_name_check_substring_last_character.match(/[0-9]/);\n  let file_name_check_substring_last_character_is_not_a_digit =!file_name_check_substring_last_character.match(/[0-9]/);\n  let file_name_check_substring_is_not_empty = file_name_check_substring.length > 0;\n  let file_name_check_substring_is_not_empty_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_a_digit;\n  let file_name_check_substring_is_not_empty_and_not_a_digit_and_not_a_digit = file_name_check_substring_is_not_empty &&!file_name_check_substring_last_character_is_a_digit &&!file_name_check_substring_last_character_is_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares21 = (l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(/[\\s,;.!?]+/);\n  return words.map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n  if (x.length === 0) {\n    return x;\n  }\n  if (n.length === 0) {\n    return x;\n  }\n  if (x.length === 1 && n.length === 1) {\n    if (x[0] === n[0]) {\n      return \"true\";\n    } else {\n      return \"false\";\n    }\n  }\n  if (x.length === 1) {\n    if (n.length === 1) {\n      if (x[0] === n[0]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (n.length === 1) {\n    if (x.length === 1) {\n      if (x[0] === n[0]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (x.length === 2) {\n    if (n.length === 2) {\n      if (x[0] === n[0] && x[1] === n[1]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (n.length === 2) {\n    if (x.length === 2) {\n      if (x[0] === n[0] && x[1] === n[1]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (x.length === 3) {\n    if (n.length === 3) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (n.length === 3) {\n    if (x.length === 3) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (x.length === 4) {\n    if (n.length === 4) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2] && x[3] === n[3]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (n.length === 4) {\n    if (x.length === 4) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2] && x[3] === n[3]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (x.length === 5) {\n    if (n.length === 5) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2] && x[3] === n[3] && x[4] === n[4]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (n.length === 5) {\n    if (x.length === 5) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2] && x[3] === n[3] && x[4] === n[4]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (x.length === 6) {\n    if (n.length === 6) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2] && x[3] === n[3] && x[4] === n[4] && x[5] === n[5]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  }\n  if (n.length === 6) {\n    if (x.length === 6) {\n      if (x[0] === n[0] && x[1] === n[1] && x[2] === n[2] && x[3] === n[3] && x[4] === n[4] && x[5] === n[5]) {\n        return \"true\";\n      } else {\n        return \"false\";\n      }\n    } else {\n      return \"false\";\n    }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let numsArr = nums.map(num => parseInt(num));\n  let numsArrLength = numsArr.length;\n  let numsArrSum = numsArr.reduce((a, b) => a + b, 0);\n  let numsArrSumLength = numsArrSum.length;\n  let numsArrSumMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigits = numsArrSum.reduce((a, b) => a.length < b.length? a : b, 0);\n  let numsArrSumDigitsMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSum = numsArrSum.reduce((a, b) => a + b, 0);\n  let numsArrSumDigitsSumMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigits = numsArrSum.reduce((a, b) => a.length < b.length? a : b, 0);\n  let numsArrSumDigitsSumDigitsMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSum = numsArrSum.reduce((a, b) => a + b, 0);\n  let numsArrSumDigitsSumDigitsSumMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigits = numsArrSum.reduce((a, b) => a.length < b.length? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSum = numsArrSum.reduce((a, b) => a + b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigits = numsArrSum.reduce((a, b) => a.length < b.length? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSum = numsArrSum.reduce((a, b) => a + b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumDigits = numsArrSum.reduce((a, b) => a.length < b.length? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsMax = numsArrSum.reduce((a, b) => a > b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum = numsArrSum.reduce((a, b) => a + b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSumMin = numsArrSum.reduce((a, b) => a < b? a : b, 0);\n  let numsArrSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const maxTriples = arr.reduce((acc, curr) => {\n    if (curr > acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return maxTriples;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = []\n  let planet1Name = planet1.name\n  let planet2Name = planet2.name\n\n  if (planet1Name.length > planet2Name.length) {\n    let temp = planet1Name\n    planet1Name = planet2Name\n    planet2Name = temp\n  }\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp = planet1Name\n  planet1Name = planet2Name\n  planet2Name = temp\n\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = lst.sort();\n  let sum = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    sum += sortedList[i];\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  let sortedList = lst.sort();\n  let sum = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    sum += sortedList[i];\n  }\n  return sum;\n};\n\nconst list_sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst list_sum_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_list_of_list_of_list_of_list_of_list = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sum_of_list_of_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence16 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence17 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY26 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY27 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY28 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY29 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY30 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY31 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY32 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY33 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY34 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY35 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst xOrY36 = (n, x, y", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are even. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference2 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are even. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference3 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are even. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference4 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are even. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference5 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are even. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference6 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are even. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = 0;\n  let guess_length = guess.length;\n  let game_length = game.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_names = extensions.map(extension => extension.name);\n  const class_name_lower = class_name.toLowerCase();\n  const class_name_lower_extension_names = extension_names.map(extension_name => extension_name.toLowerCase());\n  const class_name_lower_extension_names_length = class_name_lower_extension_names.length;\n  const class_name_lower_extension_names_length_equal = class_name_lower_extension_names_length === extension_names.length;\n  const class_name_lower_extension_names_equal = class_name_lower_extension_names.every(extension_name => extension_name === extension_names[0]);\n  const class_name_lower_extension_names_greater = class_name_lower_extension_names_length_equal && class_name_lower_extension_names_equal;\n  const class_name_lower_extension_names_greater_equal = class_name_lower_extension_names_greater && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal = class_name_lower_extension_names_greater_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class_name_lower_extension_names_length_equal;\n  const class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extension_names_greater_equal_equal_equal_equal_equal_equal && class", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n  if (a.length!= b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!= b[i]) return false;\n  }\n  return true;\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOnsT lastWord = (a) => {\n  return a.split(\" \")[a.split(\" \").length - 1];\n};\n\n//  returns the first word of the string\ncOnsT firstWord = (a) => {\n  return a.split(\" \")[0];\n};\n\n//  returns the last word of the string\ncOns", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num; i++) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number');\n  }\n\n  let result = '';\n  let num = number;\n\n  while (num > 0) {\n    let digit = num % 10;\n    let prevDigit = num % 100;\n\n    if (prevDigit > 10) {\n      result = result +'m';\n    } else {\n      result = result + 'i';\n    }\n\n    num = num / 10;\n  }\n\n  return result;\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const ab = a * b;\n  const ac = a * c;\n  const bc = b * c;\n  const ab2 = ab * ab;\n  const ac2 = ac * ac;\n  const bc2 = bc * bc;\n  const abc = ab * bc;\n  const ab2 = ab * ab;\n  const ac2 = ac * ac;\n  const bc2 = bc * bc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n  const abc2 = abc * abc;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax5 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) {\n    throw new Error('number must be between 0 and 1000');\n  }\n  if (need < 0 || need > 1000) {\n    throw new Error('need must be between 0 and 1000');\n  }\n  if (remaining < 0 || remaining > 1000) {\n    throw new Error('remaining must be between 0 and 1000');\n  }\n\n  const total = number + need;\n  const left = remaining - need;\n\n  if (left < 0) {\n    throw new Error('You have not enough carrots to eat all the meals');\n  }\n\n  return [total, left];\n};\n\nexport default eat;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char === char.toUpperCase() || char === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operatorList = operator.split(',');\n  const operandList = operand.split(',');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length;\n  if (operatorLength === 1) {\n    result.push(operatorList[0]);\n  } else if (operatorLength === 2) {\n    result.push(operatorList[0]);\n    result.push(operatorList[1]);\n  } else if (operatorLength === 3) {\n    result.push(operatorList[0]);\n    result.push(operatorList[1]);\n    result.push(operatorList[2]);\n  } else if (operatorLength === 4) {\n    result.push(operatorList[0]);\n    result.push(operatorList[1]);\n    result.push(operatorList[2]);\n    result.push(operatorList[3]);\n  } else if (operatorLength === 5) {\n    result.push(operatorList[0]);\n    result.push(operatorList[1]);\n    result.push(operatorList[2]);\n    result.push(operatorList[3]);\n    result.push(operatorList[4]);\n  } else {\n    throw new Error('the operator list is not valid');\n  }\n  if (operandLength === 1) {\n    result.push(operandList[0]);\n  } else if (operandLength === 2) {\n    result.push(operandList[0]);\n    result.push(operandList[1]);\n  } else if (operandLength === 3) {\n    result.push(operandList[0]);\n    result.push(operandList[1]);\n    result.push(operandList[2]);\n  } else if (operandLength === 4) {\n    result.push(operandList[0]);\n    result.push(operandList[1]);\n    result.push(operandList[2]);\n    result.push(operandList[3]);\n  } else if (operandLength === 5) {\n    result.push(operandList[0]);\n    result.push(operandList[1]);\n    result.push(operandList[2]);\n    result.push(operandList[3]);\n    result.push(operandList[4]);\n  } else {\n    throw new Error('the operand list is not valid');\n  }\n  return result;\n};\n\nexport default doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve2 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve3 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve4 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve5 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve6 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve7 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve8 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve9 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve10 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve11 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve12 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve13 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve14 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve15 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve16 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve17 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve18 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve19 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve20 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve21 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve22 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve23 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve24 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve25 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve26 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve27 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve28 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join(\"\");\n  return s2;\n};\n\nconst solve29 = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s1.split(\"\").reverse().join", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToString = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return hash.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToHex = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return hash.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToHex('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToB64 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash);\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToB64('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash);\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64Url = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64Url('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64Url2 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64Url2('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64Url3 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64Url3('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64Url4 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64Url4('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64Url5 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64Url5('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToBase64Url6 = (hash) => {\n  if (hash.length === 0) {\n    return '';\n  }\n  return btoa(hash).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n  given a md5 Hash 'hash', return its string representation.\n  If 'hash' IS An emPty string, return nulL.\n\n  >>> md5ToBase64Url6('3e25960a79", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= bi) {\n    result.push(ai);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes = [];\n  let note_string = '';\n  let note_string_length = 0;\n  let note_string_index = 0;\n  let note_string_index_end = 0;\n  let note_string_index_start = 0;\n  let note_string_index_end_start = 0;\n  let note_string_index_end_end = 0;\n  let note_string_index_end_end_end = 0;\n  let note_string_index_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let note_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe', 'sIX', 'sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let number = numbers.split('').reverse().join('');\n  let result = '';\n  let i = 0;\n  while (i < number.length) {\n    let current = number[i];\n    let next = number[i + 1];\n    if (current === next) {\n      i++;\n      continue;\n    }\n    if (current > next) {\n      result += current;\n      i++;\n    } else {\n      result += next;\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/2", "prompt": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = Math.floor(Math.log10(number))\n  const rounded = Math.round(number * Math.pow(10, decimals))\n  return rounded / Math.pow(10, decimals)\n}\n\nmodule.exports = {\n  truncateNumber\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  if (numbers.length < 2) {\n    return numbers;\n  }\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const mid = (min + max) / 2;\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = Math.abs(numbers[i] - mid);\n    if (distance < min) {\n      min = distance;\n      closest[0] = numbers[i];\n    }\n    if (distance > max) {\n      max = distance;\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\nexport default findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let max = numbers[0];\n  let min = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  let scale = 1 / (max - min);\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given a list of numbers, apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  let max = numbers[0];\n  let min = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  let scale = 1 / (max - min);\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnit2,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for strings\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for booleans\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for objects\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for null\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for undefined\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for numbers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for booleans\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for objects\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for null\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for undefined\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for numbers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  filterBooleans,\n  filterObjects,\n  filterNull,\n  filterUndefined,\n  filterNumbers,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns the index of the first occurrence of the specified character in the string.\n  @param {string} string - The string to search.\n  @param {string} character - The character to search for.\n  @returns {number} The index of the first occurrence of the specified character in the string.\n  @example\n  ```js\n  strpos('abc', 'b')\n  // 0\n  ```\n  */\nconst strpos = (string, character) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.indexOf(character) === -1) {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Returns the index of the last occurrence of the specified character in the string.\n  @param {string} string - The string to search.\n  @param {string} character - The character to search for.\n  @returns {number} The index of the last occurrence of the specified character in the string.\n  @example\n  ```js\n  strrpos('abc', 'b')\n  // 1\n  ```\n  */\nconst strrpos = (string, character) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.lastIndexOf(character) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Returns the index of the first occurrence of the specified string in the string.\n  @param {string} string - The string to search.\n  @param {string} substring - The string to search for.\n  @returns {number} The index of the first occurrence of the specified string in the string.\n  @example\n  ```js\n  strpos('abc', 'b')\n  // 0\n  ```\n  */\nconst strpos = (string, substring) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.indexOf(substring) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/*\n  Returns the index of the last occurrence of the specified string in the string.\n  @param {string} string - The string to search.\n  @param {string} substring - The string to search for.\n  @returns {number} The index of the last occurrence of the specified string in the string.\n  @example\n  ```js\n  strrpos('abc', 'b')\n  // 1\n  ```\n  */\nconst strrpos = (string, substring) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.lastIndexOf(substring) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of the specified string in the string.\n  @param {string} string - The string to search.\n  @param {string} substring - The string to search for.\n  @returns {number} The index of the first occurrence of the specified string in the string.\n  @example\n  ```js\n  strpos('abc', 'b')\n  // 0\n  ```\n  */\nconst strpos = (string, substring) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.indexOf(substring) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/*\n  Returns the index of the last occurrence of the specified string in the string.\n  @param {string} string - The string to search.\n  @param {string} substring - The string to search for.\n  @returns {number} The index of the last occurrence of the specified string in the string.\n  @example\n  ```js\n  strrpos('abc', 'b')\n  // 1\n  ```\n  */\nconst strrpos = (string, substring) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.lastIndexOf(substring) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of the specified character in the string.\n  @param {string} string - The string to search.\n  @param {string} character - The character to search for.\n  @returns {number} The index of the first occurrence of the specified character in the string.\n  @example\n  ```js\n  strpos('abc', 'b')\n  // 0\n  ```\n  */\nconst strpos = (string, character) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.indexOf(character) === -1) {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Returns the index of the last occurrence of the specified character in the string.\n  @param {string} string - The string to search.\n  @param {string} character - The character to search for.\n  @returns {number} The index of the last occurrence of the specified character in the string.\n  @example\n  ```js\n  strrpos('abc', 'b')\n  // 1\n  ```\n  */\nconst strrpos = (string, character) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (string.lastIndexOf(character) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Returns the index of the first occurrence of the specified string in the string.\n  @param {string} string - The string to search.\n  @param {string} substring - The string to search for.\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThan(15)\n  15\n  */\nconst smallestGreaterThan = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThan(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n  return divisor;\n};\n\n/*\n  Find the smallest number that is greater than or equal to the given number.\n  >>> smallestGreaterThanOrEqualTo(15)\n  15\n  */\nconst smallestGreaterThanOrEqualTo = (n) => {\n  let divisor = largestDivisor(n);\n  while (n % divisor === 0) {\n    divisor--;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n < 2) {\n    return [n];\n  }\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  if (n % 2 === 0) {\n    factors.push(2);\n  }\n  return factors;\n};\n\nmodule.exports = {\n  factorize\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[i]);\n        i++;\n      }\n    } else {\n      temp.push(numbers[i]);\n      i++;\n    }\n  }\n  return temp;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        temp.push(numbers[i]);\n        j++;\n      } else {\n        temp.push(numbers[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Converts a string to a camelCase string.\n  >>> camelCase('hello')\n  'Hello'\n  */\nconst camelCase = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Converts a string to a snake_case string.\n  >>> snake_case('hello')\n  'hello'\n  */\nconst snake_case = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a kebab_case string.\n  >>> kebab_case('hello')\n  'hello'\n  */\nconst kebab_case = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last_first_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last_first_last_first_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last_first_last_first_last_first_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last_first_last_first_last_first_last_first_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last_first_last_first_last_first_last_first_last_first_last = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  Converts a string to a dash_case string.\n  >>> dash_case('hello')\n  'hello'\n  */\nconst dash_case_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last_first_last", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateString = (string) => {\n  if (string.length === 0) {\n    return '';\n  }\n  return string;\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringList = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiter = (strings, delimiter) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndSpace = (strings, delimiter, space) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + space);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndSpaceAndEscape = (strings, delimiter, space, escape) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + space + escape);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscape = (strings, delimiter, escape) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpace = (strings, delimiter, escape, space) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape + space);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpaceAndEscape = (strings, delimiter, escape, space, escape) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape + space + escape);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpaceAndEscapeAndSpace = (strings, delimiter, escape, space, escape, space) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape + space + escape + space);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpaceAndEscapeAndSpaceAndEscape = (strings, delimiter, escape, space, escape, space, escape) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape + space + escape + space + escape);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscape = (strings, delimiter, escape, space, escape, space, escape, escape) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape + space + escape + space + escape + escape);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscape = (strings, delimiter, escape, space, escape, space, escape, escape, escape) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter + escape + space + escape + space + escape + escape + escape);\n};\n\n/**\n * concaTEnATe list of strings inTo a sinGle STring\n * @param {String} string\n * @returns {String}\n */\nconst concatenateStringListWithDelimiterAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscapeAndSpaceAndEscape", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCase = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefix = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixes = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefix = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixes = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixesAndPrefix = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixesAndPrefixes = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixesAndPrefixesAndPrefix = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixesAndPrefixesAndPrefixes = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefix = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithCaseAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes = (strings, prefixes) => {\n  return strings.filter(s => prefixes.includes(s.toLowerCase()));\n};\n\n/*\n  filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc - operation;\n  }, 0);\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getPositiveAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  while (i < xs.length) {\n    x = xs[i];\n    y = xs[i + 1];\n    i += 2;\n    if (x === 0) {\n      return y;\n    }\n  }\n  return 0;\n}\n\n/*\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero poINT of xs.\n  findZero(xs) is a function that returns the zero", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const len = l.length;\n  if (len < 3) {\n    return l;\n  }\n  const divisibles = [];\n  for (let i = 0; i < len; i += 3) {\n    const divisor = l[i];\n    for (let j = i + 1; j < len; j += 3) {\n      const divisor2 = l[j];\n      if (divisor % divisor2 === 0) {\n        divisibles.push(divisor);\n      }\n    }\n  }\n  const sorted = [];\n  for (let i = 0; i < len; i += 3) {\n    const divisor = l[i];\n    for (let j = i + 1; j < len; j += 3) {\n      const divisor2 = l[j];\n      if (divisor % divisor2 === 0) {\n        sorted.push(divisor);\n      }\n    }\n  }\n  return sorted.concat(divisibles);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    } else {\n      elem = l[i];\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n    i++;\n  }\n  return elemEnts;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let i = 0;\n  let elem = l[0];\n  let elemEnts = [];\n  while (i < l.length) {\n    if (l[i] === elem) {\n      elemEnts.push(l[i]);\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 15 === 0 || i % 5 === 0 || i % 3 === 0) {\n      console.log(`${i}`);\n    } else {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(50);\nfizzBuzz(78);\nfizzBuzz(79);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    }\n  }\n  return evens;\n};\n\nconst sortOdd = (l) => {\n  const odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    }\n  }\n  return odds;\n};\n\nconst sortOddAndEven = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven2 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven3 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven4 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven5 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven6 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven7 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven8 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven9 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven10 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven11 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven12 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [odds, evens];\n};\n\nconst sortOddAndEven13 = (l) => {\n  const odds = [];\n  const evens = [];\n  for (let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib2 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib3 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib3(1)\n  2\n  >>> primeFib3(2)\n  3\n  >>> primeFib3(3)\n  5\n  >>> primeFib3(4)\n  13\n  >>> primeFib3(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib4 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib4(1)\n  2\n  >>> primeFib4(2)\n  3\n  >>> primeFib4(3)\n  5\n  >>> primeFib4(4)\n  13\n  >>> primeFib4(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib5 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib5(1)\n  2\n  >>> primeFib5(2)\n  3\n  >>> primeFib5(3)\n  5\n  >>> primeFib5(4)\n  13\n  >>> primeFib5(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib6 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib6(1)\n  2\n  >>> primeFib6(2)\n  3\n  >>> primeFib6(3)\n  5\n  >>> primeFib6(4)\n  13\n  >>> primeFib6(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib7 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib7(1)\n  2\n  >>> primeFib7(2)\n  3\n  >>> primeFib7(3)\n  5\n  >>> primeFib7(4)\n  13\n  >>> primeFib7(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib8 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib8(1)\n  2\n  >>> primeFib8(2)\n  3\n  >>> primeFib8(3)\n  5\n  >>> primeFib8(4)\n  13\n  >>> primeFib8(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib9 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib9(1)\n  2\n  >>> primeFib9(2)\n  3\n  >>> primeFib9(3)\n  5\n  >>> primeFib9(4)\n  13\n  >>> primeFib9(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + 1;\n  }\n  return fib;\n};\n\n/*\n  primeFib10 ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib10(1)\n  2\n  >>> primeFib10(2)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number) => Math.abs(number - mean));\n  return mean + absolutDeviation.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number) => Math.abs(number - mean));\n  return mean + absolutDeviation.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number) => Math.abs(number - mean));\n  return mean + absolutDeviation.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number) => Math.abs(number - mean));\n  return mean + absolutDeviation.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number) => Math.abs(number - mean));\n  return mean + absolutDeviation.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number) => Math.abs(number - mean));\n  return mean + absolutDeviation.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = numbers.map((number", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n  const nCars = n;\n  const cars = [];\n  for (let i = 0; i < nCars; i++) {\n    cars.push(new car(i));\n  }\n  const collision = [];\n  for (let i = 0; i < nCars; i++) {\n    for (let j = 0; j < nCars; j++) {\n      if (i!== j) {\n        const dist = Math.sqrt(Math.pow(cars[i].x - cars[j].x, 2) + Math.pow(cars[i].y - cars[j].y, 2));\n        if (dist < cars[i].r + cars[j].r) {\n          collision.push({\n            car: cars[i],\n            collision: cars[j]\n          });\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst collision = carRaceCollision(10);\n\nconsole.log(collision);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  let newList = l.slice();\n  newList[0] += 1;\n  newList.push(newList[0]);\n  for (let i = 1; i < l.length; i++) {\n    newList[i] += newList[i - 1];\n    newList.push(newList[i]);\n  }\n  return newList;\n};\n\nconst printList = (l) => {\n  console.log(l);\n};\n\nconst main = () => {\n  const list = [1, 2, 3];\n  printList(incrList(list));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const lSize = l.length;\n  if (lSize < 2) {\n    return false;\n  }\n  const lSum = l.reduce((a, b) => a + b, 0);\n  if (lSum === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1');\n  }\n  if (x < 0 || x >= base) {\n    throw new Error('x must be between 0 and base-1');\n  }\n  let num = 0;\n  while (x > 0) {\n    num += x % base;\n    x = Math.floor(x / base);\n  }\n  return num.toString(base);\n};\n\nmodule.exports = {\n  changeBase\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return h * (a + h) /", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  if (n === 4) {\n    return 1;\n  }\n  if (n === 5) {\n    return 2;\n  }\n  if (n === 6) {\n    return 3;\n  }\n  if (n === 7) {\n    return 14;\n  }\n  if (n === 8) {\n    return 20;\n  }\n  if (n === 9) {\n    return 34;\n  }\n  if (n === 10) {\n    return 55;\n  }\n  if (n === 11) {\n    return 89;\n  }\n  if (n === 12) {\n    return 144;\n  }\n  if (n === 13) {\n    return 233;\n  }\n  if (n === 14) {\n    return 377;\n  }\n  if (n === 15) {\n    return 610;\n  }\n  if (n === 16) {\n    return 987;\n  }\n  if (n === 17) {\n    return 1597;\n  }\n  if (n === 18) {\n    return 2584;\n  }\n  if (n === 19) {\n    return 4181;\n  }\n  if (n === 20) {\n    return 6765;\n  }\n  if (n === 21) {\n    return 10946;\n  }\n  if (n === 22) {\n    return 17711;\n  }\n  if (n === 23) {\n    return 28657;\n  }\n  if (n === 24) {\n    return 46368;\n  }\n  if (n === 25) {\n    return 75025;\n  }\n  if (n === 26) {\n    return 121393;\n  }\n  if (n === 27) {\n    return 196418;\n  }\n  if (n === 28) {\n    return 317811;\n  }\n  if (n === 29) {\n    return 514229;\n  }\n  if (n === 30) {\n    return 832040;\n  }\n  if (n === 31) {\n    return 1346269;\n  }\n  if (n === 32) {\n    return 2178309;\n  }\n  if (n === 33) {\n    return 3524578;\n  }\n  if (n === 34) {\n    return 5702887;\n  }\n  if (n === 35) {\n    return 9227465;\n  }\n  if (n === 36) {\n    return 14930352;\n  }\n  if (n === 37) {\n    return 24157817;\n  }\n  if (n === 38) {\n    return 39321674;\n  }\n  if (n === 39) {\n    return 63245930;\n  }\n  if (n === 40) {\n    return 102334155;\n  }\n  if (n === 41) {\n    return 165580141;\n  }\n  if (n === 42) {\n    return 267914296;\n  }\n  if (n === 43) {\n    return 433494437;\n  }\n  if (n === 44) {\n    return 701408733;\n  }\n  if (n === 45) {\n    return 1134903170;\n  }\n  if (n === 46) {\n    return 1836311903;\n  }\n  if (n === 47) {\n    return 2971215073;\n  }\n  if (n === 48) {\n    return 4794069691;\n  }\n  if (n === 49) {\n    return 7796093022;\n  }\n  if (n === 50) {\n    return 12089258196;\n  }\n  if (n === 51) {\n    return 18363119053;\n  }\n  if (n === 52) {\n    return 2971215072;\n  }\n  if (n === 53) {\n    return 4794069700;\n  }\n  if (n === 54) {\n    return 7796093024;\n  }\n  if (n === 55) {\n    return 12089258197;\n  }\n  if (n === 56) {\n    return 18363119056;\n  }\n  if (n === 57) {\n    return 2971215074;\n  }\n  if (n === 58) {\n    return 4794069708;\n  }\n  if (n === 59) {\n    return 7796093026;\n  }\n  if (n === 60) {\n    return 12089258198;\n  }\n  if (n === 61) {\n    return 18363119061;\n  }\n  if (n === 62) {\n    return 2971215076;\n  }\n  if (n === 63) {\n    return 4794069720;\n  }\n  if (n === 64) {\n    return 7796093028;\n  }\n  if (n === 65) {\n    return 12089258199;\n  }\n  if (n === 66) {\n    return 18363119069;\n  }\n  if (n === 67) {\n    return 2971215078;\n  }\n  if (n === 68) {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements_2 = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements_3 = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements_4 = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements_5 = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements_6 = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  return (a.length > b.length)? (a.sort()[0] + b.sort()[0]) / 2 : (b.sort()[0] + c.sort()[0]) / 2;\n};\n\n/*\n  REturn the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_of_elements_7 = (l) => {\n  let m = l.length;\n  let i = Math.floor(m / 2);\n  let j = m - i;\n  let a = l.slice(0, i);\n  let b = l.slice(i, j);\n  let c = l.slice(j, m);\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let str = text.split('');\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (p < 0) {\n    throw new Error('p must be a positive integer');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (n === p) {\n    return 1;\n  }\n  if (n % p === 0) {\n    return 1;\n  }\n  return modp(n - 1, p) * p;\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  let result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n    i++;\n  }\n  result.push(current);\n\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiou]/g, '');\n  return newText;\n};\n\nexport default removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some(x => x > t);\n};\n\n/*\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst betweenThreshold = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold2 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold3 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold4 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold5 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold6 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold7 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold8 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold9 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold10 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold11 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold12 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold13 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold14 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold15 = (l, t, t2) => {\n  return l.some(x => x > t && x < t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold16 = (l, t, t2) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add(5, 7)\n  * // => 12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  * add", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*\n  #2.\n  #3.\n  #4.\n  #5.\n  #6.\n  #7.\n  #8.\n  #9.\n  #10.\n  #11.\n  #12.\n  #13.\n  #14.\n  #15.\n  #16.\n  #17.\n  #18.\n  #19.\n  #20.\n  #21.\n  #22.\n  #23.\n  #24.\n  #25.\n  #26.\n  #27.\n  #28.\n  #29.\n  #30.\n  #31.\n  #32.\n  #33.\n  #34.\n  #35.\n  #36.\n  #37.\n  #38.\n  #39.\n  #40.\n  #41.\n  #42.\n  #43.\n  #44.\n  #45.\n  #46.\n  #47.\n  #48.\n  #49.\n  #50.\n  #51.\n  #52.\n  #53.\n  #54.\n  #55.\n  #56.\n  #57.\n  #58.\n  #59.\n  #60.\n  #61.\n  #62.\n  #63.\n  #64.\n  #65.\n  #66.\n  #67.\n  #68.\n  #69.\n  #70.\n  #71.\n  #72.\n  #73.\n  #74.\n  #75.\n  #76.\n  #77.\n  #78.\n  #79.\n  #80.\n  #81.\n  #82.\n  #83.\n  #84.\n  #85.\n  #86.\n  #87.\n  #88.\n  #89.\n  #90.\n  #91.\n  #92.\n  #93.\n  #94.\n  #95.\n  #96.\n  #97.\n  #98.\n  #99.\n  #100.\n  #101.\n  #102.\n  #103.\n  #104.\n  #105.\n  #106.\n  #107.\n  #108.\n  #109.\n  #110.\n  #111.\n  #112.\n  #113.\n  #114.\n  #115.\n  #116.\n  #117.\n  #118.\n  #119.\n  #120.\n  #121.\n  #122.\n  #123.\n  #124.\n  #125.\n  #126.\n  #127.\n  #128.\n  #129.\n  #130.\n  #131.\n  #132.\n  #133.\n  #134.\n  #135.\n  #136.\n  #137.\n  #138.\n  #139.\n  #140.\n  #141.\n  #142.\n  #143.\n  #144.\n  #145.\n  #146.\n  #147.\n  #148.\n  #149.\n  #150.\n  #151.\n  #152.\n  #153.\n  #154.\n  #155.\n  #156.\n  #157.\n  #158.\n  #159.\n  #160.\n  #161.\n  #162.\n  #163.\n  #164.\n  #165.\n  #166.\n  #167.\n  #168.\n  #169.\n  #170.\n  #171.\n  #172.\n  #173.\n  #174.\n  #175.\n  #176.\n  #177.\n  #178.\n  #179.\n  #180.\n  #181.\n  #182.\n  #183.\n  #184.\n  #185.\n  #186.\n  #187.\n  #188.\n  #189.\n  #190.\n  #191.\n  #192.\n  #193.\n  #194.\n  #195.\n  #196.\n  #197.\n  #198.\n  #199.\n  #200.\n  #201.\n  #202.\n  #203.\n  #204.\n  #205.\n  #206.\n  #207.\n  #208.\n  #209.\n  #210.\n  #211.\n  #212.\n  #213.\n  #214.\n  #215.\n  #216.\n  #217.\n  #218.\n  #219.\n  #220.\n  #221.\n  #222.\n  #223.\n  #224.\n  #225.\n  #226.\n  #227.\n  #228.\n  #229.\n  #230.\n  #231.\n  #232.\n  #233.\n  #234.\n  #235.\n  #236.\n  #237.\n  #238.\n  #239.\n  #240.\n  #241.\n  #242.\n  #243.\n  #244.\n  #245.\n  #246.\n  #247.\n  #248.\n  #249.\n  #250.\n  #251.\n  #252.\n  #253.\n  #254.\n  #255.\n  #256.\n  #257.\n  #258.\n  #259.\n  #260.\n  #261.\n  #262.\n  #263.\n  #264.\n  #265.\n  #266.\n  #267.\n  #268.\n  #269.\n  #270.\n  #271.\n  #272.\n  #273.\n  #274.\n  #275.\n  #276.\n  #277.\n  #278.\n  #279.\n  #280.\n  #281.\n  #282.\n  #283.\n  #284.\n  #285.\n  #286.\n  #287.\n  #288.\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length < 2) {\n    return false;\n  }\n\n  const openingBracket = brackets[0];\n  const closingBracket = brackets[brackets.length - 1];\n\n  if (openingBracket === closingBracket) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Check if the given string is a valid expression.\n  * @param {string} expression\n  * @returns {boolean}\n  */\nconst isValidExpression = (expression) => {\n  if (expression === \"\") {\n    return false;\n  }\n\n  const expressionArray = expression.split(\" \");\n\n  for (let i = 0; i < expressionArray.length; i++) {\n    if (!isValidExpression(expressionArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid variable.\n  * @param {string} variable\n  * @returns {boolean}\n  */\nconst isValidVariable = (variable) => {\n  if (variable === \"\") {\n    return false;\n  }\n\n  const variableArray = variable.split(\" \");\n\n  for (let i = 0; i < variableArray.length; i++) {\n    if (!isValidVariable(variableArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid function.\n  * @param {string} function\n  * @returns {boolean}\n  */\nconst isValidFunction = (functionName) => {\n  if (functionName === \"\") {\n    return false;\n  }\n\n  const functionArray = functionName.split(\" \");\n\n  for (let i = 0; i < functionArray.length; i++) {\n    if (!isValidFunction(functionArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid operator.\n  * @param {string} operator\n  * @returns {boolean}\n  */\nconst isValidOperator = (operator) => {\n  if (operator === \"\") {\n    return false;\n  }\n\n  const operatorArray = operator.split(\" \");\n\n  for (let i = 0; i < operatorArray.length; i++) {\n    if (!isValidOperator(operatorArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isValidNumber = (number) => {\n  if (number === \"\") {\n    return false;\n  }\n\n  const numberArray = number.split(\" \");\n\n  for (let i = 0; i < numberArray.length; i++) {\n    if (!isValidNumber(numberArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid variable.\n  * @param {string} variable\n  * @returns {boolean}\n  */\nconst isValidVariable = (variable) => {\n  if (variable === \"\") {\n    return false;\n  }\n\n  const variableArray = variable.split(\" \");\n\n  for (let i = 0; i < variableArray.length; i++) {\n    if (!isValidVariable(variableArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid function.\n  * @param {string} function\n  * @returns {boolean}\n  */\nconst isValidFunction = (functionName) => {\n  if (functionName === \"\") {\n    return false;\n  }\n\n  const functionArray = functionName.split(\" \");\n\n  for (let i = 0; i < functionArray.length; i++) {\n    if (!isValidFunction(functionArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid operator.\n  * @param {string} operator\n  * @returns {boolean}\n  */\nconst isValidOperator = (operator) => {\n  if (operator === \"\") {\n    return false;\n  }\n\n  const operatorArray = operator.split(\" \");\n\n  for (let i = 0; i < operatorArray.length; i++) {\n    if (!isValidOperator(operatorArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * Check if the given string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isValidNumber = (number) => {\n  if (number === \"\") {\n    return false;\n  }\n\n  const numberArray = number.split(\" \");\n\n  for (let i = 0; i < numberArray.length; i++) {\n    if (!isValidNumber(numberArray[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  correctBracketing,\n  isValidExpression,\n  isValidVariable,\n  isValidFunction,\n  isValidOperator,\n  isValidNumber,\n  isValidVariable\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  if (l2.length === 1) {\n    return true;\n  }\n  const l3 = l2.slice();\n  l3.sort((a, b) => a - b);\n  return l3.length === l2.length;\n};\n\nmodule.exports = {\n  monotonic,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let commonElem = [];\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      commonElem.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return commonElem;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return 0;\n  }\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factor = i;\n      n = n / i;\n    }\n    i++;\n  }\n  return factor;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let current_paren_count = 0;\n  let current_paren_string = '';\n  let output = [];\n  let current_output = [];\n  let current_output_string = '';\n  let current_output_count = 0;\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_output_paren_count = 0;\n  let current_output_paren_string = '';\n  let current_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.match(/^\\((.*)\\)|\\[(.*)\\]$/)\n}\n\nmodule.exports = {\n  correctBracketing\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomiaL in the saMe fORm.\n  >>> derivative([3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  THe Fibonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  THe Fibonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  THe Fibonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  THe Fibonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  THe Fibonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  THe Fibonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digITs = x.toString();\n  const n = Math.abs(shift);\n  const z = n % Math.floor(digITs.length);\n  const nDigits = Math.floor(digITs.length - z);\n  const nShifts = n / Math.floor(digITs.length);\n  const newZ = Math.floor(z + nShifts);\n  const newDigITs = digITs.substring(0, nDigits) +\n    digITs.substring(nDigits + newZ);\n  return newDigITs;\n};\n\nconst isPrime = (num) => {\n  const sqrt = Math.sqrt(num);\n  for (let i = 2; i < sqrt; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime = (num) => {\n  const sqrt = Math.sqrt(num);\n  for (let i = 2; i < sqrt; i++) {\n    if (num % i === 0) {\n      return i;\n    }\n  }\n  return num;\n};\n\nconst getPrimeNumber = (num) => {\n  const prime = getPrime(num);\n  if (isPrime(prime)) {\n    return prime;\n  } else {\n    throw new Error(`${num} is not prime`);\n  }\n};\n\nconst getPrimeNumbers = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers2 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers3 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers4 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers5 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers6 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers7 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers8 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers9 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers10 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers11 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers12 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers13 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers14 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers15 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers16 = (num) => {\n  const primeNumbers = [];\n  for (let i = 2; i < num; i++) {\n    if (isPrime(i)) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let orange = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      fruit++;\n    } else if (s[i] === 'p') {\n      total++;\n    } else if (s[i] === 'o') {\n      orange++;\n    }\n    i++;\n  }\n  let orangeFruit = orange / fruit;\n  let fruitFruit = fruit / total;\n  let fruitOrange = fruit / orange;\n  let totalFruit = total / fruit;\n  let totalOrange = total / orange;\n  let totalFruitOrange = totalFruit + fruitOrange;\n  let totalFruitFruit = totalFruit / fruit;\n  let totalFruitFruitOrange = totalFruitFruit + fruitOrange;\n  let totalFruitFruitFruit = totalFruitFruit / fruit;\n  let totalFruitFruitFruitOrange = totalFruitFruitFruit + fruitOrange;\n  return totalFruitFruitFruitOrange;\n};\n\nlet fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let orange = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      fruit++;\n    } else if (s[i] === 'p') {\n      total++;\n    } else if (s[i] === 'o') {\n      orange++;\n    }\n    i++;\n  }\n  let orangeFruit = orange / fruit;\n  let fruitFruit = fruit / total;\n  let fruitOrange = fruit / orange;\n  let totalFruit = total / fruit;\n  let totalOrange = total / orange;\n  let totalFruitOrange = totalFruit + fruitOrange;\n  let totalFruitFruit = fruitFruit / fruit;\n  let totalFruitFruitOrange = totalFruitFruit + fruitOrange;\n  let totalFruitFruitFruit = totalFruitFruit / fruit;\n  let totalFruitFruitFruitOrange = totalFruitFruitFruit + fruitOrange;\n  return totalFruitFruitFruitOrange;\n};\n\nlet fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let orange = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      fruit++;\n    } else if (s[i] === 'p') {\n      total++;\n    } else if (s[i] === 'o') {\n      orange++;\n    }\n    i++;\n  }\n  let orangeFruit = orange / fruit;\n  let fruitFruit = fruit / total;\n  let fruitOrange = fruit / orange;\n  let totalFruit = total / fruit;\n  let totalOrange = total / orange;\n  let totalFruitOrange = totalFruit + fruitOrange;\n  let totalFruitFruit = fruitFruit / fruit;\n  let totalFruitFruitOrange = totalFruitFruit + fruitOrange;\n  let totalFruitFruitFruit = totalFruitFruit / fruit;\n  let totalFruitFruitFruitOrange = totalFruitFruitFruit + fruitOrange;\n  return totalFruitFruitFruitOrange;\n};\n\nlet fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let orange = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      fruit++;\n    } else if (s[i] === 'p') {\n      total++;\n    } else if (s[i] === 'o') {\n      orange++;\n    }\n    i++;\n  }\n  let orangeFruit = orange / fruit;\n  let fruitFruit = fruit / total;\n  let fruitOrange = fruit / orange;\n  let totalFruit = total / fruit;\n  let totalOrange = total / orange;\n  let totalFruitOrange = totalFruit + fruitOrange;\n  let totalFruitFruit = fruitFruit / fruit;\n  let totalFruitFruitOrange = totalFruitFruit + fruitOrange;\n  let totalFruitFruitFruit = totalFruitFruit / fruit;\n  let totalFruitFruitFruitOrange = totalFruitFruitFruit + fruitOrange;\n  return totalFruitFruitFruitOrange;\n};\n\nlet fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let orange = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      fruit++;\n    } else if (s[i] === 'p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  let res = [];\n  let min = arr[0];\n  let minIdx = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIdx = i;\n    }\n  }\n  res.push(min);\n  if (len > 1) {\n    for (let i = 1; i < len; i++) {\n      if (arr[i] === min) {\n        res.push(i);\n      }\n    }\n  }\n  return res;\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) return -1;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) return [];\n  const lst2 = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[j]) {\n      lst2.push(lst[i]);\n      i++;\n    } else {\n      lst2.push(lst[j]);\n      j++;\n    }\n  }\n  return lst2;\n};\n\nexport default strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0\n  let s1 = a + b + c\n  let s2 = a + c + b\n  let s3 = b + a + c\n  let s4 = b + c + a\n  let s5 = c + a + b\n  let s6 = c + b + a\n  let s7 = a + b + c\n  let s8 = a + c + b\n  let s9 = b + a + c\n  let s10 = b + c + a\n  let s11 = c + a + b\n  let s12 = c + b + a\n  let s13 = a + b + c\n  let s14 = a + c + b\n  let s15 = b + a + c\n  let s16 = b + c + a\n  let s17 = c + a + b\n  let s18 = c + b + a\n  let s19 = a + b + c\n  let s20 = a + c + b\n  let s21 = b + a + c\n  let s22 = b + c + a\n  let s23 = c + a + b\n  let s24 = c + b + a\n  let s25 = a + b + c\n  let s26 = a + c + b\n  let s27 = b + a + c\n  let s28 = b + c + a\n  let s29 = c + a + b\n  let s30 = c + b + a\n  let s31 = a + b + c\n  let s32 = a + c + b\n  let s33 = b + a + c\n  let s34 = b + c + a\n  let s35 = c + a + b\n  let s36 = c + b + a\n  let s37 = a + b + c\n  let s38 = a + c + b\n  let s39 = b + a + c\n  let s40 = b + c + a\n  let s41 = c + a + b\n  let s42 = c + b + a\n  let s43 = a + b + c\n  let s44 = a + c + b\n  let s45 = b + a + c\n  let s46 = b + c + a\n  let s47 = c + a + b\n  let s48 = c + b + a\n  let s49 = a + b + c\n  let s50 = a + c + b\n  let s51 = b + a + c\n  let s52 = b + c + a\n  let s53 = c + a + b\n  let s54 = c + b + a\n  let s55 = a + b + c\n  let s56 = a + c + b\n  let s57 = b + a + c\n  let s58 = b + c + a\n  let s59 = c + a + b\n  let s60 = c + b + a\n  let s61 = a + b + c\n  let s62 = a + c + b\n  let s63 = b + a + c\n  let s64 = b + c + a\n  let s65 = c + a + b\n  let s66 = c + b + a\n  let s67 = a + b + c\n  let s68 = a + c + b\n  let s69 = b + a + c\n  let s70 = b + c + a\n  let s71 = c + a + b\n  let s72 = c + b + a\n  let s73 = a + b + c\n  let s74 = a + c + b\n  let s75 = b + a + c\n  let s76 = b + c + a\n  let s77 = c + a + b\n  let s78 = c + b + a\n  let s79 = a + b + c\n  let s80 = a + c + b\n  let s81 = b + a + c\n  let s82 = b + c + a\n  let s83 = c + a + b\n  let s84 = c + b + a\n  let s85 = a + b + c\n  let s86 = a + c + b\n  let s87 = b + a + c\n  let s88 = b + c + a\n  let s89 = c + a + b\n  let s90 = c + b + a\n  let s91 = a + b + c\n  let s92 = a + c + b\n  let s93 = b + a + c\n  let s94 = b + c + a\n  let s95 = c + a + b\n  let s96 = c + b + a\n  let s97 = a + b + c\n  let s98 = a + c + b\n  let s99 = b + a + c\n  let s100 = b + c + a\n  let s101 = c + a + b\n  let s102 = c + b + a\n  let s103 = a + b + c\n  let s104 = a + c + b\n  let s105 = b + a + c\n  let s106 = b + c + a\n  let s107 = c + a + b\n  let s108 = c + b + a\n  let s109 = a + b + c\n  let s110 = a + c + b\n  let s111 = b + a + c\n  let s112 = b + c + a\n  let s113 = c + a + b\n  let s114 = c + b + a\n  let s115 = a + b + c\n  let s116 = a + c + b\n  let s117 = b + a + c\n  let s118 = b + c + a\n  let s119 = c + a + b\n  let s120 = c + b + a\n  let s121 = a + b + c\n  let s122 = a + c + b\n  let s123 = b + a + c\n  let s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  if (q.length === 2) {\n    return q[0] + q[1] <= w;\n  }\n  if (q.length === 3) {\n    return q[0] + q[1] + q[2] <= w;\n  }\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = {\n  willItFly,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Idx = 0;\n  const lst2Idx = 0;\n  const lst1IdxEnd = lst1Len - 1;\n  const lst2IdxEnd = lst2Len - 1;\n  let res = [];\n  while (lst1Idx < lst1Len && lst2Idx < lst2Len) {\n    if (lst1[lst1Idx] < lst2[lst2Idx]) {\n      res.push(lst1[lst1Idx]);\n      lst1Idx++;\n    } else if (lst1[lst1Idx] > lst2[lst2Idx]) {\n      res.push(lst2[lst2Idx]);\n      lst2Idx++;\n    } else {\n      res.push(lst1[lst1Idx]);\n      lst1Idx++;\n      lst2Idx++;\n    }\n  }\n  while (lst1Idx < lst1Len) {\n    res.push(lst1[lst1Idx]);\n    lst1Idx++;\n  }\n  while (lst2Idx < lst2Len) {\n    res.push(lst2[lst2Idx]);\n    lst2Idx++;\n  }\n  return res;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  } else if (a < 2) {\n    return true;\n  } else {\n    for (let i = 2; i < a; i++) {\n      if (a % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\nconst isDivisibleBy = (a, b) => {\n  if (a % b === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy2 = (a) => {\n  if (a % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy3 = (a) => {\n  if (a % 3 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy5 = (a) => {\n  if (a % 5 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy7 = (a) => {\n  if (a % 7 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy11 = (a) => {\n  if (a % 11 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy13 = (a) => {\n  if (a % 13 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy17 = (a) => {\n  if (a % 17 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy19 = (a) => {\n  if (a % 19 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy23 = (a) => {\n  if (a % 23 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy29 = (a) => {\n  if (a % 29 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy31 = (a) => {\n  if (a % 31 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy37 = (a) => {\n  if (a % 37 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy41 = (a) => {\n  if (a % 41 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy43 = (a) => {\n  if (a % 43 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy47 = (a) => {\n  if (a % 47 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy53 = (a) => {\n  if (a % 53 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy59 = (a) => {\n  if (a % 59 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy61 = (a) => {\n  if (a % 61 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy67 = (a) => {\n  if (a % 67 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy71 = (a) => {\n  if (a % 71 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy73 = (a) => {\n  if (a % 73 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy79 = (a) => {\n  if (a % 79 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy83 = (a) => {\n  if (a % 83 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy89 = (a) => {\n  if (a % 89 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy97 = (a) => {\n  if (a % 97 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy101 = (a) => {\n  if (a % 101 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy103 = (a) => {\n  if (a % 103 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isDivisibleBy107 = (a) => {\n  if (a % 107 === 0) {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/**\n  This function returns a number that is the greatest common divisor of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The greatest common divisor of x and y\n*/\nconst gcd = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return gcd(x % y, y);\n  }\n  return gcd(y % x, x);\n};\n\n/**\n  This function returns a number that is the least common multiple of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The least common multiple of x and y\n*/\nconst lcm = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return lcm(x, y);\n  }\n  return lcm(y, x);\n};\n\n/**\n  This function returns a number that is the greatest common divisor of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The greatest common divisor of x and y\n*/\nconst gcd2 = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return gcd2(x % y, y);\n  }\n  return gcd2(y % x, x);\n};\n\n/**\n  This function returns a number that is the least common multiple of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The least common multiple of x and y\n*/\nconst lcm2 = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return lcm2(x, y);\n  }\n  return lcm2(y, x);\n};\n\n/**\n  This function returns a number that is the greatest common divisor of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The greatest common divisor of x and y\n*/\nconst gcd3 = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return gcd3(x % y, y);\n  }\n  return gcd3(y % x, x);\n};\n\n/**\n  This function returns a number that is the least common multiple of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The least common multiple of x and y\n*/\nconst lcm3 = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return lcm3(x, y);\n  }\n  return lcm3(y, x);\n};\n\n/**\n  This function returns a number that is the greatest common divisor of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The greatest common divisor of x and y\n*/\nconst gcd4 = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return gcd4(x % y, y);\n  }\n  return gcd4(y % x, x);\n};\n\n/**\n  This function returns a number that is the least common multiple of two\n  numbers.\n  @param {Number} x The first number\n  @param {Number} y The second number\n  @returns {Number} The least common multiple of x and y\n*/\nconst lcm4 = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  if (isSimplePower(x, y)) {\n    return lcm4(x, y);\n  }\n  return lcm4(y, x);\n};\n\nmodule.exports = {\n  gcd,\n  gcd2,\n  gcd3,\n  gcd4,\n  lcm,\n  lcm2,\n  lcm3,\n  lcm4\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 1 == 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF so", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numStr = num.toString(16);\n  let hexStr = numStr.toUpperCase();\n  let hexNum = parseInt(hexStr, 16);\n  return hexNum;\n};\n\nconst isPrime = (num) => {\n  let isPrime = true;\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  if (hexNum < 2) {\n    return false;\n  }\n  if (hexNum % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrimeNumbers = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers2 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers3 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers4 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers5 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers6 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers7 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers8 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers9 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum = parseInt(numStr, 16);\n  for (let i = 3; i < hexNum; i += 2) {\n    if (hexNum % i === 0) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbers10 = (num) => {\n  let primeNumbers = [];\n  let numStr = num.toString(16);\n  let hexNum =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = decimal.toString(2);\n  return binary.split('').map((char) => {\n    return char === '1'? '1' : '0';\n  }).join('');\n};\n\nmodule.exports = {\n  decimalToBinary\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct2 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct4 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct6 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct8 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct10 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct11 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct12 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct13 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int(i)\n    prod *= numbers[i]\n  }\n  return (sum, prod)\n}\n\nconst sumProduct14 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    let curr = s.charAt(i);\n    if (curr === 'a' || curr === 'e' || curr === 'i' || curr === 'o' || curr === 'u') {\n      sum += 1;\n    }\n    if (sum === 3) {\n      return true;\n    }\n    if (sum > 3) {\n      return false;\n    }\n    sum += 1;\n  }\n  return false;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let grade = 0;\n  let letterGrade = '';\n  let gradeCount = 0;\n  let gradeList = [];\n  grades.forEach((gradeItem) => {\n    if (gradeItem > grade) {\n      grade = gradeItem;\n    }\n    if (gradeItem < grade) {\n      gradeCount++;\n    }\n  });\n  if (gradeCount === 0) {\n    gradeList.push('A+');\n  }\n  for (let i = 0; i < gradeCount; i++) {\n    if (grade > 3.0) {\n      letterGrade = 'A';\n    } else if (grade > 2.0) {\n      letterGrade = 'B';\n    } else if (grade > 1.0) {\n      letterGrade = 'C';\n    } else {\n      letterGrade = 'D';\n    }\n    gradeList.push(letterGrade);\n    grade = grade - gradeCount;\n  }\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = 1;\n  while (i < string.length) {\n    if (string[i] === string[j]) {\n      i++;\n      j++;\n    } else {\n      j = 1;\n      i++;\n    }\n  }\n  return i === string.length;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds2 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds3 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds4 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds5 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds6 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds7 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds8 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds9 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds10 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds11 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds12 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += Math.pow(10, n - i);\n    i++;\n  }\n  return result;\n};\n\n//  Given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n//  Positive inteGers thAt sTART Or eND wiTh 1.\n//  */\nCoNst startsOneEnds13 = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(10, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nmodule.exports = add\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let a = s.split('');\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2) ...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let row = [];\n  let xs = lst.map(l => l[x]);\n  let i = 0;\n  while (i < xs.length) {\n    let j = i;\n    while (j < xs.length && xs[j] === xs[i]) j++;\n    row.push([xs[i], xs.slice(i, j)]);\n    i = j;\n  }\n  return row;\n};\n\nconst getColumn = (lst, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let col = [];\n  let ys = lst.map(l => l[y]);\n  let i = 0;\n  while (i < ys.length) {\n    let j = i;\n    while (j < ys.length && ys[j] === ys[i]) j++;\n    col.push([ys[i], ys.slice(i, j)]);\n    i = j;\n  }\n  return col;\n};\n\nconst getColumns = (lst, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let col = [];\n  let ys = lst.map(l => l[y]);\n  let i = 0;\n  while (i < ys.length) {\n    let j = i;\n    while (j < ys.length && ys[j] === ys[i]) j++;\n    col.push([ys[i], ys.slice(i, j)]);\n    i = j;\n  }\n  return col;\n};\n\nconst getRows = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let row = [];\n  let xs = lst.map(l => l[x]);\n  let i = 0;\n  while (i < xs.length) {\n    let j = i;\n    while (j < xs.length && xs[j] === xs[i]) j++;\n    row.push([xs[i], xs.slice(i, j)]);\n    i = j;\n  }\n  return row;\n};\n\nconst getRowsBy = (lst, x, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let row = [];\n  let xs = lst.map(l => l[x]);\n  let ys = lst.map(l => l[y]);\n  let i = 0;\n  while (i < xs.length) {\n    let j = i;\n    while (j < xs.length && xs[j] === xs[i]) j++;\n    row.push([xs[i], ys.slice(i, j)]);\n    i = j;\n  }\n  return row;\n};\n\nconst getRowsByColumn = (lst, x, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let row = [];\n  let xs = lst.map(l => l[x]);\n  let ys = lst.map(l => l[y]);\n  let i = 0;\n  while (i < xs.length) {\n    let j = i;\n    while (j < xs.length && xs[j] === xs[i]) j++;\n    row.push([xs[i], ys.slice(i, j)]);\n    i = j;\n  }\n  return row;\n};\n\nconst getRowsByColumns = (lst, x, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  let row = [];\n  let xs = lst.map(l => l[x]);\n  let ys = lst.map(l => l[y]);\n  let i = 0;\n  while (i < xs.length) {\n    let j = i;\n    while (j < xs.length && xs[j] === xs[i]) j++;\n    row.push([xs[i], ys.slice(i, j)]);\n    i = j;\n  }\n  return row;\n};\n\nconst getRowsByRows = (lst, x, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) return [];\n  if (array.length === 1) return array;\n  let sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = key.indexOf(c);\n    if (index === -1) {\n      result += c;\n    } else {\n      result += key.charAt(index + 1);\n      key = key.substring(0, index) + key.charAt(index + 1) + key.substring(index + 2);\n    }\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = key.indexOf(c);\n    if (index === -1) {\n      result += c;\n    } else {\n      result += key.charAt(index - 1);\n      key = key.substring(0, index - 1) + key.charAt(index - 2) + key.substring(index - 1);\n    }\n  }\n  return result;\n};\n\nconst encryptString = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = key.indexOf(c);\n    if (index === -1) {\n      result += c;\n    } else {\n      result += key.charAt(index + 1);\n      key = key.substring(0, index) + key.charAt(index + 1) + key.substring(index + 2);\n    }\n  }\n  return result;\n};\n\nconst decryptString = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = key.indexOf(c);\n    if (index === -1) {\n      result += c;\n    } else {\n      result += key.charAt(index - 1);\n      key = key.substring(0, index - 1) + key.charAt(index - 2) + key.substring(index - 1);\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  console.log(encrypt('hi'));\n  console.log(decrypt('lm'));\n  console.log(encryptString('hi'));\n  console.log(decryptString('lm'));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax10 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax11 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax12 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax13 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n// test\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let len = S.length;\n  for (let i = 0; i < len; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    let code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let codeLength = code.length;\n    let j = 0;\n    while (j < codeLength) {\n      if (letter === code[j]) {\n        encoded += code[codeLength - 1 - j];\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    let code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let codeLength = code.length;\n    let j = 0;\n    while (j < codeLength) {\n      if (letter === code[codeLength - 1 - j]) {\n        decoded += code[j];\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return decoded;\n};\n\nconst test = () => {\n  console.log(encode('test'));\n  console.log(decode('TGST'));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let n = lst.length;\n  let ans = 0;\n  for (let i = 0; i < n; i++) {\n    let cur = lst[i];\n    while (cur > 0) {\n      cur = cur - 1;\n      ans++;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = skjkasdkd;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let len = keys.length;\n  let i = 0;\n  while (i < len) {\n    let key = keys[i];\n    let value = dict[key];\n    if (value === undefined) {\n      return false;\n    }\n    if (typeof value === \"string\") {\n      if (value.toLowerCase()!== key.toLowerCase()) {\n        return false;\n      }\n    } else if (value!== key) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(a1);\n    b1 = Math.abs(b1);\n    result = multiply(a1, b1);\n  } else {\n    result = multiply(a1, b1);\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let a1 = a;\n  let b1 = b;\n  let result = 0;\n  if (a1 < 0 || b1 < 0) {\n    a1 = Math.abs(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of lowercase Vowels in Even indices.\n//\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  given A StRIng s, couNt the nUmbER of vowels in Even indices.\n//\nconst countVowelConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const valueAsString = String(value)\n  const valueAsNumber = parseFloat(valueAsString)\n  const valueAsInteger = parseInt(valueAsNumber)\n  const valueAsDecimal = valueAsNumber - valueAsInteger\n  const valueAsRounded = valueAsInteger + (valueAsDecimal > 0?\n    Math.ceil(valueAsDecimal) : Math.floor(valueAsDecimal))\n  return valueAsInteger === valueAsRounded? valueAsInteger : valueAsRounded\n}\n\nmodule.exports = closestInteger\n<|endoftext|>", "passed": 0, "run_status": 1}
