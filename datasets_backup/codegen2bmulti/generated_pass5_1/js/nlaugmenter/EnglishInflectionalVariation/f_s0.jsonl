{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const min = sortedNumbers[0];\n  const max = sortedNumbers[sortedNumbers.length - 1];\n  const range = max - min;\n  const thresholdSquared = threshold * threshold;\n  const hasCloseElements = false;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    const current = sortedNumbers[i];\n    if (current > min + thresholdSquared && current < max - thresholdSquared) {\n      hasCloseElements = true;\n      break;\n    }\n  }\n  return hasCloseElements;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let close_paren = 0;\n  let close_paren_count = 0;\n  let current_string = '';\n  let current_string_length = 0;\n  let current_string_index = 0;\n  let current_string_open_paren = 0;\n  let current_string_close_paren = 0;\n  let current_string_open_paren_count = 0;\n  let current_string_close_paren_count = 0;\n  let current_string_open_paren_index = 0;\n  let current_string_close_paren_index = 0;\n  let current_string_open_paren_index_count = 0;\n  let current_string_close_paren_index_count = 0;\n  let current_string_open_paren_index_count_count = 0;\n  let current_string_close_paren_index_count_count = 0;\n  let current_string_open_paren_index_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_paren_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_paren_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') { return ''; }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  while (isPalindrome(prefix)) {\n    prefix = prefix.split('').reverse().join('');\n  }\n  return prefix + postfix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') { return ''; }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  while (isPalindrome(prefix)) {\n    prefix = prefix.split('').reverse().join('');\n  }\n  return prefix + postfix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the shortest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') { return ''; }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  while (isPalindrome(prefix)) {\n    prefix = prefix.split('').reverse().join('');\n  }\n  return prefix + postfix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') { return ''; }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  while (isPalindrome(prefix)) {\n    prefix = prefix.split('').reverse().join('');\n  }\n  return prefix + postfix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the shortest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') { return ''; }\n  let postfix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  while (isPalindrome(prefix)) {\n    prefix = prefix.split('').reverse().join('');\n  }\n  return prefix + postfix;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = n;\n  while (level > 0) {\n    result.push(level);\n    level = level - 1;\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString12 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \",\" || s[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString13 = (s) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x < y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x\n  }\n  if (y % 2 === 0) {\n    return y\n  }\n  return -1\n}\n\nconst test = () => {\n  console.log(chooseNum(12, 15))\n  console.log(chooseNum(13, 12))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const arr = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    if (num % 2 === 0) {\n      arr.push(num);\n    }\n  }\n  return arr;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const arrLength = arr.length;\n  const arrSorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversed = arrSorted.reverse();\n  const arrReversedSorted = arrReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversed = arrReversedSorted.reverse();\n  const arrReversedReversedSorted = arrReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversed = arrReversedReversedSorted.reverse();\n  const arrReversedReversedReversedSorted = arrReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversedReversed = arrReversedReversedReversedSorted.reverse();\n  const arrReversedReversedReversedReversedSorted = arrReversedReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversedReversedReversed = arrReversedReversedReversedReversedSorted.reverse();\n  const arrReversedReversedReversedReversedReversedSorted = arrReversedReversedReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversedReversedReversedReversed = arrReversedReversedReversedReversedReversedSorted.reverse();\n  const arrReversedReversedReversedReversedReversedReversedSorted = arrReversedReversedReversedReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversedReversedReversedReversedReversed = arrReversedReversedReversedReversedReversedReversedSorted.reverse();\n  const arrReversedReversedReversedReversedReversedReversedReversedSorted = arrReversedReversedReversedReversedReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversedReversedReversedReversedReversedReversed = arrReversedReversedReversedReversedReversedReversedReversedSorted.reverse();\n  const arrReversedReversedReversedReversedReversedReversedReversedReversedSorted = arrReversedReversedReversedReversedReversedReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReversedReversedReversedReversedReversedReversedReversedReversedReversed = arrReversedReversedReversedReversedReversedReversedReversedReversedReversedSorted.reverse();\n  const arrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedSorted = arrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrRe", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    if (i % 2 === 0) {\n      fList.push(i * f(i - 1));\n    } else {\n      fList.push(i * f(i - 1) + f(i - 2));\n    }\n  }\n  return fList;\n};\n\nconst f2 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2));\n  }\n  return fList;\n};\n\nconst f3 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3));\n  }\n  return fList;\n};\n\nconst f4 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4));\n  }\n  return fList;\n};\n\nconst f5 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5));\n  }\n  return fList;\n};\n\nconst f6 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5) + f(i - 6));\n  }\n  return fList;\n};\n\nconst f7 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5) + f(i - 6) + f(i - 7));\n  }\n  return fList;\n};\n\nconst f8 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5) + f(i - 6) + f(i - 7) + f(i - 8));\n  }\n  return fList;\n};\n\nconst f9 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5) + f(i - 6) + f(i - 7) + f(i - 8) + f(i - 9));\n  }\n  return fList;\n};\n\nconst f10 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5) + f(i - 6) + f(i - 7) + f(i - 8) + f(i - 9) + f(i - 10));\n  }\n  return fList;\n};\n\nconst f11 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList.push(f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4) + f(i - 5) + f(i - 6) + f(i - 7) + f(i - 8) + f(i - 9) + f(i - 10) + f(i - 11));\n  }\n  return fList;\n};\n\nconst f12 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  const fList = [];\n  for (let i = 1; i <= n; i++) {\n    fList.push(i);\n    fList", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const isPalindrome = isPalindrome(i);\n    if (isPalindrome) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] > arr[right]) {\n      arr[left] = arr[left] - 1;\n      arr[right] = arr[right] + 1;\n    }\n    if (arr[left] === arr[right]) {\n      arr[left] = arr[left] - 1;\n      arr[right] = arr[right] + 1;\n    }\n    left++;\n    right--;\n  }\n  return arr[left] === arr[right];\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst1.filter(x => x % 2!== 0);\n  const evens = lst2.filter(x => x % 2 === 0);\n  const odds = lst2.filter(x => x % 2!== 0);\n  const evensCount = evens.length;\n  const oddsCount = odds.length;\n  if (evensCount === 0 || oddsCount === 0) {\n    return \"NO\";\n  }\n  if (evensCount === oddsCount) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let counter = {};\n  let count = 0;\n  let result = {};\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete2 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete3 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete4 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete5 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete6 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete7 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete8 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete9 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete10 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete11 = (s, c) => {\n  let result = s;\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.split('').reverse().join('');\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete12 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let odd = 0;\n    let j = i;\n    while (j < len) {\n      if (lst[j]!== lst[j - 1]) {\n        odd++;\n      }\n      j++;\n    }\n    res.push(`the number of odd elements ${odd}n the str${odd}ng ${odd} of the ${odd}nput.`);\n    i = j;\n  }\n  return res;\n};\n\nexport {oddCount};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((min, num) => {\n    if (min === undefined) {\n      min = num;\n    } else {\n      min = Math.min(min, num);\n    }\n    return min;\n  }, undefined);\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(capacity);\n      }\n    }\n  }\n  let result = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = buckets[i][j];\n        while (bucket > 0) {\n          bucket--;\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = maxFill;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  let sortedLength = arr.length;\n  let sortedIndex = 0;\n  let sortedIndexLength = arr.length;\n  let sortedIndexMax = arr.length;\n  let sortedIndexMin = arr.length;\n  let sortedIndexMaxLength = arr.length;\n  let sortedIndexMinLength = arr.length;\n  let sortedIndexMaxLengthMax = arr.length;\n  let sortedIndexMinLengthMax = arr.length;\n  let sortedIndexMaxLengthMin = arr.length;\n  let sortedIndexMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLength = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMin = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLength = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMin = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLength = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLength = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMax = arr.length;\n  let sortedIndexMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMaxLengthMinMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let result = [];\n  let count = 0;\n  let index = 0;\n  let word = '';\n  while (index < s.length) {\n    if (s[index] ==='') {\n      if (count === n) {\n        result.push(word);\n        word = '';\n        count = 0;\n      }\n      index++;\n    } else {\n      word += s[index];\n      count++;\n    }\n  }\n  if (word!== '') {\n    result.push(word);\n  }\n  return result;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let result = \"\";\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i;\n    while (j < len && vowels.indexOf(word[j]) === -1) {\n      j++;\n    }\n    if (j - i > 1) {\n      result = word.substring(i, j);\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (lst.length < 2) {\n    return 'No';\n  }\n  let left = lst[0];\n  let right = lst[lst.length - 1];\n  let leftCount = 0;\n  let rightCount = 0;\n  let leftIndex = 0;\n  let rightIndex = 0;\n  let leftEnd = 0;\n  let rightEnd = 0;\n  let leftEndIndex = 0;\n  let rightEndIndex = 0;\n  let leftEndCount = 0;\n  let rightEndCount = 0;\n  let leftEndIndexCount = 0;\n  let rightEndIndexCount = 0;\n  let leftEndCountCount = 0;\n  let rightEndCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let leftEndIndexCountCount = 0;\n  let rightEndIndexCountCount = 0;\n  let left", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  let longestLength = longest.length;\n\n  for (let i = 1; i < strings.length; i++) {\n    let current = strings[i];\n    if (current.length > longestLength) {\n      longest = current;\n      longestLength = current.length;\n    }\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, num) => {\n    if (num > max) {\n      return num\n    } else {\n      return max\n    }\n  }, -Infinity);\n\n  const sorted = arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  });\n\n  const result = sorted.slice(0, k)\n\n  return result\n}\n\nmodule.exports = maximum\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let oddCollatz = [];\n  let evenCollatz = [];\n  let evenCollatzLength = 0;\n  let oddCollatzLength = 0;\n  let evenCollatzIndex = 0;\n  let oddCollatzIndex = 0;\n  let evenCollatzIndex2 = 0;\n  let oddCollatzIndex2 = 0;\n  let evenCollatzIndex3 = 0;\n  let oddCollatzIndex3 = 0;\n  let evenCollatzIndex4 = 0;\n  let oddCollatzIndex4 = 0;\n  let evenCollatzIndex5 = 0;\n  let oddCollatzIndex5 = 0;\n  let evenCollatzIndex6 = 0;\n  let oddCollatzIndex6 = 0;\n  let evenCollatzIndex7 = 0;\n  let oddCollatzIndex7 = 0;\n  let evenCollatzIndex8 = 0;\n  let oddCollatzIndex8 = 0;\n  let evenCollatzIndex9 = 0;\n  let oddCollatzIndex9 = 0;\n  let evenCollatzIndex10 = 0;\n  let oddCollatzIndex10 = 0;\n  let evenCollatzIndex11 = 0;\n  let oddCollatzIndex11 = 0;\n  let evenCollatzIndex12 = 0;\n  let oddCollatzIndex12 = 0;\n  let evenCollatzIndex13 = 0;\n  let oddCollatzIndex13 = 0;\n  let evenCollatzIndex14 = 0;\n  let oddCollatzIndex14 = 0;\n  let evenCollatzIndex15 = 0;\n  let oddCollatzIndex15 = 0;\n  let evenCollatzIndex16 = 0;\n  let oddCollatzIndex16 = 0;\n  let evenCollatzIndex17 = 0;\n  let oddCollatzIndex17 = 0;\n  let evenCollatzIndex18 = 0;\n  let oddCollatzIndex18 = 0;\n  let evenCollatzIndex19 = 0;\n  let oddCollatzIndex19 = 0;\n  let evenCollatzIndex20 = 0;\n  let oddCollatzIndex20 = 0;\n  let evenCollatzIndex21 = 0;\n  let oddCollatzIndex21 = 0;\n  let evenCollatzIndex22 = 0;\n  let oddCollatzIndex22 = 0;\n  let evenCollatzIndex23 = 0;\n  let oddCollatzIndex23 = 0;\n  let evenCollatzIndex24 = 0;\n  let oddCollatzIndex24 = 0;\n  let evenCollatzIndex25 = 0;\n  let oddCollatzIndex25 = 0;\n  let evenCollatzIndex26 = 0;\n  let oddCollatzIndex26 = 0;\n  let evenCollatzIndex27 = 0;\n  let oddCollatzIndex27 = 0;\n  let evenCollatzIndex28 = 0;\n  let oddCollatzIndex28 = 0;\n  let evenCollatzIndex29 = 0;\n  let oddCollatzIndex29 = 0;\n  let evenCollatzIndex30 = 0;\n  let oddCollatzIndex30 = 0;\n  let evenCollatzIndex31 = 0;\n  let oddCollatzIndex31 = 0;\n  let evenCollatzIndex32 = 0;\n  let oddCollatzIndex32 = 0;\n  let evenCollatzIndex33 = 0;\n  let oddCollatzIndex33 = 0;\n  let evenCollatzIndex34 = 0;\n  let oddCollatzIndex34 = 0;\n  let evenCollatzIndex35 = 0;\n  let oddCollatzIndex35 = 0;\n  let evenCollatzIndex36 = 0;\n  let oddCollatzIndex36 = 0;\n  let evenCollatzIndex37 = 0;\n  let oddCollatzIndex37 = 0;\n  let evenCollatzIndex38 = 0;\n  let oddCollatzIndex38 = 0;\n  let evenCollatzIndex39 = 0;\n  let oddCollatzIndex39 = 0;\n  let evenCollatzIndex40 = 0;\n  let oddCollatzIndex40 = 0;\n  let evenCollatzIndex41 = 0;\n  let oddCollatzIndex41 = 0;\n  let evenCollatzIndex42 = 0;\n  let oddCollatzIndex42 = 0;\n  let evenCollatzIndex43 = 0;\n  let oddCollatzIndex43 = 0;\n  let evenCollatzIndex44 = 0;\n  let oddCollatzIndex44 = 0;\n  let evenCollatzIndex45 = 0;\n  let oddCollatzIndex45 = 0;\n  let evenCollatzIndex46 = 0;\n  let oddCollatzIndex46 = 0;\n  let evenCollatzIndex47 = 0;\n  let oddCollatzIndex47 = 0;\n  let evenCollatzIndex48 = 0;\n  let oddCollatzIndex48 = 0;\n  let evenCollatzIndex49 = 0;\n  let oddCollatzIndex49 = 0;\n  let evenCollatzIndex50 = 0;\n  let oddCollatzIndex50 = 0;\n  let evenCollatzIndex51 = 0;\n  let oddCollatzIndex51 = 0;\n  let evenCollatzIndex52 = 0;\n  let oddCollatzIndex52 = 0;\n  let evenCollatzIndex53 = 0;\n  let oddCollatzIndex53 = 0;\n  let evenCollatzIndex54 = 0;\n  let oddCollatzIndex54 = 0;\n  let evenCollatzIndex55 = 0;\n  let oddCollatzIndex55 = 0;\n  let evenCollatzIndex56 = 0;\n  let oddCollatzIndex56 = 0;\n  let evenCollatzIndex57 = 0;\n  let oddCollatzIndex57 = 0;\n  let evenCollatzIndex58 = 0;\n  let oddCollatzIndex58 = 0;\n  let evenCollatzIndex59 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let month = dateArray[1];\n  let day = dateArray[2];\n  let year = dateArray[3];\n  let days = day.length;\n  let monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays3 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays4 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays5 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays6 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays7 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays8 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays9 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays10 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays11 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays12 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays13 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays14 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays15 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays16 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays17 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays18 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays19 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays20 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays21 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays22 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays23 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays24 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays25 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays26 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays27 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays28 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays29 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays30 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays31 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays32 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays33 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays34 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays35 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays36 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays37 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays38 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthDays39 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let wordsSplit = [];\n  let wordsSplitCount = 0;\n  let wordsSplitLength = 0;\n  let wordsSplitLengthCount = 0;\n  let wordsSplitLengthLength = 0;\n  let wordsSplitLengthLengthCount = 0;\n  let wordsSplitLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthCount = 0;\n  let wordsSplitLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  let start = Math.max(interval1.start, interval2.start)\n  let end = Math.min(interval1.end, interval2.end)\n  let length = end - start\n  if (length === 1) {\n    return \"YES\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  let prime = true\n  for (let i = 3; i <= Math.sqrt(length); i += 2) {\n    if (length % i === 0) {\n      prime = false\n      break\n    }\n  }\n  return prime? \"YES\" : \"NO\"\n}\n\nconst test = () => {\n  let interval1 = {start: 1, end: 2}\n  let interval2 = {start: 2, end: 3}\n  let interval3 = {start: -1, end: 1}\n  let interval4 = {start: 0, end: 4}\n  let interval5 = {start: -3, end: -1}\n  let interval6 = {start: -5, end: 5}\n  let result = intersection(interval1, interval2)\n  console.log(result)\n  result = intersection(interval1, interval3)\n  console.log(result)\n  result = intersection(interval1, interval4)\n  console.log(result)\n  result = intersection(interval1, interval5)\n  console.log(result)\n  result = intersection(interval1, interval6)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res = prodSigns(arr.slice(0, i)) + prodSigns(arr.slice(i));\n  }\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(n).fill(false);\n  const minPaths = new Array(k).fill(0);\n  const minPathsIndex = new Array(k).fill(0);\n  for (let i = 0; i < k; i++) {\n    minPaths[i] = 0;\n    minPathsIndex[i] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      const neighbors = getNeighbors(grid, i, j);\n      for (let k = 0; k < neighbors.length; k++) {\n        const neighbor = neighbors[k];\n        if (visited[neighbor[0]] || visited[neighbor[1]]) {\n          continue;\n        }\n        visited[neighbor[0]] = visited[neighbor[1]] = true;\n        if (minPaths[k] === 0) {\n          minPaths[k] = 1;\n          minPathsIndex[k] = i;\n        } else {\n          minPaths[k]++;\n          minPathsIndex[k] = i;\n        }\n      }\n    }\n  }\n  return minPaths;\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n  if (a === b) {\n    return a;\n  }\n  let gcd = a;\n  while (gcd!== 1) {\n    if (a % gcd === 0) {\n      return gcd;\n    }\n    if (b % gcd === 0) {\n      return gcd;\n    }\n    gcd = gcd % gcd;\n  }\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c + d);\n    a = b;\n    b = c;\n    c = d;\n    d = result[i - 1];\n  }\n  return result;\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];\n  return digits[n];\n};\n\nmodule.exports = digits;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const brackets = ['[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[', ']', '{', '}', '(', ')', '[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = lastChar.match(/[a-zA-Z]/);\n  const isNotALetter =!isAlphabetical;\n  return isNotALetter;\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is an alphabetic character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrIndexMax = -1;\n  let arrIndexMin = -1;\n  let arrIndexMax2 = -1;\n  let arrIndexMin2 = -1;\n  let arrIndexMax3 = -1;\n  let arrIndexMin3 = -1;\n  let arrIndexMax4 = -1;\n  let arrIndexMin4 = -1;\n  let arrIndexMax5 = -1;\n  let arrIndexMin5 = -1;\n  let arrIndexMax6 = -1;\n  let arrIndexMin6 = -1;\n  let arrIndexMax7 = -1;\n  let arrIndexMin7 = -1;\n  let arrIndexMax8 = -1;\n  let arrIndexMin8 = -1;\n  let arrIndexMax9 = -1;\n  let arrIndexMin9 = -1;\n  let arrIndexMax10 = -1;\n  let arrIndexMin10 = -1;\n  let arrIndexMax11 = -1;\n  let arrIndexMin11 = -1;\n  let arrIndexMax12 = -1;\n  let arrIndexMin12 = -1;\n  let arrIndexMax13 = -1;\n  let arrIndexMin13 = -1;\n  let arrIndexMax14 = -1;\n  let arrIndexMin14 = -1;\n  let arrIndexMax15 = -1;\n  let arrIndexMin15 = -1;\n  let arrIndexMax16 = -1;\n  let arrIndexMin16 = -1;\n  let arrIndexMax17 = -1;\n  let arrIndexMin17 = -1;\n  let arrIndexMax18 = -1;\n  let arrIndexMin18 = -1;\n  let arrIndexMax19 = -1;\n  let arrIndexMin19 = -1;\n  let arrIndexMax20 = -1;\n  let arrIndexMin20 = -1;\n  let arrIndexMax21 = -1;\n  let arrIndexMin21 = -1;\n  let arrIndexMax22 = -1;\n  let arrIndexMin22 = -1;\n  let arrIndexMax23 = -1;\n  let arrIndexMin23 = -1;\n  let arrIndexMax24 = -1;\n  let arrIndexMin24 = -1;\n  let arrIndexMax25 = -1;\n  let arrIndexMin25 = -1;\n  let arrIndexMax26 = -1;\n  let arrIndexMin26 = -1;\n  let arrIndexMax27 = -1;\n  let arrIndexMin27 = -1;\n  let arrIndexMax28 = -1;\n  let arrIndexMin28 = -1;\n  let arrIndexMax29 = -1;\n  let arrIndexMin29 = -1;\n  let arrIndexMax30 = -1;\n  let arrIndexMin30 = -1;\n  let arrIndexMax31 = -1;\n  let arrIndexMin31 = -1;\n  let arrIndexMax32 = -1;\n  let arrIndexMin32 = -1;\n  let arrIndexMax33 = -1;\n  let arrIndexMin33 = -1;\n  let arrIndexMax34 = -1;\n  let arrIndexMin34 = -1;\n  let arrIndexMax35 = -1;\n  let arrIndexMin35 = -1;\n  let arrIndexMax36 = -1;\n  let arrIndexMin36 = -1;\n  let arrIndexMax37 = -1;\n  let arrIndexMin37 = -1;\n  let arrIndexMax38 = -1;\n  let arrIndexMin38 = -1;\n  let arrIndexMax39 = -1;\n  let arrIndexMin39 = -1;\n  let arrIndexMax40 = -1;\n  let arrIndexMin40 = -1;\n  let arrIndexMax41 = -1;\n  let arrIndexMin41 = -1;\n  let arrIndexMax42 = -1;\n  let arrIndexMin42 = -1;\n  let arrIndexMax43 = -1;\n  let arrIndexMin43 = -1;\n  let arrIndexMax44 = -1;\n  let arrIndexMin44 = -1;\n  let arrIndexMax45 = -1;\n  let arrIndexMin45 = -1;\n  let arrIndexMax46 = -1;\n  let arrIndexMin46 = -1;\n  let arrIndexMax47 = -1;\n  let arrIndexMin47 = -1;\n  let arrIndexMax48 = -1;\n  let arrIndexMin48 = -1;\n  let arrIndexMax49 = -1;\n  let arrIndexMin49 = -1;\n  let arrIndexMax50 = -1;\n  let arrIndexMin50 = -1;\n  let arrIndexMax51 = -1;\n  let arrIndexMin51 = -1;\n  let arrIndexMax52 = -1;\n  let arrIndexMin52 = -1;\n  let arrIndexMax53 = -1;\n  let arrIndexMin53 = -1;\n  let arrIndexMax54 = -1;\n  let arrIndexMin54 = -1;\n  let arrIndexMax55 = -1;\n  let arrIndexMin55 = -1;\n  let arrIndexMax56 = -1;\n  let arrIndexMin56 = -1;\n  let arrIndexMax57 = -1;\n  let arrIndexMin57 = -1;\n  let arrIndexMax58 = -1;\n  let arrIndexMin58 = -1;\n  let arrIndexMax59 = -1;\n  let arrIndexMin59 = -1;\n  let arrIndexMax60 = -1;\n  let arrIndexMin60 = -1;\n  let arrIndexMax61 = -1;\n  let arrIndexMin61 = -1;\n  let arrIndexMax62 = -1;\n  let arrIndexMin62 = -1;\n  let arrIndexMax63 = -1;\n  let arrIndexMin63 = -1;\n  let arrIndexMax64 = -1;\n  let arrIndexMin64 = -1;\n  let arrIndexMax65 = -1;\n  let arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  return [a, b];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareThree = (a, b, c) => {\n  if (a === b && a === c) {\n    return null;\n  }\n  if (a < b && a < c) {\n    return a;\n  }\n  if (b < a && b < c) {\n    return b;\n  }\n  if (c < a && c < b) {\n    return c;\n  }\n  return null;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a === b && a === c && a === d) {\n    return null;\n  }\n  if (a < b && a < c && a < d) {\n    return a;\n  }\n  if (b < a && b < c && b < d) {\n    return b;\n  }\n  if (c < a && c < b && c < d) {\n    return c;\n  }\n  if (d < a && d < b && d < c) {\n    return d;\n  }\n  return null;\n};\n\nconst compareFive = (a, b, c, d, e) => {\n  if (a === b && a === c && a === d && a === e) {\n    return null;\n  }\n  if (a < b && a < c && a < d && a < e) {\n    return a;\n  }\n  if (b < a && b < c && b < d && b < e) {\n    return b;\n  }\n  if (c < a && c < b && c < d && c < e) {\n    return c;\n  }\n  if (d < a && d < b && d < c && d < e) {\n    return d;\n  }\n  if (e < a && e < b && e < c && e < d) {\n    return e;\n  }\n  return null;\n};\n\nconst compareSix = (a, b, c, d, e, f) => {\n  if (a === b && a === c && a === d && a === e && a === f) {\n    return null;\n  }\n  if (a < b && a < c && a < d && a < e && a < f) {\n    return a;\n  }\n  if (b < a && b < c && b < d && b < e && b < f) {\n    return b;\n  }\n  if (c < a && c < b && c < d && c < e && c < f) {\n    return c;\n  }\n  if (d < a && d < b && d < c && d < e && d < f) {\n    return d;\n  }\n  if (e < a && e < b && e < c && e < d && e < f) {\n    return e;\n  }\n  if (f < a && f < b && f < c && f < d && f < e) {\n    return f;\n  }\n  return null;\n};\n\nconst compareSeven = (a, b, c, d, e, f, g) => {\n  if (a === b && a === c && a === d && a === e && a === f && a === g) {\n    return null;\n  }\n  if (a < b && a < c && a < d && a < e && a < f && a < g) {\n    return a;\n  }\n  if (b < a && b < c && b < d && b < e && b < f && b < g) {\n    return b;\n  }\n  if (c < a && c < b && c < d && c < e && c < f && c < g) {\n    return c;\n  }\n  if (d < a && d < b && d < c && d < e && d < f && d < g) {\n    return d;\n  }\n  if (e < a && e < b && e < c && e < d && e < f && e < g) {\n    return e;\n  }\n  if (f < a && f < b && f < c && f < d && f < e && f < g) {\n    return f;\n  }\n  if (g < a && g < b && g < c && g < d && g < e && g < f) {\n    return g;\n  }\n  return null;\n};\n\nconst compareEight = (a, b, c, d, e, f, g, h) => {\n  if (a === b && a === c && a === d && a === e && a === f && a === g && a === h) {\n    return null;\n  }\n  if (a < b && a < c && a < d && a < e && a < f && a < g && a < h) {\n    return a;\n  }\n  if (b < a && b < c && b < d && b < e && b < f && b < g && b < h) {\n    return b;\n  }\n  if (c < a && c < b && c < d && c < e && c < f && c < g && c < h) {\n    return c;\n  }\n  if (d < a && d < b && d < c && d < e && d < f && d < g && d < h) {\n    return d;\n  }\n  if (e < a && e < b && e < c && e < d && e < f && e < g && e < h) {\n    return e;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOdd = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16!== 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEven = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEvenOrZero = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0 || n === 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEvenOrZeroOrNegative = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0 || n < 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEvenOrZeroOrNegativeOrZero = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0 || n === 0 || n < 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEvenOrZeroOrNegativeOrZeroOrNegative = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0 || n < 0 || n < 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEvenOrZeroOrNegativeOrZeroOrNegativeOrZero = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0 || n < 0 || n < 0 || n < 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumOddOrEvenOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 || n % 2!== 0 && n % 4 === 0 && n % 8 === 0 || n < 0 || n < 0 || n < 0 || n < 0;\n};\n\nmodule.exports = {\n  isEqualToSumEven,\n  isEqualToSumOdd,\n  isEqualToSumOddOrEven,\n  isEqualToSumOddOrEvenOrZero,\n  isEqualToSumOddOrEvenOrZeroOrNegative,\n  isEqualToSumOddOrEvenOrZeroOrNegativeOrZero,\n  isEqualToSumOddOrEvenOrZeroOrNegativeOrZeroOrNegative,\n  isEqualToSumOddOrEvenOrZeroOrNegativeOrZeroOrNegativeOrZero,\n  isEqualToSumOddOrEvenOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('The number must be greater than 0.');\n  }\n  return factorial(n);\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n\n  let prefixes = [string];\n  let prefix = string;\n  while (prefix.length > 0) {\n    let prefixesFrom = prefixes.slice();\n    prefixes = [];\n    for (let i = 0; i < prefixesFrom.length; i++) {\n      prefix = prefixesFrom[i];\n      if (prefix.length > 0) {\n        prefixes.push(prefix.substring(0, prefix.length - 1));\n      }\n    }\n  }\n  return prefixes;\n};\n\nmodule.exports = {\n  allPrefixes\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\nconst getFileName = (filePath) => {\n  return filePath.split('/').pop();\n}\n\nconst getFilePath = (filePath) => {\n  return filePath.split('/').join('/');\n}\n\nconst getFileNameWithoutExtension = (filePath) => {\n  return getFileName(filePath).split('.').pop();\n}\n\nconst getFileExtension = (filePath) => {\n  return getFileName(filePath).split('.').pop();\n}\n\nconst getFileExtensionWithoutDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.');\n}\n\nconst getFileExtensionWithoutDotAndSlash = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlash = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDotAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDotAndDotAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDotAndDotAndDotAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (filePath) => {\n  return getFileExtension(filePath).split('.').slice(0, -1).join('.').split('/').slice(0, -1).pop().split('.').pop().split('.').pop();\n}\n\nconst getFileExtensionWithoutDotAndSlashAndSlashAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length < 3) {\n    return 'No';\n  }\n\n  if (file_name.match(/[^a-zA-Z0-9.]/g)) {\n    return 'No';\n  }\n\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  if (file_name.match(/\\./g)) {\n    return 'No';\n  }\n\n  if (file_name.match(/[^a-zA-Z0-9.]/g)) {\n    return 'No';\n  }\n\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  if (file_name.match(/\\./g)) {\n    return 'No';\n  }\n\n  if (file_name.match(/[^a-zA-Z0-9.]/g)) {\n    return 'No';\n  }\n\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  return 'Yes';\n};\n\nmodule.exports = fileNameCheck;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(num); i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n    const [xN, nN] = x.split(\"/\");\n    const [xD, nD] = n.split(\"/\");\n    if (xN === nN && xD === nD) {\n        return true;\n    }\n    return false;\n};\n\nconst test = (x, n) => {\n    console.log(simplify(x, n));\n};\n\ntest(\"1/5\", \"5/1\");\ntest(\"1/6\", \"2/1\");\ntest(\"7/10\", \"10/2\");\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    const sumA = a.reduce((sum, digit) => sum + digit, 0);\n    const sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, 1 + a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf2 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf3 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf4 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf5 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf6 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf7 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst bf8 = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const orbit = planets[i].getOrbit();\n    for (let j = 0; j < planets.length; j++) {\n      if (i!== j) {\n        const orbit2 = planets[j].getOrbit();\n        if (orbit.intersects(orbit2)) {\n          result.push(planets[i]);\n          break;\n        }\n      }\n    }\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum2 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum3 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum4 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum5 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum6 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum7 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum8 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum9 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum10 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum11 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum12 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum13 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum14 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.map((s) => s.substr(0, sum));\n};\n\nconst sortedListSum15 = (lst) => {\n  let sorted =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string contains space-delimited numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst main = () => {\n  console.log(xOrY(7, 34, 12));\n  console.log(xOrY(15, 8, 5));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map(guess => {\n    return Math.abs(guess - game[guess]);\n  });\n  const guesses = game.map(guess => {\n    return guess - game[guess];\n  });\n  return [...score,...guesses];\n};\n\nexport default compare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let strongest = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpattern = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck2 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck3 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck4 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck5 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck6 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck7 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck8 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck9 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck10 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck11 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck12 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck13 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck14 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck15 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck16 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst cycpatternCheck17 = (a, b) => {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num) {\n    if (num % 10 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let num = number;\n  while (num > 0) {\n    let index = num % 10;\n    result = (index < 4)? (index + 'i') : (index + 'x' + (index - 3));\n    num = Math.floor(num / 10);\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = Math.abs(a - b);\n  const bc = Math.abs(b - c);\n  const ca = Math.abs(c - a);\n  return (ab + bc + ca) === 0;\n};\n\n/*\n Gives the length of a triangle.\n  Example:\n  length(3, 4, 5) == 5\n  length(1, 2, 3) == 0\n  */\nconst length = (a, b, c) => {\n  return Math.sqrt(Math.pow(a - b, 2) + Math.pow(b - c, 2) + Math.pow(c - a, 2));\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(3, 4, 5) == 5 + 4 + 3\n  perimeter(1, 2, 3) == 0\n  */\nconst perimeter = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(3, 4, 5) == 5/2\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return Math.abs(a + b + c) / 2;\n};\n\n/*\n G", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax5 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax6 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax7 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*Write a function that accepts a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax8 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let result = [];\n  let count = 0;\n  while (count < need) {\n    if (remaining === 0) {\n      result.push(number);\n      break;\n    }\n    if (remaining < number) {\n      result.push(number);\n      count += number;\n      break;\n    }\n    number -= remaining;\n    remaining -= number;\n    count += number;\n  }\n  return result;\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n];\n\nconsole.log(test.map(eat));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let distinct = 0;\n  let temp = '';\n  let i = 0;\n  while (i < string.length) {\n    temp = string.substr(i, 1);\n    if (temp!== '') {\n      if (distinct === 0) {\n        distinct = 1;\n      } else {\n        distinct += 1;\n      }\n    }\n    i += 1;\n  }\n  count = distinct;\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length!== operand.length - 1) {\n    throw new Error('The length of operator list is not equal to the length of operand list minus one.');\n  }\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operator[i](operand[i]);\n  }\n  return result;\n};\n\nconst evaluate = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate2 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate3 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate4 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate5 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate6 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate7 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate8 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate9 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate10 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate11 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate12 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate13 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate14 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate15 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate16 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate17 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate18 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate19 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate20 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate21 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate22 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate23 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate24 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate25 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate26 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate27 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate28 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate29 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate30 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate31 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate32 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate33 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate34 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate35 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate36 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate37 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate38 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate39 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate40 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate41 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate42 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate43 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate44 = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\nconst evaluate", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if (s.length === 0) return s;\n  let result = s.split('').map(x => x.toUpperCase()).join('');\n  if (s.length === 1) return result;\n  let result2 = s.split('').map(x => x.toLowerCase()).join('');\n  if (result === result2) return result;\n  return result2;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == 'c5f9f7f0b9b8b8a8c8a8b8a9b9c9b9c9b9c9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  while (a <= b) {\n    result.push(a);\n    a++;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    music_list.push(parseNote(music_array[i]));\n  }\n  return music_list;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your task is to return a number representing how many beats done this note last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseNote('o')\n  4\n  */\nconst parseNote = (note_string) => {\n  if (note_string === 'o') {\n    return 4;\n  } else if (note_string === 'o|') {\n    return 4;\n  } else if (note_string === '|o') {\n    return 4;\n  } else if (note_string === '|o|') {\n    return 4;\n  } else if (note_string === 'o.|') {\n    return 4;\n  } else if (note_string === '|o.|') {\n    return 4;\n  } else if (note_string === 'o|.|') {\n    return 4;\n  } else if (note_string === '|o|.|') {\n    return 4;\n  } else if (note_string === 'o|o') {\n    return 4;\n  } else if (note_string === '|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o') {\n    return 4;\n  } else if (note_string === '|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o') {\n    return 4;\n  } else if (note_string === '|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === '|o|o|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o|o|o') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n    return 4;\n  } else if (note_string === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o') {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number === 0) {\n    return 0;\n  }\n  if (number === 1) {\n    return 1;\n  }\n  if (number === 2) {\n    return 0.5;\n  }\n  if (number === 3) {\n    return 0.25;\n  }\n  if (number === 4) {\n    return 0.125;\n  }\n  if (number === 5) {\n    return 0.0625;\n  }\n  if (number === 6) {\n    return 0.03125;\n  }\n  if (number === 7) {\n    return 0.015625;\n  }\n  if (number === 8) {\n    return 0.0078125;\n  }\n  if (number === 9) {\n    return 0.00390625;\n  }\n  if (number === 10) {\n    return 0.001953125;\n  }\n  if (number === 11) {\n    return 0.0009765625;\n  }\n  if (number === 12) {\n    return 0.00048828125;\n  }\n  if (number === 13) {\n    return 0.000244140625;\n  }\n  if (number === 14) {\n    return 0.0001220703125;\n  }\n  if (number === 15) {\n    return 0.00006103515625;\n  }\n  if (number === 16) {\n    return 0.000030517578125;\n  }\n  if (number === 17) {\n    return 0.0000152587890625;\n  }\n  if (number === 18) {\n    return 0.0000076293945312;\n  }\n  if (number === 19) {\n    return 0.000003814697265625;\n  }\n  if (number === 20) {\n    return 0.00000152490234375;\n  }\n  if (number === 21) {\n    return 0.00000076293945312;\n  }\n  if (number === 22) {\n    return 0.000000390625;\n  }\n  if (number === 23) {\n    return 0.0000001953125;\n  }\n  if (number === 24) {\n    return 0.0000009765625;\n  }\n  if (number === 25) {\n    return 0.00000048828125;\n  }\n  if (number === 26) {\n    return 0.000000244140625;\n  }\n  if (number === 27) {\n    return 0.0000001220703125;\n  }\n  if (number === 28) {\n    return 0.000000061035156250;\n  }\n  if (number === 29) {\n    return 0.000000030517578125;\n  }\n  if (number === 30) {\n    return 0.0000000152587890625;\n  }\n  if (number === 31) {\n    return 0.0000000076293945312;\n  }\n  if (number === 32) {\n    return 0.000000003814697265625;\n  }\n  if (number === 33) {\n    return 0.000000001953125;\n  }\n  if (number === 34) {\n    return 0.000000009765625;\n  }\n  if (number === 35) {\n    return 0.0000000048828125;\n  }\n  if (number === 36) {\n    return 0.00000000244140625;\n  }\n  if (number === 37) {\n    return 0.000000001220703125;\n  }\n  if (number === 38) {\n    return 0.0000000061035156250;\n  }\n  if (number === 39) {\n    return 0.0000000030517578125;\n  }\n  if (number === 40) {\n    return 0.00000000152587890625;\n  }\n  if (number === 41) {\n    return 0.0000000076293945312;\n  }\n  if (number === 42) {\n    return 0.000000003814697265625;\n  }\n  if (number === 43) {\n    return 0.000000001953125;\n  }\n  if (number === 44) {\n    return 0.000000009765625;\n  }\n  if (number === 45) {\n    return 0.0000000048828125;\n  }\n  if (number === 46) {\n    return 0.00000000244140625;\n  }\n  if (number === 47) {\n    return 0.000000001220703125;\n  }\n  if (number === 48) {\n    return 0.0000000061035156250;\n  }\n  if (number === 49) {\n    return 0.0000000030517578125;\n  }\n  if (number === 50) {\n    return 0.00000000152587890625;\n  }\n  if (number === 51) {\n    return 0.0000000076293945312;\n  }\n  if (number === 52) {\n    return 0.000000003814697265625;\n  }\n  if (number === 53) {\n    return 0.000000001953125;\n  }\n  if (number === 54) {\n    return 0.000000009765625;\n  }\n  if (number === 55) {\n    return 0.0000000048828125;\n  }\n  if (number === 56) {\n    return 0.00000000244140625;\n  }\n  if (number === 57) {\n    return 0.000000001220703125;\n  }\n  if (number === 58) {\n    return 0.0000000061035156250;\n  }\n  if (number === 59) {\n    return 0.0000000030517578125;\n  }\n  if (number === 60) {\n    return 0.00000000152587890625;\n  }\n  if (number === 61) {\n    return 0.0000000076293945312;\n  }\n  if (number === 62) {\n    return 0.000000003814697265625;\n  }\n  if (number === 63) {\n    return 0.000000001953", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let result = []\n  let max = numbers[0]\n  let min = numbers[0]\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push((numbers[i] - min) / (max - min))\n  }\n  return result\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnit2,\n  rescaleToUnit3,\n  rescaleToUnit4,\n  rescaleToUnit5,\n  rescaleToUnit6,\n  rescaleToUnit7,\n  rescaleToUnit8,\n  rescaleToUnit9,\n  rescaleToUnit10,\n  rescaleToUnit11,\n  rescaleToUnit12,\n  rescaleToUnit13,\n  rescaleToUnit14,\n  rescaleToUnit15,\n  rescaleToUnit16,\n  rescaleToUnit17,\n  rescaleToUnit18,\n  rescaleToUnit19,\n  rescaleToUnit20,\n  rescaleToUnit21,\n  rescaleToUnit22,\n  rescaleToUnit23,\n  rescaleToUnit24,\n  rescaleToUnit25,\n  rescaleToUnit26,\n  rescaleToUnit27,\n  rescaleToUnit28,\n  rescaleToUnit29,\n  rescaleToUnit30,\n  rescaleToUnit31,\n  rescaleToUnit32,\n  rescaleToUnit33,\n  rescaleToUnit34,\n  rescaleToUnit35,\n  rescaleToUnit36,\n  rescaleToUnit37,\n  rescaleToUnit38,\n  rescaleToUnit39,\n  rescaleToUnit40,\n  rescaleToUnit41,\n  rescaleToUnit42,\n  rescaleToUnit43,\n  rescaleToUnit44,\n  rescaleToUnit45,\n  rescaleToUnit46,\n  rescaleToUnit47,\n  rescaleToUnit48,\n  rescaleToUnit49,\n  rescaleToUnit50,\n  rescaleToUnit51,\n  rescaleToUnit52,\n  rescaleToUnit53,\n  rescaleToUnit54,\n  rescaleToUnit55,\n  rescaleToUnit56,\n  rescaleToUnit57,\n  rescaleToUnit58,\n  rescaleToUnit59,\n  rescaleToUnit60,\n  rescaleToUnit61,\n  rescaleToUnit62,\n  rescaleToUnit63,\n  rescaleToUnit64,\n  rescaleToUnit65,\n  rescaleToUnit66,\n  rescaleToUnit67,\n  rescaleToUnit68,\n  rescaleToUnit69,\n  rescaleToUnit70,\n  rescaleToUnit71,\n  rescaleToUnit72,\n  rescaleToUnit73,\n  rescaleToUnit74,\n  rescaleToUnit75,\n  rescaleToUnit76,\n  rescaleToUnit77,\n  rescaleToUnit78,\n  rescaleToUnit79,\n  rescaleToUnit80,\n  rescaleToUnit81,\n  rescaleToUnit82,\n  rescaleToUnit83,\n  rescaleToUnit84,\n  rescaleToUnit85,\n  rescaleToUnit86,\n  rescaleToUnit87,\n  rescaleToUnit88,\n  rescaleToUnit89,\n  rescaleToUnit90,\n  rescaleToUnit91,\n  rescaleToUnit92,\n  rescaleToUnit93,\n  rescaleToUnit94,\n  rescaleToUnit95,\n  rescaleToUnit96,\n  rescaleToUnit97,\n  rescaleToUnit98,\n  rescaleToUnit99,\n  rescaleToUnit100,\n  rescaleToUnit101,\n  rescaleToUnit102,\n  rescaleToUnit103,\n  rescaleToUnit104,\n  rescaleToUnit105,\n  rescaleToUnit106,\n  rescaleToUnit107,\n  rescaleToUnit108,\n  rescaleToUnit109,\n  rescaleToUnit110,\n  rescaleToUnit111,\n  rescaleToUnit112,\n  rescaleToUnit113,\n  rescaleToUnit114,\n  rescaleToUnit115,\n  rescaleToUnit116,\n  rescaleToUnit117,\n  rescaleToUnit118,\n  rescaleToUnit119,\n  rescaleToUnit120,\n  rescaleToUnit121,\n  rescaleToUnit122,\n  rescaleToUnit123,\n  rescaleToUnit124,\n  rescaleToUnit125,\n  rescaleToUnit126,\n  rescaleToUnit127,\n  rescaleToUnit128,\n  rescaleToUnit129,\n  rescaleToUnit130,\n  rescaleToUnit131,\n  rescaleToUnit132,\n  rescaleToUnit133,\n  rescaleToUnit134,\n  rescaleToUnit135,\n  rescaleToUnit136,\n  rescaleToUnit137,\n  rescaleToUnit138,\n  rescaleToUnit139,\n  rescaleToUnit140,\n  rescaleToUnit141,\n  rescaleToUnit142,\n  rescaleToUnit143,\n  rescaleToUnit144,\n  rescaleToUnit145,\n  rescaleToUnit146,\n  rescaleToUnit147,\n  rescaleToUnit148,\n  rescaleToUnit149,\n  rescaleToUnit150,\n  rescaleToUnit151,\n  rescaleToUnit152,\n  rescaleToUnit153,\n  rescaleToUnit154,\n  rescaleToUnit155,\n  rescaleToUnit156,\n  rescaleToUnit157,\n  rescaleToUnit158,\n  rescaleToUnit159,\n  rescaleToUnit160,\n  rescaleToUnit", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n * Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/**\n * Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [True, False, False]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [True, False, False]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/**\n * Filter gives list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n * Filter gives list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplex = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n * Filter gives list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, 5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/**\n * Filter gives list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [['a', 3.14, 5]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/**\n * Filter gives list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => typeof value === 'function');\n};\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNull(['a', 3.14, 5])\n  [null, null, null]\n  >>> filterNull([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/**\n * Filter gives list of any python values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined, undefined, undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNull(['a', 3.14, 5])\n  [null, null, null]\n  >>> filterNull([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/**\n * Filter gives list of any python values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined, undefined, undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNull(['a', 3.14, 5])\n  [null, null, null]\n  >>> filterNull([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/**\n * Filter gives list of any python values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined, undefined, undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNull(['a', 3.14, 5])\n  [null, null, null]\n  >>> filterNull([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/**\n * Filter gives list of any python values only", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * strlen('abc')\n  * 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of gives string\n  * @param {string} string\n  * @return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* For a gives number n, found the smaller number that dividing n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* For a gives number n, found the number that is the largest multiple of the smallest divisor that divides n evenly\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  let divisor = smallestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the largest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the smallest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the largest multiple of the largest divisor that divides n evenly\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the smallest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the largest multiple of the largest divisor that divides n evenly\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the smallest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the largest multiple of the largest divisor that divides n evenly\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the smallest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the largest multiple of the largest divisor that divides n evenly\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the smallest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the largest multiple of the largest divisor that divides n evenly\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  let divisor = largestDivisor(n);\n  let multiple = n / divisor;\n  while (multiple % divisor === 0) {\n    multiple /= divisor;\n  }\n  return multiple;\n};\n\n/* For a gives number n, found the number that is the smallest multiple of the smallest divisor that divides n evenly\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n  let divisor = largestDivisor(n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = {\n  factorize\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === numbers.length || numbers[index]!== numbers[i]) {\n      result.push(numbers[index]);\n      index++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (character) => {\n    return character.toUpperCase();\n  });\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCaseAll = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAll('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string) => {\n  return string.split('').map((character) => {\n    return character.toUpperCase();\n  }).join('');\n};\n\n/* For a gives string, returns a string with all the characters in the string\n  flipped to uppercase.\n  >>> flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('Hello')\n  'HELLO'\n  */\nconst flipCaseAllWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (string)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'World'])\n  'Hello World'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ')\n}\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'World'])\n  'Hello World'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ')\n}\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'World'])\n  'Hello World'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'World'])\n  'Hello World'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'World'])\n  'Hello World'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'World'])\n  'Hello World'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  ['Hello', 'World']\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */\nconst stringToWords = (str) => {\n  return str.split(/[\\s\\,]+/)\n}\n\n/*\n  Convert a list of words to a string\n  >>> stringToWords('Hello World')\n  'Hello World'\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].indexOf(prefix) === 0) {\n      return [strings[0]];\n    }\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nexport default filterByPrefix;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zeroBalance = operations.reduce((acc, op) => {\n    if (op.type === 'withdraw') {\n      return acc - op.amount;\n    } else {\n      return acc + op.amount;\n    }\n  }, 0);\n\n  return zeroBalance < 0;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign = (l) => {\n  return l.map((e) => Math.sign(e));\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign2 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign3 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign4 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign5 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign6 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign7 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, -9, 123, 1]\n  */\nconst getSign8 = (l) => {\n  return l.map((e) => {\n    if (e < 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\n/*Return a list of numbers with the same sign as the first number in the list.\n  >>> getSign([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSign([5, 3, -5, 2, -3, 3, 9, 0, 123,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number between 0 and n-1.\n  >>> random(6)\n  2\n  >>> random(101)\n  7\n  >>> random(11)\n  5\n  >>> random(13441)\n  12\n  >>> random(61)\n  4\n  >>> random(4)\n  1\n  >>> random(1)\n  0\n  */\nconst random = (n) => {\n  return Math.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n === 1) { return xs[0]; }\n  const max = xs.reduce((prev, item, index) => { return Math.max(prev, item);\n }, 0);\n  const min = xs.reduce((prev, item, index) => { return Math.min(prev, item);\n }, Infinity);\n  const mid = (min + max) / 2;\n  const left = poly(xs, mid);\n  const right = poly(xs, mid + 1);\n  const left_max = poly(xs, mid - 1);\n  const right_min = poly(xs, mid + 2);\n  const left_min = poly(xs, mid + 3);\n  const right_max = poly(xs, mid + 4);\n  const left_right = poly(xs, mid + 5);\n  const right_left = poly(xs, mid + 6);\n  const left_right_max = poly(xs, mid + 7);\n  const right_left_min = poly(xs, mid + 8);\n  const left_right_min = poly(xs, mid + 9);\n  const left_right_max = poly(xs, mid + 10);\n  const left_right_min = poly(xs, mid + 11);\n  const left_right_max = poly(xs, mid + 12);\n  const left_right_min = poly(xs, mid + 13);\n  const left_right_max = poly(xs, mid + 14);\n  const left_right_min = poly(xs, mid + 15);\n  const left_right_max = poly(xs, mid + 16);\n  const left_right_min = poly(xs, mid + 17);\n  const left_right_max = poly(xs, mid + 18);\n  const left_right_min = poly(xs, mid + 19);\n  const left_right_max = poly(xs, mid + 20);\n  const left_right_min = poly(xs, mid + 21);\n  const left_right_max = poly(xs, mid + 22);\n  const left_right_min = poly(xs, mid + 23);\n  const left_right_max = poly(xs, mid + 24);\n  const left_right_min = poly(xs, mid + 25);\n  const left_right_max = poly(xs, mid + 26);\n  const left_right_min = poly(xs, mid + 27);\n  const left_right_max = poly(xs, mid + 28);\n  const left_right_min = poly(xs, mid + 29);\n  const left_right_max = poly(xs, mid + 30);\n  const left_right_min = poly(xs, mid + 31);\n  const left_right_max = poly(xs, mid + 32);\n  const left_right_min = poly(xs, mid + 33);\n  const left_right_max = poly(xs, mid + 34);\n  const left_right_min = poly(xs, mid + 35);\n  const left_right_max = poly(xs, mid + 36);\n  const left_right_min = poly(xs, mid + 37);\n  const left_right_max = poly(xs, mid + 38);\n  const left_right_min = poly(xs, mid + 39);\n  const left_right_max = poly(xs, mid + 40);\n  const left_right_min = poly(xs, mid + 41);\n  const left_right_max = poly(xs, mid + 42);\n  const left_right_min = poly(xs, mid + 43);\n  const left_right_max = poly(xs, mid + 44);\n  const left_right_min = poly(xs, mid + 45);\n  const left_right_max = poly(xs, mid + 46);\n  const left_right_min = poly(xs, mid + 47);\n  const left_right_max = poly(xs, mid + 48);\n  const left_right_min = poly(xs, mid + 49);\n  const left_right_max = poly(xs, mid + 50);\n  const left_right_min = poly(xs, mid + 51);\n  const left_right_max = poly(xs, mid + 52);\n  const left_right_min = poly(xs, mid + 53);\n  const left_right_max = poly(xs, mid + 54);\n  const left_right_min = poly(xs, mid + 55);\n  const left_right_max = poly(xs, mid + 56);\n  const left_right_min = poly(xs, mid + 57);\n  const left_right_max = poly(xs, mid + 58);\n  const left_right_min = poly(xs, mid + 59);\n  const left_right_max = poly(xs, mid + 60);\n  const left_right_min = poly(xs, mid + 61);\n  const left_right_max = poly(xs, mid + 62);\n  const left_right_min = poly(xs, mid + 63);\n  const left_right_max = poly(xs, mid + 64);\n  const left_right_min = poly(xs, mid + 65);\n  const left_right_max = poly(xs, mid + 66);\n  const left_right_min = poly(xs, mid + 67);\n  const left_right_max = poly(xs, mid + 68);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(0);\n  const l4 = l.slice(0);\n  const l5 = l.slice(0);\n  const l6 = l.slice(0);\n  const l7 = l.slice(0);\n  const l8 = l.slice(0);\n  const l9 = l.slice(0);\n  const l10 = l.slice(0);\n  const l11 = l.slice(0);\n  const l12 = l.slice(0);\n  const l13 = l.slice(0);\n  const l14 = l.slice(0);\n  const l15 = l.slice(0);\n  const l16 = l.slice(0);\n  const l17 = l.slice(0);\n  const l18 = l.slice(0);\n  const l19 = l.slice(0);\n  const l20 = l.slice(0);\n  const l21 = l.slice(0);\n  const l22 = l.slice(0);\n  const l23 = l.slice(0);\n  const l24 = l.slice(0);\n  const l25 = l.slice(0);\n  const l26 = l.slice(0);\n  const l27 = l.slice(0);\n  const l28 = l.slice(0);\n  const l29 = l.slice(0);\n  const l30 = l.slice(0);\n  const l31 = l.slice(0);\n  const l32 = l.slice(0);\n  const l33 = l.slice(0);\n  const l34 = l.slice(0);\n  const l35 = l.slice(0);\n  const l36 = l.slice(0);\n  const l37 = l.slice(0);\n  const l38 = l.slice(0);\n  const l39 = l.slice(0);\n  const l40 = l.slice(0);\n  const l41 = l.slice(0);\n  const l42 = l.slice(0);\n  const l43 = l.slice(0);\n  const l44 = l.slice(0);\n  const l45 = l.slice(0);\n  const l46 = l.slice(0);\n  const l47 = l.slice(0);\n  const l48 = l.slice(0);\n  const l49 = l.slice(0);\n  const l50 = l.slice(0);\n  const l51 = l.slice(0);\n  const l52 = l.slice(0);\n  const l53 = l.slice(0);\n  const l54 = l.slice(0);\n  const l55 = l.slice(0);\n  const l56 = l.slice(0);\n  const l57 = l.slice(0);\n  const l58 = l.slice(0);\n  const l59 = l.slice(0);\n  const l60 = l.slice(0);\n  const l61 = l.slice(0);\n  const l62 = l.slice(0);\n  const l63 = l.slice(0);\n  const l64 = l.slice(0);\n  const l65 = l.slice(0);\n  const l66 = l.slice(0);\n  const l67 = l.slice(0);\n  const l68 = l.slice(0);\n  const l69 = l.slice(0);\n  const l70 = l.slice(0);\n  const l71 = l.slice(0);\n  const l72 = l.slice(0);\n  const l73 = l.slice(0);\n  const l74 = l.slice(0);\n  const l75 = l.slice(0);\n  const l76 = l.slice(0);\n  const l77 = l.slice(0);\n  const l78 = l.slice(0);\n  const l79 = l.slice(0);\n  const l80 = l.slice(0);\n  const l81 = l.slice(0);\n  const l82 = l.slice(0);\n  const l83 = l.slice(0);\n  const l84 = l.slice(0);\n  const l85 = l.slice(0);\n  const l86 = l.slice(0);\n  const l87 = l.slice(0);\n  const l88 = l.slice(0);\n  const l89 = l.slice(0);\n  const l90 = l.slice(0);\n  const l91 = l.slice(0);\n  const l92 = l.slice(0);\n  const l93 = l.slice(0);\n  const l94 = l.slice(0);\n  const l95 = l.slice(0);\n  const l96 = l.slice(0);\n  const l97 = l.slice(0);\n  const l98 = l.slice(0);\n  const l99 = l.slice(0);\n  const l100 = l.slice(0);\n  const l101 = l.slice(0);\n  const l102 = l.slice(0);\n  const l103 = l.slice(0);\n  const l104 = l.slice(0);\n  const l105 = l.slice(0);\n  const l106 = l.slice(0);\n  const l107 = l.slice(0);\n  const l108 = l.slice(0);\n  const l109 = l.slice(0);\n  const l110 = l.slice(0);\n  const l111 = l.slice(0);\n  const l112 = l.slice(0);\n  const l113 = l.slice(0);\n  const l114 = l.slice(0);\n  const l115 = l.slice(0);\n  const l116 = l.slice(0);\n  const l117 = l.slice(0);\n  const l118 = l.slice(0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n          j++;\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/**\n  Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n          j++;\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/**\n  Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n          j++;\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/**\n  Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n          j++;\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/**\n  Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n          j++;\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/**\n  Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n          j++;\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/**\n  Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 7) {\n      if (n % 13 === 11) {\n        count += 2;\n      } else {\n        count += 1;\n      }\n    } else {\n      count += 1;\n    }\n    n = n / 10;\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 0 && j % 2 === 0) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 1 && j % 2 === 1) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 1 && j % 2 === 1) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd2([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd2([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 1 && j % 2 === 1) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd3([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd3([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 1 && j % 2 === 1) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd4([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd4([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 1 && j % 2 === 1) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd5([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd5([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (i % 2 === 1 && j % 2 === 1) {\n        l2.push(l[i]);\n      }\n    }\n  }\n  return l2;\n};\n\n/*\n  This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd6([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd6([5, 6, 3, 4])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(0, 1) + group.slice(2));\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of four character. */ const encodeCyclic2 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) { groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n } for (const group of groups) { if (group.length == 4) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic2 functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) { groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n } for (const group of groups) { if (group.length == 4) groups2.push(group.slice(0, 1) + group.slice(2));\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of five character. */ const encodeCyclic3 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) { groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n } for (const group of groups) { if (group.length == 5) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic3 functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) { groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n } for (const group of groups) { if (group.length == 5) groups2.push(group.slice(0, 1) + group.slice(2));\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of six character. */ const encodeCyclic4 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) { groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n } for (const group of groups) { if (group.length == 6) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic4 functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) { groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n } for (const group of groups) { if (group.length == 6) groups2.push(group.slice(0, 1) + group.slice(2));\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of seven character. */ const encodeCyclic5 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) { groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n } for (const group of groups) { if (group.length == 7) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic5 functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) { groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n } for (const group of groups) { if (group.length == 7) groups2.push(group.slice(0, 1) + group.slice(2));\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n  returns encoding string by cycling groups of eight character. */ const encodeCyclic6 = (s) => { var groups = [], groups2 = []; for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1)\n  const fibPrime = primeFib(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib2(n - 1)\n  const fibPrime = primeFib2(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib3(n - 1)\n  const fibPrime = primeFib3(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib4(n - 1)\n  const fibPrime = primeFib4(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib5(n - 1)\n  const fibPrime = primeFib5(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib6(n - 1)\n  const fibPrime = primeFib6(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib7(n - 1)\n  const fibPrime = primeFib7(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib8(n - 1)\n  const fibPrime = primeFib8(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib9(n - 1)\n  const fibPrime = primeFib9(n - 2)\n  return fibPrime + fib\n}\n\n/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib10 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib10(n - 1)\n  const fibPrime = primeFib10(n - 2)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count === 3;\n};\n\nconst testTriplesSumToZero = () => {\n  assert(triplesSumToZero([1, 3, 5, 0]) === false);\n  assert(triplesSumToZero([1, 3, -2, 1]) === true);\n  assert(triplesSumToZero([1, 2, 3, 7]) === false);\n  assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true);\n  assert(triplesSumToZero([1]) === false);\n};\n\ntestTriplesSumToZero();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision2 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision3 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision4 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision5 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision6 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision7 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision8 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision9 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(Math.random() * 2 - 1);\n    cars2.push(Math.random() * 2 - 1);\n  }\n  const collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i] === cars2[j]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision10 = (n) => {\n  const cars = [];\n  const cars2 = [];\n  for (let i = 0; i < n; i++) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (j >= l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (j >= l.length) {\n      j = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (j >= l.length) {\n      j = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (j >= l.length) {\n      j = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (j >= l.length) {\n      j = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (j >= l.length) {\n      j = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n    if (i >= l.length) {\n      i = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let isPairSumToZero = false;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      isPairSumToZero = true;\n    }\n  }\n  return isPairSumToZero;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let result = '';\n  while (num > 0) {\n    let digit = num % base;\n    result = `${digit}${result}`;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\nconst changeBase2 = (x, base) => {\n  let num = x;\n  let result = '';\n  while (num > 0) {\n    let digit = num % base;\n    result = `${digit}${result}`;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\nmodule.exports = {\n  changeBase,\n  changeBase2,\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a length", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let k = Math.floor((i + j) / 2);\n    if (l[k] < l[j]) {\n      i = k + 1;\n    } else {\n      j = k;\n    }\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome2(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome3(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome4(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome5(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome6(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome7(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome8(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.length - 2);\n  return first === last && isPalindrome9(reversed);\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substr(1, text.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) {\n    throw new Error('n must be between 0 and p-1');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n % 2 === 0) {\n    return modp(n >> 1, p);\n  }\n  return modp(n - 1, p);\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const intersperseList = [];\n  for (let i = 0; i < numbers.length; i++) {\n    intersperseList.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      intersperseList.push(delimeter);\n    }\n  }\n  return intersperseList;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\nconst encode = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_2 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_2 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_3 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_3 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_4 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_4 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_5 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_5 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_6 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_6 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_7 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_7 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_8 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_8 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_9 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_9 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_10 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_10 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_11 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_11 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_12 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_12 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_13 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_13 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_14 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_14 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_15 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_15 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_16 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_16 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_17 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_17 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_18 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_18 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_19 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_19 = (s) => {\n  const s_ = decodeShift(s);\n  return s_;\n}\n\nconst encode_shift_20 = (s) => {\n  const s_ = encodeShift(s);\n  return s_;\n}\n\nconst decode_shift_20 = (s) => {\n  const s_ = decodeShift(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = text;\n  for (let i = 0; i < vowels.length; i++) {\n    result = result.replace(new RegExp(`[${vowels[i]}]`, 'g'), '');\n  }\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold2 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold3 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold4 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold5 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold6 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold7 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold8 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold9 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold10 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold11 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold12 = (l, t, tplus) => {\n  return l.every(n => n >= t && n <= tplus);\n};\n\n/*Return trueer if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold13 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars2('abcd', 'dddddddabc')\n  true\n  >>> sameChars2('dddddddabc', 'abcd')\n  true\n  >>> sameChars2('eabcd', 'dddddddabc')\n  false\n  >>> sameChars2('abcd', 'dddddddabce')\n  false\n  >>> sameChars2('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars3('abcd', 'dddddddabc')\n  true\n  >>> sameChars3('dddddddabc', 'abcd')\n  true\n  >>> sameChars3('eabcd', 'dddddddabc')\n  false\n  >>> sameChars3('abcd', 'dddddddabce')\n  false\n  >>> sameChars3('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars4('abcd', 'dddddddabc')\n  true\n  >>> sameChars4('dddddddabc', 'abcd')\n  true\n  >>> sameChars4('eabcd', 'dddddddabc')\n  false\n  >>> sameChars4('abcd', 'dddddddabce')\n  false\n  >>> sameChars4('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars5('abcd', 'dddddddabc')\n  true\n  >>> sameChars5('dddddddabc', 'abcd')\n  true\n  >>> sameChars5('eabcd', 'dddddddabc')\n  false\n  >>> sameChars5('abcd', 'dddddddabce')\n  false\n  >>> sameChars5('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars6('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars6('abcd', 'dddddddabc')\n  true\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  } else {\n    return fib_recursive(n - 1) + fib_recursive(n - 2);\n  }\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(/[<>]/);\n  const closingBrackets = brackets.split(/[<>]/);\n  const openingClosingBrackets = openingBrackets.map((openingBracket, index) => {\n    const closingBracket = closingBrackets[index];\n    return openingBracket + closingBracket;\n  });\n  return openingClosingBrackets.every((openingClosingBracket) => {\n    return closingBrackets.some((closingBracket) => {\n      return openingClosingBracket === closingBracket;\n    });\n  });\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    } else if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n /= i\n      i++\n    } else {\n      i++\n    }\n  }\n  return i\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let result = [];\n  let current_level = 0;\n  let current_paren_level = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_index_length = 0;\n  let current_paren_string_index_index = 0;\n  let current_paren_string_index_index_length = 0;\n  let current_paren_string_index_index_index = 0;\n  let current_paren_string_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let openBracket = 0;\n  let closedBracket = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let bracketsCount = brackets.length;\n  let bracketsCount2 = bracketsCount * 2;\n  let bracketsCount3 = bracketsCount * 3;\n  let bracketsCount4 = bracketsCount * 4;\n  let bracketsCount5 = bracketsCount * 5;\n  let bracketsCount6 = bracketsCount * 6;\n  let bracketsCount7 = bracketsCount * 7;\n  let bracketsCount8 = bracketsCount * 8;\n  let bracketsCount9 = bracketsCount * 9;\n  let bracketsCount10 = bracketsCount * 10;\n  let bracketsCount11 = bracketsCount * 11;\n  let bracketsCount12 = bracketsCount * 12;\n  let bracketsCount13 = bracketsCount * 13;\n  let bracketsCount14 = bracketsCount * 14;\n  let bracketsCount15 = bracketsCount * 15;\n  let bracketsCount16 = bracketsCount * 16;\n  let bracketsCount17 = bracketsCount * 17;\n  let bracketsCount18 = bracketsCount * 18;\n  let bracketsCount19 = bracketsCount * 19;\n  let bracketsCount20 = bracketsCount * 20;\n  let bracketsCount21 = bracketsCount * 21;\n  let bracketsCount22 = bracketsCount * 22;\n  let bracketsCount23 = bracketsCount * 23;\n  let bracketsCount24 = bracketsCount * 24;\n  let bracketsCount25 = bracketsCount * 25;\n  let bracketsCount26 = bracketsCount * 26;\n  let bracketsCount27 = bracketsCount * 27;\n  let bracketsCount28 = bracketsCount * 28;\n  let bracketsCount29 = bracketsCount * 29;\n  let bracketsCount30 = bracketsCount * 30;\n  let bracketsCount31 = bracketsCount * 31;\n  let bracketsCount32 = bracketsCount * 32;\n  let bracketsCount33 = bracketsCount * 33;\n  let bracketsCount34 = bracketsCount * 34;\n  let bracketsCount35 = bracketsCount * 35;\n  let bracketsCount36 = bracketsCount * 36;\n  let bracketsCount37 = bracketsCount * 37;\n  let bracketsCount38 = bracketsCount * 38;\n  let bracketsCount39 = bracketsCount * 39;\n  let bracketsCount40 = bracketsCount * 40;\n  let bracketsCount41 = bracketsCount * 41;\n  let bracketsCount42 = bracketsCount * 42;\n  let bracketsCount43 = bracketsCount * 43;\n  let bracketsCount44 = bracketsCount * 44;\n  let bracketsCount45 = bracketsCount * 45;\n  let bracketsCount46 = bracketsCount * 46;\n  let bracketsCount47 = bracketsCount * 47;\n  let bracketsCount48 = bracketsCount * 48;\n  let bracketsCount49 = bracketsCount * 49;\n  let bracketsCount50 = bracketsCount * 50;\n  let bracketsCount51 = bracketsCount * 51;\n  let bracketsCount52 = bracketsCount * 52;\n  let bracketsCount53 = bracketsCount * 53;\n  let bracketsCount54 = bracketsCount * 54;\n  let bracketsCount55 = bracketsCount * 55;\n  let bracketsCount56 = bracketsCount * 56;\n  let bracketsCount57 = bracketsCount * 57;\n  let bracketsCount58 = bracketsCount * 58;\n  let bracketsCount59 = bracketsCount * 59;\n  let bracketsCount60 = bracketsCount * 60;\n  let bracketsCount61 = bracketsCount * 61;\n  let bracketsCount62 = bracketsCount * 62;\n  let bracketsCount63 = bracketsCount * 63;\n  let bracketsCount64 = bracketsCount * 64;\n  let bracketsCount65 = bracketsCount * 65;\n  let bracketsCount66 = bracketsCount * 66;\n  let bracketsCount67 = bracketsCount * 67;\n  let bracketsCount68 = bracketsCount * 68;\n  let bracketsCount69 = bracketsCount * 69;\n  let bracketsCount70 = bracketsCount * 70;\n  let bracketsCount71 = bracketsCount * 71;\n  let bracketsCount72 = bracketsCount * 72;\n  let bracketsCount73 = bracketsCount * 73;\n  let bracketsCount74 = bracketsCount * 74;\n  let bracketsCount75 = bracketsCount * 75;\n  let bracketsCount76 = bracketsCount * 76;\n  let bracketsCount77 = bracketsCount * 77;\n  let bracketsCount78 = bracketsCount * 78;\n  let bracketsCount79 = bracketsCount * 79;\n  let bracketsCount80 = bracketsCount * 80;\n  let bracketsCount81 = bracketsCount * 81;\n  let bracketsCount82 = bracketsCount * 82;\n  let bracketsCount83 = bracketsCount * 83;\n  let bracketsCount84 = bracketsCount * 84;\n  let bracketsCount85 = bracketsCount * 85;\n  let bracketsCount86 = bracketsCount * 86;\n  let bracketsCount87 = bracketsCount * 87;\n  let bracketsCount88 = bracketsCount * 88;\n  let bracketsCount89 = bracketsCount * 89;\n  let bracketsCount90 = bracketsCount * 90;\n  let bracketsCount91 = bracketsCount * 91;\n  let bracketsCount92 = bracketsCount * 92;\n  let bracketsCount93 = bracketsCount * 93;\n  let bracketsCount94 = bracketsCount * 94;\n  let bracketsCount95 = bracketsCount * 95;\n  let bracketsCount96 = bracketsCount * 96;\n  let bracketsCount97 = bracketsCount * 97;\n  let bracketsCount98 = bracketsCount * 98;\n  let bracketsCount99 = bracketsCount * 99;\n  let bracketsCount100 = bracketsCount * 100;\n  let bracketsCount101 = bracketsCount * 101;\n  let bracketsCount102 = bracketsCount * 102;\n  let bracketsCount103 = bracketsCount * 103;\n  let bracketsCount104 = bracketsCount * 104;\n  let bracketsCount105 = bracketsCount * 105;\n  let bracketsCount106 = bracketsCount * 106;\n  let bracketsCount107 = bracketsCount * 107;\n  let brackets", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] / xs[i + 1]);\n  }\n  return d;\n};\n\n/*\n  x represent coefficients of a polynomial. xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n  >>> vowelsReplace(\"abcde\")\n  \"cbed\"\n  >>> vowelsReplace(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst vowelsReplace = (s) => {\n  let vowels = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels.push('');\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels.push('');\n    }\n  }\n  return vowels.join('');\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n  >>> vowelsReplace(\"abcde\")\n  \"cbed\"\n  >>> vowelsReplace(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst vowelsReplace2 = (s) => {\n  let vowels = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels.push('');\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels.push('');\n    }\n  }\n  return vowels.join('');\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n  >>> vowelsReplace(\"abcde\")\n  \"cbed\"\n  >>> vowelsReplace(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst vowelsReplace3 = (s) => {\n  let vowels = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels.push('');\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels.push('');\n    }\n  }\n  return vowels.join('');\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n  >>> vowelsReplace(\"abcde\")\n  \"cbed\"\n  >>> vowelsReplace(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst vowelsReplace4 = (s) => {\n  let vowels = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels.push('');\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels.push('');\n    }\n  }\n  return vowels.join('');\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n  >>> vowelsReplace(\"abcde\")\n  \"cbed\"\n  >>> vowelsReplace(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst vowelsReplace5 = (s) => {\n  let vowels = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels.push('');\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels.push('');\n    }\n  }\n  return vowels.join('');\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n  >>> vowelsReplace(\"abcde\")\n  \"cbed\"\n  >>> vowelsReplace(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst vowelsReplace6 = (s) => {\n  let vowels = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels.push('');\n    } else if (c === 'y') {\n      if (i === 0 || i === s.length - 1) vowels.push('');\n    }\n  }\n  return vowels.join('');\n};\n\n/*Write a function that takes a string and returns a string with all the vowels in it replaced with an empty string. Examples:\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  let temp = x;\n  for (let i = 0; i < shift; i++) {\n    temp = temp >> 1;\n    result = (result << 1) + (temp % 10);\n  }\n  return result;\n};\n\nconst getDigit = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse2 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse3 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse4 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse5 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse6 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse7 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse8 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse9 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse10 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse11 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse12 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse13 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse14 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse15 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse16 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse17 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse18 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse19 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse20 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse21 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse22 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse23 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse24 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse25 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse26 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse27 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse28 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse29 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse30 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse31 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse32 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse33 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse34 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse35 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse36 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse37 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse38 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse39 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse40 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse41 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse42 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse43 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse44 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse45 = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigitReverse46 = (x, shift)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nconst printDigitSum = (s) => {\n  console.log(digitSum(s));\n};\n\nprintDigitSum(\"\");\nprintDigitSum(\"abAB\");\nprintDigitSum(\"abcCd\");\nprintDigitSum(\"helloE\");\nprintDigitSum(\"woArBld\");\nprintDigitSum(\"aAaaaXa\");\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let res = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  res.push(min);\n  res.push(minIndex);\n  return res;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((max, val) => {\n    return val > max? val : max;\n  }, 0);\n  const freq = lst.reduce((freq, val) => {\n    return freq + (val > max? val : 0);\n  }, 0);\n  return lst.reduce((max, val) => {\n    return val > max? val : max;\n  }, 0);\n};\n\nexport default search;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain gives substring\n  >>> filterByContainsSubstring([], 'a')\n  []\n  >>> filterByContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotContainsSubstring([], 'a')\n  []\n  >>> filterByNotContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain gives substring\n  >>> filterByContainsSubstring([], 'a')\n  []\n  >>> filterByContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotContainsSubstring([], 'a')\n  []\n  >>> filterByNotContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain gives substring\n  >>> filterByContainsSubstring([], 'a')\n  []\n  >>> filterByContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotContainsSubstring([], 'a')\n  []\n  >>> filterByNotContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain gives substring\n  >>> filterByContainsSubstring([], 'a')\n  []\n  >>> filterByContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterByNotContainsSubstring([], 'a')\n  []\n  >>> filterByNotContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotContainsSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByNotSubstring,\n  filterByContainsSubstring,\n  filterByNotContainsSubstring,\n  filterByContainsSubstring,\n  filterByNotContainsSubstring,\n  filterByContainsSubstring,\n  filterByNotContainsSubstring\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) return [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = minIndex; i < maxIndex; i++) {\n    result.push(lst[i]);\n  }\n  for (let i = 0; i < minIndex; i++) {\n    result.push(lst[i]);\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nmodule.exports = triangleArea;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const max = Math.max(...q);\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && q.length === max;\n};\n\nconst test = (q, w) => {\n  console.log(willItFly(q, w));\n};\n\ntest([1, 2], 5);\ntest([3, 2, 3], 1);\ntest([3, 2, 3], 9);\ntest([3], 5);\ntest([3], 9);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let change = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    arr[i] = arr[arr.length - 1 - i];\n    arr[arr.length - 1 - i] = temp;\n    let temp2 = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp2;\n    let temp3 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp3;\n    let temp4 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp4;\n    let temp5 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp5;\n    let temp6 = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp6;\n    let temp7 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp7;\n    let temp8 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp8;\n    let temp9 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp9;\n    let temp10 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp10;\n    let temp11 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp11;\n    let temp12 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp12;\n    let temp13 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp13;\n    let temp14 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp14;\n    let temp15 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp15;\n    let temp16 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp16;\n    let temp17 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp17;\n    let temp18 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp18;\n    let temp19 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp19;\n    let temp20 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp20;\n    let temp21 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp21;\n    let temp22 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp22;\n    let temp23 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp23;\n    let temp24 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp24;\n    let temp25 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp25;\n    let temp26 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp26;\n    let temp27 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp27;\n    let temp28 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp28;\n    let temp29 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp29;\n    let temp30 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp30;\n    let temp31 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp31;\n    let temp32 = arr[i];\n    arr[i] = arr[arr.length - i];\n    arr[arr.length - i] = temp32;\n    let temp33 = arr[i];\n    arr[i] = arr[arr.length - i - 1];\n    arr[arr.length - i - 1] = temp33;\n    let temp34 = arr[i];\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n  let totalMatch = 0;\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (lst1[i].length < lst2[j].length) {\n        totalMatch += lst1[i].length;\n      }\n    }\n  }\n  return lst1.slice(0, totalMatch);\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x % n === 0;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube2 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube3 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube4 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube5 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube6 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube7 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube8 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube9 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube10 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube11 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube12 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube13 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube14 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube15 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube16 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube17 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      a = a / 2;\n    } else {\n      a = 3 * a + 1;\n    }\n    i++;\n  }\n  return i === 1;\n};\n\nconst iscube18 = (a) => {\n  let i = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numStr = num.toString();\n  let numStrLen = numStr.length;\n  let numStrArr = numStr.split(\"\");\n  let numStrArrLen = numStrArr.length;\n  let numStrArrArr = numStrArr.map((numStrArrItem, index) => {\n    return numStrArrItem.toString();\n  });\n  let numStrArrArrLen = numStrArrArr.length;\n  let numStrArrArrArr = numStrArrArr.map((numStrArrArrItem, index) => {\n    return numStrArrArrItem.toString();\n  });\n  let numStrArrArrArrLen = numStrArrArrArr.length;\n  let numStrArrArrArrArr = numStrArrArrArr.map((numStrArrArrArrItem, index) => {\n    return numStrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrLen = numStrArrArrArrArr.length;\n  let numStrArrArrArrArrArr = numStrArrArrArrArr.map((numStrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrLen = numStrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArr = numStrArrArrArrArrArr.map((numStrArrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrArrLen = numStrArrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArrArr = numStrArrArrArrArrArrArr.map((numStrArrArrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrArrArrLen = numStrArrArrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArrArrArr = numStrArrArrArrArrArrArrArr.map((numStrArrArrArrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrArrArrArrLen = numStrArrArrArrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArrArrArrArr = numStrArrArrArrArrArrArrArrArr.map((numStrArrArrArrArrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrArrArrArrArrLen = numStrArrArrArrArrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArrArrArrArrArr = numStrArrArrArrArrArrArrArrArrArr.map((numStrArrArrArrArrArrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrArrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrArrArrArrArrArrLen = numStrArrArrArrArrArrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArrArrArrArrArrArr = numStrArrArrArrArrArrArrArrArrArrArr.map((numStrArrArrArrArrArrArrArrArrArrArrItem, index) => {\n    return numStrArrArrArrArrArrArrArrArrArrArrItem.toString();\n  });\n  let numStrArrArrArrArrArrArrArrArrArrArrArrLen = numStrArrArrArrArrArrArrArrArrArrArrArr.length;\n  let numStrArrArrArrArrArrArrArrArrArrArrArrArr = numStrArrArrArrArrAr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryNumber = \"\";\n  let binaryNumberLength = 0;\n  let binaryNumberLengthTemp = 0;\n  let binaryNumberTemp = 0;\n  let binaryNumberTempTemp = 0;\n  let binaryNumberTempTempTemp = 0;\n  let binaryNumberTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = 0;\n  let binaryNumberTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst test = () => {\n  let [sum, product] = sumProduct([1, 2, 3, 4])\n  console.log(sum, product)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let arr = s.split('');\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while (i < len) {\n    if (arr[i] === arr[j]) {\n      k++;\n      if (k === 3) {\n        flag = true;\n        break;\n      }\n    } else {\n      k = 0;\n    }\n    j++;\n    i++;\n  }\n  return flag;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = '';\n  let grade = 0;\n  let gradeCount = 0;\n  grades.forEach((gradeValue) => {\n    grade = gradeValue;\n    gradeCount++;\n    if (gradeCount === 1) {\n      letterGrade = 'A+';\n    } else if (gradeCount === 2) {\n      letterGrade = 'B';\n    } else if (gradeCount === 3) {\n      letterGrade = 'C-';\n    } else if (gradeCount === 4) {\n      letterGrade = 'C';\n    } else if (gradeCount === 5) {\n      letterGrade = 'A-';\n    } else if (gradeCount === 6) {\n      letterGrade = 'D+';\n    } else if (gradeCount === 7) {\n      letterGrade = 'D';\n    } else if (gradeCount === 8) {\n      letterGrade = 'E';\n    }\n  });\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  if (string.length === 1) {\n    return true;\n  }\n  if (string.length === 2) {\n    return true;\n  }\n  if (string.length % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i += 2) {\n    if (string.substr(i, 2) === string.substr(0, i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 9. */ const startsNineEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 9) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 8. */ const startsEightEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 7. */ const startsSevenEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 7) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 6. */ const startsSixEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 6) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 5. */ const startsFiveEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 5) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 4. */ const startsFourEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 4) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 3. */ const startsThreeEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 3) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 2. */ const startsTwoEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 2) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 9. */ const startsNineEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 9) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 8. */ const startsEightEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 7. */ const startsSevenEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 7) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 6. */ const startsSixEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 6) {\n      result += 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i];\n  }\n  return res;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let str = s.split('');\n  let len = str.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    j = 0;\n    k = 0;\n    while (j < len) {\n      if (str[i] === str[j]) {\n        k++;\n      } else {\n        if (k > 0) {\n          str[k] = str[j];\n          k = 0;\n        }\n        j++;\n      }\n    }\n    if (k > 0) {\n      str[k] = str[j];\n      k = 0;\n    }\n    i++;\n  }\n  result = str.join('');\n  return result;\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const sortedRows = sorted.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByCols = sortedRows.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByColsSorted = sortedRowsByCols.sort((a, b) => a[1] - b[1]);\n  const sortedRowsByColsSortedRows = sortedRowsByColsSorted.map((row, i) => {\n    return [...row, i];\n  });\n  return sortedRowsByColsSortedRows.map((row, i) => {\n    return [...row, x];\n  });\n};\n\nconst getRow2 = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const sortedRows = sorted.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByCols = sortedRows.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByColsSorted = sortedRowsByCols.sort((a, b) => a[1] - b[1]);\n  const sortedRowsByColsSortedRows = sortedRowsByColsSorted.map((row, i) => {\n    return [...row, i];\n  });\n  return sortedRowsByColsSortedRows.map((row, i) => {\n    return [...row, x];\n  });\n};\n\nconst getRow3 = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const sortedRows = sorted.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByCols = sortedRows.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByColsSorted = sortedRowsByCols.sort((a, b) => a[1] - b[1]);\n  const sortedRowsByColsSortedRows = sortedRowsByColsSorted.map((row, i) => {\n    return [...row, i];\n  });\n  return sortedRowsByColsSortedRows.map((row, i) => {\n    return [...row, x];\n  });\n};\n\nconst getRow4 = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const sortedRows = sorted.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByCols = sortedRows.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByColsSorted = sortedRowsByCols.sort((a, b) => a[1] - b[1]);\n  const sortedRowsByColsSortedRows = sortedRowsByColsSorted.map((row, i) => {\n    return [...row, i];\n  });\n  return sortedRowsByColsSortedRows.map((row, i) => {\n    return [...row, x];\n  });\n};\n\nconst getRow5 = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const sortedRows = sorted.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByCols = sortedRows.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByColsSorted = sortedRowsByCols.sort((a, b) => a[1] - b[1]);\n  const sortedRowsByColsSortedRows = sortedRowsByColsSorted.map((row, i) => {\n    return [...row, i];\n  });\n  return sortedRowsByColsSortedRows.map((row, i) => {\n    return [...row, x];\n  });\n};\n\nconst getRow6 = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const sortedRows = sorted.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByCols = sortedRows.map((row, i) => {\n    return [...row, i];\n  });\n  const sortedRowsByColsSorted = sortedRowsByCols.sort((a, b) => a[1] - b[1]);\n  const sortedRowsByColsSortedRows = sortedRowsByColsSorted.map((row, i) => {\n    return [...row, i];\n  });\n  return sortedRowsByColsSortedRows.map((row, i) => {\n    return [...row, x];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  let sortedArrayLength = sortedArray.length;\n  let sortedArrayIndex = 0;\n  let sortedArrayIndex2 = 0;\n  let sortedArrayIndex3 = 0;\n  let sortedArrayIndex4 = 0;\n  let sortedArrayIndex5 = 0;\n  let sortedArrayIndex6 = 0;\n  let sortedArrayIndex7 = 0;\n  let sortedArrayIndex8 = 0;\n  let sortedArrayIndex9 = 0;\n  let sortedArrayIndex10 = 0;\n  let sortedArrayIndex11 = 0;\n  let sortedArrayIndex12 = 0;\n  let sortedArrayIndex13 = 0;\n  let sortedArrayIndex14 = 0;\n  let sortedArrayIndex15 = 0;\n  let sortedArrayIndex16 = 0;\n  let sortedArrayIndex17 = 0;\n  let sortedArrayIndex18 = 0;\n  let sortedArrayIndex19 = 0;\n  let sortedArrayIndex20 = 0;\n  let sortedArrayIndex21 = 0;\n  let sortedArrayIndex22 = 0;\n  let sortedArrayIndex23 = 0;\n  let sortedArrayIndex24 = 0;\n  let sortedArrayIndex25 = 0;\n  let sortedArrayIndex26 = 0;\n  let sortedArrayIndex27 = 0;\n  let sortedArrayIndex28 = 0;\n  let sortedArrayIndex29 = 0;\n  let sortedArrayIndex30 = 0;\n  let sortedArrayIndex31 = 0;\n  let sortedArrayIndex32 = 0;\n  let sortedArrayIndex33 = 0;\n  let sortedArrayIndex34 = 0;\n  let sortedArrayIndex35 = 0;\n  let sortedArrayIndex36 = 0;\n  let sortedArrayIndex37 = 0;\n  let sortedArrayIndex38 = 0;\n  let sortedArrayIndex39 = 0;\n  let sortedArrayIndex40 = 0;\n  let sortedArrayIndex41 = 0;\n  let sortedArrayIndex42 = 0;\n  let sortedArrayIndex43 = 0;\n  let sortedArrayIndex44 = 0;\n  let sortedArrayIndex45 = 0;\n  let sortedArrayIndex46 = 0;\n  let sortedArrayIndex47 = 0;\n  let sortedArrayIndex48 = 0;\n  let sortedArrayIndex49 = 0;\n  let sortedArrayIndex50 = 0;\n  let sortedArrayIndex51 = 0;\n  let sortedArrayIndex52 = 0;\n  let sortedArrayIndex53 = 0;\n  let sortedArrayIndex54 = 0;\n  let sortedArrayIndex55 = 0;\n  let sortedArrayIndex56 = 0;\n  let sortedArrayIndex57 = 0;\n  let sortedArrayIndex58 = 0;\n  let sortedArrayIndex59 = 0;\n  let sortedArrayIndex60 = 0;\n  let sortedArrayIndex61 = 0;\n  let sortedArrayIndex62 = 0;\n  let sortedArrayIndex63 = 0;\n  let sortedArrayIndex64 = 0;\n  let sortedArrayIndex65 = 0;\n  let sortedArrayIndex66 = 0;\n  let sortedArrayIndex67 = 0;\n  let sortedArrayIndex68 = 0;\n  let sortedArrayIndex69 = 0;\n  let sortedArrayIndex70 = 0;\n  let sortedArrayIndex71 = 0;\n  let sortedArrayIndex72 = 0;\n  let sortedArrayIndex73 = 0;\n  let sortedArrayIndex74 = 0;\n  let sortedArrayIndex75 = 0;\n  let sortedArrayIndex76 = 0;\n  let sortedArrayIndex77 = 0;\n  let sortedArrayIndex78 = 0;\n  let sortedArrayIndex79 = 0;\n  let sortedArrayIndex80 = 0;\n  let sortedArrayIndex81 = 0;\n  let sortedArrayIndex82 = 0;\n  let sortedArrayIndex83 = 0;\n  let sortedArrayIndex84 = 0;\n  let sortedArrayIndex85 = 0;\n  let sortedArrayIndex86 = 0;\n  let sortedArrayIndex87 = 0;\n  let sortedArrayIndex88 = 0;\n  let sortedArrayIndex89 = 0;\n  let sortedArrayIndex90 = 0;\n  let sortedArrayIndex91 = 0;\n  let sortedArrayIndex92 = 0;\n  let sortedArrayIndex93 = 0;\n  let sortedArrayIndex94 = 0;\n  let sortedArrayIndex95 = 0;\n  let sortedArrayIndex96 = 0;\n  let sortedArrayIndex97 = 0;\n  let sortedArrayIndex98 = 0;\n  let sortedArrayIndex99 = 0;\n  let sortedArrayIndex100 = 0;\n  let sortedArrayIndex101 = 0;\n  let sortedArrayIndex102 = 0;\n  let sortedArrayIndex103 = 0;\n  let sortedArrayIndex104 = 0;\n  let sortedArrayIndex105 = 0;\n  let sortedArrayIndex106 = 0;\n  let sortedArrayIndex107 = 0;\n  let sortedArrayIndex108 = 0;\n  let sortedArrayIndex109 = 0;\n  let sortedArrayIndex110 = 0;\n  let sortedArrayIndex111 = 0;\n  let sortedArrayIndex112 = 0;\n  let sortedArrayIndex113 = 0;\n  let sortedArrayIndex114 = 0;\n  let sortedArrayIndex115 = 0;\n  let sortedArrayIndex116 = 0;\n  let sortedArrayIndex117 = 0;\n  let sortedArrayIndex118 = 0;\n  let sortedArrayIndex119 = 0;\n  let sortedArrayIndex120 = 0;\n  let sortedArrayIndex121 = 0;\n  let sortedArrayIndex122 = 0;\n  let sortedArrayIndex123 = 0;\n  let sortedArrayIndex124 = 0;\n  let sortedArrayIndex125 = 0;\n  let sortedArrayIndex126 = 0;\n  let sortedArrayIndex127 = 0;\n  let sortedArrayIndex128 = 0;\n  let sortedArrayIndex129 = 0;\n  let sortedArrayIndex130 = 0;\n  let sortedArrayIndex131 = 0;\n  let sortedArrayIndex132 = 0;\n  let sortedArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n  let s166 = 0;\n  let s167 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 4]\n  */\nconst rollingMin = (numbers) => {\n  const min = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling average elements finds until gives moment in the sequences.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 2.5, 3.5, 3.5, 3.5, 4.5, 4.5]\n  */\nconst rollingAvg = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const avg = sum / numbers.length;\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(avg);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\n  */\nconst rollingStdDev = (numbers) => {\n  const avg = rollingAvg(numbers);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(Math.sqrt(Math.pow(numbers[i] - avg, 2)));\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i];\n  }\n  return min;\n};\n\nconst test = (lst) => {\n  console.log(nextSmallest(lst));\n};\n\ntest([1, 2, 3, 4, 5]);\ntest([5, 1, 4, 3, 2]);\ntest([]);\ntest([1, 1]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/^[a-zA-Z]+$/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt11 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt12 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt13 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt14 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt15 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt16 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt17 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt18 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt19 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt20 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt21 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt22 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt23 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt24 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt25 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt26 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt27 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt28 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt29 = (x, y, z) => {\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst anyInt", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = ''\n  let letter = ''\n  let vowel = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < message.length) {\n    letter = message[i]\n    vowel = message[i + 1]\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowel = message[i + 2]\n      if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n        vowel = message[i + 3]\n        if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n          vowel = message[i + 4]\n          if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n            vowel = message[i + 5]\n            if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n              vowel = message[i + 6]\n              if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                vowel = message[i + 7]\n                if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                  vowel = message[i + 8]\n                  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                    vowel = message[i + 9]\n                    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                      vowel = message[i + 10]\n                      if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                        vowel = message[i + 11]\n                        if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                          vowel = message[i + 12]\n                          if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                            vowel = message[i + 13]\n                            if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                              vowel = message[i + 14]\n                              if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                vowel = message[i + 15]\n                                if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                  vowel = message[i + 16]\n                                  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                    vowel = message[i + 17]\n                                    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                      vowel = message[i + 18]\n                                      if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                        vowel = message[i + 19]\n                                        if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                          vowel = message[i + 20]\n                                          if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                            vowel = message[i + 21]\n                                            if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                              vowel = message[i + 22]\n                                              if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                                vowel = message[i + 23]\n                                                if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                                  vowel = message[i + 24]\n                                                  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                                    vowel = message[i + 25]\n                                                    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                                      vowel = message[i + 26]\n                                                      if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n                                                        vowel = message[i + 27]\n                                                        if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_value = 0;\n  let max_prime_value_index = 0;\n  let max_prime_value_value = 0;\n  let max_prime_value_value_index = 0;\n  let max_prime_value_value_value = 0;\n  let max_prime_value_value_value_index = 0;\n  let max_prime_value_value_value_value = 0;\n  let max_prime_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = parseInt(a)\n  let b_int = parseInt(b)\n  let a_unit = a.split(\"\")[1]\n  let b_unit = b.split(\"\")[1]\n  let a_unit_int = parseInt(a_unit)\n  let b_unit_int = parseInt(b_unit)\n  let a_unit_int_multiply_b_unit_int = a_unit_int * b_unit_int\n  let a_unit_multiply_b_unit = a_unit * b_unit\n  let a_unit_multiply_b_unit_int = a_unit_int_multiply_b_unit_int\n  let a_unit_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int = a_unit_multiply_b_unit_int * b_unit_int\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int = a_unit_multiply_b_unit_int_multiply_b_unit_int * b_unit_int\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int * b_unit\n  let a_unit_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit_int_multiply_b_unit = a_unit_multiply_b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 2;\n    }\n    else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.round(number);\n  if (Math.abs(number - closest) < 0.000001) {\n    return closest;\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
