{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  let hasClose = false;\n  let minDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      hasClose = true;\n      minDistance = distance;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Check if in given list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  let hasClose =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_string_array = paren_string.split('');\n  let paren_string_array_length = paren_string_array.length;\n  let paren_string_array_index = 0;\n  let paren_string_array_output = [];\n  let paren_string_array_output_length = 0;\n  let paren_string_array_output_index = 0;\n  let paren_string_array_output_length_increment = 0;\n  let paren_string_array_output_index_increment = 0;\n  let paren_string_array_output_index_increment_max = 0;\n  let paren_string_array_output_index_increment_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_string_array_output_index_increment_max_max_max_max_max_max_max_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length==0) return string;\n  let longestPostfix = string.split('').reverse().join('');\n  let prefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.split('').reverse().join('');\n  let reversedPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = prefix.split('').reverse().join('');\n  let reversedLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefixLongestPostfixPrefix = longestPostfix.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 1) {\n      result.push(i + 1);\n    } else {\n      result.push(i + 2);\n    }\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/[,\\s]+/);\n  return words;\n}\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x > y) {\n    return Math.floor(Math.sqrt(x * x - y * y))\n  }\n  return Math.ceil(Math.sqrt(x * x - y * y))\n}\n\nmodule.exports = {\n  chooseNum\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconst byLengthAndName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconst byLengthAndNameAndReverse = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconst byLengthAndNameAndReverseAndReversed = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconst byLengthAndNameAndReverseAndReversedAndReversed = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconst byLengthAndNameAndReverseAndReversedAndReversedAndReversed = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j && arr[j] === arr[i]) {\n      j--;\n    }\n    if (i < j) {\n      result.push(arr[i]);\n      arr.splice(i, j - i + 1);\n      i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n % 2 === 0) {\n    return [1, n];\n  }\n  return [1, n, n * (n + 1) / 2];\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (n) => {\n  let str = String(n);\n  let len = str.length;\n  for (let i = 0; i < len / 2; i++) {\n    if (str[i]!== str[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let last = arr[0];\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] < last) {\n      return false;\n    }\n    last = arr[i];\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor13 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor14 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor15 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input:\n  a = '0101'\n  b = '1010'\n  Output:\n  '1110'\n  */\nconst stringXor16 = (a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = (n) => n % 2 === 0;\n  const evens = lst1.filter(even);\n  const odds = lst2.filter(even);\n  return evens.length === odds.length && evens.every(even) && odds.every(even);\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let count = 0;\n  let max = 0;\n  let maxCount = 0;\n  let maxLetter = '';\n  let letter;\n  let i;\n  for (i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    if (histogram[letter] > max) {\n      max = histogram[letter];\n      maxCount = histogram[letter];\n      maxLetter = letter;\n    }\n  }\n  if (max === 0) {\n    return {};\n  }\n  return {\n    maxLetter: maxLetter,\n    maxCount: maxCount\n  };\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result === s;\n  return [result, isPalindrome];\n};\n\nmodule.exports = reverseDelete;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let num = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${str} of the ${num}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n    if (sum > min) {\n      sum = nums[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = new Array(grid[0].length).fill(capacity);\n  const bucket_count = new Array(grid.length).fill(0);\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = 0;\n        while (bucket < buckets.length && buckets[bucket] > capacity) {\n          bucket++;\n        }\n        bucket_count[i]++;\n        buckets[bucket]--;\n      }\n    }\n  }\n  return bucket_count.reduce((a, b) => a + b);\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  let sortedLength = arr.length;\n  let sortedIndex = 0;\n  let sortedIndexLength = 0;\n  let sortedIndexMax = 0;\n  let sortedIndexMin = 0;\n  let sortedIndexMaxLength = 0;\n  let sortedIndexMinLength = 0;\n  let sortedIndexMaxIndex = 0;\n  let sortedIndexMinIndex = 0;\n  let sortedIndexMaxIndexLength = 0;\n  let sortedIndexMinIndexLength = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMax = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMinIndexMin = 0;\n  let sortedIndexMaxIndexMin = 0;\n  let sortedIndexMinIndexMax = 0;\n  let sortedIndexMaxIndexMax = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && s[j]!=='') {\n      j++;\n    }\n    if (j - i > n) {\n      words.push(s.slice(i, j));\n      i = j;\n    } else {\n      i = j + 1;\n    }\n  }\n  return words;\n};\n\nmodule.exports = selectWords;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let result = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let len = word.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) / 2;\n    let midChar = word[mid];\n    let isConsonant = true;\n    for (let k = 0; k < vowels.length; k++) {\n      if (midChar === vowels[k]) {\n        isConsonant = false;\n        break;\n      }\n    }\n    if (isConsonant) {\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n  if (i < len) {\n    result = word[i];\n  }\n  return result;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = false;\n  let l = lst.length;\n  let i = 0;\n  while (i < l) {\n    let cur = lst[i];\n    if (cur === '(') {\n      if (lst[i + 1] === ')') {\n        i++;\n      } else {\n        res = true;\n      }\n    } else if (cur === ')') {\n      if (lst[i - 1] === '(') {\n        i--;\n      } else {\n        res = true;\n      }\n    }\n    i++;\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let maxLength = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > maxLength) {\n      maxLength = string.length;\n      maxIndex = i;\n    }\n  }\n  return strings[maxIndex];\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, val) => {\n    if (val > max) {\n      return val\n    } else {\n      return max\n    }\n  }, -Infinity)\n\n  const maxArr = arr.filter((val, i) => {\n    if (val > max) {\n      return true\n    } else {\n      return false\n    }\n  })\n\n  return maxArr.sort()\n}\n\nmodule.exports = maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    const arr_i = arr[i]\n    sum += arr_i\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let curr = n;\n  while (curr!== 1) {\n    if (curr % 2 === 0) {\n      arr.push(curr);\n    }\n    curr = curr / 2;\n  }\n  arr.push(1);\n  arr.reverse();\n  return arr;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  const dateParts = date.split('-');\n  const day = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[0], 10);\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (month === 2 && day > 29) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/[\\s,]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  let length = Math.abs(interval1.end - interval2.start)\n  let prime = true\n  while (prime) {\n    prime = false\n    if (length % 2 === 0) {\n      length /= 2\n      prime = true\n    }\n    if (length % 3 === 0) {\n      length /= 3\n      prime = true\n    }\n    if (length % 5 === 0) {\n      length /= 5\n      prime = true\n    }\n  }\n  if (length === 1) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(...grid[i]);\n  }\n  const lst_A = lst.sort((a, b) => a - b);\n  const lst_B = lst.slice(lst_A.length - k);\n  const lst_C = [];\n  for (let i = 0; i < k; i++) {\n    lst_C.push(...lst_B.slice(i, i + 1));\n  }\n  return lst_C;\n};\n\nmodule.exports = minPath;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n\n  if (a === 0) {\n    return a;\n  }\n\n  if (b === 0) {\n    return b;\n  }\n\n  if (a === 1) {\n    return b;\n  }\n\n  if (b === 1) {\n    return a;\n  }\n\n  let gcd = a;\n  let tmp = a % b;\n\n  while (tmp!== 0) {\n    gcd = b % tmp;\n    tmp = a % tmp;\n  }\n\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [1, 3, 2, 8];\n  let c = [1, 3, 2, 8];\n  let d = [1, 3, 2, 8];\n  let i = 0;\n  while (i < n) {\n    a[i] = a[i] + a[i + 1];\n    b[i] = b[i] + b[i + 1];\n    c[i] = c[i] + c[i + 1];\n    d[i] = d[i] + d[i + 1];\n    i++;\n  }\n  return [...a,...b,...c,...d];\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  while (n > 0) {\n    digits[n % 10] += 1\n    n = Math.floor(n / 10)\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested2= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested3= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested4= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested5= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested6= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested7= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested8= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested9= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested10= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested11= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested12= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested13= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested14= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    }\n    if(string[i]==']'){\n      brackets--;\n    }\n    i++;\n  }\n  return brackets>0;\n}\n\nconst isNested15= (string)=>{\n  let brackets=0;\n  let i=0;\n  while(i<string.length){\n    if(string[i]=='['){\n      brackets++;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character \n   of a gave string was an alphabetic character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic && isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character \n   of a gave string was an alphabetic character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter2 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character \n   of a gave string was an alphabetic character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter3 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character \n   of a gave string was an alphabetic character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter4 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character \n   of a gave string was an alphabetic character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter5 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character \n   of a gave string was an alphabetic character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter6 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAl", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLen = arr.length;\n  let maxIndex = -1;\n  let maxValue = arr[0];\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (b === null) {\n      return a;\n    }\n    if (a < b) {\n      return a;\n    }\n    return b;\n  }, null);\n  const smallest = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (b === null) {\n      return a;\n    }\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }, null);\n  return [largest, smallest];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwo= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareThree= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareFour= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareFive= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareSix= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareSeven= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareEight= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareNine= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareEleven= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwelve= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareThirteen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareFourteen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareFifteen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareSixteen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareSeventeen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareEighteen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareNineteen= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwenty= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentyOne= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentyTwo= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentyThree= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentyFour= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentyFive= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentySix= (a, b)=>{\n    if(a===b){\n        return null;\n    }\n    if(a<b){\n        return a;\n    }\n    return b;\n};\n\nconst compareTwentySeven= (a, b)=>{\n    if(a===b){\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial2 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial3 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial4 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial5 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial6 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial7 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial8 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial9 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial10 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial11 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial12 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial13 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial14 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * The function will receive an integer as input and should return the factorial\n * of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial15 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [string]\n  let currentPrefix = string\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix)\n    currentPrefix = currentPrefix.substr(0, currentPrefix.length - 1)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let currentSuffix = string\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix)\n    currentSuffix = currentSuffix.substr(1)\n  }\n  return suffixes\n}\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_length = file_name.length\n  let file_name_substring = file_name.substring(0, file_name_length)\n  let file_name_substring_length = file_name_substring.length\n  let file_name_substring_first_letter = file_name_substring.charAt(0)\n  let file_name_substring_last_letter = file_name_substring.charAt(file_name_substring_length - 1)\n  let file_name_substring_last_letter_is_a_letter = file_name_substring_last_letter.match(/[a-zA-Z]/)\n  let file_name_substring_last_letter_is_not_a_letter = file_name_substring_last_letter.match(/[^a-zA-Z]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit = file_name_substring_last_letter.match(/[^a-zA-Z0-9]/)\n  let file_name_substring_last_letter_is_not_a_letter_and_not_a_letter_followed_by_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not_a_digit_and_not", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// Test Cases\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  let word = '';\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      word = words[i];\n    } else {\n      result.push(word);\n      word = words[i];\n    }\n  }\n  result.push(word);\n  return result.join('');\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  let xn=x.split(\"/\");\n  let nn=n.split(\"/\");\n  let xnumerator=xn[0];\n  let xdenominator=xn[1];\n  let nnumerator=nn[0];\n  let ndenominator=nn[1];\n  if(xnumerator==nnumerator && xdenominator==ndenominator){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nconst test=simplify(\"1/5\",\" 5/1\");\nconsole.log(test);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a % 10,\n        sumB = b % 10;\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  const expected = [-1, -11, 1, -12, 11];\n  console.log(orderByPoints(nums));\n  console.log(expected);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let counter = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    const [i, j, k] = curr.split('');\n    if (i < j && j < k) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sorted = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  sorted.sort((a, b) => a.length - b.length);\n  result = sorted.map((s) => s.join(\"\"));\n  return result;\n};\n\nconst list_sort = (lst) => {\n  let result = sortedListSum(lst);\n  return result;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst main = () => {\n  console.log(xOrY(7, 34, 12));\n  console.log(xOrY(15, 8, 5));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)=>{\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2===0) sum+=lst[i]*lst[i];\n   }\n   return sum;\n }\n \n const doubleTheDifference= (lst)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result[i] = 0;\n    } else {\n      result[i] = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let extension_name_length = 0;\n  let extension_name_index = 0;\n  let extension_name_index_length = 0;\n  let extension_name_index_index = 0;\n  let extension_name_index_index_length = 0;\n  let extension_name_index_index_index = 0;\n  let extension_name_index_index_index_length = 0;\n  let extension_name_index_index_index_index = 0;\n  let extension_name_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let aa=a.split(\"\");\n    let bb=b.split(\"\");\n    let i=0;\n    let j=0;\n    let k=0;\n    let l=0;\n    let m=0;\n    let n=0;\n    let o=0;\n    let p=0;\n    let q=0;\n    let r=0;\n    let s=0;\n    let t=0;\n    let u=0;\n    let v=0;\n    let w=0;\n    let x=0;\n    let y=0;\n    let z=0;\n    let aa1=aa.length;\n    let bb1=bb.length;\n    let i1=0;\n    let j1=0;\n    let k1=0;\n    let l1=0;\n    let m1=0;\n    let n1=0;\n    let o1=0;\n    let p1=0;\n    let q1=0;\n    let r1=0;\n    let s1=0;\n    let t1=0;\n    let u1=0;\n    let v1=0;\n    let w1=0;\n    let x1=0;\n    let y1=0;\n    let z1=0;\n    let aa2=aa1;\n    let bb2=bb1;\n    let i2=0;\n    let j2=0;\n    let k2=0;\n    let l2=0;\n    let m2=0;\n    let n2=0;\n    let o2=0;\n    let p2=0;\n    let q2=0;\n    let r2=0;\n    let s2=0;\n    let t2=0;\n    let u2=0;\n    let v2=0;\n    let w2=0;\n    let x2=0;\n    let y2=0;\n    let z2=0;\n    let aa3=aa2;\n    let bb3=bb2;\n    let i3=0;\n    let j3=0;\n    let k3=0;\n    let l3=0;\n    let m3=0;\n    let n3=0;\n    let o3=0;\n    let p3=0;\n    let q3=0;\n    let r3=0;\n    let s3=0;\n    let t3=0;\n    let u3=0;\n    let v3=0;\n    let w3=0;\n    let x3=0;\n    let y3=0;\n    let z3=0;\n    let aa4=aa3;\n    let bb4=bb3;\n    let i4=0;\n    let j4=0;\n    let k4=0;\n    let l4=0;\n    let m4=0;\n    let n4=0;\n    let o4=0;\n    let p4=0;\n    let q4=0;\n    let r4=0;\n    let s4=0;\n    let t4=0;\n    let u4=0;\n    let v4=0;\n    let w4=0;\n    let x4=0;\n    let y4=0;\n    let z4=0;\n    let aa5=aa4;\n    let bb5=bb4;\n    let i5=0;\n    let j5=0;\n    let k5=0;\n    let l5=0;\n    let m5=0;\n    let n5=0;\n    let o5=0;\n    let p5=0;\n    let q5=0;\n    let r5=0;\n    let s5=0;\n    let t5=0;\n    let u5=0;\n    let v5=0;\n    let w5=0;\n    let x5=0;\n    let y5=0;\n    let z5=0;\n    let aa6=aa5;\n    let bb6=bb5;\n    let i6=0;\n    let j6=0;\n    let k6=0;\n    let l6=0;\n    let m6=0;\n    let n6=0;\n    let o6=0;\n    let p6=0;\n    let q6=0;\n    let r6=0;\n    let s6=0;\n    let t6=0;\n    let u6=0;\n    let v6=0;\n    let w6=0;\n    let x6=0;\n    let y6=0;\n    let z6=0;\n    let aa7=aa6;\n    let bb7=bb6;\n    let i7=0;\n    let j7=0;\n    let k7=0;\n    let l7=0;\n    let m7=0;\n    let n7=0;\n    let o7=0;\n    let p7=0;\n    let q7=0;\n    let r7=0;\n    let s7=0;\n    let t7=0;\n    let u7=0;\n    let v7=0;\n    let w7=0;\n    let x7=0;\n    let y7=0;\n    let z7=0;\n    let aa8=aa7;\n    let bb8=bb7;\n    let i8=0;\n    let j8=0;\n    let k8=0;\n    let l8=0;\n    let m8=0;\n    let n8=0;\n    let o8=0;\n    let p8=0;\n    let q8=0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 9) {\n      result += 'ix';\n    } else if (digit == 4) {\n      result += 'iv';\n    } else if (digit == 5) {\n      result += 'v';\n    } else if (digit == 9) {\n      result += 'ix';\n    } else if (digit == 10) {\n      result += 'x';\n    } else {\n      result += String.fromCharCode(digit + 96);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst miniRomanToInt = (miniRoman) => {\n  let result = 0;\n  let i = 0;\n  while (miniRoman.length > i) {\n    let digit = miniRoman.charCodeAt(i);\n    if (digit >= 96 && digit <= 105) {\n      result += (digit - 96) * (10 ** i);\n    } else if (digit >= 97 && digit <= 102) {\n      result += (digit - 97) * (10 ** i);\n    } else if (digit >= 103 && digit <= 109) {\n      result += (digit - 103) * (10 ** i);\n    } else if (digit >= 110 && digit <= 113) {\n      result += (digit - 110) * (10 ** i);\n    } else if (digit >= 114 && digit <= 117) {\n      result += (digit - 114) * (10 ** i);\n    } else if (digit >= 118 && digit <= 122) {\n      result += (digit - 118) * (10 ** i);\n    } else if (digit >= 123 && digit <= 126) {\n      result += (digit - 123) * (10 ** i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst miniRomanToString = (miniRoman) => {\n  let result = '';\n  let i = 0;\n  while (miniRoman.length > i) {\n    let digit = miniRoman.charCodeAt(i);\n    if (digit >= 96 && digit <= 105) {\n      result += String.fromCharCode(digit - 96);\n    } else if (digit >= 97 && digit <= 102) {\n      result += String.fromCharCode(digit - 97);\n    } else if (digit >= 103 && digit <= 109) {\n      result += String.fromCharCode(digit - 103);\n    } else if (digit >= 110 && digit <= 113) {\n      result += String.fromCharCode(digit - 110);\n    } else if (digit >= 114 && digit <= 117) {\n      result += String.fromCharCode(digit - 114);\n    } else if (digit >= 118 && digit <= 122) {\n      result += String.fromCharCode(digit - 118);\n    } else if (digit >= 123 && digit <= 126) {\n      result += String.fromCharCode(digit - 123);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst main = () => {\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n  console.log(miniRomanToInt('clii'));\n  console.log(miniRomanToInt('cdxxvi'));\n  console.log(miniRomanToInt('xix'));\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const s = Math.sqrt(a + b + c);\n  return s === a || s === b || s === c;\n};\n\nmodule.exports = rightAngleTriangle;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n    let max=words[0];\n    let maxCount=words[0].length;\n    words.forEach((word)=>{\n        if(word.length>maxCount){\n            maxCount=word.length;\n            max=word;\n        }\n    });\n    return max;\n}\n\nconst test=()=>{\n    let words=[\"name\",\" of\",\" string\"];\n    console.log(findMax(words));\n}\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let result = [];\n  let i = 0;\n  while (i < need) {\n    result.push([number, remaining]);\n    number--;\n    remaining--;\n    i++;\n  }\n  return result;\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!== char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operator.length) {\n    if (operator[i] === '+') {\n      result += operand[i];\n    } else if (operator[i] === '-') {\n      result -= operand[i];\n    } else if (operator[i] === '*') {\n      result *= operand[i];\n    } else if (operator[i] === '/') {\n      result /= operand[i];\n    } else if (operator[i] === '//') {\n      result = result / operand[i];\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  const operator = ['+', '*', '-', '/', '//', '**'];\n  const operand = [2, 3, 4, 5, 6, 7];\n  console.log(doAlgebra(operator, operand));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let rev = str.split('').reverse().join('');\n  if (str.match(/[a-z]/)) {\n    str = str.toUpperCase();\n    rev = str.split('').reverse().join('');\n  }\n  return rev;\n};\n\nconst test = () => {\n  console.log(solve(\"1234\"));\n  console.log(solve(\"ab\"));\n  console.log(solve(\"#a@C\"));\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = solve;\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'f7bc83f430538424b13298e6aa6fb143ef4d59a'\n  */\nconst stringToSha1 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha384 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha384('Hello world') == '38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b'\n  */\nconst stringToSha384 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha3 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n  */\nconst stringToSha3 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha3-256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3256('Hello world') == 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n  */\nconst stringToSha3256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha3-256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha3-384 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3384('Hello world') == 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n  */\nconst stringToSha3384 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha3-384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha3-512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3512('Hello world') == 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n  */\nconst stringToSha3512 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('sha3-512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512,\n  stringToSha384,\n  stringToSha3,\n  stringToSha3256,\n  stringToSha3384,\n  stringToSha3512\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  while (a <= b) {\n    result.push(a);\n    a++;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_array = music_string.split('|');\n  let music_array_length = music_array.length;\n  let music_array_output = [];\n  for (let i = 0; i < music_array_length; i++) {\n    let music_array_item = music_array[i];\n    let music_array_item_length = music_array_item.length;\n    let music_array_item_output = [];\n    for (let j = 0; j < music_array_item_length; j++) {\n      let music_array_item_item = music_array_item[j];\n      let music_array_item_item_length = music_array_item_item.length;\n      let music_array_item_item_output = [];\n      for (let k = 0; k < music_array_item_item_length; k++) {\n        let music_array_item_item_item = music_array_item_item[k];\n        let music_array_item_item_item_length = music_array_item_item_item.length;\n        let music_array_item_item_item_output = [];\n        for (let l = 0; l < music_array_item_item_item_length; l++) {\n          let music_array_item_item_item_item = music_array_item_item_item[l];\n          let music_array_item_item_item_item_length = music_array_item_item_item_item.length;\n          let music_array_item_item_item_item_output = [];\n          for (let m = 0; m < music_array_item_item_item_item_length; m++) {\n            let music_array_item_item_item_item_item = music_array_item_item_item_item[m];\n            let music_array_item_item_item_item_item_length = music_array_item_item_item_item_item.length;\n            let music_array_item_item_item_item_item_output = [];\n            for (let n = 0; n < music_array_item_item_item_item_item_length; n++) {\n              let music_array_item_item_item_item_item_item = music_array_item_item_item_item_item[n];\n              let music_array_item_item_item_item_item_item_length = music_array_item_item_item_item_item_item.length;\n              let music_array_item_item_item_item_item_item_output = [];\n              for (let o = 0; o < music_array_item_item_item_item_item_item_length; o++) {\n                let music_array_item_item_item_item_item_item_item = music_array_item_item_item_item_item_item[o];\n                let music_array_item_item_item_item_item_item_item_length = music_array_item_item_item_item_item_item_item.length;\n                let music_array_item_item_item_item_item_item_item_output = [];\n                for (let p = 0; p < music_array_item_item_item_item_item_item_item_length; p++) {\n                  let music_array_item_item_item_item_item_item_item_item = music_array_item_item_item_item_item_item_item[p];\n                  let music_array_item_item_item_item_item_item_item_item_length = music_array_item_item_item_item_item_item_item_item.length;\n                  let music_array_item_item_item_item_item_item_item_item_output = [];\n                  for (let q = 0; q < music_array_item_item_item_item_item_item_item_length; q++) {\n                    let music_array_item_item_item_item_item_item_item_item = music_array_item_item_item_item_item_item_item[q];\n                    let music_array_item_item_item_item_item_item_item_item_length = music_array_item_item_item_item_item_item_item_item.length;\n                    let music_array_item_item_item_item_item_item_item_item_output = [];\n                    for (let r = 0; r < music_array_item_item_item_item_item_item_item_length; r++) {\n                      let music_array_item_item_item_item_item_item_item_item = music_array_item_item_item_item_item_item_item[r];\n                      let music_array_item_item_item_item_item_item_item_item_length = music_array_item_item_item_item_item_item_item_item.length;\n                      let music_array_item_item_item_item_item_item_item_item_output = [];\n                      for (let s = 0; s < music_array_item_item_item_item_item_item_item_length; s++) {\n                        let music_array_item_item_item_item_item_item_item_item = music_array_item_item_item_item_item_item_item[s];\n                        let music_array_item_item_item_item_item_item_item_item_length = music_array_item_item_item_item_item_item_item_item.length;\n                        let music_array_item_item_item_item_item_item_item_item_output = [];\n                        for (let t = 0; t < music_array_item_item_item_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers2 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers3 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers4 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers5 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers6 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers7 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers8 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers9 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers10 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers11 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers12 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers13 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers14 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: A string of numbers from 'zero 'to 'nine '. \n  Returned the string with numbers sorted from smallest to largest\n  */\nconst sortNumbers15 = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  return decimals;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimals = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  return decimals;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToZero = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0) {\n    return 0;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToOne = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 1) {\n    return 1;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToTwo = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 2) {\n    return 2;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToThree = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 3) {\n    return 3;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToFour = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 4) {\n    return 4;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToFive = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 5) {\n    return 5;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToSix = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 6) {\n    return 6;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsToSeven = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 7) {\n    return 7;\n  } else {\n    return decimals;\n  }\n};\n\n/* Given a positive floating point number, it can was decomp", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minNumber = null;\n  let maxNumber = null;\n  let minIndex = null;\n  let maxIndex = null;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minNumber = numbers[i];\n      minIndex = i;\n    }\n    if (distance > minDistance) {\n      maxDistance = distance;\n      maxNumber = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [minNumber, maxNumber];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let minDistance = Infinity;\n  let minNumber = null;\n  let maxNumber = null;\n  let minIndex = null;\n  let maxIndex = null;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minNumber = numbers[i];\n      minIndex = i;\n    }\n    if (distance > minDistance) {\n      maxDistance = distance;\n      maxNumber = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [minNumber, maxNumber];\n};\n\n/*\n  >>> findClosestElements2([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements2([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  let minDistance = Infinity;\n  let minNumber = null;\n  let maxNumber = null;\n  let minIndex = null;\n  let maxIndex = null;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minNumber = numbers[i];\n      minIndex = i;\n    }\n    if (distance > minDistance) {\n      maxDistance = distance;\n      maxNumber = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [minNumber, maxNumber];\n};\n\n/*\n  >>> findClosestElements3([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements3([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  let minDistance = Infinity;\n  let minNumber = null;\n  let maxNumber = null;\n  let minIndex = null;\n  let maxIndex = null;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minNumber = numbers[i];\n      minIndex = i;\n    }\n    if (distance > minDistance) {\n      maxDistance = distance;\n      maxNumber = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [minNumber, maxNumber];\n};\n\n/*\n  >>> findClosestElements4([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements4([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  let minDistance = Infinity;\n  let minNumber = null;\n  let maxNumber = null;\n  let minIndex = null;\n  let maxIndex = null;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minNumber = numbers[i];\n      minIndex = i;\n    }\n    if (distance > minDistance) {\n      maxDistance = distance;\n      maxNumber = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [minNumber, maxNumber];\n};\n\n/*\n  >>> findClosestElements5([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements5([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n * Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit9 = (numbers) => {\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter out any python values that are not strings.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterStrings(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  Filter out any python values that are not booleans.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterBooleans(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter out any python values that are not numbers.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter out any python values that are not floats.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter out any python values that are not strings or booleans.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterStringsAndBooleans(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringsAndBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStringsAndBooleans = (values) => {\n  return values.filter(v => typeof v ==='string' || typeof v === 'boolean');\n};\n\n/**\n  Filter out any python values that are not numbers or floats.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterNumbersAndFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbersAndFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbersAndFloats = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean');\n};\n\n/**\n  Filter out any python values that are not strings or booleans or numbers.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterStringsAndBooleansAndNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringsAndBooleansAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStringsAndBooleansAndNumbers = (values) => {\n  return values.filter(v => typeof v ==='string' || typeof v === 'boolean' || typeof v === 'number');\n};\n\n/**\n  Filter out any python values that are not strings or booleans or numbers or floats.\n  @param {Array} values\n  @returns {Array}\n  @example\n  >>> filterStringsAndBooleansAndNumbersAndFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStringsAndBooleansAndNumbersAndFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStringsAndBooleansAndNumbersAndFloats = (values) => {\n  return values.filter(v => typeof v ==='string' || typeof v === 'boolean' || typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean' || typeof v === 'number');\n};\n\nexport default filterIntegers;\nexport { filterStrings, filterBooleans, filterNumbers, filterFloats, filterStringsAndBooleans, filterNumbersAndFloats, filterStringsAndBooleansAndNumbers, filterStringsAndBooleansAndNumbersAndFloats };\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of given array\n  * @param array\n  * @returns {number}\n  */\nconst arrlen = (array) => {\n  if (array === null || array === undefined) {\n    return 0;\n  }\n  return array.length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen2 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen3 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen4 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen5 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen6 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen7 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen8 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen9 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen10 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen11 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen12 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen13 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen14 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen15 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen16 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen17 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen18 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object.keys(object).length;\n};\n\n/**\n  * Return length of given object\n  * @param object\n  * @returns {number}\n  */\nconst objlen19 = (object) => {\n  if (object === null || object === undefined) {\n    return 0;\n  }\n  return Object", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 1) {\n    return 0\n  }\n  let max = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      max = Math.max(max, i)\n    }\n    i += 1\n  }\n  return max\n}\n\nmodule.exports = largestDivisor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[i]);\n      j++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are not divisible by 3 or 5.\n  Kept order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      if (numbers[i] % 3 === 0) {\n        result.push(numbers[i]);\n      } else if (numbers[i] % 5 === 0) {\n        result.push(numbers[i]);\n      }\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Kept order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible2 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      if (numbers[i] % 3 === 0) {\n        result.push(numbers[i]);\n      } else if (numbers[i] % 5 === 0) {\n        result.push(numbers[i]);\n      }\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Kept order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible3 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      if (numbers[i] % 3 === 0) {\n        result.push(numbers[i]);\n      } else if (numbers[i] % 5 === 0) {\n        result.push(numbers[i]);\n      }\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Kept order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible4 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      if (numbers[i] % 3 === 0) {\n        result.push(numbers[i]);\n      } else if (numbers[i] % 5 === 0) {\n        result.push(numbers[i]);\n      }\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Kept order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible5 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      if (numbers[i] % 3 === 0) {\n        result.push(numbers[i]);\n      } else if (numbers[i] % 5 === 0) {\n        result.push(numbers[i]);\n      }\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Kept order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible6 = (numbers) => {\n  let i = 0;\n  let j = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toUpperCase());\n};\n\n/**\n  For a given string, returns a string with all lowercase characters replaced with uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toTitleCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => c.toUpperCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => c.toUpperCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase2 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase3 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase4 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase5 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase6 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase7 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase8 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase9 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase10 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase11 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase12 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase13 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all uppercase characters replaced with lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase14 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/**\n  For a given string, returns a string with all upperc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Convert a string to a hexadecimal string\n  >>> hex(0xFF)\n  'FF'\n  */\nconst hex = (str) => {\n  return `${str.toString(16)}`;\n};\n\n/*\n  Convert a hexadecimal string to a string\n  >>> hexToString('FF')\n  'FF'\n  */\nconst hexToString = (str) => {\n  return str.toString(16);\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytes(0xFF)\n  [255]\n  */\nconst bytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {\n  return [...str.split('')];\n};\n\n/*\n  Convert a byte array to a string\n  >>> bytesToString([255])\n  'FF'\n  */\nconst bytesToString = (bytes) => {\n  return bytes.join('');\n};\n\n/*\n  Convert a string to a byte array\n  >>> bytesToString('FF')\n  [255]\n  */\nconst bytesToBytes = (str) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that started with a given prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].startsWith(prefixes[j])) {\n        filtered.push(strings[i]);\n      }\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that ended with a given suffix.\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that ended with a given suffix.\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'array']\n  */\nconst filterBySuffixes = (strings, suffixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < suffixes.length; j++) {\n      if (strings[i].endsWith(suffixes[j])) {\n        filtered.push(strings[i]);\n      }\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  */\nconst filterBySubstringes = (strings, substringes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substringes.length; j++) {\n      if (strings[i].indexOf(substringes[j])!== -1) {\n        filtered.push(strings[i]);\n      }\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  */\nconst filterBySubstringAndPrefix = (strings, substring, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix) && strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  */\nconst filterBySubstringAndPrefixes = (strings, substring, prefixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefixes[0]) && strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  */\nconst filterBySubstringAndSuffix = (strings, substring, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix) && strings[i].indexOf(substring)!== -1) {\n      filtered", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the sum of all the operations.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, -4, 5])\n  -1\n  */\nconst sum = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the difference between the sum of all the operations and the balance of the bank account.\n  >>> difference([1, 2, 3])\n  2\n  >>> difference([1, 2, -4, 5])\n  -2\n  */\nconst difference = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance - sum(operations);\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the average of all the operations.\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, -4, 5])\n  -1.5\n  */\nconst average = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum / operations.length;\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the median of all the operations.\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, -4, 5])\n  -2\n  */\nconst median = (operations) => {\n  let sorted = operations.sort(function(a, b) {\n    return a - b;\n  });\n  return sorted[Math.floor(sorted.length / 2)];\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the mode of all the operations.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([1, 2, -4, 5])\n  -4\n  */\nconst mode = (operations) => {\n  let mode = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === mode) {\n      continue;\n    }\n    mode = operations[i];\n  }\n  return mode;\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the standard deviation of all the operations.\n  >>> standardDeviation([1, 2, 3])\n  2\n  >>> standardDeviation([1, 2, -4, 5])\n  2\n  */\nconst standardDeviation = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return Math.sqrt(sum / operations.length);\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the sum of all the operations.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, -4, 5])\n  -1\n  */\nconst sum = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the difference between the sum of all the operations and the balance of the bank account.\n  >>> difference([1, 2, 3])\n  2\n  >>> difference([1, 2, -4, 5])\n  -2\n  */\nconst difference = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance - sum(operations);\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the average of all the operations.\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, -4, 5])\n  -1.5\n  */\nconst average = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum / operations.length;\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and returns the median of all the operations.\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, -4, 5])\n  -2\n  */\nconst median = (operations) => {\n  let sorted = operations.sort(function(a, b) {\n    return a - b;\n  });\n  return sorted[Math.floor(sorted.length / 2)];\n};\n\n/*\n  Write a function that takes a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance and", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/**\n  Returns a list of numbers that are negative.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/**\n  Returns a list of numbers that are zero.\n  >>> getZero([-1, 2, -4, 5, 6])\n  [0, 0, 0]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0);\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return getPositive(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegativeOrZero = (l) => {\n  return getNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrZero(l).concat(getNegativeOrZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots2 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots3 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots4 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots5 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots6 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots7 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots8 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots9 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots10 = (xs) => {\n  return xs.reduce((prev, item, index)=>{\n    if(item === 0) return prev;\n    if(index % 2 === 0) return prev + item;\n    return prev + item * Math.pow(xs[index], 2);\n  }, 0);\n}\n\n/* \n  Finds the roots of a polynomial with coefficients xs. \n  returns list of roots. \n  */ \nconst roots11 = (xs) => {\n  return xs.reduce((prev,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    l2.push(l[i], l[j]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    l2.push(l[i], l[j]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    l2.push(l[i], l[j]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    l2.push(l[i], l[j]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    l2.push(l[i], l[j]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    l2.push(l[i], l[j]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird7 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  let i = 0;\n  while (i < l.length) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizzBuzz(i + 1)\n    } else if (i % 11 === 0) {\n      fizzBuzz(i + 1)\n      buzz++\n    } else if (i % 13 === 0) {\n      fizzBuzz(i + 1)\n      buzz++\n      fizz++\n    } else {\n      fizzBuzz(i + 1)\n    }\n    i++\n  }\n  return [fizz, buzz]\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const length= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic_cyclic= (s)=>{ \n   return s.length;\n}\n\n/*\n  takes as input a string and returns the number of characters in the string. \n  */ \n const count_cyclic_cyclic_cycl", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime2(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime3(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime4(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime5(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime6(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime7(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibNotPrime8(n);\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was not prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNotPrime9", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Median Absolute Deviation \n   around the mean of this dataset. \n   Median Absolute Deviation was the median absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= median| x-x_mean|\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was the average of the square of the differences between \n   each element and the mean of this dataset. \n   Standard Deviation was", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero6 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triples", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  let collision=0;\n  for(let i=0;i<n;i++){\n    for(let j=0;j<n;j++){\n      if(i!=j){\n        if(i>j){\n          if(car[i].x>car[j].x && car[i].x<car[j].x+car[j].w && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }else{\n          if(car[i].x<car[j].x && car[i].x+car[i].w>car[j].x && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision= (n)=>{\n  let collision=0;\n  for(let i=0;i<n;i++){\n    for(let j=0;j<n;j++){\n      if(i!=j){\n        if(i>j){\n          if(car[i].x>car[j].x && car[i].x<car[j].x+car[j].w && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }else{\n          if(car[i].x<car[j].x && car[i].x+car[i].w>car[j].x && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision= (n)=>{\n  let collision=0;\n  for(let i=0;i<n;i++){\n    for(let j=0;j<n;j++){\n      if(i!=j){\n        if(i>j){\n          if(car[i].x>car[j].x && car[i].x<car[j].x+car[j].w && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }else{\n          if(car[i].x<car[j].x && car[i].x+car[i].w>car[j].x && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision= (n)=>{\n  let collision=0;\n  for(let i=0;i<n;i++){\n    for(let j=0;j<n;j++){\n      if(i!=j){\n        if(i>j){\n          if(car[i].x>car[j].x && car[i].x<car[j].x+car[j].w && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }else{\n          if(car[i].x<car[j].x && car[i].x+car[i].w>car[j].x && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision= (n)=>{\n  let collision=0;\n  for(let i=0;i<n;i++){\n    for(let j=0;j<n;j++){\n      if(i!=j){\n        if(i>j){\n          if(car[i].x>car[j].x && car[i].x<car[j].x+car[j].w && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }else{\n          if(car[i].x<car[j].x && car[i].x+car[i].w>car[j].x && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision= (n)=>{\n  let collision=0;\n  for(let i=0;i<n;i++){\n    for(let j=0;j<n;j++){\n      if(i!=j){\n        if(i>j){\n          if(car[i].x>car[j].x && car[i].x<car[j].x+car[j].w && car[i].y>car[j].y && car[i].y<car[j].y+car[j].h){\n            collision++;\n          }\n        }else{\n          if(car[i].x<car[j].x && car[i].x+car[i].w>car[j].x && car[i].y>car[j].y && car[i].y<car", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[j] = l[i];\n    i++;\n    j++;\n    if (i == n) {\n      res[j] = l[0];\n      i = 1;\n      j++;\n    }\n    while (i < n && l[i] == l[i - 1]) {\n      i++;\n    }\n    k = i;\n    while (i < n && l[i] == l[k - 1]) {\n      i++;\n    }\n    if (i < n) {\n      res[j] = l[i - 1];\n      i++;\n      j++;\n    }\n  }\n  return res;\n};\n\nconst printList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst main = () => {\n  const l = [1, 2, 3];\n  printList(incrList(l));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase2 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase3 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase4 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase5 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase6 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase7 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase8 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase9 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase10 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase11 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase12 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase13 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return res\n}\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion. \n  base numbers were less than 10.\n  */\nconst changeBase14 = (x, base) => {\n  let num = x\n  let res = ''\n  while (num > 0) {\n    res = String.fromCharCode(num % base) + res\n    num = Math.floor(num / base)\n  }\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return h * (a / 2);\n};\n\n/**\n  Given length of a side and low return area for a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return (left.length > right.length)? median(left) : median(right);\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(reversed);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) {\n    throw new Error('n must be less than p')\n  }\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p)\n  }\n  return modp(n - 1, p)\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  const current = numbers[0];\n  let next = numbers[1];\n\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(current);\n    current = next;\n    next = numbers[i + 1];\n  }\n\n  result.push(current);\n\n  return result.map(item => item === delimeter? null : item);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   takes as input a string encoded with encodeShift function. Returns decoded string. \n  */ \n const decode= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_shift_decode= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  */ \n const encode_decode_shift_decode_shift_decode_shift_decode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n} \n\n/* \n   takes as input a string encoded with encode function. Returns decoded string. \n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsCount = vowels.length;\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold2 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold3 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold4 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold5 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold6 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold7 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold8 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold9 = (l, t, tplus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tplus) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was between threshold t and t+", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) return n;\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsRegex = brackets.split(/[<>\\[\\]\\(\\)]/).reduce((acc, bracket) => {\n    acc[bracket] = true;\n    return acc;\n  }, {});\n\n  return bracketsRegex[bracketsRegex.length - 1];\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1.intersection(set2)];\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const primeFactors = [1];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      const factor = i;\n      while (n % i === 0) {\n        n /= i;\n      }\n      primeFactors.push(factor);\n    }\n    i++;\n  }\n  return primeFactors.length > 1? primeFactors[primeFactors.length - 1] : 1;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let deepest_paren_level = 0;\n  let paren_string_length = paren_string.length;\n  let current_paren_level = 0;\n  let current_paren_index = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_index_end = 0;\n  let current_paren_string_index_start = 0;\n  let current_paren_string_index_end_start = 0;\n  let current_paren_string_index_end_end = 0;\n  let current_paren_string_index_end_end_start = 0;\n  let current_paren_string_index_end_end_end = 0;\n  let current_paren_string_index_end_end_end_start = 0;\n  let current_paren_string_index_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_start = 0;\n  let current_paren_string_index_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_start = 0;\n  let current_paren_string_index_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let i = 0;\n  let bracket = \"\";\n  let bracketed = \"\";\n  let bracketedCount = 0;\n  let bracketedCount2 = 0;\n  let bracketedCount3 = 0;\n  let bracketedCount4 = 0;\n  let bracketedCount5 = 0;\n  let bracketedCount6 = 0;\n  let bracketedCount7 = 0;\n  let bracketedCount8 = 0;\n  let bracketedCount9 = 0;\n  let bracketedCount10 = 0;\n  let bracketedCount11 = 0;\n  let bracketedCount12 = 0;\n  let bracketedCount13 = 0;\n  let bracketedCount14 = 0;\n  let bracketedCount15 = 0;\n  let bracketedCount16 = 0;\n  let bracketedCount17 = 0;\n  let bracketedCount18 = 0;\n  let bracketedCount19 = 0;\n  let bracketedCount20 = 0;\n  let bracketedCount21 = 0;\n  let bracketedCount22 = 0;\n  let bracketedCount23 = 0;\n  let bracketedCount24 = 0;\n  let bracketedCount25 = 0;\n  let bracketedCount26 = 0;\n  let bracketedCount27 = 0;\n  let bracketedCount28 = 0;\n  let bracketedCount29 = 0;\n  let bracketedCount30 = 0;\n  let bracketedCount31 = 0;\n  let bracketedCount32 = 0;\n  let bracketedCount33 = 0;\n  let bracketedCount34 = 0;\n  let bracketedCount35 = 0;\n  let bracketedCount36 = 0;\n  let bracketedCount37 = 0;\n  let bracketedCount38 = 0;\n  let bracketedCount39 = 0;\n  let bracketedCount40 = 0;\n  let bracketedCount41 = 0;\n  let bracketedCount42 = 0;\n  let bracketedCount43 = 0;\n  let bracketedCount44 = 0;\n  let bracketedCount45 = 0;\n  let bracketedCount46 = 0;\n  let bracketedCount47 = 0;\n  let bracketedCount48 = 0;\n  let bracketedCount49 = 0;\n  let bracketedCount50 = 0;\n  let bracketedCount51 = 0;\n  let bracketedCount52 = 0;\n  let bracketedCount53 = 0;\n  let bracketedCount54 = 0;\n  let bracketedCount55 = 0;\n  let bracketedCount56 = 0;\n  let bracketedCount57 = 0;\n  let bracketedCount58 = 0;\n  let bracketedCount59 = 0;\n  let bracketedCount60 = 0;\n  let bracketedCount61 = 0;\n  let bracketedCount62 = 0;\n  let bracketedCount63 = 0;\n  let bracketedCount64 = 0;\n  let bracketedCount65 = 0;\n  let bracketedCount66 = 0;\n  let bracketedCount67 = 0;\n  let bracketedCount68 = 0;\n  let bracketedCount69 = 0;\n  let bracketedCount70 = 0;\n  let bracketedCount71 = 0;\n  let bracketedCount72 = 0;\n  let bracketedCount73 = 0;\n  let bracketedCount74 = 0;\n  let bracketedCount75 = 0;\n  let bracketedCount76 = 0;\n  let bracketedCount77 = 0;\n  let bracketedCount78 = 0;\n  let bracketedCount79 = 0;\n  let bracketedCount80 = 0;\n  let bracketedCount81 = 0;\n  let bracketedCount82 = 0;\n  let bracketedCount83 = 0;\n  let bracketedCount84 = 0;\n  let bracketedCount85 = 0;\n  let bracketedCount86 = 0;\n  let bracketedCount87 = 0;\n  let bracketedCount88 = 0;\n  let bracketedCount89 = 0;\n  let bracketedCount90 = 0;\n  let bracketedCount91 = 0;\n  let bracketedCount92 = 0;\n  let bracketedCount93 = 0;\n  let bracketedCount94 = 0;\n  let bracketedCount95 = 0;\n  let bracketedCount96 = 0;\n  let bracketedCount97 = 0;\n  let bracketedCount98 = 0;\n  let bracketedCount99 = 0;\n  let bracketedCount100 = 0;\n  let bracketedCount101 = 0;\n  let bracketedCount102 = 0;\n  let bracketedCount103 = 0;\n  let bracketedCount104 = 0;\n  let bracketedCount105 = 0;\n  let bracketedCount106 = 0;\n  let bracketedCount107 = 0;\n  let bracketedCount108 = 0;\n  let bracketedCount109 = 0;\n  let bracketedCount110 = 0;\n  let bracketedCount111 = 0;\n  let bracketedCount112 = 0;\n  let bracketedCount113 = 0;\n  let bracketedCount114 = 0;\n  let bracketedCount115 = 0;\n  let bracketedCount116 = 0;\n  let bracketedCount117 = 0;\n  let bracketedCount118 = 0;\n  let bracketedCount119 = 0;\n  let bracketedCount120 = 0;\n  let bracketedCount121 = 0;\n  let bracketedCount122 = 0;\n  let bracketedCount123 = 0;\n  let bracketedCount124 = 0;\n  let bracketedCount125 = 0;\n  let bracketedCount126 = 0;\n  let bracketedCount127 = 0;\n  let bracketedCount128 = 0;\n  let bracketedCount129 = 0;\n  let bracketedCount130 = 0;\n  let bracketedCount131 = 0;\n  let bracketedCount132 = 0;\n  let bracketedCount133 = 0;\n  let bracketedCount134 = 0;\n  let bracketedCount135 = 0;\n  let bracketedCount136 = 0;\n  let bracketedCount137 = 0;\n  let bracketedCount138 = 0;\n  let bracketedCount139 = 0;\n  let bracketedCount140 = 0;\n  let bracketedCount141 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) {\n    return [];\n  }\n  const deriv = [];\n  for (let i = 0; i < xs.length; i++) {\n    deriv.push(i);\n  }\n  deriv.pop();\n  deriv.push(0);\n  for (let i = 0; i < xs.length; i++) {\n    deriv.push(deriv[i] + xs[i]);\n  }\n  return deriv;\n};\n\n/*\n  Return the coefficients of a polynomial in the form of an array.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients = (xs) => {\n  if (xs.length === 0) {\n    return [];\n  }\n  const deriv = [];\n  for (let i = 0; i < xs.length; i++) {\n    deriv.push(xs[i]);\n  }\n  deriv.pop();\n  deriv.push(0);\n  return deriv;\n};\n\nmodule.exports = {\n  derivative,\n  coefficients\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 3;\n  if (n === 6) return 5;\n  if (n === 7) return 8;\n  if (n === 8) return 24;\n  if (n === 9) return 55;\n  if (n === 10) return 89;\n  if (n === 11) return 144;\n  if (n === 12) return 233;\n  if (n === 13) return 377;\n  if (n === 14) return 610;\n  if (n === 15) return 987;\n  if (n === 16) return 1597;\n  if (n === 17) return 2584;\n  if (n === 18) return 4181;\n  if (n === 19) return 6765;\n  if (n === 20) return 10946;\n  if (n === 21) return 17711;\n  if (n === 22) return 28657;\n  if (n === 23) return 46368;\n  if (n === 24) return 75025;\n  if (n === 25) return 121393;\n  if (n === 26) return 196418;\n  if (n === 27) return 317811;\n  if (n === 28) return 514229;\n  if (n === 29) return 832040;\n  if (n === 30) return 1346269;\n  if (n === 31) return 2178309;\n  if (n === 32) return 3524578;\n  if (n === 33) return 5702887;\n  if (n === 34) return 9227465;\n  if (n === 35) return 14930352;\n  if (n === 36) return 24157817;\n  if (n === 37) return 39088169;\n  if (n === 38) return 63245986;\n  if (n === 39) return 102334155;\n  if (n === 40) return 165580141;\n  if (n === 41) return 267914296;\n  if (n === 42) return 433494437;\n  if (n === 43) return 701408733;\n  if (n === 44) return 1220703125;\n  if (n === 45) return 1836311903;\n  if (n === 46) return 2971456129;\n  if (n === 47) return 4794069135;\n  if (n === 48) return 7507520283;\n  if (n === 49) return 12089258196;\n  if (n === 50) return 1836311903;\n  if (n === 51) return 2971456129;\n  if (n === 52) return 4794069135;\n  if (n === 53) return 7507520283;\n  if (n === 54) return 1220703125;\n  if (n === 55) return 1836311903;\n  if (n === 56) return 2971456129;\n  if (n === 57) return 4794069135;\n  if (n === 58) return 7507520283;\n  if (n === 59) return 12089258196;\n  if (n === 60) return 1836311903;\n  if (n === 61) return 2971456129;\n  if (n === 62) return 4794069135;\n  if (n === 63) return 7507520283;\n  if (n === 64) return 1220703125;\n  if (n === 65) return 1836311903;\n  if (n === 66) return 2971456129;\n  if (n === 67) return 4794069135;\n  if (n === 68) return 7507520283;\n  if (n === 69) return 12089258196;\n  if (n === 70) return 1836311903;\n  if (n === 71) return 2971456129;\n  if (n === 72) return 4794069135;\n  if (n === 73) return 7507520283;\n  if (n === 74) return 1220703125;\n  if (n === 75) return 1836311903;\n  if (n === 76) return 2971456129;\n  if (n === 77) return 4794069135;\n  if (n === 78) return 7507520283;\n  if (n === 79) return 12089258196;\n  if (n === 80) return 1836311903;\n  if (n === 81) return 2971456129;\n  if (n === 82) return 4794069135;\n  if (n === 83) return 7507520283;\n  if (n === 84) return 1220703125;\n  if (n === 85) return 1836311903;\n  if (n === 86) return 2971456129;\n  if (n === 87) return 4794069135;\n  if (n === 88) return 7507520283;\n  if (n === 89) return 12089258196;\n  if (n === 90) return 1836311903;\n  if (n === 91) return 2971456129;\n  if (n === 92) return 4794069135;\n  if (n === 93) return 7507520283;\n  if (n === 94) return 1220703125;\n  if (n === 95) return 1836311903;\n  if (n === 96) return 2971456129;\n  if (n === 97) return 4794069135;\n  if (n === 98) return 7507520283;\n  if (n === 99) return 12089258196;\n  if (n === 100) return 1836311903;\n  if (n === 101)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function to check if a word is an anagram of another word.\n// An anagram is a word or phrase that is the same as another word or phrase,\n// but with different letters. For example, the word \"anagram\" is an anagram of\n// \"nagaram\", but not of \"nagarp\".\n//\n// Example:\n//\n//   >>> isAnagram(\"nagaram\", \"anagram\")\n//   True\n//   >>> isAnagram(\"nagarp\", \"nagaram\")\n//   False\n//\nconst isAnagram = (word1, word2) => {\n  let word1Array = word1.split('');\n  let word2Array = word2.split('');\n  let word1Length = word1Array.length;\n  let word2Length = word2Array.length;\n  let word1Index = 0;\n  let word2Index = 0;\n  while (word1Index < word1Length && word2Index < word2Length) {\n    if (word1Array[word1Index] === word2Array[word2Index]) {\n      word1Index++;\n      word2Index++;\n    } else {\n      if (word1Index === word1Length - 1) {\n        return false;\n      } else {\n        word1Index++;\n      }\n      if (word2Index === word2Length - 1) {\n        return false;\n      } else {\n        word2Index++;\n      }\n    }\n  }\n  return true;\n};\n\n// Write a function to check if a word is a palindrome.\n// A palindrome is a word or phrase that is the same as another word or phrase,\n// but with different letters in reverse order. For example, the word \"anagram\"\n// is a palindrome of \"nagaram\", but not of \"nagarp\".\n//\n// Example:\n//\n//   >>> isPalindrome(\"nagaram\")\n//   True\n//   >>> isPalindrome(\"nagarp\")\n//   False\n//\nconst isPalindrome = (word) => {\n  let wordArray = word.split('');\n  let wordLength = wordArray.length;\n  let wordIndex = 0;\n  while (wordIndex < wordLength / 2) {\n    if (wordArray[wordIndex]!== wordArray[wordLength - 1 - wordIndex]) {\n      return false;\n    }\n    wordIndex++;\n  }\n  return true;\n};\n\n// Write a function to check if a word is a permutation of another word.\n// A permutation is a word or phrase that is the same as another word or phrase,\n// but with different letters. For example, the word \"anagram\" is a permutation of\n// \"nagaram\", but not of \"nagarp\".\n//\n// Example:\n//\n//   >>> isPermutation(\"nagaram\")\n//   True\n//   >>> isPermutation(\"nagarp\")\n//   False\n//\nconst isPermutation = (word1, word2) => {\n  let word1Array = word1.split('');\n  let word2Array = word2.split('');\n  let word1Length = word1Array.length;\n  let word2Length = word2Array.length;\n  let word1Index = 0;\n  let word2Index = 0;\n  while (word1Index < word1Length && word2Index < word2Length) {\n    if (word1Array[word1Index] === word2Array[word2Index]) {\n      word1Index++;\n      word2Index++;\n    } else {\n      if (word1Index === word1Length - 1) {\n        return false;\n      } else {\n        word1Index++;\n      }\n      if (word2Index === word2Length - 1) {\n        return false;\n      } else {\n        word2Index++;\n      }\n    }\n  }\n  return true;\n};\n\n// Write a function to check if a word is a palindrome of the same length.\n// A palindrome is a word or phrase that is the same as another word or phrase,\n// but with different letters in reverse order. For example, the word \"anagram\"\n// is a palindrome of length 4, but not of length 3.\n//\n// Example:\n//\n//   >>> isPalindromeOfSameLength(\"anagram\")\n//   True\n//   >>> isPalindromeOfSameLength(\"nagaram\")\n//   False\n//\nconst isPalindromeOfSameLength = (word) => {\n  let wordArray = word.split('');\n  let wordLength = wordArray.length;\n  let wordIndex = 0;\n  while (wordIndex < wordLength) {\n    if (wordArray[wordIndex]!== wordArray[wordLength - 1 - wordIndex]) {\n      return false;\n    }\n    wordIndex++;\n  }\n  return true;\n};\n\n// Write a function to check if a word is a permutation of the same length.\n// A permutation is a word or phrase that is the same as another word or phrase,\n// but with different letters. For example, the word \"anagram\" is a permutation of\n// length 4, but not of length 3.\n//\n// Example:\n//\n//   >>> isPermutationOfSameLength(\"anagram\")\n//   True\n//   >>> isPermutationOfSameLength(\"nagaram\")\n//   False\n//\nconst isPermutationOfSame", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  let digit = 0;\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charCodeAt(i++);\n    digit = digit << shift | digit >>> (32 - shift);\n    result += String.fromCharCode(digit);\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a base-32 string.\n  *\n  * @param {string} str\n  * @return {string}\n  */\nconst toBase32 = (str) => {\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    result += circularShift(str.charCodeAt(i++), 5);\n  }\n  return result;\n};\n\n/**\n  * Convert a base-32 string to a string.\n  *\n  * @param {string} str\n  * @return {string}\n  */\nconst fromBase32 = (str) => {\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    result += String.fromCharCode(parseInt(str.charAt(i++), 32));\n  }\n  return result;\n};\n\nmodule.exports = {\n  toBase32,\n  fromBase32\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  let total=0;\n  let count=0;\n  let i=0;\n  while(i<n){\n    let j=0;\n    while(j<s.length){\n      if(s[j]=='a'){\n        total+=1;\n        count+=1;\n      }\n      j+=1;\n    }\n    i+=1;\n  }\n  return total-count;\n}\n\nfruitDistribution(\"5 apples and 6 oranges\", 19);\n// fruitDistribution(\"0 apples and 1 oranges\",3);\nfruitDistribution(\"2 apples and 3 oranges\", 100);\n// fruitDistribution(\"100 apples and 1 oranges\",120);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  return [min, min_index];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max && lst[i] > maxFreq) {\n      max = lst[i];\n      maxFreq = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\nmodule.exports = {\n  filterBySubstring\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (area >= Math.min(a, Math.min(b, c))) {\n    return area;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n\n  if (q.length === 1) {\n    return q[0] === w;\n  }\n\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n\n  return sum <= w && isBalanced(q);\n};\n\nconst isBalanced = (q) => {\n  if (q.length === 1) {\n    return true;\n  }\n\n  let max = q[0];\n  for (let i = 1; i < q.length; i++) {\n    if (q[i] > max) {\n      max = q[i];\n    }\n  }\n\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n\n  return sum <= max;\n};\n\nconst test = (shouldBeTrue, shouldBeFalse, input, expected) => {\n  const result = willItFly(input, expected);\n  console.log(`shouldBeTrue: ${shouldBeTrue}, shouldBeFalse: ${shouldBeFalse}, input: ${input}, expected: ${expected}, result: ${result}`);\n  assert.equal(result, shouldBeTrue);\n};\n\ntest(true, false, [1, 2], 5);\ntest(true, false, [3, 2, 3], 1);\ntest(true, false, [3, 2, 3], 9);\ntest(true, false, [3], 5);\ntest(true, false, [3], 1);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true, [3], 9);\ntest(false, true, [3], 5);\ntest(false, true, [3], 1);\ntest(false, true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i!== j && arr[i]!== arr[j]) {\n        min = Math.min(min, arr.length - i - 1);\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length < lst2[i].length) {\n      total += lst1[i].length;\n    }\n  }\n  return lst1.slice(0, total);\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = isSimplePower;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0;\n}\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexDigits = 0;\n  let decDigits = 0;\n  let decDigitsCount = 0;\n  let decDigitsCount2 = 0;\n  let decDigitsCount3 = 0;\n  let decDigitsCount4 = 0;\n  let decDigitsCount5 = 0;\n  let decDigitsCount6 = 0;\n  let decDigitsCount7 = 0;\n  let decDigitsCount8 = 0;\n  let decDigitsCount9 = 0;\n  let decDigitsCount10 = 0;\n  let decDigitsCount11 = 0;\n  let decDigitsCount12 = 0;\n  let decDigitsCount13 = 0;\n  let decDigitsCount14 = 0;\n  let decDigitsCount15 = 0;\n  let decDigitsCount16 = 0;\n  let decDigitsCount17 = 0;\n  let decDigitsCount18 = 0;\n  let decDigitsCount19 = 0;\n  let decDigitsCount20 = 0;\n  let decDigitsCount21 = 0;\n  let decDigitsCount22 = 0;\n  let decDigitsCount23 = 0;\n  let decDigitsCount24 = 0;\n  let decDigitsCount25 = 0;\n  let decDigitsCount26 = 0;\n  let decDigitsCount27 = 0;\n  let decDigitsCount28 = 0;\n  let decDigitsCount29 = 0;\n  let decDigitsCount30 = 0;\n  let decDigitsCount31 = 0;\n  let decDigitsCount32 = 0;\n  let decDigitsCount33 = 0;\n  let decDigitsCount34 = 0;\n  let decDigitsCount35 = 0;\n  let decDigitsCount36 = 0;\n  let decDigitsCount37 = 0;\n  let decDigitsCount38 = 0;\n  let decDigitsCount39 = 0;\n  let decDigitsCount40 = 0;\n  let decDigitsCount41 = 0;\n  let decDigitsCount42 = 0;\n  let decDigitsCount43 = 0;\n  let decDigitsCount44 = 0;\n  let decDigitsCount45 = 0;\n  let decDigitsCount46 = 0;\n  let decDigitsCount47 = 0;\n  let decDigitsCount48 = 0;\n  let decDigitsCount49 = 0;\n  let decDigitsCount50 = 0;\n  let decDigitsCount51 = 0;\n  let decDigitsCount52 = 0;\n  let decDigitsCount53 = 0;\n  let decDigitsCount54 = 0;\n  let decDigitsCount55 = 0;\n  let decDigitsCount56 = 0;\n  let decDigitsCount57 = 0;\n  let decDigitsCount58 = 0;\n  let decDigitsCount59 = 0;\n  let decDigitsCount60 = 0;\n  let decDigitsCount61 = 0;\n  let decDigitsCount62 = 0;\n  let decDigitsCount63 = 0;\n  let decDigitsCount64 = 0;\n  let decDigitsCount65 = 0;\n  let decDigitsCount66 = 0;\n  let decDigitsCount67 = 0;\n  let decDigitsCount68 = 0;\n  let decDigitsCount69 = 0;\n  let decDigitsCount70 = 0;\n  let decDigitsCount71 = 0;\n  let decDigitsCount72 = 0;\n  let decDigitsCount73 = 0;\n  let decDigitsCount74 = 0;\n  let decDigitsCount75 = 0;\n  let decDigitsCount76 = 0;\n  let decDigitsCount77 = 0;\n  let decDigitsCount78 = 0;\n  let decDigitsCount79 = 0;\n  let decDigitsCount80 = 0;\n  let decDigitsCount81 = 0;\n  let decDigitsCount82 = 0;\n  let decDigitsCount83 = 0;\n  let decDigitsCount84 = 0;\n  let decDigitsCount85 = 0;\n  let decDigitsCount86 = 0;\n  let decDigitsCount87 = 0;\n  let decDigitsCount88 = 0;\n  let decDigitsCount89 = 0;\n  let decDigitsCount90 = 0;\n  let decDigitsCount91 = 0;\n  let decDigitsCount92 = 0;\n  let decDigitsCount93 = 0;\n  let decDigitsCount94 = 0;\n  let decDigitsCount95 = 0;\n  let decDigitsCount96 = 0;\n  let decDigitsCount97 = 0;\n  let decDigitsCount98 = 0;\n  let decDigitsCount99 = 0;\n  let decDigitsCount100 = 0;\n  let decDigitsCount101 = 0;\n  let decDigitsCount102 = 0;\n  let decDigitsCount103 = 0;\n  let decDigitsCount104 = 0;\n  let decDigitsCount105 = 0;\n  let decDigitsCount106 = 0;\n  let decDigitsCount107 = 0;\n  let decDigitsCount108 = 0;\n  let decDigitsCount109 = 0;\n  let decDigitsCount110 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryString = '';\n  let binaryLength = 0;\n  let decimalLength = 0;\n  let decimalDigit = 0;\n  let decimalDigitLength = 0;\n  let binaryDigit = 0;\n  let binaryDigitLength = 0;\n  let binaryDigitCount = 0;\n  let binaryDigitCount2 = 0;\n  let binaryDigitCount3 = 0;\n  let binaryDigitCount4 = 0;\n  let binaryDigitCount5 = 0;\n  let binaryDigitCount6 = 0;\n  let binaryDigitCount7 = 0;\n  let binaryDigitCount8 = 0;\n  let binaryDigitCount9 = 0;\n  let binaryDigitCount10 = 0;\n  let binaryDigitCount11 = 0;\n  let binaryDigitCount12 = 0;\n  let binaryDigitCount13 = 0;\n  let binaryDigitCount14 = 0;\n  let binaryDigitCount15 = 0;\n  let binaryDigitCount16 = 0;\n  let binaryDigitCount17 = 0;\n  let binaryDigitCount18 = 0;\n  let binaryDigitCount19 = 0;\n  let binaryDigitCount20 = 0;\n  let binaryDigitCount21 = 0;\n  let binaryDigitCount22 = 0;\n  let binaryDigitCount23 = 0;\n  let binaryDigitCount24 = 0;\n  let binaryDigitCount25 = 0;\n  let binaryDigitCount26 = 0;\n  let binaryDigitCount27 = 0;\n  let binaryDigitCount28 = 0;\n  let binaryDigitCount29 = 0;\n  let binaryDigitCount30 = 0;\n  let binaryDigitCount31 = 0;\n  let binaryDigitCount32 = 0;\n  let binaryDigitCount33 = 0;\n  let binaryDigitCount34 = 0;\n  let binaryDigitCount35 = 0;\n  let binaryDigitCount36 = 0;\n  let binaryDigitCount37 = 0;\n  let binaryDigitCount38 = 0;\n  let binaryDigitCount39 = 0;\n  let binaryDigitCount40 = 0;\n  let binaryDigitCount41 = 0;\n  let binaryDigitCount42 = 0;\n  let binaryDigitCount43 = 0;\n  let binaryDigitCount44 = 0;\n  let binaryDigitCount45 = 0;\n  let binaryDigitCount46 = 0;\n  let binaryDigitCount47 = 0;\n  let binaryDigitCount48 = 0;\n  let binaryDigitCount49 = 0;\n  let binaryDigitCount50 = 0;\n  let binaryDigitCount51 = 0;\n  let binaryDigitCount52 = 0;\n  let binaryDigitCount53 = 0;\n  let binaryDigitCount54 = 0;\n  let binaryDigitCount55 = 0;\n  let binaryDigitCount56 = 0;\n  let binaryDigitCount57 = 0;\n  let binaryDigitCount58 = 0;\n  let binaryDigitCount59 = 0;\n  let binaryDigitCount60 = 0;\n  let binaryDigitCount61 = 0;\n  let binaryDigitCount62 = 0;\n  let binaryDigitCount63 = 0;\n  let binaryDigitCount64 = 0;\n  let binaryDigitCount65 = 0;\n  let binaryDigitCount66 = 0;\n  let binaryDigitCount67 = 0;\n  let binaryDigitCount68 = 0;\n  let binaryDigitCount69 = 0;\n  let binaryDigitCount70 = 0;\n  let binaryDigitCount71 = 0;\n  let binaryDigitCount72 = 0;\n  let binaryDigitCount73 = 0;\n  let binaryDigitCount74 = 0;\n  let binaryDigitCount75 = 0;\n  let binaryDigitCount76 = 0;\n  let binaryDigitCount77 = 0;\n  let binaryDigitCount78 = 0;\n  let binaryDigitCount79 = 0;\n  let binaryDigitCount80 = 0;\n  let binaryDigitCount81 = 0;\n  let binaryDigitCount82 = 0;\n  let binaryDigitCount83 = 0;\n  let binaryDigitCount84 = 0;\n  let binaryDigitCount85 = 0;\n  let binaryDigitCount86 = 0;\n  let binaryDigitCount87 = 0;\n  let binaryDigitCount88 = 0;\n  let binaryDigitCount89 = 0;\n  let binaryDigitCount90 = 0;\n  let binaryDigitCount91 = 0;\n  let binaryDigitCount92 = 0;\n  let binaryDigitCount93 = 0;\n  let binaryDigitCount94 = 0;\n  let binaryDigitCount95 = 0;\n  let binaryDigitCount96 = 0;\n  let binaryDigitCount97 = 0;\n  let binaryDigitCount98 = 0;\n  let binaryDigitCount99 = 0;\n  let binaryDigitCount100 = 0;\n  let binaryDigitCount101 = 0;\n  let binaryDigitCount102 = 0;\n  let binaryDigitCount103 = 0;\n  let binaryDigitCount104 = 0;\n  let binaryDigitCount105 = 0;\n  let binaryDigitCount106 = 0;\n  let binaryDigitCount107 = 0;\n  let binaryDigitCount108 = 0;\n  let binaryDigitCount109 = 0;\n  let binaryDigitCount110 = 0;\n  let binaryDigitCount111 = 0;\n  let binaryDigitCount112 = 0;\n  let binaryDigitCount113 = 0;\n  let binaryDigitCount114 = 0;\n  let binaryDigitCount115 = 0;\n  let binaryDigitCount116 = 0;\n  let binaryDigitCount117 = 0;\n  let binaryDigitCount118 = 0;\n  let binaryDigitCount119 = 0;\n  let binaryDigitCount120 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct2 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct2(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct3(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct4 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct4(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct5(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct6 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct6(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct7(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct8 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct8(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct9(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct10 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct10(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct11 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct11(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct12 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct12(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct13 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct13(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct14 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct14(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct15 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct15(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct16 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct16(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct17 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct17(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct18 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct18(numbers.slice(1), int)\n  return [sum + numbers[0], product * numbers[0]]\n}\n\nconst sumProduct19 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [sum, product] = sumProduct19(numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let count = 0;\n  let prev = 0;\n  let current = 0;\n  let isHappy = true;\n  for (let i = 0; i < str.length; i++) {\n    current = str[i];\n    if (prev === current) {\n      count++;\n    } else {\n      if (count > 2) {\n        isHappy = false;\n        break;\n      }\n      count = 1;\n      prev = current;\n    }\n  }\n  return isHappy;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = '';\n  let grade = 0;\n  grades.forEach((grade) => {\n    if (grade > 3.7) {\n      letterGrade += 'A+';\n    } else if (grade > 3.3) {\n      letterGrade += 'A';\n    } else if (grade > 3.0) {\n      letterGrade += 'A-';\n    } else if (grade > 2.7) {\n      letterGrade += 'B+';\n    } else if (grade > 2.3) {\n      letterGrade += 'B';\n    } else if (grade > 2.0) {\n      letterGrade += 'B-';\n    } else if (grade > 1.7) {\n      letterGrade += 'C+';\n    } else if (grade > 1.3) {\n      letterGrade += 'C';\n    } else if (grade > 1.0) {\n      letterGrade += 'C-';\n    } else if (grade > 0.7) {\n      letterGrade += 'D+';\n    } else if (grade > 0.3) {\n      letterGrade += 'D';\n    } else if (grade > 0.0) {\n      letterGrade += 'D-';\n    } else {\n      letterGrade += 'E';\n    }\n  });\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count=0;\n  while(n>0){\n    count+=n%10==1;\n    n/=10;\n  }\n  return count;\n}\n\nmodule.exports={\n  startsOneEnds\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nmodule.exports = add;<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = ''\n  let arr = s.split(' ')\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split('')\n    for (let j = 0; j < arr2.length; j++) {\n      let index = arr2.indexOf(arr2[j])\n      if (index > 0) {\n        let temp = arr2[index - 1]\n        arr2[index - 1] = arr2[index]\n        arr2[index] = temp\n      }\n    }\n    result += arr2.join('') +''\n  }\n  return result.trim()\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let result = [];\n  let sorted = [];\n  let sortedByCol = [];\n  let sortedByRow = [];\n  let sortedByColDesc = [];\n  let sortedByRowDesc = [];\n  let sortedByRowCol = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc = [];\n  let sortedByRowColDesc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  let sum = array[0];\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (sum % 2 === 0) {\n      sortedArray.push(array[i]);\n      sum += array[i];\n    } else {\n      sortedArray.push(array[i]);\n      sum -= array[i];\n    }\n  }\n\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s2 = s.toLowerCase();\n  let s3 = s2.split('').map((c) => {\n    let c2 = c.toLowerCase();\n    let c3 = c2.split('').map((c) => {\n      let c4 = c.toLowerCase();\n      let c5 = c4.split('').map((c) => {\n        let c6 = c.toLowerCase();\n        let c7 = c6.split('').map((c) => {\n          let c8 = c.toLowerCase();\n          let c9 = c8.split('').map((c) => {\n            let c10 = c.toLowerCase();\n            let c11 = c10.split('').map((c) => {\n              let c12 = c.toLowerCase();\n              let c13 = c12.split('').map((c) => {\n                let c14 = c.toLowerCase();\n                let c15 = c14.split('').map((c) => {\n                  let c16 = c.toLowerCase();\n                  let c17 = c16.split('').map((c) => {\n                    let c18 = c.toLowerCase();\n                    let c19 = c18.split('').map((c) => {\n                      let c20 = c.toLowerCase();\n                      let c21 = c20.split('').map((c) => {\n                        let c22 = c.toLowerCase();\n                        let c23 = c22.split('').map((c) => {\n                          let c24 = c.toLowerCase();\n                          let c25 = c24.split('').map((c) => {\n                            let c26 = c.toLowerCase();\n                            let c27 = c26.split('').map((c) => {\n                              let c28 = c.toLowerCase();\n                              let c29 = c28.split('').map((c) => {\n                                let c30 = c.toLowerCase();\n                                let c31 = c30.split('').map((c) => {\n                                  let c32 = c.toLowerCase();\n                                  let c33 = c32.split('').map((c) => {\n                                    let c34 = c.toLowerCase();\n                                    let c35 = c34.split('').map((c) => {\n                                      let c36 = c.toLowerCase();\n                                      let c37 = c36.split('').map((c) => {\n                                        let c38 = c.toLowerCase();\n                                        let c39 = c38.split('').map((c) => {\n                                          let c40 = c.toLowerCase();\n                                          let c41 = c40.split('').map((c) => {\n                                            let c42 = c.toLowerCase();\n                                            let c43 = c42.split('').map((c) => {\n                                              let c44 = c.toLowerCase();\n                                              let c45 = c44.split('').map((c) => {\n                                                let c46 = c.toLowerCase();\n                                                let c47 = c46.split('').map((c) => {\n                                                  let c48 = c.toLowerCase();\n                                                  let c49 = c48.split('').map((c) => {\n                                                    let c50 = c.toLowerCase();\n                                                    let c51 = c50.split('').map((c) => {\n                                                      let c52 = c.toLowerCase();\n                                                      let c53 = c52.split('').map((c) => {\n                                                        let c54 = c.toLowerCase();\n                                                        let c55 = c54.split('').map((c) => {\n                                                          let c56 = c.toLowerCase();\n                                                          let c57 = c56.split('').map((c) => {\n                                                            let c58 = c.toLowerCase();\n                                                            let c59 = c58.split('').map((c) => {\n                                                              let c60 = c.toLowerCase();\n                                                              let c61 = c60.split('').map((c) => {\n                                                                let c62 = c.toLowerCase();\n                                                                let c63 = c62.split('').map((c) => {\n                                                                  let c64 = c.toLowerCase();\n                                                                  let c65 = c64.split('').map((c) => {\n                                                                    let c66 = c.toLowerCase();\n                                                                    let c67 = c66.split('').map((c) => {\n                                                                      let c68 = c.toLowerCase();\n                                                                      let c69 = c68.split('').map((c) => {\n                                                                        let c70 = c.toLowerCase();\n                                                                        let c71 = c70.split('').map((c) => {\n                                                                          let c72 = c.toLowerCase();\n                                                                          let c73 = c72.split('').map((c) => {\n                                                                            let c74 = c.toLowerCase();\n                                                                            let c75 = c74.split('').map((c) => {\n                                                                              let c76 = c.toLowerCase();\n                                                                              let c77 = c76.split('').map((c) => {\n                                                                                let c78 = c.toLowerCase();\n                                                                                let c79 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling minimum element found until gave moment \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 1, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = minIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling sum element found until gave moment \n   in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 5, 7, 9, 11, 13]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling product element found until gave moment \n   in the sequence.\n  >>> rollingProduct([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 5040]\n  */\nconst rollingProduct = (numbers) => {\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    result.push(product);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling average element found until gave moment \n   in the sequence.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4]\n  */\nconst rollingAverage = (numbers) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling standard deviation element found until gave moment \n   in the sequence.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/*\n  From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length==0) return null;\n   let i=0;\n   let min=lst[0];\n   for(let j=1;j<lst.length;j++){\n     if(lst[j]<min){\n       min=lst[j];\n       i=j;\n     }\n   }\n   return lst[i+1];\n }\n \n \n \n \n const main=()=>{\n   const lst=[1, 2, 3, 4, 5];\n   console.log(nextSmallest(lst));\n }\n \n \n \n \n \n main();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(/[!?. ]+/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === \"i\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n// tests\n\nassert(isBored(\"Hello world\") === 0);\nassert(isBored(\"The sky is blue. The sun is shining. I love this weather\") === 1);\nassert(isBored(\"I am bored.\") === 0);\nassert(isBored(\"I am bored. I am bored.\") === 0);\nassert(isBored(\"I am bored. I am bored. I am bored.\") === 1);\nassert(isBored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt2 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt3 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt4 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt5 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt6 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt7 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt8 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt9 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt10 = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers. \n   Returns true if all numbers were equal. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toLowerCase();\n  let vowels = 'aeiou';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelIndex = vowels.indexOf(message.charAt(0));\n  let letterIndex = letters.indexOf(message.charAt(0));\n  let vowelIndex2 = vowels.indexOf(message.charAt(1));\n  let letterIndex2 = letters.indexOf(message.charAt(1));\n  let vowelIndex3 = vowels.indexOf(message.charAt(2));\n  let letterIndex3 = letters.indexOf(message.charAt(2));\n  let vowelIndex4 = vowels.indexOf(message.charAt(3));\n  let letterIndex4 = letters.indexOf(message.charAt(3));\n  let vowelIndex5 = vowels.indexOf(message.charAt(4));\n  let letterIndex5 = letters.indexOf(message.charAt(4));\n  let vowelIndex6 = vowels.indexOf(message.charAt(5));\n  let letterIndex6 = letters.indexOf(message.charAt(5));\n  let vowelIndex7 = vowels.indexOf(message.charAt(6));\n  let letterIndex7 = letters.indexOf(message.charAt(6));\n  let vowelIndex8 = vowels.indexOf(message.charAt(7));\n  let letterIndex8 = letters.indexOf(message.charAt(7));\n  let vowelIndex9 = vowels.indexOf(message.charAt(8));\n  let letterIndex9 = letters.indexOf(message.charAt(8));\n  let vowelIndex10 = vowels.indexOf(message.charAt(9));\n  let letterIndex10 = letters.indexOf(message.charAt(9));\n  let vowelIndex11 = vowels.indexOf(message.charAt(10));\n  let letterIndex11 = letters.indexOf(message.charAt(10));\n  let vowelIndex12 = vowels.indexOf(message.charAt(11));\n  let letterIndex12 = letters.indexOf(message.charAt(11));\n  let vowelIndex13 = vowels.indexOf(message.charAt(12));\n  let letterIndex13 = letters.indexOf(message.charAt(12));\n  let vowelIndex14 = vowels.indexOf(message.charAt(13));\n  let letterIndex14 = letters.indexOf(message.charAt(13));\n  let vowelIndex15 = vowels.indexOf(message.charAt(14));\n  let letterIndex15 = letters.indexOf(message.charAt(14));\n  let vowelIndex16 = vowels.indexOf(message.charAt(15));\n  let letterIndex16 = letters.indexOf(message.charAt(15));\n  let vowelIndex17 = vowels.indexOf(message.charAt(16));\n  let letterIndex17 = letters.indexOf(message.charAt(16));\n  let vowelIndex18 = vowels.indexOf(message.charAt(17));\n  let letterIndex18 = letters.indexOf(message.charAt(17));\n  let vowelIndex19 = vowels.indexOf(message.charAt(18));\n  let letterIndex19 = letters.indexOf(message.charAt(18));\n  let vowelIndex20 = vowels.indexOf(message.charAt(19));\n  let letterIndex20 = letters.indexOf(message.charAt(19));\n  let vowelIndex21 = vowels.indexOf(message.charAt(20));\n  let letterIndex21 = letters.indexOf(message.charAt(20));\n  let vowelIndex22 = vowels.indexOf(message.charAt(21));\n  let letterIndex22 = letters.indexOf(message.charAt(21));\n  let vowelIndex23 = vowels.indexOf(message.charAt(22));\n  let letterIndex23 = letters.indexOf(message.charAt(22));\n  let vowelIndex24 = vowels.indexOf(message.charAt(23));\n  let letterIndex24 = letters.indexOf(message.charAt(23));\n  let vowelIndex25 = vowels.indexOf(message.charAt(24));\n  let letterIndex25 = letters.indexOf(message.charAt(24));\n  let vowelIndex26 = vowels.indexOf(message.charAt(25));\n  let letterIndex26 = letters.indexOf(message.charAt(25));\n  let vowelIndex27 = vowels.indexOf(message.charAt(26));\n  let letterIndex27 = letters.indexOf(message.charAt(26));\n  let vowelIndex28 = vowels.indexOf(message.charAt(27));\n  let letterIndex28 = letters.indexOf(message.charAt(27));\n  let vowelIndex29 = vowels.indexOf(message.charAt(28));\n  let letterIndex29 = letters.indexOf(message.charAt(28));\n  let vowelIndex30 = vowels.indexOf(message.charAt(29));\n  let letterIndex30 = letters.indexOf(message.charAt(29));\n  let vowelIndex31 = vowels.indexOf(message.charAt(30));\n  let letterIndex31 = letters.indexOf(message.charAt(30));\n  let vowelIndex32 = vowels.indexOf(message.charAt(31));\n  let letterIndex32 = letters.indexOf(message.charAt(31));\n  let vowelIndex33 = vowels.indexOf(message.charAt(32));\n  let letterIndex33 = letters.indexOf(message.charAt(32));\n  let vowelIndex34 = vowels.indexOf(message.charAt(33));\n  let letterIndex34 = letters.indexOf(message.charAt(33));\n  let vowelIndex35 = vowels.indexOf(message.charAt(34));\n  let letterIndex35 = letters.indexOf(message.charAt(34));\n  let vowelIndex36 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_digits = 0;\n  let max_prime_index = 0;\n  let max_prime_index_digits = 0;\n  let max_prime_index_digits_prime = 0;\n  let max_prime_index_digits_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  let result = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (isPrime(counter)) {\n      result.push(counter);\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => {\n    return parseInt(digit, 10);\n  });\n  let b_digits = b.toString().split('').map(digit => {\n    return parseInt(digit, 10);\n  });\n  let product = 1;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product *= a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply_test = () => {\n  let a = 148;\n  let b = 412;\n  let expected = 16;\n  let actual = multiply(a, b);\n  console.log(`multiply(${a}, ${b}) should return ${expected}`);\n  console.log(`multiply(${a}, ${b}) should return ${actual}`);\n  assert.equal(actual, expected);\n};\n\nmultiply_test();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1]) {\n      if (s[i] === s[i + 2]) {\n        if (s[i] === s[i + 3]) {\n          if (s[i] === s[i + 4]) {\n            if (s[i] === s[i + 5]) {\n              if (s[i] === s[i + 6]) {\n                if (s[i] === s[i + 7]) {\n                  if (s[i] === s[i + 8]) {\n                    if (s[i] === s[i + 9]) {\n                      if (s[i] === s[i + 10]) {\n                        if (s[i] === s[i + 11]) {\n                          if (s[i] === s[i + 12]) {\n                            if (s[i] === s[i + 13]) {\n                              if (s[i] === s[i + 14]) {\n                                if (s[i] === s[i + 15]) {\n                                  count += 2;\n                                } else {\n                                  count += 1;\n                                }\n                              } else {\n                                count += 1;\n                              }\n                            } else {\n                              count += 1;\n                            }\n                          } else {\n                            count += 1;\n                          }\n                        } else {\n                          count += 1;\n                        }\n                      } else {\n                        count += 1;\n                      }\n                    } else {\n                      count += 1;\n                    }\n                  } else {\n                    count += 1;\n                  }\n                } else {\n                  count += 1;\n                }\n              } else {\n                count += 1;\n              }\n            } else {\n              count += 1;\n            }\n          } else {\n            count += 1;\n          }\n        } else {\n          count += 1;\n        }\n      } else {\n        count += 1;\n      }\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (typeof value!== \"string\") {\n    throw new Error(\"closestInteger requires a string value\");\n  }\n  let num = parseFloat(value);\n  let closest = num;\n  let closestIndex = 0;\n  let diff = Math.abs(num - Math.round(num));\n  let diffIndex = 0;\n  let diffIndexMax = 0;\n  let diffIndexMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin = 0;\n  let diffIndexMaxMin", "passed": 0, "run_status": 2}
