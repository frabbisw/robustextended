{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    VAR_0+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0-=1;\n    if (VAR_0 < 0)\n    return false;\n    }\n  return VAR_0 == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    VAR_0+=1;\n    else\n   \n    VAR_0-=1;\n    \n  }\n  return VAR_0==0;\n};\n\n/*\n  Returns a string of the brackets in the string.\n  \n  >>> correctBracketing(\"<>\")\n  '<><>'\n  >>> correctBracketing(\"<\")\n  '<'\n  >>> correctBracketing(\"<>\")\n  '<>'\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(VAR_0) => {\n  return Math.max(... VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(VAR_0) => {\n  return Math.max(... VAR_0);\n \n}\n\n/**\n  * Find the minimum element in the list.\n  * @param VAR_0 - The list.\n  * @return minimum element in the list.\n  * @example\n  * //For the following list\n  * // [1, 2, 3, 4, 5, 6, 7]\n  * //minElement([1, 2, 3, 4, 5, 6, 7])\n  * //will return 1\n  * // minElement([1, 5, 3, 4, 2, 6, 7])\n  * //will return 2\n  * // minElement([7, 2, 3, 4, 5, 6, 1])\n  * //will return 7\n  * // minElement([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  * //will return 1\n  * // minElement([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let VAR_0 = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] == ' ' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(VAR_0);\n        VAR_0 = '';\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      k = 0;\n      VAR_0+=s [ i ]\n      }\n    }\n  if (VAR_0 != '') {\n    p.push(VAR_0);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let VAR_0 = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] =='' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(VAR_0);\n        VAR_0 = '';\n        }\n     \n      else {\n        p.push(VAR_0);\n        VAR_0 = '';\n        }\n      }\n    else {\n      VAR_0 += s [ i ];\n      }\n    }\n  p.push(VAR_0);\n  return p;\n  }\n\n/*\n  You will be given an array of words, each of which is separated by commas or spaces.\n  Your task is to split the array into a list of strings. Each string will be separated\n  by a comma.\n  \n  For example:\n  wordsArray([ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]) == [ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]\n  wordsArray([ \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == [ \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ]\n  */\nconst wordsArray = (s) => {\n  let VAR_0 = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] =='' || s [ i ] == ',') {\n      VAR_0 += ','\n      }\n    else {\n      VAR_0 += s [ i ];\n      }\n    }\n  return VAR_0.split(',');\n  }\n\n/*\n  Take a string of words, and split it into an array of words. The resulting array will\n  contain words of at least one letter.\n  \n  For example:\n  wordsToArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsToArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  wordsToArray(\"One two\") == [\"One\", \"two\"]\n  wordsToArray(\"\") == []\n  wordsToArray(\" \") == [\"\"]\n  */\nconst wordsToArray =(s) => {\n  let words = wordsString(s);\n  for (let i = 0; i < words.length; i++) {\n    if (words [ i ].length >= 1) {\n      words [ i ] = words [ i ].toUpperCase();\n      }\n    }\n  return words;\n  }\n\n/*\n  Take an array of words, and split it into a list of strings. Each string will be\n  separated by a comma.\n  \n  For example:\n  wordsArrayToString([ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]) == \"Hi,my,name,is,John\"\n  wordsArrayToString([ \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == \"One,two,three,four,five,six\"\n  wordsArrayToString([ \"One two\" ]) == \"One two\"\n  wordsArrayToString([ ]) == \"\"\n  wordsArrayToString([ \" \" ]) == \"\"\n  */\nconst wordsArrayToString =(s) => {\n  let words = wordsArray(s);\n  let wordsStr = ''\n  for (let i = 0; i < words.length; i++) {\n    if (words [ i ].length >= 1) {\n      wordsStr += words [ i ] + ','\n      }\n    }\n  if (wordsStr.length > 0) {\n    wordsStr = wordsStr.slice(0, -1);\n    }\n  return wordsStr;\n  }\n\n/*\n  Take a list of strings, and return the longest string in the list.\n  \n  For example:\n  longestString([ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]) == \"Hi\"\n  longestString([ \"Hi\", \"my\", \"name\", \"is\", \"John\", \"Hello\", \"World\" ]) == \"Hi\"\n  longestString([ \"Hi\", \"my\", \"name\", \"is\", \"John\", \"Hello\", \"World\", \"How\", \"Are\", \"You\" ]) == \"Hi\"\n  longestString([ ]) == \"\"\n  longestString([ \" \", \" \", \" \", \" \", \" \", \" \" ]) == \" \"\n  */\nconst longestString =(s) => {\n  let longest = ''\n  let longestLength = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ].length > longestLength) {\n      longest = s [ i ]\n      longestLength = s [ i ].length\n      }\n    }\n  return longest;\n  }\n\n/*\n  Take a list of strings, and return the shortest string in the list.\n  \n  For example:\n  shortestString([ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]) == \"my\"\n  shortestString([ \"Hi\", \"my\", \"name\", \"is\", \"John\", \"Hello\", \"World\" ]) == \"my\"\n  shortestString([ \"Hi\", \"my\", \"name\", \"is\", \"John\", \"Hello\", \"World\", \"How\", \"Are\", \"You\" ]) == \"my\"\n  shortestString([ ]) == \"\"\n  shortestString([ \" \", \" \", \" \", \" \", \" \", \" \" ]) == \" \"\n  */\nconst shortestString =(s) => {\n  let shortest = ''\n  let shortestLength = 99999999\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ].length < shortestLength) {\n      shortest = s [ i ]\n      shortestLength = s [ i ].length\n      }\n    }\n"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(VAR_0, base) => {\n  var ret = \"\";\n  while (VAR_0 > 0) {\n    ret =(VAR_0 % base).toString() + ret;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = Math.floor(VAR_0 / base);\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(VAR_0, base) => {\n  var ret = \"\";\n  while (VAR_0 > 0) {\n    ret =(VAR_0 % base).toString() + ret;\n   \n    VAR_0 = Math.floor(VAR_0 / base);\n  }\n  return ret;\n}\n\n/*\n  input number x is converted to base 10\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> convertToDecimal(999)\n  '999'\n  >>> convertToDecimal(123)\n  '123'\n  >>> convertToDecimal(1234)\n  '1234'\n  >>> convertToDecimal(1235)\n  '1235'\n  >>> convertToDecimal(1238)\n  '1238'\n  >>> convertToDecimal(1239)\n  '1239'\n  >>> convertToDecimal(1240)\n  '1240'\n  >>> convertToDecimal(1243)\n  '1243'\n  >>> convertToDecimal(1244)\n  '1244'\n  >>> convertToDecimal(1245)\n  '1245'\n  >>> convertToDecimal(1248)\n  '1248'\n  >>> convertToDecimal(1249)\n  '1249'\n  >>> convertToDecimal(1250)\n  '1250'\n  >>> convertToDecimal(1253)\n  '1253'\n  >>> convertToDecimal(1254)\n  '1254'\n  >>> convertToDecimal(1255)\n  '1255'\n  >>> convertToDecimal(1256)\n  '1256'\n  >>> convertToDecimal(1257)\n  '1257'\n  >>> convertToDecimal(1258)\n  '1258'\n  >>> convertToDecimal(1259)\n  '1259'\n  >>> convertToDecimal(1260)\n  '1260'\n  >>> convertToDecimal(1261)\n  '1261'\n  >>> convertToDecimal(1262)\n  '1262'\n  >>> convertToDecimal(1263)\n  '1263'\n  >>> convertToDecimal(1264)\n  '1264'\n  >>> convertToDecimal(1265)\n  '1265'\n  >>> convertToDecimal(1266)\n  '1266'\n  >>> convertToDecimal(1267)\n  '1267'\n  >>> convertToDecimal(1268)\n  '1268'\n  >>> convertToDecimal(1269)\n  '1269'\n  >>> convertToDecimal(1270)\n  '1270'\n  >>> convertToDecimal(1273)\n  '1273'\n  >>> convertToDecimal(1274)\n  '1274'\n  >>> convertToDecimal(1275)\n  '1275'\n  >>> convertToDecimal(1278)\n  '1278'\n  >>> convertToDecimal(1279)\n  '1279'\n  >>> convertToDecimal(1280)\n  '1280'\n  >>> convertToDecimal(1281)\n  '1281'\n  >>> convertToDecimal(1282)\n  '1282'\n  >>> convertToDecimal(1283)\n  '1283'\n  >>> convertToDecimal(1284)\n  '1284'\n  >>> convertToDecimal(1285)\n  '1285'\n  >>> convertToDecimal(1288)\n  '1288'\n  >>> convertToDecimal(1289)\n  '1289'\n  >>> convertToDecimal(1290)\n  '1290'\n  >>> convertToDecimal(1291)\n  '1291'\n  >>> convertToDecimal(1292)\n  '1292'\n  >>> convertToDecimal(1293)\n  '1293'\n  >>> convertToDecimal(1294)\n  '1294'\n  >>> convertToDecimal(1295)\n  '1295'\n  >>> convertToDecimal(1296)\n  '1296'\n  >>> convertToDecimal(1297)\n  '1297'\n  >>> convertToDecimal(1298)\n  '1298'\n  >>> convertToDecimal(1299)\n  '1299'\n  >>> convertToDecimal(1300)\n  '1300'\n  >>> convertToDecimal(1301)\n  '1301'\n  >>> convertToDecimal(1302)\n  '1302'\n  >>> convertToDecimal(1303)\n  '1303'\n  >>> convertToDecimal(1304)\n  '1304'\n  >>> convertToDecimal(1305)\n  '1305'\n  >>> convertToDecimal(1306)\n  '1306'\n  >>> convertToDecimal(1307)\n  '1307'\n  >>> convertToDecimal(1308)\n  '1308'\n  >>> convertToDecimal(1309)\n  '1309'\n  >>> convertToDecimal(1310)\n  '1310'\n  >>> convertToDecimal(1313)\n  '1313'\n  >>> convertToDecimal(1314)\n  '1314'\n  >>> convertToDecimal(1315)\n  '1315'\n  >>> convertToDecimal(1316)\n  '1316'\n  >>> convertToDecimal(1317)\n  '1317'\n  >>> convertToDecimal(1318)\n  '1318'\n  >>> convertToDecimal(1319)\n  '1319'\n  >>> convertToDecimal(1320)\n  '1320'\n  >>> convertToDecimal(1323)\n  '1323'\n  >>> convertToDecimal(1324)\n  '1324'\n  >>> convertToDecimal(1325)\n  '1325'\n  >>> convertToDecimal(1326)\n  '1326'\n  >>> convertToDecimal(1327)\n  '1327'\n  >>> convertToDecimal(1328)\n  '1328'\n  >>> convertToDecimal"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase())).size;\n \n}\n\n/* Given a string, return the number of distinct characters\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase()).size);\n \n}\n\n/* Given a string, return the number of distinct characters (regardless of case) that are not in 'abcdefg'\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase()).size);\n}\n\n/* Given a string, return the number of distinct characters that are not in 'abcdefg'\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase()).size);\n}\n\n\n/* Given a string, return the number of distinct characters (regardless of case) that are not in 'abcdefg'\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase()).size);\n}\n\n\n/* Given a string, return the number of distinct characters (regardless of case) that are not in 'abcdefg'\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countDistinctCharacters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase()).size);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let VAR_0 = date.split( / - /)\n  if (VAR_0.length != 3) {\n    return false}\n  if (VAR_0 [ 0 ] < 1 || VAR_0 [ 0 ] > 12 || VAR_0 [ 1 ] < 1) {\n    return false}\n  if (VAR_0 [ 0 ] == 2 && VAR_0 [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((VAR_0 [ 0 ] == 1 || VAR_0 [ 0 ] == 3 || VAR_0 [ 0 ] == 5 || VAR_0 [ 0 ] == 7 || VAR_0 [ 0 ] == 8 || VAR_0 [ 0 ] == 10 || VAR_0 [ 0 ] == 12) && VAR_0 [ 1 ] > 31) {\n    return false}\n  if ((VAR_0 [ 0 ] == 4 || VAR_0 [ 0 ] == 6 || VAR_0 [ 0 ] == 9 || VAR_0 [ 0 ] == 11) && VAR_0 [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let VAR_0 = date.split( / - /)\n  if (VAR_0.length!= 3) {\n    return false}\n  if (VAR_0 [ 0 ] < 1 || VAR_0 [ 0 ] > 12 || VAR_0 [ 1 ] < 1) {\n    return false}\n  if (VAR_0 [ 0 ] == 2 && VAR_0 [ 1 ] > 29) {\n    return false}\n \n  if (VAR_0 [ 0 ] == 4 || VAR_0 [ 0 ] == 6 || VAR_0 [ 0 ] == 9 || VAR_0 [ 0 ] == 11) {\n    if (VAR_0 [ 2 ] < 1 || VAR_0 [ 2 ] > 31) {\n      return false}\n  }\n  else {\n    if (VAR_0 [ 2 ] < 1 || VAR_0 [ 2 ] > 30) {\n      return false}\n  }\n  return true\n}\n\nconst validDate2 =(date) => {\n  let VAR_0 = date.split( / - /)\n  if (VAR_0.length!= 3) {\n    return false}\n  if (VAR_0 [ 0 ] < 1 || VAR_0 [ 0 ] > 12 || VAR_0 [ 1 ] < 1) {\n    return false}\n  if (VAR_0 [ 0 ] == 2 && VAR_0 [ 1 ] > 29) {\n    return false}\n  if (VAR_0 [ 0 ] == 4 || VAR_0 [ 0 ] == 6 || VAR_0 [ 0 ] == 9 || VAR_0 [ 0 ] == 11) {\n    if (VAR_0 [ 2 ] < 1 || VAR_0 [ 2 ] > 31) {\n      return false}\n  }\n  else {\n    if (VAR_0 [ 2 ] < 1 || VAR_0 [ 2 ] > 30) {\n      return false}\n  }\n  return true\n}\n\nconsole.log(validDate('03-11-2000'))\nconsole.log(validDate('15-01-2012'))\nconsole.log(validDate('04-0-2040'))\nconsole.log(validDate('06-04-2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var VAR_0 = 0;\n  for (const op of operations) {\n    VAR_0+=op;\n    if (VAR_0 < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var VAR_0 = 0;\n  for (const op of operations) {\n    VAR_0+=op;\n    if (VAR_0 < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belowZero;<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const VAR_0 of numbers) {\n    if (VAR_0 in dict) {\n      dict [ VAR_0 ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ VAR_0 ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const VAR_0 of numbers) {\n    if (VAR_0 in dict) {\n      dict [ VAR_0 ]+=1;\n      }\n    else {\n     \n      dict [ VAR_0 ]=1;\n      }\n    }\n  const keys = Object.keys(dict);\n  return keys;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(VAR_0) => {\n  if (VAR_0 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while ( !isPalindrome(VAR_0.slice(beginning_of_suffix)))\n  beginning_of_suffix+=1;\n  return VAR_0 + VAR_0.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(VAR_0) => {\n  if (VAR_0 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  // find the longest postfix that is a palindrome\n  for (var i = VAR_0.length; i > 0; i--) {\n    if (isPalindrome(VAR_0.substring(i - 1, VAR_0.length))){\n      beginning_of_suffix = i - 1;\n      break;\n    }\n  }\n\n  // append the reverse of the prefix that comes before the palindromic suffix\n  var prefix = VAR_0.substring(0, beginning_of_suffix);\n  var postfix = VAR_0.substring(beginning_of_suffix, VAR_0.length);\n\n  return prefix + postfix.split('').reverse().join('');\n}\n\n// tests\ndescribe('#makePalindrome', function() {\n  it('empty string', function() {\n    expect(makePalindrome('')).toBe('');\n  });\n\n  it('non-palindrome string', function() {\n    expect(makePalindrome('cata')).toBe('catac');\n  });\n\n  it('palindrome string', function() {\n    expect(makePalindrome('cat')).toBe('cat');\n  });\n});\n\ndescribe('#isPalindrome', function() {\n  it('empty string', function() {\n    expect(isPalindrome('')).toBe(true);\n  });\n\n  it('non-palindrome string', function() {\n    expect(isPalindrome('cata')).toBe(false);\n  });\n\n  it('palindrome string', function() {\n    expect(isPalindrome('cat')).toBe(true);\n  });\n});<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(VAR_0) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(VAR_0) + 1) {\n    if (VAR_0 % i == 0) {\n      fact.push(i);\n      VAR_0 = VAR_0 / i;\n      }\n    else {\n      i+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  \n  if (VAR_0 > 1)\n  fact.push(VAR_0);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(VAR_0) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(VAR_0) + 1) {\n    if (VAR_0 % i == 0) {\n      fact.push(i);\n      VAR_0 = VAR_0 / i;\n      }\n    else {\n      i+=1;\n     \n    }\n    }\n  return fact;\n  }\n  \n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(VAR_0) => {\n  let t = 0\n  while (VAR_0 > 0) {\n    t+=VAR_0 % 10\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(VAR_0) => {\n  let t = 0\n  while (VAR_0 > 0) {\n    t+=VAR_0 % 10\n   \n    VAR_0 = VAR_0 / 10\n  }\n  return t\n}\n\nexport default solve\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(VAR_0) => {\n  VAR_0.sort((a, b) => a - b);\n  var len = VAR_0.length;\n  if (VAR_0.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return VAR_0 [ Math.floor(len / 2) ];\n  else\n  return(VAR_0 [ len / 2 - 1 ] + VAR_0 [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(VAR_0) => {\n  VAR_0.sort((a, b) => a - b);\n  var len = VAR_0.length;\n  if (VAR_0.length % 2 == 1)\n \n  return VAR_0[len / 2];\n \n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var VAR_0 = 1;\n  for (let i = 0; i < n; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  VAR_0 =(2 * VAR_0) % p;\n  return VAR_0;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var VAR_0 = 1;\n  for (let i = 0; i < n; i++)\n \n  VAR_0 = (VAR_0 * p) % n\n \n  return VAR_0\n}\n\n/*Return the greatest common divisor of two numbers (a^b mod p).\n  >>> gcd(3, 4)\n  1\n  >>> gcd(15, 20)\n  5\n  >>> gcd(15, 45)\n  15\n  >>> gcd(10, 3)\n  1\n  >>> gcd(10, 3)\n  1\n  */\nconst gcd =(a, b) => {\n  var VAR_0 = 1;\n  var VAR_1 = b;\n  if (a < b)\n  {\n    VAR_0 = a;\n    VAR_1 = b;\n  }\n  for (let i = VAR_1 - 1; i > 0; i--)\n  {\n    VAR_0 = modp(VAR_0, VAR_1);\n    VAR_1 = VAR_1 % VAR_0;\n  }\n  return VAR_0;\n}\n\n/*Return the least common multiple of two numbers (a*b mod p).\n  >>> lcm(3, 4)\n  12\n  >>> lcm(15, 20)\n  60\n  >>> lcm(15, 45)\n  105\n  >>> lcm(10, 3)\n  10\n  >>> lcm(10, 3)\n  10\n  */\nconst lcm =(a, b) => {\n  return a * b / gcd(a, b);\n}\n\n/*Return the inverse modulo p of a number (a mod p).\n  >>> invmod(3, 5)\n  1\n  >>> invmod(1101, 101)\n  4\n  >>> invmod(0, 101)\n  1\n  >>> invmod(3, 11)\n  9\n  >>> invmod(100, 101)\n  10\n  */\nconst invmod =(a, p) => {\n  return modp(a, p) ^ p;\n}\n\n/*Return the sum of two numbers (a+b mod p).\n  >>> sum(3, 4)\n  7\n  >>> sum(15, 20)\n  35\n  >>> sum(15, 45)\n  70\n  >>> sum(10, 3)\n  10\n  >>> sum(10, 3)\n  10\n  */\nconst sum =(a, b) => {\n  return modp(a + b, modp(a, b));\n}\n\n/*Return the product of two numbers (a*b mod p).\n  >>> product(3, 4)\n  12\n  >>> product(15, 20)\n  840\n  >>> product(15, 45)\n  1290\n  >>> product(10, 3)\n  10\n  >>> product(10, 3)\n  10\n  */\nconst product =(a, b) => {\n  return modp(a * b, modp(a, b));\n}\n\n/*Return the difference between two numbers (a-b mod p).\n  >>> diff(3, 4)\n  1\n  >>> diff(15, 20)\n  5\n  >>> diff(15, 45)\n  20\n  >>> diff(10, 3)\n  10\n  >>> diff(10, 3)\n  10\n  */\nconst diff =(a, b) => {\n  return modp(a - b, modp(a, b));\n}\n\n/*Return the difference between two numbers (a-b mod p).\n  >>> diff2(3, 4)\n  0\n  >>> diff2(15, 20)\n  10\n  >>> diff2(15, 45)\n  20\n  >>> diff2(10, 3)\n  -10\n  >>> diff2(10, 3)\n  -10\n  */\nconst diff2 =(a, b) => {\n  return modp(a - b, modp(a, b));\n}\n\n/*Return the difference between two numbers (a-b mod p).\n  >>> gcd(3, 4)\n  1\n  >>> gcd(15, 20)\n  5\n  >>> gcd(15, 45)\n  15\n  >>> gcd(10, 3)\n  1\n  >>> gcd(10, 3)\n  1\n  */\nconst gcd2 =(a, b) => {\n  return modp(a - b, modp(a, b));\n}\n\nmodule.exports = {\n  modp,\n  gcd,\n  lcm,\n  invmod,\n  sum,\n  product,\n  diff,\n  diff2,\n  gcd2,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            else {\n                  o++}\n            VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n           \n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n    }\n    \n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var VAR_0 = - 1.0, end = 1.0;\n  while (poly(xs, VAR_0) * poly(xs, end) > 0) {\n    VAR_0 *= 2.0;\n    end *= 2.0;\n    }\n  while (end - VAR_0 > 1e-10) {\n    let center =(VAR_0 + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, VAR_0) > 0)\n    VAR_0 = center;\n    else\n    end = center;\n    }\n  return VAR_0;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var VAR_0 = - 1.0, end = 1.0;\n  while (poly(xs, VAR_0) * poly(xs, end) > 0) {\n    VAR_0 *= 2.0;\n    end *= 2.0;\n    }\n  while (end - VAR_0 > 1e-10) {\n    let center =(VAR_0 + end) / 2.0;\n   \n    if (poly(xs, center) === 0) {\n      return center;\n    } else if (poly(xs, VAR_0) * poly(xs, end) < 0) {\n      end = center;\n    } else {\n      VAR_0 = center;\n    }\n  }\n  return -1.0;\n}\n\nconst findSolution = (xs) => {\n  var x = findZero(xs);\n  if (x === -1) {\n    return;\n  }\n  var ys = [];\n  for (var i = 1; i < xs.length; i++) {\n    ys[i] = poly(xs, x) - poly(xs, x - i);\n  }\n  return [x, ys];\n}\n\nconst main = () => {\n  var xs}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n\n/*\n  This function takes a string as input and returns the list of all prefixes of the string\n*/\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/*\n  This function takes a string as input and returns the list of all suffixes of the string\n*/\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/*\n  This function takes a string as input and returns the list of all prefixes of the string\n*/\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/*\n  This function takes a string as input and returns the list of all suffixes of the string\n*/\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/*\n  This function takes a string as input and returns the list of all prefixes of the string\n*/\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n/*\n  This function takes a string as input and returns the list of all suffixes of the string\n*/\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0 + 1));\n   \n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n\n\n// @include\nconst collatzSequence = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n// @exclude\n\n\n/*\n  O(n) time. O(1) space.\n  Finds all the odd numbers that are in the collatz sequence of n.\n*/\nconst getOddCollatzInPlace =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n\n\n/*\n  Finds all the odd numbers that are in the collatz sequence of n.\n\n  Time complexity: O(n).\n  Space complexity: O(1).\n*/\nconst getOddCollatzInPlace =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n\n\n/*\n  Finds all the odd numbers that are in the collatz sequence of n.\n\n  Time complexity: O(n).\n  Space complexity: O(1).\n*/\nconst getOddCollatzInPlace =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n\n\n/*\n  Finds all the odd numbers that are in the collatz sequence of n.\n\n  Time complexity: O(n).\n  Space complexity: O(1).\n*/\nconst getOddCollatzInPlace =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n\n\n// @include\nconst getOddCollatzInPlace =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0}\n// @exclude\n\n\n/*\n  Finds all the odd numbers that are in the collatz sequence of n"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_0 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_1 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_2 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_3 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_4 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_5 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_6 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_7 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_8 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_9 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_10 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_11 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_12 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_13 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_14 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_15 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_16 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_17 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_18 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_19 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_20 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_21 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_22 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_23 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_24 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_25 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_26 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_27 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_28 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_29 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_30 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_31 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_32 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_33 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_34 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_35 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_36 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_37 = (VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n};\n\nconst carRace_38 = (VAR_0) => {\n  return Math.pow(VAR_0,"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n        for (let j = lst [ VAR_0 ].length - 1; j >= 0; j--) {\n            if (lst [ VAR_0 ] [ j ] == x) {\n                t.push((VAR_0, j))\n               \n", "canonical_solution": "# print('@@this is the line to split##')\n                }\n            }\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n        for (let j = lst [ VAR_0 ].length - 1; j >= 0; j--) {\n            if (lst [ VAR_0 ] [ j ] == x) {\n                t.push((VAR_0, j))\n               \n            }\n        }\n    }\n    return t\n};\n\n/*\n  Given two matrices, a and b,\n  get the intersection of the rows of a and b.\n  \n  Example:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [(0, 0), (1, 4), (1, 0)]\n  \n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      VAR_0.push(x [ i ])\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      VAR_0.push(x [ i ])\n      }\n   \n  }\n  return VAR_0.sort(function(a, b) {\n    return a - b\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(VAR_0 + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n  let s = (Math.pow(2, k) + Math.pow(2, k - 1)) / 2\n  let b = (Math.pow(2, k - 1) + Math.pow(2, k - 2)) / 2\n  let a = Math.pow(2, k - 2)\n  let sum = a + b\n  let roundedSum = sum % 2\n  return (roundedSum)\n}\n\n/*\n  Input:\n  - n = 10\n  - m = 20\n  - n > m\n  \n  Output:\n  - -1\n*/\n\nconst check = (VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n  let s = (Math.pow(2, k) + Math.pow(2, k - 1)) / 2\n  let b = (Math.pow(2, k - 1) + Math.pow(2, k - 2)) / 2\n  let a = Math.pow(2, k - 2)\n  let sum = a + b\n  let roundedSum = sum % 2\n  return (roundedSum)\n}\n\n/*\n  Input:\n  - n = 1\n  - m = 3\n  \n  Output:\n  - 1\n*/\n\nconst check1 = (VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n  let s = (Math.pow(2, k) + Math.pow(2, k - 1)) / 2\n  let b = (Math.pow(2, k - 1) + Math.pow(2, k - 2)) / 2\n  let a = Math.pow(2, k - 2)\n  let sum = a + b\n  let roundedSum = sum % 2\n  return (roundedSum)\n}\n\n/*\n  Input:\n  - n = 10\n  - m = 20\n  \n  Output:\n  - 0\n*/\n\nconst check2 = (VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n  let s = (Math.pow(2, k) + Math.pow(2, k - 1)) / 2\n  let b = (Math.pow(2, k - 1) + Math.pow(2, k - 2)) / 2\n  let a = Math.pow(2, k - 2)\n  let sum = a + b\n  let roundedSum = sum % 2\n  return (roundedSum)\n}\n\nmodule.exports = {\n  check,\n  check1,\n  check2,\n  roundedAvg\n}<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(VAR_0).sort(function(a, b) {\n    return - VAR_0 [ a ] + VAR_0 [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = VAR_0 [ s [ 0 ] ]\n  let l = {\n    }\n  for (let ss = 0; ss < s.length; ss++) {\n    if (VAR_0 [ s [ ss ] ] == g) {\n      l [ s [ ss ] ] = VAR_0 [ s [ ss ] ]\n      }\n    }\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\n\n\n/*\n  Given a string representing a comma separated values (CSV) of numbers, return\n  a dictionary of the number with the highest occurrence and containing the\n  corresponding count.\n  \n  Example:\n  csv_histogram('1, 2, 3, 1, 2, 3') == {1: 3, 2: 2, 3: 1}\n  csv_histogram('2, 3, 4') == {2: 1, 3: 1, 4: 1}\n  csv_histogram('5') == {5: 1}\n  */\nconst csv_histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( /, /)\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\n/*\n  Given a string, return the number of appearances of each letter.\n  \n  Example:\n  count('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  count('a b c a b') == {'a': 2, 'b': 2}\n  count('a b c a b') == {'a': 2, 'b': 2}\n  count('') == {}\n\n  */\nconst count =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / (?!^) /)\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\n/*\n  Given a string representing a space separated upper case letters, return a\n  dictionary of the letter with the most repetition and containing the\n  corresponding count.\n  \n  Example:\n  histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n  histogram('A B C A B') == {'A': 2, 'B': 2}\n  histogram('A B C A B') == {'A': 2, 'B': 2}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / s /)\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\n/*\n  Given a string representing a comma separated values (CSV) of numbers, return a\n  dictionary of the number with the highest occurrence and containing the\n  corresponding count.\n  \n  Example:\n  csv_histogram('1, 2, 3, 1, 2, 3') == {1: 3, 2: 2, 3: 1}\n  csv_histogram('2, 3, 4') == {2: 1, 3: 1, 4: 1}\n  csv_histogram('5') == {5: 1}\n  */\nconst csv_histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( /, /)\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\n/*\n  Given a string, return the number of appearances of each letter.\n  \n  Example:\n  count('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  count('a b c a b') == {'a': 2, 'b': 2}\n  count('a b c a b') == {'a': 2, 'b': 2}\n  count('') == {}\n\n  */\nconst count =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / (?!^) /)\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\n/*\n  Given a string, return the number of appearances of each letter.\n  \n  Example:\n  count('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  count('a b c a b') == {'a': 2, 'b': 2}\n  count('a b c a b') == {'a': 2, 'b': 2}\n  count('') == {}\n\n  */\nconst count"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt() + 4\n    if (VAR_0 > 122) {\n      VAR_0-=26}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t+=String.fromCharCode(VAR_0)\n    }\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt() + 4\n    if (VAR_0 > 122) {\n      VAR_0-=26}\n   \n    let VAR_1 = s [ i ].charCodeAt() + 0\n    if (VAR_1 > 122) {\n      VAR_1-=26}\n    t = t + String.fromCharCode(VAR_1)\n    t = t + String.fromCharCode(VAR_0)\n  }\n  return t\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt =(s) => {\n  let t = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    let VAR_0 = s [ i ].charCodeAt() - 4\n    if (VAR_0 < 0) {\n      VAR_0+=26}\n   \n    let VAR_1 = s [ i ].charCodeAt() - 0\n    if (VAR_1 < 0) {\n      VAR_1+=26}\n    t = t + String.fromCharCode(VAR_1)\n    t = t + String.fromCharCode(VAR_0)\n  }\n  return t\n}\n\n// -------------------------- \n//  Main Function\n// --------------------------\n\nfunction main() {\n  let t = prompt ('Enter a string to be encrypted: ')\n  let e = encrypt(t)\n  console.log(e)\n  let d = decrypt(e)\n  console.log(d)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let VAR_0 = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let VAR_0 = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122)) {\n      return true}\n   \n    return false}\n  if (len == 2) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57)) {\n      return true}\n   \n    return false}\n  if (len == 3) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47)) {\n      return true}\n   \n    return false}\n  if (len == 4) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57)) {\n      return true}\n   \n    return false}\n  if (len == 5) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47)) {\n      return true}\n   \n    return false}\n  if (len == 6) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47)) {\n      return true}\n   \n    return false}\n  if (len == 7) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47)) {\n      return true}\n   \n    return false}\n  if (len == 8) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57)) {\n      return true}\n   \n    return false}\n  if (len == 9) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47)) {\n      return true}\n   \n    return false}\n  if (len == 10) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR_0 <= 57)) {\n      return true}\n   \n    return false}\n  if (len == 11) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122) || (VAR_0 >= 48 && VAR_0 <= 57) || (VAR_0 >= 32 && VAR_0 <= 47) || (VAR_0 >= 46 && VAR_0 <= 47) || (VAR_0 >= 48 && VAR"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let VAR_0 = word.length - 2; VAR_0 > 0; VAR_0--) {\n    if (\n     !(word [ VAR_0 ] != 'a' && word [ VAR_0 ] != 'e' && word [ VAR_0 ] != 'i' && word [ VAR_0 ] != 'o' && word [ VAR_0 ] != 'u' && word [ VAR_0 ] != 'A' &&\n    word [ VAR_0 ] != 'U' && word [ VAR_0 ] != 'O' && word [ VAR_0 ] != 'I' && word [ VAR_0 ] != 'E')\n     &&\n    (word [ VAR_0 + 1 ] != 'a' && word [ VAR_0 + 1 ] != 'e' && word [ VAR_0 + 1 ] != 'i' && word [ VAR_0 + 1 ] != 'o' && word [ VAR_0 + 1 ] != 'u' && word [ VAR_0 + 1 ] != 'A' &&\n    word [ VAR_0 + 1 ] != 'U' && word [ VAR_0 + 1 ] != 'O' && word [ VAR_0 + 1 ] != 'I' && word [ VAR_0 + 1 ] != 'E')\n     &&\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    (word [ VAR_0 - 1 ] != 'a' && word [ VAR_0 - 1 ] != 'e' && word [ VAR_0 - 1 ] != 'i' && word [ VAR_0 - 1 ] != 'o' && word [ VAR_0 - 1 ] != 'u' && word [ VAR_0 - 1 ] != 'A' &&\n    word [ VAR_0 - 1 ] != 'U' && word [ VAR_0 - 1 ] != 'O' && word [ VAR_0 - 1 ] != 'I' && word [ VAR_0 - 1 ] != 'E')\n    ) {\n      return word [ VAR_0 ]\n      }\n    }\n  return ''}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let VAR_0 = word.length - 2; VAR_0 > 0; VAR_0--) {\n    if (\n    !(word [ VAR_0 ]!= 'a' && word [ VAR_0 ]!= 'e' && word [ VAR_0 ]!= 'i' && word [ VAR_0 ]!= 'o' && word [ VAR_0 ]!= 'u' && word [ VAR_0 ]!= 'A' &&\n    word [ VAR_0 ]!= 'U' && word [ VAR_0 ]!= 'O' && word [ VAR_0 ]!= 'I' && word [ VAR_0 ]!= 'E')\n     &&\n    (word [ VAR_0 + 1 ]!= 'a' && word [ VAR_0 + 1 ]!= 'e' && word [ VAR_0 + 1 ]!= 'i' && word [ VAR_0 + 1 ]!= 'o' && word [ VAR_0 + 1 ]!= 'u' && word [ VAR_0 + 1 ]!= 'A' &&\n    word [ VAR_0 + 1 ]!= 'U' && word [ VAR_0 + 1 ]!= 'O' && word [ VAR_0 + 1 ]!= 'I' && word [ VAR_0 + 1 ]!= 'E')\n     &&\n   \n   (word [ VAR_0 - 1 ]!= 'a' && word [ VAR_0 - 1 ]!= 'e' && word [ VAR_0 - 1 ]!= 'i' && word [ VAR_0 - 1 ]!= 'o' && word [ VAR_0 - 1 ]!= 'u' && word [ VAR_0 - 1 ]!= 'A' &&\n    word [ VAR_0 - 1 ]!= 'U' && word [ VAR_0 - 1 ]!= 'O' && word [ VAR_0 - 1 ]!= 'I' && word [ VAR_0 - 1 ]!= 'E')\n    ) {\n      return word [ VAR_0 ];\n    }\n  }\n  return \"\";\n};\n\n/*\nGiven a list of numbers, return the index of the maximum number.\n\nExample:\n\nnumbers = [1,2,3]\n\nmax_number_index(numbers) ==> 2\n\nnumbers = [1,2,2]\n\nmax_number_index(numbers) ==> 1\n\nnumbers = [1,2,2,3,4,5,6]\n\nmax_number_index(numbers) ==> 5\n\nnumbers = [1,2,2,3,4,5,6,7,8,9]\n\nmax_number_index(numbers) ==> 9\n*/\nconst max_number_index =(numbers) => {\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] > numbers [ max_index ]) {\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*\nGiven a list of numbers, return the index of the minimum number.\n\nExample:\n\nnumbers = [1,2,3]\n\nmin_number_index(numbers) ==> 0\n\nnumbers = [1,2,2]\n\nmin_number_index(numbers) ==> 1\n\nnumbers = [1,2,2,3,4,5,6]\n\nmin_number_index(numbers) ==> 0\n\nnumbers = [1,2,2,3,4,5,6,7,8,9]\n\nmin_number_index(numbers) ==> 0\n*/\nconst min_number_index =(numbers) => {\n  let min_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] < numbers [ min_index ]) {\n      min_index = i;\n    }\n  }\n  return min_index;\n};\n\n/*\nGiven a string, return the index of the maximum number in the string.\n\nExample:\n\nstring = \"123\"\n\nstring_max_number_index(string) ==> 2\n\nstring = \"12345\"\n\nstring_max_number_index(string) ==> 4\n\nstring = \"1234567\"\n\nstring_max_number_index(string) ==> 8\n\nstring = \"123456789\"\n\nstring_max_number_index(string) ==> 9\n*/\nconst string_max_number_index =(string) => {\n  let max_index = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) > string.charAt(max_index)) {\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*\nGiven a string, return the index of the minimum number in the string.\n\nExample:\n\nstring = \"123\"\n\nstring_min_number_index(string) ==> 0\n\nstring = \"12345\"\n\nstring_min_number_index(string) ==> 1\n\nstring = \"1234567\"\n\nstring_min_number_index(string) ==> 2\n\nstring = \"123456789\"\n\nstring_min_number_index(string) ==> 0\n*/\nconst string_min_number_index =(string) => {\n  let min_index = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < string.charAt(min_index)) {\n      min_index = i;\n    }\n  }\n  return min_index;\n};\n\n/*\nGiven a string,"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countUpperOdd =(s) => {\n  let p = 0\n  for (let VAR_0 = 1; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLower =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'a' || s [ VAR_0 ] == 'e' || s [ VAR_0 ] == 'i' || s [ VAR_0 ] == 'o' || s [ VAR_0 ] == 'u') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 2\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd =(s) => {\n  let p = 0\n  for (let VAR_0 = 1; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'a' || s [ VAR_0 ] == 'e' || s [ VAR_0 ] == 'i' || s [ VAR_0 ] == 'o' || s [ VAR_0 ] == 'u') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 1\n  */\nconst countVowels =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 0\n  countVowels('abcdefg') returns 2\n  countVowels('dBBE') returns 1\n  */\nconst countVowelsOdd =(s) => {\n  let p = 0\n  for (let VAR_0 = 1; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of uppercase letters in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countUpperEven =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n   \n    }\n  \n  \n  return p\n  \n}\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd =(s) => {\n  let p = 0\n  for (let VAR_0 = 1; VAR_0 < s.length; VAR_"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(VAR_0) => {\n  let min = VAR_0 [ 0 ]\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = i + 1; j <= VAR_0.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=VAR_0 [ k ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (s < min) {\n        min = s}\n      }\n    }\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(VAR_0) => {\n  let min = VAR_0 [ 0 ]\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = i + 1; j <= VAR_0.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=VAR_0 [ k ]\n       \n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\n\nconst minSubArraySum =(VAR_0) => {\n  let min = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    for (let j = i; j < VAR_0.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=VAR_0 [ k ]\n       \n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nconsole.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, VAR_0) => {\n  return(a * a + b * b == VAR_0 * VAR_0 || a * a == b * b + VAR_0 * VAR_0 || b * b == a * a + VAR_0 * VAR_0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, VAR_0) => {\n  return(a * a + b * b == VAR_0 * VAR_0 || a * a == b * b + VAR_0 * VAR_0 || b * b == a * a + VAR_0 * VAR_0)\n \n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the hypotenuse\n  length of the triangle.\n  Example:\n  hypotenuse(3, 4, 5) == 5\n  */\nconst hypotenuse =(a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n triangle.\n  Example:\n  area(3, 4, 5) == 12\n  */\nconst area =(a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) * 0.5\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides2 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides3 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides4 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides5 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides6 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides7 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOfSides8 =(VAR_0) => {\n  return(hypotenuse(VAR_0, VAR_0, VAR_0) + hypotenuse(VAR_0, VAR_0, VAR_0) - VAR_0)\n}\n\n/*\n Given the length of a side of a right-angled triangle. Return the length\n  of the other two sides.\n  Example:\n  lengthOfSides(3) == 5\n  lengthOfSides(6) == 2\n  lengthOfSides(9) == 3\n  */\nconst lengthOf"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, VAR_0) => {\n  return x + VAR_0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, VAR_0) => {\n  return x + VAR_0;\n \n}\n\nconst subtract =(x, VAR_0) => {\n  return x - VAR_0;\n \n}\n\nconst multiply =(x, VAR_0) => {\n  return x * VAR_0;\n \n}\n\nconst divide =(x, VAR_0) => {\n  return x / VAR_0;\n \n}\n\nconst sum =(x, y) => {\n  return add(x, y);\n}\n\nconst difference =(x, y) => {\n  return subtract(x, y);\n}\n\nconst product =(x, y) => {\n  return multiply(x, y);\n}\n\nconst quotient =(x, y) => {\n  return divide(x, y);\n}\n\nconst sum3 =(x, y, z) => {\n  return sum(add(x, y), z);\n}\n\nconst difference3 =(x, y, z) => {\n  return difference(x, y) + z;\n}\n\nconst product3 =(x, y, z) => {\n  return product(x, y) * z;\n}\n\nconst quotient3 =(x, y, z) => {\n  return quotient(x, y) / z;\n}\n\nconst main =() => {\n  //console.log(sum(1, 2));\n  console.log(sum3(1, 2, 3));\n  console.log(difference3(1, 2, 3));\n  console.log(product3(1, 2, 3));\n  console.log(quotient3(1, 2, 3));\n  \n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(VAR_0 =>(VAR_0.toUpperCase() == VAR_0 ? VAR_0.toLowerCase() : VAR_0.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(VAR_0 =>(VAR_0.toUpperCase() == VAR_0? VAR_0.toLowerCase() : VAR_0.toUpperCase()))\n \n .join('');\n}\n\n/*\n  * For a given string, append the character 'x' to each of the character\n  * positions in the string.\n  * For example, the string 'Hello' will become 'Helloxo'\n  * */\nconst appendX =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0 + 'x' : VAR_0))\n \n .join('');\n}\n\n/*\n  * For a given string, replace all the characters that are not letters\n  * with the character 'x'\n  * For example, the string 'Hello' will become 'Hxlo'\n  * */\nconst replaceNonLetters =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.match(/[^a-zA-Z]/)? VAR_0 + 'x' : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with the first letter upper case.\n  * */\nconst upperCaseFirstLetter =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toUpperCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with the first letter lower case.\n  * */\nconst lowerCaseFirstLetter =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toLowerCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the vowels upper cased.\n  * */\nconst upperCaseVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toUpperCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the vowels lower cased.\n  * */\nconst lowerCaseVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toLowerCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the vowels upper cased.\n  * */\nconst lowerCaseVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toLowerCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the vowels lower cased.\n  * */\nconst upperCaseVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toUpperCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with the vowels removed.\n  * */\nconst removeVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.replace(/[aeiou]/g, '') : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with the vowels removed and all the\n  * letters upper cased.\n  * */\nconst upperCaseRemoveVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toUpperCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with the vowels removed and all the\n  * letters lower cased.\n  * */\nconst lowerCaseRemoveVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toLowerCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with the vowels removed and all the\n  * letters upper cased.\n  * */\nconst upperCaseRemoveVowels =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toUpperCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the letters lower cased.\n  * */\nconst lowerCaseLetters =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toLowerCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the letters upper cased.\n  * */\nconst upperCaseLetters =(string) => {\n  return string.split('')\n .map(VAR_0 => (VAR_0.length? VAR_0.toUpperCase() : VAR_0))\n \n .join('');\n}\n\n/*\n  * Given a string, return a string with all the letters lower cased.\n  * */\nconst lowerCaseLetters =(string) => {\n  return string.split('')\n ."}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      opening_bracket_index.push(VAR_0)\n      }\n    else {\n      closing_bracket_index1.push(VAR_0)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let VAR_0 = 0; VAR_0 < closing_bracket_index1.length; VAR_0++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - VAR_0 - 1 ])\n    }\n  let cnt = 0\n  let VAR_0 = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (VAR_0 < l && opening_bracket_index [ k ] < closing_bracket_index [ VAR_0 ]) {\n      cnt+=1;\n      VAR_0+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      opening_bracket_index.push(VAR_0)\n      }\n    else {\n      closing_bracket_index1.push(VAR_0)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let VAR_0 = 0; VAR_0 < closing_bracket_index1.length; VAR_0++) {\n   \n    closing_bracket_index.push(closing_bracket_index1 [ VAR_0 ])\n    }\n  if (opening_bracket_index.length > 0 && opening_bracket_index.length === closing_bracket_index.length) {\n    return true\n    }\n  else {\n    return false\n    }\n  }\n  /*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested2 =(string) => {\n  let index = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      index.push(VAR_0)\n      }\n    }\n  if (index.length > 0) {\n    let start = index[0]\n    let end = index[index.length - 1]\n    for (let VAR_0 = start + 1; VAR_0 < end; VAR_0++) {\n      if (string [ VAR_0 ] == ']') {\n        if (string [ VAR_0 - 1 ] == '[') {\n          return true\n          }\n        }\n      }\n    }\n  return false\n  }\n  /*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested3 =(string) => {\n  let index = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      index.push(VAR_0)\n      }\n    }\n  if (index.length > 0) {\n    let start = index[0]\n    let end = index[index.length - 1]\n    for (let VAR_0 = start + 1; VAR_0 < end; VAR_0++) {\n      if (string [ VAR_0 ] == ']') {\n        if (string [ VAR_0 - 1 ] == '[') {\n          return true\n          }\n        }\n      }\n    }\n  return false\n  }\n  /*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested4 =(string) => {\n  let index = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      index.push(VAR_0)\n      }\n    }\n  if (index.length > 0) {\n    let start = index[0]\n    let end = index[index.length - 1]\n    for (let VAR_0 = start + 1; VAR_0 < end; VAR_0++) {\n      if (string [ VAR_0 ] == ']') {\n        if (string [ VAR_0 - 1 ] == '[') {\n          return true\n          }\n        }\n      }\n    }\n  return false\n  }\n  /*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('["}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt()\n    if (VAR_0 >= 65 && VAR_0 <= 90) {\n      VAR_0+=32;\n      t = 1;\n      }\n    else\nif (VAR_0 >= 97 && VAR_0 <= 122) {\n      VAR_0-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(VAR_0)\n    }\n  if (t == 1) {\n    return p}\n  let u = ''\nfor (let i = 0; i < p.length; i++) {\n    u+=p [ p.length - i - 1 ]\n    }\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt()\n    if (VAR_0 >= 65 && VAR_0 <= 90) {\n      VAR_0+=32;\n      t = 1;\n      }\n    else\nif (VAR_0 >= 97 && VAR_0 <= 122) {\n      VAR_0-=32;\n      t = 1;\n     \n    }\n    else {\n    t = 0;\n    }\n    if (t) {\n      p = p + s[i];\n    }\n    else {\n      p = p + s[i].toUpperCase();\n    }\n}\n  return p;\n}\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const VAR_0 of l)\n  if (VAR_0 >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const VAR_0 of l)\n  if (VAR_0 >= t)\n \n}\n\n/**\n  * @param {number[]} arr\n  * @return {number}\n  * Returns the largest element in the list l.\n  * If no elements are present, returns undefined.\n  *\n  * @example\n  * largest([1, 2, 3, 4])\n  * // -> 4\n  * largest([1, 2, 3])\n  * // -> undefined\n  * largest([])\n  * // -> undefined\n  * largest([1, -1, -1])\n  * // -> -1\n  * largest([1, -1, -1, 1])\n  * // -> 1\n  * largest([1, 2, 3, 4, 5])\n  * // -> 5\n  * largest([1, 2, 3, 4, 5, 6, 7])\n  * // -> 7\n  * largest([1, 2, 3, 4, 5, 6, 7, 8])\n  * // -> 8\n  * largest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * // -> 8\n  * largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * // -> 9\n  */\nconst largest = (arr) => {\n  if (!arr.length)\n    return undefined;\n\n  let largest = arr[0];\n\n  for (let i = 1; i < arr.length; i++)\n  if (arr[i] > largest)\n    largest = arr[i];\n\n  return largest;\n}\n\n/**\n  * @param {number[]} arr\n  * @return {number}\n  * Returns the smallest element in the list l.\n  * If no elements are present, returns undefined.\n  *\n  * @example\n  * smallest([1, 2, 3, 4])\n  * // -> 1\n  * smallest([1, 2, 3])\n  * // -> undefined\n  * smallest([])\n  * // -> undefined\n  * smallest([1, -1, -1])\n  * // -> -1\n  * smallest([1, -1, -1, 1])\n  * // -> 1\n  * smallest([1, 2, 3, 4, 5])\n  * // -> 1\n  * smallest([1, 2, 3, 4, 5, 6, 7])\n  * // -> 1\n  * smallest([1, 2, 3, 4, 5, 6, 7, 8])\n  * // -> 1\n  * smallest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * // -> 1\n  * smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * // -> 1\n  */\nconst smallest = (arr) => {\n  if (!arr.length)\n    return undefined;\n\n  let smallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++)\n  if (arr[i] < smallest)\n    smallest = arr[i];\n\n  return smallest;\n}\n\n/**\n  * @param {number[]} arr\n  * @return {number}\n  * Returns the sum of all the elements in the list l.\n  *\n  * @example\n  * sum([1, 2, 3, 4])\n  * // -> 9\n  * sum([1, 2, 3])\n  * // -> 0\n  * sum([])\n  * // -> 0\n  * sum([1, -1, -1])\n  * // -> -1\n  * sum([1, -1, -1, 1])\n  * // -> -1\n  * sum([1, 2, 3, 4, 5])\n  * // -> 15\n  * sum([1, 2, 3, 4, 5, 6, 7])\n  * // -> 21\n  * sum([1, 2, 3, 4, 5, 6, 7, 8])\n  * // -> 28\n  * sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * // -> 36\n  * sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * // -> 45\n  */\nconst sum = (arr) => {\n  const sum = 0;\n\n  for (const VAR_0 of arr)\n  sum += VAR_0;\n\n  return sum;\n}\n\nmodule.exports = {\n  belowThreshold,\n  largest,\n  smallest,\n  sum\n}<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let VAR_0 = i.toString()\n    let p = 1\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ j ] != VAR_0 [ VAR_0.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    if (p == 1) {\n      if (VAR_0 % 2 == 0) {\n        e++}\n      else {\n        o++}\n      }\n    }\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let VAR_0 = i.toString()\n    let p = 1\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ j ]!= VAR_0 [ VAR_0.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n      } else if (VAR_0 [ j ] == VAR_0 [ VAR_0.length - j - 1 ]) {\n        p = p + 1;\n        if (p % 2 === 0) {\n          e = e + 1;\n        }\n      }\n    }\n    if (p % 2 === 0) {\n      o = o + 1;\n    }\n  }\n  return [e, o];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return VAR_0;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n \n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor2(15)\n  5\n  */\nconst largestDivisor2 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor3(15)\n  5\n  */\nconst largestDivisor3 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor4(15)\n  5\n  */\nconst largestDivisor4 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor5(15)\n  5\n  */\nconst largestDivisor5 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor6(15)\n  5\n  */\nconst largestDivisor6 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor7(15)\n  5\n  */\nconst largestDivisor7 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor8(15)\n  5\n  */\nconst largestDivisor8 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor9(15)\n  5\n  */\nconst largestDivisor9 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor10(15)\n  5\n  */\nconst largestDivisor10 =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n    return n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (n % VAR_0 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let VAR_0 = 2; VAR_0 < 101; VAR_0++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(VAR_0)) continue;\n      for (let k = 2; k < 101; k++) {\n        if ( !isPrime(k)) continue;\n        if (i * VAR_0 * k == a)\n        return true;\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (n % VAR_0 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let VAR_0 = 2; VAR_0 < 101; VAR_0++) {\n     \n      if (VAR_0 * i > a) return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nisMultiplyPrime(30);\n\n/*Write a function that returns true if the given number is the multiplication of prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (n % VAR_0 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let VAR_0 = 2; VAR_0 < 101; VAR_0++) {\n     \n      if (VAR_0 * i > a) return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nisMultiplyPrime(30);\n\n/*Write a function that returns true if the given number is the multiplication of prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (n % VAR_0 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let VAR_0 = 2; VAR_0 < 101; VAR_0++) {\n     \n      if (VAR_0 * i > a) return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nisMultiplyPrime(30);<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(VAR_0) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = VAR_0.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0.at( - 1) == 'y' || VAR_0.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(VAR_0) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = VAR_0.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n};\n\nexport default vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet1) {\n      lo = VAR_0}\n    }\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet2) {\n      hi = VAR_0}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  for (let VAR_0 = lo + 1; VAR_0 < hi; VAR_0++) {\n    u.push(y [ VAR_0 ])\n    }\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet1) {\n      lo = VAR_0}\n    }\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet2) {\n      hi = VAR_0}\n    }\n \n  if (hi == - 1) {\n    return ()}\n  if (lo == - 1) {\n    return ()}\n \n  if (hi <= lo) {\n    return ()}\n \n  u = []\n  let i = 0\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] >= planet1 && y [ VAR_0 ] <= planet2) {\n      u.push (y [ VAR_0 ])}\n    }\n  if (u.length == 1) {\n    return ()}\n \n  if (u.length == 2) {\n    return (u [ 0 ], u [ 1 ])}\n  if (u.length > 2) {\n    let VAR_0 = u [ 0 ]\n    let VAR_1 = u [ 1 ]\n    if (VAR_0 < VAR_1) {\n      return (VAR_0, VAR_1)\n    }\n    if (VAR_1 < VAR_0) {\n      return (VAR_1, VAR_0)\n    }\n    return ()\n  }\n  return ()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, VAR_0) => {\n  if (a < 0) {\n    a = - a}\n  if (VAR_0 < 0) {\n    VAR_0 = - VAR_0}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(VAR_0 % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, VAR_0) => {\n  if (a < 0) {\n    a = - a}\n  if (VAR_0 < 0) {\n    VAR_0 = - VAR_0}\n \n  let VAR_1 = 0\n  let VAR_2 = 0\n  let result = 0\n  let temp = a\n  while (temp!= 0) {\n    result += temp % VAR_0\n    temp = temp / VAR_0\n  }\n  \n  temp = VAR_0\n  while (temp!= 0) {\n    VAR_1 += temp % VAR_1\n    VAR_2 += temp % VAR_2\n    temp = temp / VAR_1\n    temp = temp / VAR_2\n  }\n  \n  result += VAR_1 * VAR_2\n  return result\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their product digits.\n  Assume the input is always valid.\n  Examples:\n  sum_digits(15, 12) should return 6.\n  sum_digits(15, -12) should return 6.\n  sum_digits(100, -12) should return 18.\n  sum_digits(2000, -12) should return -12.\n  */\nconst sum_digits =(a, VAR_0) => {\n  let VAR_1 = 0\n  let VAR_2 = 0\n  let result = 0\n  let temp = a\n  while (temp!= 0) {\n    result += temp % VAR_0\n    temp = temp / VAR_0\n  }\n  \n  temp = VAR_0\n  while (temp!= 0) {\n    VAR_1 += temp % VAR_1\n    VAR_2 += temp % VAR_2\n    temp = temp / VAR_1\n    temp = temp / VAR_2\n  }\n  \n  result += VAR_1 * VAR_2\n  return result\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their product digits.\n  Assume the input is always valid.\n  Examples:\n  sum_digits(15, 12) should return 6.\n  sum_digits(15, -12) should return 6.\n  sum_digits(100, -12) should return 18.\n  sum_digits(2000, -12) should return -12.\n  */\nconst sum_digits_2 =(a, VAR_0) => {\n  let VAR_1 = 0\n  let VAR_2 = 0\n  let result = 0\n  let temp = a\n  while (temp!= 0) {\n    result += temp % VAR_0\n    temp = temp / VAR_0\n  }\n  \n  temp = VAR_0\n  while (temp!= 0) {\n    VAR_1 += temp % VAR_1\n    VAR_2 += temp % VAR_2\n    temp = temp / VAR_1\n    temp = temp / VAR_2\n  }\n  \n  result += VAR_1 * VAR_2\n  return result\n}\n\n\n/*Complete the function that takes two integers and returns \n  the difference of their product digits.\n  Assume the input is always valid.\n  Examples:\n  difference_digits(15, 12) should return 3.\n  difference_digits(15, -12) should return 3.\n  difference_digits(100, -12) should return 9.\n  difference_digits(2000, -12) should return -12.\n  */\nconst difference_digits =(a, VAR_0) => {\n  let VAR_1 = 0\n  let VAR_2 = 0\n  let result = 0\n  let temp = a\n  while (temp!= 0) {\n    result += temp % VAR_0\n    temp = temp / VAR_0\n  }\n  \n  temp = VAR_0\n  while (temp!= 0) {\n    VAR_1 += temp % VAR_1\n    VAR_2 += temp % VAR_2\n    temp = temp / VAR_1\n    temp = temp / VAR_2\n  }\n  \n  result += VAR_1 * VAR_2\n  return result\n}\n\n/*Complete the function that takes two integers and returns \n  the difference of their sum digits.\n  Assume the input is always valid.\n  Examples:\n  difference_digits(15, 12) should return 3.\n  difference_digits(15, -12) should return 3.\n  difference_digits(100, -12) should return 9.\n  difference_digits(2000, -12) should return -12.\n  */\nconst difference_digits_2 =(a, VAR_0) => {\n  let VAR_1 = 0\n  let VAR_2 = 0\n  let result = 0\n  let temp = a\n  while (temp!= 0) {\n    result += temp % VAR_0\n    temp = temp / VAR_0\n  }\n  \n  temp = VAR_0\n  while (temp!= 0) {\n    VAR_1 += temp % VAR_1\n    VAR_2 += temp % VAR_2\n    temp = temp / VAR_1\n    temp = temp / VAR_2\n  }\n  \n  result += VAR_1 * VAR_2\n  return result\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their sum digits.\n  Assume the input is always valid.\n  Examples:\n  prod_digits(15, 12) should return 6.\n  prod_digits(15, -12) should return 6.\n  prod_digits(100, -12) should return 18.\n  prod_digits(2000, -12) should return -12.\n  */\nconst prod_digits =(a, VAR_0) => {\n  let VAR_1 = 0\n  let VAR"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(VAR_0) => {\n  VAR_0 = Math.abs(VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(VAR_0, 1.0 / 3.0)), 3) == VAR_0);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(VAR_0) => {\n  VAR_0 = Math.abs(VAR_0);\n \n  let n = VAR_0;\n  while (n % 3 === 0) {\n    n /= 3;\n  }\n  return n === 1;\n}\n\nexport default iscube;<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const VAR_0 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => VAR_0 [ a ] - VAR_0 [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const VAR_0 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n  \n  const VAR_1 = {}\n  const numbersArray = numbers.split(' ')\n  \n  for(let i = 0; i < 9; i++){\n    if(numbersArray[i] === 'zero'){\n      VAR_1[i] = VAR_0.zero\n    } else if(numbersArray[i] === 'one'){\n      VAR_1[i] = VAR_0.one\n    } else if(numbersArray[i] === 'two'){\n      VAR_1[i] = VAR_0.two\n    } else if(numbersArray[i] === 'three'){\n      VAR_1[i] = VAR_0.three\n    } else if(numbersArray[i] === 'four'){\n      VAR_1[i] = VAR_0.four\n    } else if(numbersArray[i] === 'five'){\n      VAR_1[i] = VAR_0.five\n    } else if(numbersArray[i] ==='six'){\n      VAR_1[i] = VAR_0.six\n    } else if(numbersArray[i] ==='seven'){\n      VAR_1[i] = VAR_0.seven\n    } else if(numbersArray[i] === 'eight'){\n      VAR_1[i] = VAR_0.eight\n    } else if(numbersArray[i] === 'nine'){\n      VAR_1[i] = VAR_0.nine\n    } else {\n      VAR_1[i] = VAR_0[numbersArray[i]]\n    }\n  }\n  \n  return VAR_1.toString()\n}\n\n/*\n  Input is a string\n  Return a string of the input with every lowercase letter replaced with uppercase letter\n  >>> toUpperCase('hello')\n  'HELLO'\n  >>> toUpperCase('hello world')\n  'HELLO WORLD'\n  */\nconst toUpperCase = (input) => {\n  return input.toUpperCase()\n}\n\n/*\n  Input is a string\n  Return a string of the input with every uppercase letter replaced with lowercase letter\n  >>> toLowerCase('HELLO')\n  'hello'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  */\nconst toLowerCase = (input) => {\n  return input.toLowerCase()\n}\n\n/*\n  Input is a string\n  Return a string with every non-letter character removed\n  >>> removeNonLetters('hello world')\n  'hello'\n  >>> removeNonLetters('hello.world')\n  'hello'\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters('hello!')\n  'hello'\n  */\nconst removeNonLetters = (input) => {\n  const noLetters = /[^a-zA-Z]/g\n  return input.replace(noLetters, '')\n}\n\n/*\n  Input is a string\n  Return a string with every non-letter character replaced with a space\n  >>> removeNonLetters('hello world')\n  'hello world'\n  >>> removeNonLetters('hello.world')\n  'hello.world'\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters('hello!')\n  'hello!'\n  */\nconst removeNonLettersBySpace = (input) => {\n  const noLetters = /[^a-zA-Z]/g\n  return input.replace(noLetters,'')\n}\n\n/*\n  Input is a string\n  Return a string with every non-letter character replaced with a newline\n  >>> removeNonLettersByNewline('hello world')\n  'hello world\\n'\n  >>> removeNonLettersByNewline('hello.world')\n  'hello.world\\n'\n  >>> removeNonLettersByNewline('')\n  ''\n  >>> removeNonLettersByNewline('hello!')\n  'hello!\\n'\n  */\nconst removeNonLettersByNewline = (input) => {\n  const noLetters = /[^a-zA-Z]/g\n  return input.replace(noLetters, '\\n')\n}\n\n/*\n  Input is a string\n  Return a string with every non-letter character replaced with a space\n  >>> removeNonLettersBySpaceAndNewline('hello world')\n  'hello world\\n'\n  >>> removeNonLettersBySpaceAndNewline('hello.world')\n  'hello.world\\n'\n  >>> removeNonLettersBySpaceAndNewline('')\n  ''\n  >>> removeNonLettersBySpaceAndNewline('hello!')\n  'hello!\\n'\n  */\nconst removeNonLettersBySpaceAndNewline = (input) => {\n  const noLetters = /[^a-zA-Z]/g\n  return input.replace(noLetters, '\\n')\n}\n\n/*\n  Input is a string\n  Return a string with every word (space separated) removed\n  >>> removeWords('hello world')\n  ''\n  >>> removeWords('hello world!')\n  ''\n  >>> removeWords('hello.world')\n  'hello'\n  >>> removeWords('')\n  ''\n  >>> removeWords('hello!')\n  'hello!'\n  */\nconst removeWords = (input) => {\n  const noWords = /[^\\s]/g\n  return input.replace(noWords, '')\n}\n\n/*\n  Input is a string\n  Return"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, VAR_0) => VAR_0 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, VAR_0) =>(VAR_0 % 2 == 0 ? even [ VAR_0 / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, VAR_0) => VAR_0 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  var odd = l.filter((item, VAR_0) => VAR_0 % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  var merged = [];\n  merged = even.concat(odd);\n  return merged;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let VAR_0 = n; VAR_0 < n * 3; VAR_0+=2) {\n    t.push(VAR_0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let VAR_0 = n; VAR_0 < n * 3; VAR_0+=2) {\n    t.push(VAR_0)\n   \n  }\n  return t\n}\n\nmodule.exports = makeAPile\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let VAR_0 = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      VAR_0.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      VAR_0.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      VAR_0.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      VAR_0.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      VAR_0.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      VAR_0.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      VAR_0.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      VAR_0.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      VAR_0.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      VAR_0.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      VAR_0.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      VAR_0.push('D-')\n      }\n    else {\n      VAR_0.push('E')\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let VAR_0 = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      VAR_0.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      VAR_0.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      VAR_0.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      VAR_0.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      VAR_0.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      VAR_0.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n      VAR_0.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      VAR_0.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      VAR_0.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      VAR_0.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      VAR_0.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      VAR_0.push('D-')\n      }\n    else {\n      VAR_0.push('E')\n      }\n    }\n    \n    return VAR_0\n  }\n\nconst letterGrade = (grades) => {\n  let VAR_0 = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      VAR_0.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      VAR_0.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      VAR_0.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      VAR_0.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      VAR_0.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      VAR_0.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n      VAR_0.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      VAR_0.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      VAR_0.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      VAR_0.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      VAR_0.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      VAR_0.push('D-')\n      }\n    else {\n      VAR_0.push('E')\n      }\n    }\n    \n    return VAR_0\n  }\n\nconst letterGrade = (grades) => {\n  let VAR_0 = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      VAR_0.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      VAR_0.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      VAR_0.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      VAR_0.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      VAR_0.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      VAR_0.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n      VAR_0.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      VAR_0.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      VAR_0.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      VAR_0.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      VAR_0.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      VAR_0.push('D-')\n      }\n    else {\n      VAR_0.push('E')\n      }\n    }\n    \n    return"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var VAR_0 = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while (VAR_0 < x)\n  VAR_0 = VAR_0 * n;\n  return(VAR_0 == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var VAR_0 = 1;\n \n  for (var i = 2; i <= x; i++){\n    VAR_0 = VAR_0 * n;\n    if (x % i == 0) {\n      if (VAR_0 % n == 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(VAR_0 => VAR_0 > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(VAR_0 => VAR_0 > 0);\n \n};\n\n/*Return the numbers in the list with the largest number.\n  >>> getMax([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  [3, 4, 9, 7]\n  >>> getMax([-5, -3, -6, -8, -9, 1, 2, 3])\n  [-5, -3, -6, -8, -9]\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 9, 7]\n  */\nconst getMax =(l) => {\n  return getPositive(l).sort((a, b) => a - b);\n};\n\n/*Return the number in the list with the largest number.\n  >>> getMax([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMax([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMin =(l) => {\n  return getMax(l).reverse();\n};\n\n/*Return the largest number in the list.\n  >>> getMax([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMax([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMaxValue =(l) => {\n  return getMax(l);\n};\n\n/*Return the largest number in the list.\n  >>> getMax([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMax([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMinValue =(l) => {\n  return getMin(l);\n};\n\n/*Return the largest number in the list.\n  >>> getMax([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMax([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMinMax =(l) => {\n  return [getMinValue(l), getMaxValue(l)];\n};\n\n/*Return the largest number in the list.\n  >>> getMax([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMax([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMaxMax =(l) => {\n  return [getMaxMaxValue(l), getMaxMaxValue(l)];\n};\n\n/*Return the smallest number in the list.\n  >>> getMin([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  1\n  >>> getMin([-5, -3, -6, -8, -9, 1, 2, 3])\n  -5\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst getMinMin =(l) => {\n  return getMinMax(l);\n};\n\n/*Return the smallest number in the list.\n  >>> getMin([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  1\n  >>> getMin([-5, -3, -6, -8, -9, 1, 2, 3])\n  -5\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst getMinMaxMin =(l) => {\n  return [getMinMin(l), getMinMax(l)];\n};\n\n/*Return the largest number in the list.\n  >>> getMin([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMin([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMaxMinMax =(l) => {\n  return [getMaxMinMaxValue(l), getMaxMinMaxValue(l)];\n};\n\n/*Return the largest number in the list.\n  >>> getMin([3, 4, 1, 6, 3, 7, 9, 1, 9, 5])\n  9\n  >>> getMin([-5, -3, -6, -8, -9, 1, 2, 3])\n  -3\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMaxMinMin =(l) => {\n  return [getMaxMinMinValue(l), getMaxMinMinValue(l)];\n};\n\nmodule.exports = {\n  getMax,\n  get"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (VAR_0 % 3 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ]}\n    else\nif (VAR_0 % 4 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ] * lst [ VAR_0 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    else {\n      y+=lst [ VAR_0 ]}\n    }\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (VAR_0 % 3 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ]}\n    else\nif (VAR_0 % 4 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ] * lst [ VAR_0 ]}\n   \n  }\n  return y\n}\n\nconst sumSquares2 =(lst) => {\n  let y = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (VAR_0 % 3 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ]}\n    else\nif (VAR_0 % 4 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ] * lst [ VAR_0 ]}\n  \n  }\n  return y\n}\n\n\n\nconst main = (lst) => {\n  console.log(sumSquares(lst))\n}\n\n\nmain([1,2,3])<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let VAR_0 = 2; VAR_0 <= n; VAR_0++) {\n    if (VAR_0 % 2 == 0) {\n      p.push(1 + VAR_0 / 2)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      p.push(p [ VAR_0 - 2 ] + p [ VAR_0 - 1 ] + 1 +(VAR_0 + 1) / 2)\n      }\n    }\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let VAR_0 = 2; VAR_0 <= n; VAR_0++) {\n    if (VAR_0 % 2 == 0) {\n      p.push(1 + VAR_0 / 2)\n     \n    } else {\n      p.push(p[VAR_0 - 1] + p[VAR_0 - 2] + p[VAR_0 + 1])\n    }\n  }\n  return p\n}\n\nconsole.log(tri(3))<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var VAR_0 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return VAR_0 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    VAR_0.push(VAR_0.at( - 1) + VAR_0.at( - 2) +\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0.at( - 3) + VAR_0.at( - 4));\n    VAR_0.shift();\n    }\n  return VAR_0.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var VAR_0 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return VAR_0 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    VAR_0.push(VAR_0.at( - 1) + VAR_0.at( - 2) +\n   \n  }\n  return VAR_0.at( - 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let VAR_0 = y; VAR_0 >= x; VAR_0--) {\n    if (VAR_0 % 2 == 0) {\n      return VAR_0}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let VAR_0 = y; VAR_0 >= x; VAR_0--) {\n    if (VAR_0 % 2 == 0) {\n      return VAR_0}\n   \n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the largest positive integer that is less than or equal to N\n  and is divisible by L.\n  For example:\n  largestNumDivisibleBy(23, 4) = 11\n  largestNumDivisibleBy(25, 5) = 10\n  largestNumDivisibleBy(9, 3) = -1\n  */\nconst largestNumDivisibleBy = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= 1; VAR_0--) {\n    if (VAR_0 % L == 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the smallest positive integer that is greater than or equal to N\n  and is divisible by L.\n  For example:\n  smallestNumDivisibleBy(23, 4) = 21\n  smallestNumDivisibleBy(25, 5) = 25\n  smallestNumDivisibleBy(9, 3) = 9\n  */\nconst smallestNumDivisibleBy = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= 1; VAR_0--) {\n    if (VAR_0 % L == 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the largest positive integer that is less than or equal to N\n  and is divisible by L.\n  For example:\n  largestNumNotDivisibleBy(23, 4) = 23\n  largestNumNotDivisibleBy(25, 5) = 23\n  largestNumNotDivisibleBy(9, 3) = -1\n  */\nconst largestNumNotDivisibleBy = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= 1; VAR_0--) {\n    if (VAR_0 % L!= 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the smallest positive integer that is greater than or equal to N\n  and is divisible by L.\n  For example:\n  smallestNumNotDivisibleBy(23, 4) = 21\n  smallestNumNotDivisibleBy(25, 5) = 25\n  smallestNumNotDivisibleBy(9, 3) = 9\n  */\nconst smallestNumNotDivisibleBy = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= 1; VAR_0--) {\n    if (VAR_0 % L!= 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the sum of N and N - L, but with the result\n  converted to the greatest common divisor of N and N - L.\n  For example:\n  sumCommon(23, 5) = 28\n  sumCommon(25, 5) = 35\n  sumCommon(9, 3) = -1\n  */\nconst sumCommon = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= L; VAR_0--) {\n    if (VAR_0 % L == 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the sum of N and N - L, but with the result\n  converted to the least common multiple of N and N - L.\n  For example:\n  sumLeastCommon(23, 5) = 29\n  sumLeastCommon(25, 5) = 40\n  sumLeastCommon(9, 3) = -1\n  */\nconst sumLeastCommon = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= L; VAR_0--) {\n    if (VAR_0 % L == 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the product of N and N - L.\n  For example:\n  product(23, 5) = 15\n  product(25, 5) = 25\n  product(9, 3) = -1\n  */\nconst product = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= L; VAR_0--) {\n    if (VAR_0 % L == 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the sum of the squares of the digits of N.\n  For example:\n  squareSum(23, 5) = 4\n  squareSum(25, 5) = 45\n  squareSum(9, 3) = -1\n  */\nconst squareSum = (N, L) => {\n  for (let VAR_0 = N; VAR_0 >= L; VAR_0--) {\n    if (VAR_0 % L == 0) {\n      return VAR_0}\n  }\n  return -1\n}\n\n/*\n  This function takes a positive number N and a positive integer L.\n  It returns the sum of the squares of the digits of N.\n  For example:\n  squareSum(23, 5) = 13\n  squareSum(25, 5) = 145\n  squareSum(9, 3) = -1\n  */\nconst squareSumOfSqu"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] % 2 == 1 && lst [ VAR_0 ] > 0) {\n      p+=lst [ VAR_0 ] * lst [ VAR_0 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] % 2 == 1 && lst [ VAR_0 ] > 0) {\n      p+=lst [ VAR_0 ] * lst [ VAR_0 ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(doubleTheDifference([9, -2]))\n\n// doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\n//BEGIN AUTOGENERATED CODE\nimport { createElement } from'react'\nimport { incrList } from '../../utils/incrList'\nexport default createElement(incrList)\n//END AUTOGENERATED CODE\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(VAR_0) => {\n  if (VAR_0.length < 3)\n  return false;\n  for (let i = 0; i < VAR_0.length - 2; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 [ i ] == VAR_0 [ i + 1 ] || VAR_0 [ i + 1 ] == VAR_0 [ i + 2 ] || VAR_0 [ i ] == VAR_0 [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(VAR_0) => {\n  if (VAR_0.length < 3)\n  return false;\n  for (let i = 0; i < VAR_0.length - 2; i++)\n \n  if (VAR_0[i] === VAR_0[i + 1] && VAR_0[i] === VAR_0[i + 2])\n  return false;\n  for (let i = 0; i < VAR_0.length - 3; i++)\n  if (VAR_0[i] === VAR_0[i + 1] && VAR_0[i] === VAR_0[i + 2] && VAR_0[i] === VAR_0[i + 3])\n  return false;\n  return true;\n}\n\nconst isHappy =(VAR_0) => {\n  if (VAR_0.length < 3)\n  return false;\n  let i = 0;\n  let j = 0;\n  let isHappy = true;\n  while (i < VAR_0.length - 2) {\n    if (VAR_0[i] === VAR_0[i + 1] && VAR_0[i] === VAR_0[i + 2]) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  if (isHappy) {\n    return isHappy;\n  }\n  i = 0;\n  while (i < VAR_0.length - 3) {\n    if (VAR_0[i] === VAR_0[i + 1] && VAR_0[i] === VAR_0[i + 2] && VAR_0[i] === VAR_0[i + 3]) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  if (isHappy) {\n    return isHappy;\n  }\n  return isHappy;\n}\n\n/*\n  Given a string, convert it to camel case.\n  Note that there is no lower-case character after an upper case character.\n  For example,\n  \"ThisIsAString\" -> \"thisIsAString\"\n  \"ThisIsA_String\" -> \"thisIsAString\"\n  \"ThisIsA__String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA____String\" -> \"thisIsAString\"\n  \"ThisIsA_____String\" -> \"thisIsAString\"\n  \"ThisIsA______String\" -> \"thisIsAString\"\n  \"ThisIsA_______String\" -> \"thisIsAString\"\n  \"ThisIsA________String\" -> \"thisIsAString\"\n  \"ThisIsA__________String\" -> \"thisIsAString\"\n  \"ThisIsA___________String\" -> \"thisIsAString\"\n  \"ThisIsA____________String\" -> \"thisIsAString\"\n  \"ThisIsA_____________String\" -> \"thisIsAString\"\n  \"ThisIsA_______________String\" -> \"thisIsAString\"\n  \"ThisIsA____________String\" -> \"thisIsAString\"\n  \"ThisIsA____________String\" -> \"thisIsAString\"\n  \"ThisIsA____________String\" -> \"thisIsAString\"\n  \"ThisIsA___________String\" -> \"thisIsAString\"\n  \"ThisIsA_______String\" -> \"thisIsAString\"\n  \"ThisIsA_____String\" -> \"thisIsAString\"\n  \"ThisIsA__String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA____String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA___String\" -> \"thisIsAString\"\n  \"ThisIsA"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(VAR_0 => Number.isInteger(VAR_0));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(VAR_0 => Number.isInteger(VAR_0));\n \n}\n\n/**\n  * Filter given list of any python values only for floats\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterFloats([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterFloats =(values) => {\n  return values.filter(VAR_0 => Number.isFinite(VAR_0));\n}\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterStrings([1, 2, 3, 'abc', {}, []])\n  *   // ['abc', {}, []]\n  */\nconst filterStrings =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 ==='string');\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterNumbers([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterNumbers =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'number');\n}\n\n/**\n  * Filter given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterObjects([1, 2, 3, 'abc', {}, []])\n  *   // [{}, []]\n  */\nconst filterObjects =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterLists([1, 2, 3, 'abc', {}, []])\n  *   // [[], []]\n  */\nconst filterLists =(values) => {\n  return values.filter(VAR_0 => Array.isArray(VAR_0));\n}\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterArrays([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterArrays =(values) => {\n  return values.filter(VAR_0 => Array.isArray(VAR_0));\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [{}, []]\n  */\nconst filterDictionaries =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterDictionaries2 =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterDictionaries3 =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterDictionaries4 =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterDictionaries5 =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterDictionaries6 =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  * @example\n  *   filterDictionaries([1, 2, 3, 'abc', {}, []])\n  *   // [1, 2, 3]\n  */\nconst filterDictionaries7 =(values) => {\n  return values.filter(VAR_0 => typeof VAR_0 === 'object');\n}\n\n/**\n  * Filter given list of any"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return VAR_0.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n   \n    VAR_0 [ ind ]\n    }\n  }\n\n  return VAR_0\n}\n\n//export {maximum}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(VAR_0) => {\n  return VAR_0.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(VAR_0) => {\n  return VAR_0.map((x, i) => x * i).slice(1);\n \n};\n\n/**\n  *  Return the power of the polynomial in the form of a list.\n  *  Power is represented as the sum of all the coefficients of the polynomial.\n  *  Examples:\n  *  [2, 4, 8, 16] = [2, 4, 8, 16]^2\n  *  [1, 2, 3, 4] = [1, 2, 3, 4]^2\n  *  [1, 2, 3, 4]^2 = [1, 4, 12, 40]\n  *  Return the same list if the power is zero.\n  *  >>> [1, 2, 3, 4]^0\n  *  [1, 2, 3, 4]\n  *  >>> [2, 4, 8, 16]^0\n  *  [2, 4, 8, 16]\n  *  >>> [2, 4, 8, 16]^2\n  *  [2, 4, 8, 16]\n  *  >>> [2, 4, 8, 16]^3\n  *  [8, 16, 32]\n  *  >>> [1, 2, 3, 4]^1\n  *  [1, 2, 3, 4]\n  *  >>> [1, 2, 3, 4]^2\n  *  [1, 4, 12, 40]\n  *  >>> [1, 2, 3, 4]^3\n  *  [4, 12, 24]\n  *  >>> [1, 2, 3, 4]^4\n  *  [2, 8, 16]\n  *  >>> [1, 2, 3, 4]^5\n  *  [1]\n  */\nconst power =(VAR_0) => {\n  if (VAR_0.length === 0) {\n    return VAR_0;\n  }\n  return VAR_0.reduce((accumulator, element, index) => {\n    if (index === VAR_0.length - 1) {\n      return accumulator + element;\n    }\n    return accumulator * element;\n  }, 1);\n};\n\nconst isPowerOfTwo =(VAR_0) => {\n  return VAR_0 >= 2 && VAR_0 % 2 === 0;\n};\n\nconst square =(VAR_0) => {\n  return VAR_0 * VAR_0;\n};\n\nconst squareRoot =(VAR_0) => {\n  return Math.sqrt(VAR_0);\n};\n\nconst root =(VAR_0) => {\n  return VAR_0 === 0? Number.NaN : Math.pow(VAR_0, 1/VAR_0);\n};\n\nconst factorial =(VAR_0) => {\n  if (VAR_0 < 0) {\n    return Number.NaN;\n  }\n  return VAR_0 === 0? 1 : VAR_0 * factorial(VAR_0 - 1);\n};\n\nconst fibonacci =(VAR_0) => {\n  if (VAR_0 < 0) {\n    return Number.NaN;\n  }\n  if (VAR_0 === 0) {\n    return 0;\n  }\n  if (VAR_0 === 1) {\n    return 1;\n  }\n  return fibonacci(VAR_0 - 1) + fibonacci(VAR_0 - 2);\n};\n\nconst fibonacciList =(VAR_0) => {\n  if (VAR_0 < 0) {\n    return Number.NaN;\n  }\n  if (VAR_0 === 0) {\n    return [0];\n  }\n  if (VAR_0 === 1) {\n    return [1];\n  }\n  return fibonacciList(VAR_0 - 1).concat(fibonacciList(VAR_0 - 2));\n};\n\nconst fibonacciSequence =(VAR_0) => {\n  return fibonacciList(VAR_0);\n};\n\nconst fibonacciSequenceLength =(VAR_0) => {\n  return fibonacciSequence(VAR_0).length;\n};\n\nconst factorialSequence =(VAR_0) => {\n  return factorialList(VAR_0);\n};\n\nconst factorialSequenceLength =(VAR_0) => {\n  return factorialSequence(VAR_0).length;\n};\n\nconst factorialList =(VAR_0) => {\n  if (VAR_0 < 0) {\n    return Number.NaN;\n  }\n  if (VAR_0 === 0) {\n    return [1];\n  }\n  if (VAR_0 === 1) {\n    return [1];\n  }\n  return factorialList(VAR_0 - 1).concat([1, VAR_0]);\n};\n\nconst isPrime =(VAR_0) => {\n  if (VAR_0 < 2) {\n    return false;\n  }\n  for (let i = 2; i < VAR_0; i++) {\n    if (VAR_0 % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome =(VAR_0) => {\n  return VAR_0 === VAR_0.split('').reverse().join('');\n};\n\nconst isPangram =(VAR_0) => {\n  let str = VAR_0;\n  return str.split('').every(letter => {\n    return (letter >= 'a' && letter <= 'z') || (letter >= 'A' && letter <= 'Z');\n  });\n};\n\nconst sum =(VAR_0) => {\n  return VAR_0.reduce((accumulator, element, index) => {\n    return accumulator + element;\n  }, 0"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(VAR_0)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5.createHash(VAR_0).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9b7d3f6e5b1a7f4c3d4d9f5f6a974bcb6f0b9b7'\n  */\nconst stringToSha1 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var sha1 = require('js-sha1')\n \n  return sha1.createHash(VAR_0).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f8a6ccd6d955a0b1d9b4ce3b0a5f8e2c9e075e0c08f5c4d7d716e1c6e3b'\n  */\nconst stringToSha256 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var sha256 = require('js-sha256')\n \n  return sha256.createHash(VAR_0).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e7c9f80e75a3c5b9d2b6e7d5d9d4b9d9b1f2d3f5c7d7d3d6f7d6d9b1d9b6d9d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d9b6e7d5d9d4b9d9b1d"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let VAR_0 = 0; VAR_0 < arr.length; VAR_0++) {\n    for (let j = 0; j < arr [ VAR_0 ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ VAR_0 ].length; k++) {\n        if (arr [ VAR_0 ] [ k ].charCodeAt() < arr [ VAR_0 ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ VAR_0 ] = arr [ VAR_0 ].slice(0, j) + arr [ VAR_0 ] [ ind ] + arr [ VAR_0 ].slice(j + 1, ind) + arr [ VAR_0 ] [ j ] + arr [ VAR_0 ].slice(ind + 1, arr [ VAR_0 ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let VAR_0 = 0; VAR_0 < arr.length; VAR_0++) {\n    if (VAR_0 > 0) {\n      t = t + ' '}\n    t = t + arr [ VAR_0 ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let VAR_0 = 0; VAR_0 < arr.length; VAR_0++) {\n    for (let j = 0; j < arr [ VAR_0 ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ VAR_0 ].length; k++) {\n        if (arr [ VAR_0 ] [ k ].charCodeAt() < arr [ VAR_0 ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ VAR_0 ] = arr [ VAR_0 ].slice(0, j) + arr [ VAR_0 ] [ ind ] + arr [ VAR_0 ].slice(j + 1, ind) + arr [ VAR_0 ] [ j ] + arr [ VAR_0 ].slice(ind + 1, arr [ VAR_0 ].length)\n       \n        }\n      }\n    }\n  return arr.join('')\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hi'))\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(VAR_0, prefix) => {\n  return VAR_0.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(VAR_0, prefix) => {\n  return VAR_0.filter(x => x.startsWith(prefix));\n \n};\n\n/**\n  * Returns a string without all trailing spaces\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   trimEndingSpace('')\n  *   trimEndingSpace(' ')\n  *   trimEndingSpace('a b c')\n  */\nconst trimEndingSpace =(str) => {\n  return str.replace(/\\s+$/, '');\n}\n\n/**\n  * Returns a string without all leading spaces\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   trimStartingSpace('')\n  *   trimStartingSpace(' ')\n  *   trimStartingSpace('a b c')\n  */\nconst trimStartingSpace =(str) => {\n  return str.replace(/^\\s+/, '');\n}\n\n/**\n  * Returns a string with the first two characters in upper case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   capitalizeFirstTwo('')\n  *   capitalizeFirstTwo('a')\n  *   capitalizeFirstTwo('a b c')\n  */\nconst capitalizeFirstTwo =(str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n  * Returns a string with the first character in upper case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   capitalizeFirst('')\n  *   capitalizeFirst('a')\n  *   capitalizeFirst('a b c')\n  */\nconst capitalizeFirst =(str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n  * Returns a string with the first character in lower case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   lowercaseFirst('')\n  *   lowercaseFirst('a')\n  *   lowercaseFirst('a b c')\n  */\nconst lowercaseFirst =(str) => {\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\n\n/**\n  * Returns a string with the first character in upper case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   uppercaseFirst('')\n  *   uppercaseFirst('a')\n  *   uppercaseFirst('a b c')\n  */\nconst uppercaseFirst =(str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n  * Returns a string with the first character in lower case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   lowercaseLast('')\n  *   lowercaseLast('a')\n  *   lowercaseLast('a b c')\n  */\nconst lowercaseLast =(str) => {\n  return str.charAt(str.length-1).toLowerCase() + str.slice(0, str.length-1);\n}\n\n/**\n  * Returns a string with the first character in upper case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   uppercaseLast('')\n  *   uppercaseLast('a')\n  *   uppercaseLast('a b c')\n  */\nconst uppercaseLast =(str) => {\n  return str.charAt(str.length-1).toUpperCase() + str.slice(0, str.length-1);\n}\n\n/**\n  * Returns a string with the first character in lower case\n  * @param {string} str\n  * @returns {string}\n  * @example\n  *   capitalizeLast('')\n  *   capitalizeLast('a')\n  *   capitalizeLast('a b c')\n  */\nconst capitalizeLast =(str) => {\n  return str.charAt(str.length-1).toUpperCase() + str.slice(0, str.length-1);\n}\n\nexport {\n  filterByPrefix,\n  trimEndingSpace,\n  trimStartingSpace,\n  capitalizeFirstTwo,\n  capitalizeFirst,\n  lowercaseFirst,\n  uppercaseFirst,\n  capitalizeLast,\n  lowercaseLast\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let VAR_0 = lst\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = VAR_0 [ j ]\n    VAR_0 [ j ] = VAR_0 [ ind ]\n    VAR_0 [ ind ] = tmp\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let smallest = VAR_0 [ 0 ]\n  let pt = 1\n  while (pt < VAR_0.length) {\n    if (VAR_0 [ pt ] > smallest) {\n      return VAR_0 [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let VAR_0 = lst\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = VAR_0 [ j ]\n    VAR_0 [ j ] = VAR_0 [ ind ]\n    VAR_0 [ ind ] = tmp\n   \n    }\n    let smallest = VAR_0 [ 0 ]\n    for (let i = 1; i < VAR_0.length; i++) {\n      if (VAR_0 [ i ] < smallest) {\n        smallest = VAR_0 [ i ]\n        }\n      }\n    return smallest\n  }\n  \nnextSmallest([1, 2, 3, 4, 5])\nnextSmallest([5, 1, 4, 3, 2])\nnextSmallest([])\nnextSmallest([1, 1])\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let VAR_0 = message [ i ].charCodeAt()\n    if (VAR_0 > 96) {\n      VAR_0-=32}\n    else\nif (VAR_0 != 32 && VAR_0 < 96) {\n      VAR_0+=32}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 == 65 || VAR_0 == 97 || VAR_0 == 69 || VAR_0 == 101 || VAR_0 == 73 || VAR_0 == 105 || VAR_0 == 79 || VAR_0 == 111 || VAR_0 == 85 || VAR_0 == 117) {\n      VAR_0+=2}\n    t+=String.fromCharCode(VAR_0)\n    }\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let VAR_0 = message [ i ].charCodeAt()\n    if (VAR_0 > 96) {\n      VAR_0-=32}\n    else\nif (VAR_0!= 32 && VAR_0 < 96) {\n      VAR_0+=32}\n   \n    t+=message[i].toUpperCase()\n}\nreturn t\n}\n\nconsole.log(encode('test'))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let VAR_0 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      VAR_0++}\n    else {\n      VAR_0--}\n    if (VAR_0 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_0 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  VAR_0 = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      VAR_0++}\n    else {\n      VAR_0--}\n    if (VAR_0 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_0 == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let VAR_0 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      VAR_0++}\n    else {\n      VAR_0--}\n    if (VAR_0 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_0 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  let VAR_1 = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == ')') {\n      VAR_1++}\n    else {\n      VAR_1--}\n    if (VAR_1 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_1 == 0) {\n    return 'Yes'}\n  return 'No'\n}\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        VAR_0++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    VAR_0 = VAR_0.toString()\n    d.push('the number of odd elements ' + VAR_0 + 'n the str' + VAR_0 + 'ng ' + VAR_0 + ' of the ' + VAR_0 + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        VAR_0++}\n     \n    }\n    d.push(`the number of odd elements ${VAR_0} of the string ${i} of the ${h}nput.`)\n  }\n  return d\n}\n\n/*\nGiven two lists of strings, where each string consists of only digits, return a\nlist of strings. Each string is formed by concatenating the strings in the\ninput lists.\n\nNote:\n\nThe input lists are of different lengths.\nThe input lists are not empty.\nThe returned list of strings is of the same length as the input lists.\nThe strings in the input lists are not empty.\nThe returned list of strings is not empty.\n\nExample:\n\n  Input:\n    [\"a1\", \"b2\", \"c3\"]\n    [\"d4\", \"e5\", \"f6\"]\n    \n  Output:\n    [\"a1b2c3d4\", \"b2c3d4e5\", \"c3d4e5f6\"]\n  \n  Explanation:\n    The input lists [ [\"a1\", \"b2\", \"c3\"], [\"d4\", \"e5\", \"f6\"] ] are the same\n    lists, but their elements are in different positions.\n\n  Example 2:\n\n  Input:\n    [\"a1\", \"a2\"]\n    [\"b1\", \"b2\"]\n    \n  Output:\n    [\"a1b1\", \"a1b2\", \"a2b1\", \"a2b2\"]\n  \n  Explanation:\n    The input lists [ [\"a1\", \"a2\"], [\"b1\", \"b2\"] ] are the same\n    lists, but their elements are in different positions.\n\n  Example 3:\n\n  Input:\n    [\"a1\", \"a2\", \"a3\"]\n    [\"a1\", \"b2\", \"a3\"]\n    \n  Output:\n    [\"a1a2a3\", \"a1b2a3\", \"a2a3b1\", \"a2b2a3\"]\n  \n  Explanation:\n    The input lists [ [\"a1\", \"a2\", \"a3\"], [\"a1\", \"b2\", \"a3\"] ] are the same\n    lists, but their elements are in different positions.\n*/\nconst combine =(lst1, lst2) => {\n  const n = lst1.length\n  let l = [ ]\n  for (let i = 0; i < n; i++) {\n    let r = [ ]\n    for (let j = 0; j < n; j++) {\n      r.push(lst1 [ i ] + lst2 [ j ])\n    }\n    l.push(r)\n  }\n  return l\n}\n\nconst main =() => {\n  let d = oddCount(['1111111', '2222222', '3333333', '4444444', '5555555', '6666666', '7777777', '8888888', '9999999'])\n  console.log(d)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let VAR_0 = 0; VAR_0 < key.length; VAR_0++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (key [ VAR_0 ].charCodeAt() < 65 || key [ VAR_0 ].charCodeAt() > 90) {\n        hi = 0}\n      if (key [ VAR_0 ].charCodeAt() < 97 || key [ VAR_0 ].charCodeAt() > 122) {\n        lo = 0}\n      }\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let VAR_0 = 0; VAR_0 < key.length; VAR_0++) {\n     \n      if (key.charAt(VAR_0).toLowerCase()!== key.charAt(VAR_0).toUpperCase()) {\n        return false\n      }\n    }\n    lo = lo + 1\n    hi = hi + 1\n  }\n  if (c === lo) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    if (key.toLowerCase()!== key.toUpperCase()) {\n      return false\n    }\n  }\n  if (c === lo) {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = {\n  checkDictCase,\n  checkDictCase2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let VAR_0 = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        u = 0}\n      }\n    if (u == 0) {\n      continue}\n    if (VAR_0 == '') {\n      VAR_0+=t [ j ]}\n    else {\n      VAR_0 = VAR_0 + ' ' + t [ j ]}\n    }\n  return VAR_0\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let VAR_0 = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n      if (u * len == i) {\n        VAR_0 += t [ j ][ len - u * i ]\n      }\n    }\n  }\n  return VAR_0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const VAR_0 of paren_string) {\n    if (VAR_0 == '(') {\n      current_depth+=1;\n      current_string.push(VAR_0);\n      }\n    else\nif (VAR_0 == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(VAR_0);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const VAR_0 of paren_string) {\n    if (VAR_0 == '(') {\n      current_depth+=1;\n      current_string.push(VAR_0);\n      }\n    else\nif (VAR_0 == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      } else {\n        current_string.push(VAR_0);\n      }\n    }\n    else {\n      current_string.push(VAR_0);\n    }\n  }\n  return result;\n}\n\n// TEST CODE\n// const paren_string = '( ) (( )) (( )( ))';\n// const result = separateParenGroups(paren_string);\n// console.log(result);\n\n\n/*\n  Write a program that takes a string as input and returns a list of the words in that string.\n  Ignore any punctuation in the string.\n  You may assume the string contains only lowercase letters.\n  >>> separateWords(\"this, a small, sentence.\")\n  ['this', 'a','small','sentence']\n  >>> separateWords(\"This, is a sentence.\")\n  ['this', 'is', 'a','sentence']\n  >>> separateWords(\"This, a sentence.\")\n  ['this', 'a','sentence']\n  >>> separateWords(\"This, a sentence. This, a second sentence.\")\n  ['this', 'a','sentence', 'this', 'a','second','sentence']\n  */\nconst separateWords = (string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_word = false;\n  \n  for (const VAR_0 of string) {\n    if (VAR_0 =='') {\n      if (current_word) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n      }\n    }\n    else\nif (VAR_0 == ',') {\n      if (current_word) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n      }\n      current_word = false;\n    }\n    else\nif (VAR_0 == '.') {\n      if (current_word) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n      }\n      current_word = false;\n    }\n    else\nif (VAR_0.match(/[a-zA-Z]/)) {\n      current_word = true;\n      current_string.push(VAR_0);\n    }\n  }\n  \n  if (current_word) {\n    result.push(current_string.join(''));\n  }\n  \n  return result;\n}\n\n// TEST CODE\n// const string = \"This, a small, sentence.\";\n// const result = separateWords(string);\n// console.log(result);\n\n/*\n  Write a program that takes a string as input and returns a list of the non-empty words in that string.\n  Ignore any punctuation in the string.\n  You may assume the string contains only lowercase letters.\n  >>> separateWords(\"This, a small, sentence.\")\n  ['This', 'a','small','sentence']\n  >>> separateWords(\"This, a sentence.\")\n  ['This', 'a','sentence']\n  >>> separateWords(\"This, a sentence. This, a second sentence.\")\n  ['This', 'a','sentence', 'This', 'a','second','sentence']\n  */\nconst separateWords = (string) => {\n  var result = [ ];\n  var current_string = [ ];\n  \n  for (const VAR_0 of string) {\n    if (VAR_0.match(/[a-zA-Z]/)) {\n      current_string.push(VAR_0);\n    }\n    else\nif (VAR_0.match(/[^a-zA-Z]/)) {\n      result.push(current_string.join(''));\n      current_string = [ ];\n    }\n  }\n  \n  if (current_string.length) {\n    result.push(current_string.join(''));\n  }\n  \n  return result;\n}\n\n// TEST CODE\n// const string = \"This, a small, sentence.\";\n// const result = separateWords(string);\n// console.log(result);\n\n\n/*\n  Write a program that takes a string as input and returns a list of the first words in the string.\n  Ignore any punctuation in the string.\n  You may assume the string contains only lowercase letters.\n  >>> separateWords(\"This, a small, sentence.\")\n  ['This']\n  >>> separateWords(\"This, a sentence.\")\n  ['This']\n  >>> separateWords(\"This, a sentence. This, a second sentence.\")\n  ['This', 'This']\n  */\nconst separateWords = (string) => {\n  var result = [ ];\n  var current_string = [ ];\n  \n  for (const VAR_0 of string) {\n    if (VAR_0.match(/[a-zA-Z]/)) {\n      current_string.push(VAR_0);\n    }\n    else\nif (VAR_0.match(/[^a-zA-Z]/)) {\n      result.push(current_string.join(''));\n      current_string = [ ];\n    }\n  }\n  \n  if (current_string.length) {\n    result.push(current_string.join(''));\n  }\n  \n  return result;\n}\n\n// TEST CODE\n// const string = \"This, a small, sentence.\";\n// const result"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(VAR_0, delimeter) => {\n  if ( !Array.isArray(VAR_0) || VAR_0.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of VAR_0) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(VAR_0, delimeter) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of VAR_0) {\n   \n   const count = VAR_0.length;\n   let prev = VAR_0[0];\n   for (let i = 1; i < count; i++) {\n      result.push(prev);\n      result.push(delimeter);\n      prev = VAR_0[i];\n   }\n  }\n  result.push(prev);\n  return result;\n}\n\n\n/* Return true if `input` is an array\n  >>> isArray([1, 2, 3])\n  true\n  >>> isArray({})\n  false\n  >>> isArray(1)\n  false\n  */\nconst isArray =(VAR_0) => {\n  return Array.isArray(VAR_0);\n}\n\n\n/* Return true if `input` is a string\n  >>> isString(\"Hello\")\n  true\n  >>> isString(1)\n  false\n  */\nconst isString =(VAR_0) => {\n  return typeof VAR_0 ==='string';\n}\n\n\n/* Return true if `input` is a number\n  >>> isNumber(1)\n  true\n  >>> isNumber(\"1\")\n  true\n  >>> isNumber(1.1)\n  true\n  >>> isNumber(1.1)\n  true\n  >>> isNumber(1.1)\n  true\n  >>> isNumber(\"1.1\")\n  true\n  >>> isNumber(true)\n  false\n  */\nconst isNumber =(VAR_0) => {\n  return typeof VAR_0 === 'number' || VAR_0 instanceof Number;\n}\n\n\n/* Return true if `input` is a function\n  >>> isFunction(Math.cos)\n  true\n  >>> isFunction(1)\n  false\n  */\nconst isFunction =(VAR_0) => {\n  return typeof VAR_0 === 'function';\n}\n\n\n/* Return true if `input` is a boolean\n  >>> isBoolean(true)\n  true\n  >>> isBoolean(1)\n  false\n  >>> isBoolean(\"true\")\n  true\n  */\nconst isBoolean =(VAR_0) => {\n  return typeof VAR_0 === 'boolean';\n}\n\n\n/* Return true if `input` is an object\n  >>> isObject({})\n  true\n  >>> isObject(1)\n  false\n  >>> isObject(true)\n  false\n  */\nconst isObject =(VAR_0) => {\n  return Object.prototype.toString.call(VAR_0) === '[object Object]';\n}\n\n\n/* Return true if `input` is an empty object\n  >>> isEmptyObject({})\n  true\n  >>> isEmptyObject(1)\n  false\n  */\nconst isEmptyObject =(VAR_0) => {\n  return Object.keys(VAR_0).length == 0;\n}\n\n\n/* Return true if `input` is an empty string\n  >>> isEmptyString(\"\")\n  true\n  >>> isEmptyString(\"  \")\n  true\n  >>> isEmptyString(\"Hello\")\n  false\n  */\nconst isEmptyString =(VAR_0) => {\n  return VAR_0 === '';\n}\n\n\n/* Return true if `input` is an empty array\n  >>> isEmptyArray([])\n  true\n  >>> isEmptyArray([1])\n  false\n  >>> isEmptyArray([1, 2])\n  false\n  */\nconst isEmptyArray =(VAR_0) => {\n  return Array.isArray(VAR_0) && VAR_0.length === 0;\n}\n\n\n/* Return true if `input` is an empty function\n  >>> isEmptyFunction(Math.cos)\n  true\n  >>> isEmptyFunction(1)\n  false\n  */\nconst isEmptyFunction =(VAR_0) => {\n  return typeof VAR_0 === 'function' && VAR_0.length === 0;\n}\n\n\n/* Return true if `input` is an empty object\n  >>> isEmptyObject({})\n  true\n  >>> isEmptyObject(1)\n  false\n  */\nconst isEmptyObject =(VAR_0) => {\n  return Object.keys(VAR_0).length === 0;\n}\n\n\n/* Return true if `input` is an empty string\n  >>> isEmptyString(\"\")\n  true\n  >>> isEmptyString(\"  \")\n  true\n  >>> isEmptyString(\"Hello\")\n  false\n  */\nconst isEmptyString =(VAR_0) => {\n  return VAR_0 === '';\n}\n\n\n/* Return true if `input` is an empty array\n  >>> isEmptyArray([])\n  true\n  >>> isEmptyArray([1])\n  false\n  >>> isEmptyArray([1, 2])\n  false\n  */\nconst isEmptyArray =(VAR_0) => {\n  return Array.isArray(VAR_0) && VAR_0.length === 0;\n}\n\n\n/* Return true if `input` is an empty function\n  >>> isEmptyFunction(Math.cos)\n  true\n  >>> isEmptyFunction(1)\n  false\n  */\nconst isEmptyFunction =(VAR_0) => {\n  return typeof VAR_0 === 'function' && VAR_0.length === 0;\n}\n\n\n/* Return true if `input` is a string\n  >>> isString(\"Hello\")\n  true\n  >>> isString(1)\n  false\n  */\nconst isString =(VAR_0) => {\n  return typeof VAR_0 ==='string';\n}\n\n\n/* Return true if `input` is a number\n  >>> isNumber(1)\n  true\n  >>> isNumber(\"1\")\n  true\n  >>> isNumber(1.1)\n  true\n  >>> isNumber(1.1)\n  true\n  >>> isNumber(\"1.1\")\n  true\n  >>> isNumber(true)\n  false\n  */\nconst isNumber =("}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(VAR_0) => {\n  var mean = VAR_0.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / VAR_0.length;\n  return VAR_0.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / VAR_0.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(VAR_0) => {\n  var mean = VAR_0.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / VAR_0.length;\n  return VAR_0.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n    }, 0) / VAR_0.length;\n};\n\n/**\n  * Find the Median of a List of Numbers.\n  *\n  * For a given list of input numbers, calculate the median of this dataset.\n  * Median is the middle number in the list\n  * (sort the list in reverse order and then return the item at the half way\n  * point)\n  * >>> median([1, 2, 3, 4])\n  * 3\n  *\n  * @param {Array} VAR_0\n  * @returns {Number}\n  */\nconst median = (VAR_0) => {\n  var sorted = VAR_0.slice().sort((a, b) => {\n    return b - a;\n  });\n  var half = sorted.length / 2;\n  return sorted[half];\n};\n\n/**\n  * Find the Mode of a List of Numbers.\n  *\n  * For a given list of input numbers, calculate the Mode of this dataset.\n  * Mode is the most frequent number in the list.\n  *\n  * @param {Array} VAR_0\n  * @returns {Number}\n  */\nconst mode = (VAR_0) => {\n  var modes = {};\n  VAR_0.forEach(num => {\n    if(modes.hasOwnProperty(num)){\n      modes[num]++;\n    } else {\n      modes[num] = 1;\n    }\n  });\n  var max = Object.keys(modes).reduce((prev, item) => {\n    return modes[item] > prev? item : prev;\n  }, 0);\n  return max;\n};\n\n/**\n  * Find the Median of a List of Numbers.\n  *\n  * For a given list of input numbers, calculate the median of this dataset.\n  * Median is the middle number in the list\n  * (sort the list in reverse order and then return the item at the half way\n  * point)\n  * >>> median([1, 2, 3, 4])\n  * 3\n  *\n  * @param {Array} VAR_0\n  * @returns {Number}\n  */\nconst mode = (VAR_0) => {\n  var sorted = VAR_0.slice().sort((a, b) => {\n    return b - a;\n  });\n  var half = sorted.length / 2;\n  return sorted[half];\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  median,\n  mode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (VAR_0 >= 10) {\n      k+=VAR_0 % 10;\n      VAR_0 =(VAR_0 - VAR_0 % 10) / 10;\n      }\n    k-=VAR_0;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    let N = VAR_0\n    while (N > 0) {\n      let VAR_1 = N % 10\n      N = N / 10\n      k++;\n      }\n    if (k > 0) {\n      p++;\n      }\n    }\n  return p;\n  }\n\nconsole.log(countNums([-1, 11, -11]))\nconsole.log(countNums([1, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < nums.length; VAR_0++) {\n    if (nums [ VAR_0 ] < 10) {\n      continue}\n    let y = nums [ VAR_0 ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      p++\n      }\n    }\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < nums.length; VAR_0++) {\n    if (nums [ VAR_0 ] < 10) {\n      continue}\n    let y = nums [ VAR_0 ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n      p += 1\n    }\n  }\n  return p\n}\nconsole.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let VAR_0 = 0; VAR_0 < string.length - substring.length + 1; VAR_0++) {\n    if (string.slice(VAR_0, VAR_0 + substring.length) == substring) {\n      times+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let VAR_0 = 0; VAR_0 < string.length - substring.length + 1; VAR_0++) {\n    if (string.slice(VAR_0, VAR_0 + substring.length) == substring) {\n      times+=1;\n     \n    }\n  }\n  return times;\n};\n\n/* Find the first occurrence of a substring in a string.\n  >>> firstOccurrence('a', 'a')\n  0\n  >>> firstOccurrence('aaa', 'a')\n  0\n  >>> firstOccurrence('aaaa', 'aa')\n  1\n  >>> firstOccurrence('aaaa', 'aaa')\n  0\n  */\nconst firstOccurrence =(string, substring) => {\n  for (let VAR_0 = 0; VAR_0 < string.length - substring.length + 1; VAR_0++) {\n    if (string.slice(VAR_0, VAR_0 + substring.length) == substring) {\n      return VAR_0;\n    }\n  }\n};\n\nmodule.exports = {\n  howManyTimes,\n  firstOccurrence\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let VAR_0 = 0; VAR_0 < text.length; VAR_0++)\n  if (text [ VAR_0 ] != text.at( - VAR_0 - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let VAR_0 = 0; VAR_0 < text.length; VAR_0++)\n  if (text [ VAR_0 ]!= text.at( - VAR_0 - 1))\n \n    return false;\n    \n    return true;\n};\n\nmodule.exports = isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(VAR_0) => {\n  if ( !Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  for (const s of VAR_0) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  for (const s of VAR_0) {\n   \n    if (s.length > maxlen) {\n      maxlen = s.length;\n    }\n  }\n  return VAR_0[0];\n};\n\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n\n/*\n  >>> longest([1,2,3,4,5])\n  5\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest([])\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let VAR_0 = extensions.length - 1; VAR_0 >= 0; VAR_0--) {\n    let y = 0\n    for (let j = 0; j < extensions [ VAR_0 ].length; j++) {\n      let k = extensions [ VAR_0 ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (y >= s) {\n      s = y;\n      u = VAR_0;\n      }\n    }\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let VAR_0 = extensions.length - 1; VAR_0 >= 0; VAR_0--) {\n    let y = 0\n    for (let j = 0; j < extensions [ VAR_0 ].length; j++) {\n      let k = extensions [ VAR_0 ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n    }\n    if (y>s) {\n      s = y\n      u = VAR_0\n    }\n  }\n  return `${class_name}.${extensions [ u ]}`\n}\n\nexport default strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n   \n  }\n  return p\n}\n\nconst addElements_Solution =(arr, k) => {\n  return arr.reduce((p, e) => p + e, 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let VAR_0 = array\n  let tot = VAR_0 [ 0 ] + VAR_0 [ VAR_0.length - 1 ]\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if ((tot % 2 == 1 && VAR_0 [ k ] < VAR_0 [ ind ]) ||(tot % 2 == 0 && VAR_0 [ k ] > VAR_0 [ ind ])) {\n        ind = k\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    let tmp = VAR_0 [ j ]\n    VAR_0 [ j ] = VAR_0 [ ind ]\n    VAR_0 [ ind ] = tmp\n    }\n  return VAR_0\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let VAR_0 = array\n  let tot = VAR_0 [ 0 ] + VAR_0 [ VAR_0.length - 1 ]\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if ((tot % 2 == 1 && VAR_0 [ k ] < VAR_0 [ ind ]) ||(tot % 2 == 0 && VAR_0 [ k ] > VAR_0 [ ind ])) {\n        ind = k\n       \n      }\n    }\n    if (ind!= j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n    }\n  }\n  return VAR_0\n}\n\nexport default sortArray<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == ' ') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      VAR_0 = 0;\n      }\n    else {\n      t+=text [ i ]\n      }\n    }\n  if (VAR_0 == 1) {\n    t+='_'}\n  if (VAR_0 == 2) {\n    t+='__'}\n  if (VAR_0 > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      VAR_0 = 0}\n    else {\n      t+=text [ i ]}\n    }\n  return t}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, VAR_0) =>(a - VAR_0));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, VAR_0) =>(a - VAR_0));\n \n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(VAR_0) => {\n  var sort1 = [ ... VAR_0 ].sort((a, b) => a - b);\n  var sort2 = [ ... VAR_0 ].sort((a, b) => b - a);\n  if (JSON.stringify(VAR_0) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(VAR_0) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(VAR_0) => {\n  var sort1 = [... VAR_0 ].sort((a, b) => a - b);\n  var sort2 = [... VAR_0 ].sort((a, b) => b - a);\n  if (JSON.stringify(VAR_0) === JSON.stringify(sort1) ||\n \n    JSON.stringify(VAR_0) === JSON.stringify(sort2)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(VAR_0) => {\n  return VAR_0.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(VAR_0) => {\n  return VAR_0.join('');\n \n}\n\n/**\n  * Counts the number of occurrences of a given string\n  * @param  {String} VAR_0 The string to search\n  * @param  {String} VAR_1 The string to count\n  * @return {Number} The number of occurrences of VAR_1 in VAR_0\n  */\nconst count =(VAR_0, VAR_1) => {\n  return VAR_0.split(VAR_1).length;\n}\n\n/**\n  * Converts a given string to lower case\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to lower case\n  */\nconst lowerCase =(VAR_0) => {\n  return VAR_0.toLowerCase();\n}\n\n/**\n  * Converts a given string to upper case\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to upper case\n  */\nconst upperCase =(VAR_0) => {\n  return VAR_0.toUpperCase();\n}\n\n/**\n  * Removes all occurrences of a given string\n  * @param  {String} VAR_0 The string to remove occurrences of\n  * @param  {String} VAR_1 The string to remove\n  * @return {String} The string with all occurrences of VAR_1 removed\n  */\nconst remove =(VAR_0, VAR_1) => {\n  return VAR_0.replace(VAR_1, '');\n}\n\n/**\n  * Converts a given string to title case\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to title case\n  */\nconst titleCase =(VAR_0) => {\n  return VAR_0.toTitleCase();\n}\n\n/**\n  * Removes whitespace from the beginning and end of a given string\n  * @param  {String} VAR_0 The string to remove whitespace from\n  * @return {String} The string with all whitespace removed\n  */\nconst trim =(VAR_0) => {\n  return VAR_0.trim();\n}\n\n/**\n  * Converts a given string to uppercase\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to uppercase\n  */\nconst upperCaseFirstLetter =(VAR_0) => {\n  return VAR_0.charAt(0).toUpperCase() + VAR_0.slice(1);\n}\n\n/**\n  * Converts a given string to lowercase\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to lowercase\n  */\nconst lowerCaseFirstLetter =(VAR_0) => {\n  return VAR_0.charAt(0).toLowerCase() + VAR_0.slice(1);\n}\n\n/**\n  * Converts a given string to uppercase and removes trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to uppercase and removed trailing's'\n  */\nconst upperCaseTrailingS =(VAR_0) => {\n  return VAR_0.charAt(0).toUpperCase() + VAR_0.slice(1).replace(/s$/, '');\n}\n\n/**\n  * Converts a given string to lowercase and removes trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to lowercase and removed trailing's'\n  */\nconst lowerCaseTrailingS =(VAR_0) => {\n  return VAR_0.charAt(0).toLowerCase() + VAR_0.slice(1).replace(/s$/, '');\n}\n\n/**\n  * Converts a given string to uppercase and adds a trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to uppercase and added a trailing's'\n  */\nconst upperCaseAddS =(VAR_0) => {\n  return VAR_0.charAt(0).toUpperCase() + VAR_0.slice(1) +'s';\n}\n\n/**\n  * Converts a given string to lowercase and adds a trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to lowercase and added a trailing's'\n  */\nconst lowerCaseAddS =(VAR_0) => {\n  return VAR_0.charAt(0).toLowerCase() + VAR_0.slice(1) +'s';\n}\n\n/**\n  * Converts a given string to uppercase and removes trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to uppercase and removed trailing's'\n  */\nconst upperCaseTrailingSS =(VAR_0) => {\n  return VAR_0.charAt(0).toUpperCase() + VAR_0.slice(1).replace(/s$/, '') +'s';\n}\n\n/**\n  * Converts a given string to lowercase and removes trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to lowercase and removed trailing's'\n  */\nconst lowerCaseTrailingSS =(VAR_0) => {\n  return VAR_0.charAt(0).toLowerCase() + VAR_0.slice(1).replace(/s$/, '') +'s';\n}\n\n/**\n  * Converts a given string to uppercase and adds a trailing's'\n  * @param  {String} VAR_0 The string to convert\n  * @return {String} The string converted to uppercase and"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let VAR_0 = 0; VAR_0 < lst1.length; VAR_0++) {\n    if (lst1 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let VAR_0 = 0; VAR_0 < lst2.length; VAR_0++) {\n    if (lst2 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let VAR_0 = 0; VAR_0 < lst1.length; VAR_0++) {\n    if (lst1 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n \n  let i = 0\n  while (i < k) {\n    let j = 0\n    while (j < lst2.length) {\n      if (lst1 [i] == lst2 [j]) {\n        let t = lst1 [i]\n        lst1 [i] = lst2 [j]\n        lst2 [j] = t\n        j++\n      }\n      j++\n    }\n    i++\n  }\n  return t == k\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(VAR_0) => {\n  return VAR_0.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(VAR_0) => {\n  return VAR_0.length;\n \n}\n\n/* Return index of character\n  >>> strindex('')\n  -1\n  >>> strindex('abc')\n  0\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'z')\n  -1\n  >>> strindex('abc', 'c', 2)\n  2\n  */\nconst strindex =(VAR_0, VAR_1, VAR_2) => {\n  const str = VAR_0.toString();\n  let index = -1;\n  if (str.indexOf(VAR_1)!= -1) {\n    index = str.indexOf(VAR_1);\n  }\n  return index;\n}\n\n/* Remove leading and trailing spaces from string\n  >>> trim('')\n  ''\n  >>> trim('   ')\n  ''\n  >>> trim('abc')\n  'abc'\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim =(VAR_0) => {\n  return VAR_0.replace(/^\\s+|\\s+$/g, '');\n}\n\n/* Return the index of the last non-space character in the given string\n  >>> last_index('')\n  -1\n  >>> last_index('abc')\n  2\n  >>> last_index(' abc ')\n  6\n  */\nconst last_index =(VAR_0) => {\n  return VAR_0.lastIndexOf(/\\S/);\n}\n\n/* Convert the given string to uppercase\n  >>> upper('abc')\n  'ABC'\n  >>> upper('abc', 'xyz')\n  'XYZ'\n  */\nconst upper =(VAR_0, VAR_1) => {\n  return VAR_0.toUpperCase();\n}\n\n/* Convert the given string to lowercase\n  >>> lower('ABC')\n  'abc'\n  >>> lower('ABC', 'XYZ')\n  'xyz'\n  */\nconst lower =(VAR_0, VAR_1) => {\n  return VAR_0.toLowerCase();\n}\n\n/* Convert the given string to titlecase\n  >>> title('abc')\n  'ABC'\n  >>> title('abc', 'xyz')\n  'XYZ'\n  */\nconst title =(VAR_0, VAR_1) => {\n  return VAR_0.toTitleCase();\n}\n\n/* Return a new string with all non-alpha characters removed\n  >>> strip('abc')\n  'abc'\n  >>> strip('abc', 'xyz')\n  'abc'\n  */\nconst strip =(VAR_0, VAR_1) => {\n  return VAR_0.replace(/[^a-zA-Z]+/g, '');\n}\n\n/* Return a new string with all whitespace removed\n  >>> strip_spaces('   abc   ')\n  'abc'\n  */\nconst strip_spaces =(VAR_0) => {\n  return VAR_0.replace(/\\s+/g, '');\n}\n\n/* Return a new string with all digits removed\n  >>> strip_digits('123abc')\n  'abc'\n  >>> strip_digits('abc123')\n  'abc'\n  >>> strip_digits('123abc', 'xyz')\n  'abc'\n  */\nconst strip_digits =(VAR_0, VAR_1) => {\n  return VAR_0.replace(/\\d+/g, '');\n}\n\n/* Return a new string with all punctuation removed\n  >>> strip_punctuation('!@#abc')\n  'abc'\n  >>> strip_punctuation('abc!@#')\n  'abc'\n  >>> strip_punctuation('abc!@#', 'xyz')\n  'abc'\n  */\nconst strip_punctuation =(VAR_0, VAR_1) => {\n  return VAR_0.replace(/[^a-zA-Z]+/g, '');\n}\n\n/* Return a new string with all ASCII characters removed\n  >>> strip_ascii('abc')\n  'abc'\n  >>> strip_ascii('abc!@#')\n  'abc'\n  >>> strip_ascii('abc!@#', 'xyz')\n  'abc'\n  */\nconst strip_ascii =(VAR_0, VAR_1) => {\n  return VAR_0.replace(/[^\\x00-\\x7f]+/g, '');\n}\n\n/* Return a new string with all ASCII characters in lowercase\n  >>> to_lower('ABC')\n  'abc'\n  >>> to_lower('ABC!@#')\n  'abc'\n  >>> to_lower('ABC!@#', 'xyz')\n  'abc'\n  */\nconst to_lower =(VAR_0, VAR_1) => {\n  return VAR_0.toLowerCase();\n}\n\n/* Return a new string with all ASCII characters in uppercase\n  >>> to_upper('abc')\n  'ABC'\n  >>> to_upper('ABC!@#')\n  'ABC!@#'\n  >>> to_upper('ABC!@#', 'xyz')\n  'ABC!@#'\n  */\nconst to_upper =(VAR_0, VAR_1) => {\n  return VAR_0.toUpperCase();\n}\n\n/* Return a new string with all whitespace replaced by a single space\n  >>> replace_spaces('abc')\n  'abc'\n  >>> replace_spaces('abc', 'xyz')\n  'abc'\n  >>> replace_spaces(' abc   ', 'xyz')\n  'xyz'\n  */\nconst replace_spaces =(VAR_0, VAR_1) => {\n  return VAR_0.replace(/\\s+/g,'');\n}\n\n/* Return a new string with all punctuation replaced by a single space\n  >>> replace_punctuation('!@#abc')\n  'abc'\n  >>> replace_punctuation('abc!@#')\n  'abc'\n  >>> replace_punctuation('abc!@#', 'xyz')\n  'abc"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ] != pat [ j + VAR_0 ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        return true\n        }\n      }\n    }\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) {\n        return true\n      }\n    }\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(VAR_0) => {\n  return VAR_0 % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(VAR_0) => {\n  return VAR_0 % 1.0;\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt =(VAR_0) => {\n  return VAR_0 - truncateNumber(VAR_0);\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberDecimal =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + dec;\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberRound =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + (Math.round(dec * 10) / 10);\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberCeil =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + (Math.ceil(dec * 10) / 10);\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberFloor =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + (Math.floor(dec * 10) / 10);\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberRoundToNearest =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + (Math.round(dec * 10) / 10);\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberCeilToNearest =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + (Math.ceil(dec * 10) / 10);\n \n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number with the leftmost decimal zero\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(0.3)\n  0.3\n  */\nconst truncateNumberFloorToNearest =(VAR_0) => {\n  let int = truncateNumber(VAR_0);\n  let dec = VAR_0 - int;\n  if(dec < 0.001) {\n    return int;\n  }\n  return int + (Math.floor(dec * 10) / 10);\n \n};\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(VAR_0) => {\n  let p = 1\n  let k = 1\n  while (VAR_0 > 0) {\n    let y = VAR_0 % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(VAR_0) => {\n  let p = 1\n  let k = 1\n  while (VAR_0 > 0) {\n    let y = VAR_0 % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n    } else {\n      k = 1;\n    }\n    VAR_0 = VAR_0 / 10\n  }\n  if (k == 1) {\n    p = 0;\n  }\n  return p\n}\n\n/*\n  Given a non-negative number represented as an array of digits, plus one to the array.\n  Return the array.\n  */\nconst plusOne = (VAR_0) => {\n  let sum = 0\n  let i = VAR_0.length - 1\n  while (i >= 0) {\n    sum += VAR_0[i]\n    i -= 1\n  }\n  VAR_0[i] = 1\n  for (i = VAR_0.length - 1; i >= 0; i -= 1) {\n    if (i == 0) {\n      VAR_0[i] = 0\n    } else {\n      VAR_0[i] += VAR_0[i - 1]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a non-negative number represented as an array of digits, multiply all the digits by the integer k.\n  Return the array.\n  */\nconst multiply = (VAR_0, k) => {\n  let res = []\n  for (let i = 0; i < VAR_0.length; i += 1) {\n    let num = VAR_0[i]\n    for (let j = 0; j < k; j += 1) {\n      num *= 10\n    }\n    res.push(num)\n  }\n  return res\n}\n\n/*\n  Given a non-negative number represented as an array of digits, multiply all the digits by the integer k and return the result in an array of digits.\n  */\nconst multiply2 = (VAR_0, k) => {\n  let res = []\n  for (let i = 0; i < VAR_0.length; i += 1) {\n    let num = VAR_0[i]\n    for (let j = 0; j < k; j += 1) {\n      num *= 10\n    }\n    res.push(num)\n  }\n  return res\n}\n\n/*\n  Given two non-negative numbers represented as arrays of digits, return multiplication of the numbers as a string.\n  */\nconst multiply3 = (VAR_0, VAR_1) => {\n  let i = 0\n  let res = \"\"\n  while (i < VAR_0.length) {\n    let num = VAR_0[i] * VAR_1[i]\n    if (num >= 10) {\n      res += String(num)\n    } else {\n      res += \"0\" + String(num)\n    }\n    i += 1\n  }\n  return res\n}\n\n/*\n  Given a non-negative number represented as an array of digits, find the last digit to whose power is one.\n  Return the index of the last digit to whose power is one.\n  */\nconst last = (VAR_0) => {\n  let i = 0\n  while (VAR_0[i] == 0) {\n    i += 1\n  }\n  while (VAR_0[i]!= 1) {\n    i += 1\n  }\n  return i\n}\n\n/*\n  Given a non-negative number represented as an array of digits, find the last digit to whose power is k.\n  Return the index of the last digit to whose power is k.\n  */\nconst last2 = (VAR_0, k) => {\n  let i = 0\n  while (VAR_0[i] == 0) {\n    i += 1\n  }\n  while (VAR_0[i]!= k) {\n    i += 1\n  }\n  return i\n}\n\n/*\n  Given a non-negative number represented as an array of digits, find the first digit to whose power is one.\n  Return the index of the first digit to whose power is one.\n  */\nconst first = (VAR_0) => {\n  let i = 0\n  while (VAR_0[i]!= 1) {\n    i += 1\n  }\n  return i\n}\n\n/*\n  Given a non-negative number represented as an array of digits, find the first digit to whose power is k.\n  Return the index of the first digit to whose power is k.\n  */\nconst first2 = (VAR_0, k) => {\n  let i = 0\n  while (VAR_0[i]!= k) {\n    i += 1\n  }\n  return i\n}\n\n/*\n  Given a non-negative number represented as an array of digits, return the sum of the digits.\n  */\nconst sum = (VAR_0) => {\n  let sum = 0\n  for (let i = 0; i < VAR_0.length; i += 1) {\n    sum += VAR_0[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-negative number represented as an array of digits, return the product of the digits.\n  */\nconst product = (VAR_0) => {\n  let p = 1\n  for (let i = 0; i < VAR_0.length; i += 1) {\n    p *= VAR_0[i]\n  }\n  return p\n}\n\n/*\n  Given a non-negative number represented as an array of digits, return the product of the digits.\n  */\nconst product2 = (VAR_0) => {\n  let p = 1\n  for (let i = 0; i < VAR_0.length; i += 1) {\n    p *= VAR_0[i]\n  }\n  return p\n}\n\n/*\n  Given a non-negative number represented as an array of digits, return the difference of the digits.\n  */\nconst diff = (VAR_0) => {\n  let sum = 0\n  for (let i ="}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt [ i ].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n          }\n        }\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      while (p < txt.length) {\n        if (txt[p] === \" \") {\n          let s = txt.substr(p+1)\n          let v = s.split( /[^a-z]/ )\n          return v\n          }\n        p++\n        }\n      }\n    }\n  }\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitLines =(txt) => {\n  let VAR_0 = txt.split( /\\n/ )\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n      while (p < txt.length) {\n        if (txt[p] === \"\\n\") {\n          let s = txt.substr(p+1)\n          let v = s.split( /[^a-z]/ )\n          return v\n          }\n        p++\n        }\n      }\n    }\n  }\n\nconst isUpperCase =(letter) => {\n  let p = 0\n  while (p < letter.length) {\n    if (letter[p]!== letter[p].toLowerCase()) {\n      return false\n      }\n    p++\n    }\n  return true\n  }\n\nconst isOdd =(num) => {\n  let p = 0\n  while (p < num) {\n    if (num[p] % 2 === 0) {\n      return false\n      }\n    p++\n    }\n  return true\n  }\n\nconst getWordLength =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v.length\n}\n\nconst getWordCount =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v.length\n}\n\nconst containsUpperCaseLetters =(txt) => {\n  let p = 0\n  while (p < txt.length) {\n    if (isUpperCase(txt[p])) {\n      return true\n      }\n    p++\n    }\n  return false\n  }\n\nconst containsLowerCaseLetters =(txt) => {\n  let p = 0\n  while (p < txt.length) {\n    if (txt[p] === txt[p].toLowerCase()) {\n      return true\n      }\n    p++\n    }\n  return false\n  }\n\nconst containsLettersOdd =(txt) => {\n  let p = 0\n  while (p < txt.length) {\n    if (isOdd(txt[p])) {\n      return true\n      }\n    p++\n    }\n  return false\n  }\n\nconst containsLettersEven =(txt) => {\n  let p = 0\n  while (p < txt.length) {\n    if (isEven(txt[p])) {\n      return true\n      }\n    p++\n    }\n  return false\n  }\n\nconst isEven =(num) => {\n  let p = 0\n  while (p < num) {\n    if (num[p] % 2 === 0) {\n      return false\n      }\n    p++\n    }\n  return true\n  }\n\nconst getWords =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v\n  }\n\nconst getWordsCount =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v.length\n  }\n\nconst getLineLength =(txt) => {\n  let v = txt.split( /\\n/ )\n  return v.length\n  }\n\nconst getLineCount =(txt) => {\n  let v = txt.split( /\\n/ )\n  return v.length\n  }\n\nconst getAllLetters =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v\n  }\n\nconst getAllLettersCount =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v.length\n  }\n\nconst getAllWords =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v\n  }\n\nconst getAllWordsCount =(txt) => {\n  let v = txt.split( /\\s/ )\n  return v.length\n  }\n\nconst getLines =(txt) => {\n  let v = txt.split( /\\n/ )\n  return v\n  }\n\nconst getLinesCount =(txt) => {\n  let v = txt.split( /\\n/ )\n  return"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const VAR_0 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 == e2)\n  ret.add(VAR_0);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const VAR_0 of l1)\n  for (const e2 of l2)\n \n  if (e2 in ret) {\n    ret.delete(e2);\n  }\n  else{\n    ret.add(e2);\n  }\n  return Array.from(ret);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let VAR_0 = 0; VAR_0 < n; VAR_0++)\n  if (VAR_0 % 11 == 0 || VAR_0 % 13 == 0)\n  ns.push(VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let VAR_0 = 0; VAR_0 < n; VAR_0++)\n  if (VAR_0 % 11 == 0 || VAR_0 % 13 == 0)\n  ns.push(VAR_0);\n \n  for (var VAR_1 = 0; VAR_1 < ns.length; VAR_1++)\n  ans += ns[VAR_1];\n \n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i != j) {\n    let a = numbers [ i ], VAR_0 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - VAR_0);\n      closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let new_distance = Math.abs(a - VAR_0);\n      if (new_distance < distance) {\n        distance = new_distance;\n        closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n        }\n      }\n    }\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i!= j) {\n    let a = numbers [ i ], VAR_0 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - VAR_0);\n      closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n      }\n    else {\n     \n      distance = Math.abs(a - VAR_0);\n      if (distance < distance) {\n        closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n      }\n    }\n  }\n  return closest_pair;\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = lst [ i ]\n    if (VAR_0 % 1 != 0) {\n      if (VAR_0 > 0) {\n        VAR_0 = VAR_0 - VAR_0 % 1 + 1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        VAR_0 = - VAR_0; VAR_0 = VAR_0 - VAR_0 % 1}\n      }\n    p+=VAR_0 * VAR_0\n    }\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = lst [ i ]\n    if (VAR_0 % 1!= 0) {\n      if (VAR_0 > 0) {\n        VAR_0 = VAR_0 - VAR_0 % 1 + 1}\n     \n      if (VAR_0 < 0) {\n        VAR_0 = VAR_0 + VAR_0 % 1 - 1}\n    }\n    p = p + Math.pow(VAR_0, 2)\n  }\n  return p\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Check if given number is in given array of numbers.\n  >>> hasElement(1, [1, 2, 3])\n  true\n  >>> hasElement(5, [1, 2, 3])\n  false\n  */\nconst hasElement = (VAR_0, element) => {\n  return VAR_0.includes(element);\n};\n\n/*\n  Count number of occurrences of given number in given array.\n  >>> count(3, [1, 2, 3])\n  2\n  >>> count(3, [3, 2, 3])\n  1\n  >>> count(3, [])\n  0\n  >>> count(3, [1])\n  1\n  */\nconst count = (VAR_0, element) => {\n  return VAR_0.filter(element => {\n    return element == element;\n  }).length;\n};\n\n/*\n  Return true if given array has no elements.\n  >>> isEmpty([])\n  true\n  >>> isEmpty([1])\n  false\n  >>> isEmpty([1, 2])\n  false\n  */\nconst isEmpty = (VAR_0) => {\n  return VAR_0.length === 0;\n};\n\n/*\n  Return true if given array has only one element.\n  >>> isSingle([1])\n  true\n  >>> isSingle([1, 2])\n  false\n  >>> isSingle([])\n  false\n  */\nconst isSingle = (VAR_0) => {\n  return VAR_0.length === 1;\n};\n\n/*\n  Given a number, return true if number is in between two given numbers.\n  >>> isBetween(3, 1, 4)\n  true\n  >>> isBetween(5, 1, 4)\n  false\n  >>> isBetween(3, 1, 3)\n  false\n  >>> isBetween(3, 1, 2)\n  false\n  >>> isBetween(3, 1, 1)\n  true\n  */\nconst isBetween = (VAR_0, min, max) => {\n  return VAR_0 >= min && VAR_0 <= max;\n};\n\n/*\n  Return true if given array is a palindrome.\n  >>> isPalindrome([1, 2, 3, 1])\n  true\n  >>> isPalindrome([1, 2, 1])\n  false\n  >>> isPalindrome([])\n  false\n  >>> isPalindrome([1])\n  true\n  */\nconst isPalindrome = (VAR_0) => {\n  let reversed = VAR_0.slice().reverse();\n  return VAR_0.every(element => element === reversed.pop());\n};\n\n/*\n  Given a number, return number's power of 2.\n  >>> power2(3)\n  9\n  >>> power2(0)\n  0\n  >>> power2(-2)\n  1\n  >>> power2(0.5)\n  2\n  >>> power2(1.5)\n  3\n  */\nconst power2 = (VAR_0) => {\n  return Math.pow(2, VAR_0);\n};\n\n/*\n  Given two numbers, return true if they are relatively prime.\n  >>> isRelativelyPrime(2, 3)\n  true\n  >>> isRelativelyPrime(3, 2)\n  true\n  >>> isRelativelyPrime(3, 5)\n  true\n  >>> isRelativelyPrime(2, 5)\n  false\n  >>> isRelativelyPrime(1, 1)\n  false\n  >>> isRelativelyPrime(2, 2)\n  true\n  */\nconst isRelativelyPrime = (VAR_0, VAR_1) => {\n  return Math.gcd(VAR_0, VAR_1) === 1;\n};\n\n/*\n  Given two numbers, return true if they are relatively prime.\n  >>> isRelativelyPrime(2, 3)\n  true\n  >>> isRelativelyPrime(3, 2)\n  true\n  >>> isRelativelyPrime(3, 5)\n  true\n  >>> isRelativelyPrime(2, 5)\n  false\n  >>> isRelativelyPrime(1, 1)\n  false\n  >>> isRelativelyPrime(2, 2)\n  true\n  */\nconst isRelativelyPrime = (VAR_0, VAR_1) => {\n  return Math.gcd(VAR_0, VAR_1) === 1;\n};\n\n/*\n  Given a number, return number's square root.\n  >>> squareRoot(1)\n  1\n  >>> squareRoot(4)\n  2\n  >>> squareRoot(9)\n  3\n  >>> squareRoot(16)\n  4\n  >>> squareRoot(0)\n  0\n  */\nconst squareRoot = (VAR_0) => {\n  return Math.sqrt(VAR_0);\n};\n\n/*\n  Given a number, return number's cube root.\n  >>> cubeRoot(1)\n  1\n  >>> cubeRoot(4)\n  2\n  >>> cubeRoot(9)\n  3\n  >>> cubeRoot(16)\n  4\n  >>> cubeRoot(0)\n  0\n  */\nconst cubeRoot = (VAR_0) => {\n  return Math.pow(VAR_0, 1 / 3);\n};\n\n/*\n  Given a number, return number's natural log.\n  >>> log(1)\n  0\n  >>> log(0)\n  NaN\n  >>> log(Infinity)\n  Infinity\n  >>> log(2)\n  0.693147180559945\n  >>> log(10)"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let VAR_0 = 2; VAR_0 < n; VAR_0++) {\n    let p = 1\n    for (let j = 2; j * j <= VAR_0; j++) {\n      if (VAR_0 % j == 0) {\n        p = 0; break}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (p == 1) {\n      t.push(VAR_0)}\n    }\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let VAR_0 = 2; VAR_0 < n; VAR_0++) {\n    let p = 1\n    for (let j = 2; j * j <= VAR_0; j++) {\n      if (VAR_0 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p) { t.push(VAR_0) }\n  }\n  return t\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(VAR_0) => {\n  var res = [ ], sw = true;\n  while (VAR_0.length) {\n    res.push(sw ? Math.min(... VAR_0) : Math.max(... VAR_0));\n    VAR_0.splice(VAR_0.indexOf(res.at( - 1)), 1);\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    sw = !sw;\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(VAR_0) => {\n  var res = [ ], sw = true;\n  while (VAR_0.length) {\n    res.push(sw? Math.min(... VAR_0) : Math.max(... VAR_0));\n    VAR_0.splice(VAR_0.indexOf(res.at( - 1)), 1);\n   \n    sw =!sw;\n  }\n  return res;\n};\n\nmodule.exports = strangeSortList;<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 &&(x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 &&(x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns true if the sum of the numbers is even, and one of the numbers is even.\n  Returns false in any other cases.\n  Examples\n  evenSum(3, 2) ➞ false\n  evenSum(6, 4) ➞ true\n  evenSum(3, 4) ➞ false\n  */\nconst evenSum = (x, VAR_0) => {\n  if (x % 2 === 0 && VAR_0 % 2 === 0 && x === VAR_0 + x) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  floatSum(3.5, 2) ➞ true\n  floatSum(3.5, 4) ➞ false\n  floatSum(6.2, 4) ➞ true\n  floatSum(6.2, 2) ➞ true\n  */\nconst floatSum = (x, VAR_0) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && (x + VAR_0) % 1 === 0 && (x + VAR_0) === (VAR_0 + x)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  floatSum(3.5, 2, 7) ➞ true\n  floatSum(3.5, 2, 2) ➞ false\n  floatSum(6.2, 4, 2) ➞ true\n  */\nconst floatSum2 = (x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0) % 1 === 0 && (x + VAR_0) === (z + VAR_0)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are even.\n  Returns false in any other cases.\n  Examples\n  evenSum(3, 2, 7) ➞ false\n  evenSum(3, 2, 2) ➞ true\n  evenSum(6, 4, 2) ➞ true\n  */\nconst evenSum2 = (x, VAR_0, z) => {\n  if (x % 2 === 0 && VAR_0 % 2 === 0 && z % 2 === 0 && (x + VAR_0) % 2 === 0 && (x + VAR_0) === (z + VAR_0)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  floatSum(3.5, 2, 7) ➞ true\n  floatSum(3.5, 2, 2) ➞ false\n  floatSum(6.2, 4, 2) ➞ true\n  */\nconst floatSum3 = (x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0) % 1 === 0 && (x + VAR_0) === (z + VAR_0)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(3, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(6, 4, 2) ➞ true\n  */\nconst anyInt2 =(x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 &&(x + VAR_0) % 1 === 0 && (x + VAR_0) === (z + VAR_0)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are even.\n  Returns false in any other cases.\n  Examples\n  evenSum(3, 2, 7) ➞ false\n  evenSum(3, 2, 2) ➞ true\n  evenSum(6, 4, 2) ➞ true\n  */\nconst evenSum3 = (x, VAR_0, z) => {\n  if (x % 2 === 0 && VAR_0 % 2 === 0 && z % 2 === 0 && (x + VAR_0) % 2 === 0 && (x + VAR_0) === (z + VAR_0)) {\n    return true\n   \n  }\n  return false\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(VAR_0 - 1) + fib(VAR_0 - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib(VAR_0 - 1) + fib(VAR_0 - 2);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(VAR_0, s1) => {\n  return JSON.stringify([ ... new Set(VAR_0) ].sort()) === JSON.stringify([ ... new Set(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(VAR_0, s1) => {\n  return JSON.stringify([... new Set(VAR_0) ].sort()) === JSON.stringify([... new Set(s1) ].sort());\n \n};\n\n/*\n  Calculate the number of newlines in the file.\n  >>> countNewlines('abcd')\n  1\n  >>> countNewlines('a\\nbc')\n  2\n  >>> countNewlines('a\\n\\nbc')\n  2\n  >>> countNewlines('abc')\n  0\n  >>> countNewlines('abc')\n  0\n  */\nconst countNewlines =(VAR_0) => {\n  const NEWLINES = /\\n/g;\n  const count = 0;\n  NEWLINES.lastIndex = 0;\n  while (NEWLINES.test(VAR_0)) {\n    count++;\n  }\n  return count;\n};\n\n\nconst checkArgs = (ARGS_0, FUNCTION_0) => {\n  const FUNCTION_0_1 = FUNCTION_0(ARGS_0);\n  return FUNCTION_0_1.length === 2? true : false;\n};\n\n/*\n  Check if a file exists.\n  >>> exists('/test.txt')\n  true\n  >>> exists('/test.txt', exists)\n  true\n  >>> exists('/test.txt', exists.bind(exists, false))\n  false\n  >>> exists('/test.txt', exists.bind(exists, false, /^[a-z]{3}$/))\n  false\n  >>> exists('/test.txt', exists.bind(exists, false, /^[a-z]{3}$/, 'abc'))\n  false\n  */\nconst exists =(VAR_0, VAR_1) => {\n  return fs.existsSync(VAR_0);\n};\n\n/*\n  Check if a file has a given extension.\n  >>> hasExt('/test.txt')\n  false\n  >>> hasExt('/test.txt', '.txt')\n  true\n  >>> hasExt('/test.txt', '.txt', '.json')\n  true\n  >>> hasExt('/test.txt', '.txt', '.json', '.txt')\n  false\n  >>> hasExt('/test.txt', '.txt', '.json', '.txt')\n  false\n  >>> hasExt('/test.txt', '.txt', '.json')\n  false\n  >>> hasExt('/test.txt', '.txt', '.json', /^[a-z]{3}$/)\n  false\n  >>> hasExt('/test.txt', '.txt', '.json', /^[a-z]{3}$/, 'abc')\n  false\n  */\nconst hasExt =(VAR_0, VAR_1, VAR_2 = []) => {\n  return fs.existsSync(VAR_0) && fs.statSync(VAR_0).isFile();\n};\n\n/*\n  Check if a file has a given content.\n  >>> hasContent('/test.txt', 'abcd')\n  false\n  >>> hasContent('/test.txt', 'abcd', 'abc')\n  true\n  >>> hasContent('/test.txt', 'abcd', 'abc', 'abce')\n  true\n  >>> hasContent('/test.txt', 'abcd', 'abc', 'abce', /^[a-z]{3}$/)\n  false\n  >>> hasContent('/test.txt', 'abcd', 'abc', 'abce', /^[a-z]{3}$/, 'abc')\n  true\n  */\nconst hasContent =(VAR_0, VAR_1, VAR_2 = []) => {\n  return fs.existsSync(VAR_0) && fs.statSync(VAR_0).isFile() && (VAR_1 === '*' || sameChars(VAR_1, fs.readFileSync(VAR_0, 'utf8')));\n};\n\n/*\n  Print a given string to the console.\n  >>> print('This is a test')\n  This is a test\n  */\nconst print =(VAR_0) => console.log(VAR_0);\n\n/*\n  Print a given number to the console.\n  >>> print(3)\n  3\n  */\nconst printNumber =(VAR_0) => console.log(VAR_0);\n\n/*\n  Print a given array to the console.\n  >>> print([1,2,3])\n  [1, 2, 3]\n  */\nconst printArray =(VAR_0) => console.log(VAR_0);\n\n/*\n  Print a given object to the console.\n  >>> print({a:'a',b:'b'})\n  {a: 'a', b: 'b'}\n  */\nconst printObject =(VAR_0) => console.log(VAR_0);\n\n/*\n  Print a given string and a given number to the console.\n  >>> print(3, 'This is a test')\n  3 This is a test\n  */\nconst printNumberString =(VAR_0, VAR_1) => console.log(VAR_0, VAR_1);\n\n/*\n  Print a given array and a given object to the console.\n  >>> print([1,2,3], {a:'a',b:'b'})\n  [1, 2, 3] {a: 'a', b: 'b'}\n  */\nconst printArrayObject =(VAR_0, VAR_1) => console.log(VAR_0, VAR_1);\n\n/*\n  Print a given string and a given number to the console.\n  >>> print(3, 'This is a test')\n  3 This is a test\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(VAR_0) => {\n  let s = - 1\n  let u = - 1\n  if (VAR_0.length == 0) {\n    return ''}\n  for (let i = 0; i < VAR_0.length; i++) {\n    let p = 0\n    for (let j = 0; j < VAR_0 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (VAR_0 [ i ] [ j ] == VAR_0 [ i ] [ k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        p++}\n      }\n    if (p > s ||(p == s && VAR_0 [ i ] < VAR_0 [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return VAR_0 [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(VAR_0) => {\n  let s = - 1\n  let u = - 1\n  if (VAR_0.length == 0) {\n    return ''}\n  for (let i = 0; i < VAR_0.length; i++) {\n    let p = 0\n    for (let j = 0; j < VAR_0 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (VAR_0 [ i ] [ j ] == VAR_0 [ i ] [ k ]) {\n          y = 0}\n       \n      }\n      if (y == 1) {\n        p++}\n    }\n    if (p > u) {\n      u = p\n      s = i}\n  }\n  return VAR_0 [ s ]}\n\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]))<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  var l2 = lst2.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  var l2 = lst2.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  if (l1 <= l2)\n \n  return lst1;\n  else\n    return lst2;\n};\n\n/*\n  Write a function that takes two lists of strings and returns the list that has\n  the largest length of common characters in the all strings of the list.\n\n  if the two lists have the same number of strings, return the first list.\n\n  Examples\n  maxCommon([], []) ➞ []\n  maxCommon(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  maxCommon(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  maxCommon(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  maxCommon(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst maxCommon =(lst1, lst2) => {\n  var result = {};\n  lst1.forEach((str, index) => {\n    lst2.forEach((str2, index2) => {\n      if (result[str2] === undefined)\n        result[str2] = 0;\n      if (str.length <= str2.length) {\n        if (str === str2) {\n          result[str2] = 1;\n          return;\n        }\n      }\n      if (str.length >= str2.length) {\n        if (str.substring(0, str2.length) === str2) {\n          result[str2] = result[str2] + 1;\n          return;\n        }\n      }\n    });\n  });\n  var max_key = Object.keys(result)[0];\n  return lst1.map((item, index) => {\n    if (max_key === item)\n      return index;\n  });\n};\n\n/*\n  Write a function that takes two lists of strings and returns the list that has\n  the smallest length of common characters in the all strings of the list.\n\n  if the two lists have the same number of strings, return the first list.\n\n  Examples\n  minCommon([], []) ➞ []\n  minCommon(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  minCommon(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  minCommon(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  minCommon(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst minCommon =(lst1, lst2) => {\n  var result = {};\n  lst1.forEach((str, index) => {\n    lst2.forEach((str2, index2) => {\n      if (result[str2] === undefined)\n        result[str2] = 0;\n      if (str.length <= str2.length) {\n        if (str === str2) {\n          result[str2] = 1;\n          return;\n        }\n      }\n      if (str.length >= str2.length) {\n        if (str.substring(0, str2.length) === str2) {\n          result[str2] = result[str2] + 1;\n          return;\n        }\n      }\n    });\n  });\n  var min_key = Object.keys(result)[0];\n  return lst1.map((item, index) => {\n    if (min_key === item)\n      return index;\n  });\n};\n\nmodule.exports = {\n  totalMatch,\n  maxCommon,\n  minCommon\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let VAR_0 = 0; VAR_0 < Math.floor(arr.length / 2); VAR_0++)\n  if (arr [ VAR_0 ] != arr.at( - VAR_0 - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let VAR_0 = 0; VAR_0 < Math.floor(arr.length / 2); VAR_0++)\n  if (arr [ VAR_0 ]!= arr.at( - VAR_0 - 1))\n \n      ans += 1;\n  return ans;\n}\n\n\n// TEST\n// console.log(smallestChange([1,2,3,5,4,7,9,6]));\n// console.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\n// console.log(smallestChange([1, 2, 3, 2, 1]));\n// console.log(smallestChange([3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var VAR_0 = [ 0, 1 ];\n  while (true) {\n    VAR_0.push(VAR_0.at( - 1) + VAR_0.at( - 2));\n    if (isPrime(VAR_0.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return VAR_0.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  if (n > 1) {\n    return (primeFib(n - 1) + primeFib(n - 2));\n    }\n  return 1;\n  };\n  \n  \n\nvar result = primeFib(12);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  for (let VAR_0 = 2; VAR_0 < n + 1; VAR_0++)\n  if (n % VAR_0 == 0 && isPrime(VAR_0))\n  largest = Math.max(largest, VAR_0);\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  let factorization = (n) => {\n    let factor = n;\n    let i = 2;\n    while (isPrime(i)) {\n      while (n % i == 0) {\n        factor = factor / i;\n        n = n / i;\n      }\n      i++;\n    }\n    return factor;\n  };\n  while (n!= 1) {\n    if (n == 1)\n      break;\n    if (isPrime(n))\n      return n;\n    factorization(n);\n  }\n  return 1;\n};\n\nconsole.log(largestPrimeFactor(2048));<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2 == 0)\n \n}\n\nconst isEqualToSumEven2 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0)\n}\n\nconst isEqualToSumEven3 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2 == 0 && VAR_0 % 4 == 0)\n}\n\nconst isEqualToSumEven4 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4 == 0)\n}\n\nconst isEqualToSumEven5 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0)\n}\n\nconst isEqualToSumEven6 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4 == 0 && VAR_0 % 8 == 0)\n}\n\nconst isEqualToSumEven7 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8 == 0)\n}\n\nconst isEqualToSumEven8 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0)\n}\n\nconst isEqualToSumEven9 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16 == 0)\n}\n\nconst isEqualToSumEven10 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0)\n}\n\nconst isEqualToSumEven11 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32 == 0)\n}\n\nconst isEqualToSumEven12 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0)\n}\n\nconst isEqualToSumEven13 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64 == 0)\n}\n\nconst isEqualToSumEven14 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0)\n}\n\nconst isEqualToSumEven15 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0 && VAR_0 % 128 == 0)\n}\n\nconst isEqualToSumEven16 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0 && VAR_0 % 128!= 0)\n}\n\nconst isEqualToSumEven17 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0 && VAR_0 % 128!= 0 && VAR_0 % 256 == 0)\n}\n\nconst isEqualToSumEven18 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0 && VAR_0 % 128!= 0 && VAR_0 % 256!= 0)\n}\n\nconst isEqualToSumEven19 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0 && VAR_0 % 128!= 0 && VAR_0 % 256!= 0 && VAR_0 % 512 == 0)\n}\n\nconst isEqualToSumEven20 =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2!= 0 && VAR_0 % 4!= 0 && VAR_0 % 8!= 0 && VAR_0 % 16!= 0 && VAR_0 % 32!= 0 && VAR_0 % 64!= 0 && VAR_0"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    p+=VAR_0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    f *= VAR_0;\n    if (VAR_0 % 2 == 0) {\n      k.push(f)}\n    else {\n      k.push(p)}\n    }\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    p+=VAR_0;\n   \n    let i = p\n    while (i > 0) {\n      k.push(f)\n      f = f*i\n      i--\n    }\n  }\n  return k\n}\n\n// f(5)\n// 1, 2, 6, 24, 15\nconsole.log(f(5))<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var VAR_0 = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => VAR_0(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var VAR_0 = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n    return '1';\n  };\n  var VAR_1 = function(i, j) {\n    if (i < j)\n    return VAR_0(i, j);\n    else\n    return VAR_0(i, j) + VAR_0(i+1, j);\n  };\n  var result = VAR_1(0, a.length - 1) + VAR_1(0, b.length - 1);\n  return result;\n};\n\nconsole.log(stringXor('010', '110'));<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return VAR_0.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n \n  var new_array = [];\n  for (var i = 0; i < VAR_0.length; i++) {\n    new_array[i] = (VAR_0[i] - min_number) / (max_number - min_number);\n  }\n  return new_array;\n}\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0, 4.25]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0, 4.25, 4.5]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0, 4.25, 4.5, 4.75]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6,"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let VAR_0 = file_name.split( / . /)\n  if (VAR_0.length != 2) {\n    return 'No'}\n  if (VAR_0 [ 1 ] != 'txt' && VAR_0 [ 1 ] != 'dll' && VAR_0 [ 1 ] != 'exe') {\n    return 'No'}\n  if (VAR_0 [ 0 ] == '') {\n    return 'No'}\n  let a = VAR_0 [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < VAR_0 [ 0 ].length; i++) {\n    if (VAR_0 [ 0 ] [ i ].charCodeAt() >= 48 && VAR_0 [ 0 ] [ i ].charCodeAt() <= 57) {\n      y++}\n    if (y > 3) {\n      return 'No'}\n    }\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let VAR_0 = file_name.split( /. /)\n  if (VAR_0.length!= 2) {\n    return 'No'}\n  if (VAR_0 [ 1 ]!= 'txt' && VAR_0 [ 1 ]!= 'dll' && VAR_0 [ 1 ]!= 'exe') {\n    return 'No'}\n  if (VAR_0 [ 0 ] == '') {\n    return 'No'}\n  let a = VAR_0 [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  let b = VAR_0 [ 1 ][ 0 ].charCodeAt()\n  if (!( b >= 48 && b <= 57 )) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst validFileName =(file_name) => {\n  let valid = fileNameCheck(file_name)\n  if (valid == 'Yes') {\n    let file_ext = file_name.split('.')\n    let ext = file_ext[1]\n    if (ext == 'txt') {\n      return 1\n    }\n    if (ext == 'dll') {\n      return 2\n    }\n    if (ext == 'exe') {\n      return 3\n    }\n  }\n  return 0\n}\n\nconst isValidFileName =(file_name) => {\n  let valid = fileNameCheck(file_name)\n  if (valid == 'Yes') {\n    return 1\n  }\n  if (valid == 'No') {\n    return 0\n  }\n  \n}\n\nconst fileExists =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return 1\n  }\n  if (ext == 'dll') {\n    return 2\n  }\n  if (ext == 'exe') {\n    return 3\n  }\n}\n\nconst isFile =(file_name) => {\n  let valid = fileNameCheck(file_name)\n  if (valid == 'Yes') {\n    return 1\n  }\n  if (valid == 'No') {\n    return 0\n  }\n  return 0\n}\n\nconst getFileName =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return file_name\n  }\n  if (ext == 'dll') {\n    return file_name\n  }\n  if (ext == 'exe') {\n    return file_name\n  }\n  return ''\n}\n\nconst getFilePath =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return ''\n  }\n  if (ext == 'dll') {\n    return ''\n  }\n  if (ext == 'exe') {\n    return ''\n  }\n  return ''\n}\n\nconst getFileSize =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return ''\n  }\n  if (ext == 'dll') {\n    return ''\n  }\n  if (ext == 'exe') {\n    return ''\n  }\n  return ''\n}\n\nconst fileNameCompare =(file_name1, file_name2) => {\n  let file_ext1 = file_name1.split('.')\n  let file_ext2 = file_name2.split('.')\n  let file_name1 = file_ext1[0]\n  let file_name2 = file_ext2[0]\n  if (file_name1 == file_name2) {\n    return 1\n  }\n  return 0\n}\n\nconst getFileType =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return 1\n  }\n  if (ext == 'dll') {\n    return 2\n  }\n  if (ext == 'exe') {\n    return 3\n  }\n  return 0\n}\n\nconst fileNameExists =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return 1\n  }\n  if (ext == 'dll') {\n    return 2\n  }\n  if (ext == 'exe') {\n    return 3\n  }\n  return 0\n}\n\nconst getFileTypeExists =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  if (ext == 'txt') {\n    return 1\n  }\n  if (ext == 'dll') {\n    return 2\n  }\n  if (ext == 'exe') {\n    return 3\n  }\n  return 0\n}\n\nconst getFileNameExists =(file_name) => {\n  let file_ext = file_name.split('.')\n  let ext = file_ext[1]\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(VAR_0 > 64 && VAR_0 < 91 ? VAR_0 : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n           \n            if (VAR_0 > 57) {\n              return prev + VAR_0 - 55;\n            }\n            else {\n              return prev + VAR_0;\n            }\n          }, 0);\n}\n\n/*\n  Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 7\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 3\n      digitSum(\"aAaaaXa\") => 3\n  */\nconst digitSumL =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 < 97) {\n              return prev + VAR_0;\n            }\n            else {\n              return prev + VAR_0 - 55;\n            }\n          }, 0);\n}\n\n/*\n  Task\n  Write a function that takes a string as input and returns the difference of the upper and lower\n  ASCII codes.\n\n  Examples:\n      digitDiff(\"\") => 0\n      digitDiff(\"abAB\") => 0\n      digitDiff(\"abcCd\") => 2\n      digitDiff(\"helloE\") => 2\n      digitDiff(\"woArBld\") => 1\n      digitDiff(\"aAaaaXa\") => 4\n*/\nconst digitDiff =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 > 57) {\n              return prev + VAR_0 - 55;\n            }\n            else {\n              return prev + VAR_0;\n            }\n          }, 0) -\n          s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 < 97) {\n              return prev + VAR_0;\n            }\n            else {\n              return prev + VAR_0 - 55;\n            }\n          }, 0);\n}\n\n/*\n  Task\n  Write a function that takes a string as input and returns the difference of the upper and lower\n  ASCII codes.\n\n  Examples:\n      digitDiff(\"\") => 0\n      digitDiff(\"abAB\") => 0\n      digitDiff(\"abcCd\") => 2\n      digitDiff(\"helloE\") => 2\n      digitDiff(\"woArBld\") => 1\n      digitDiff(\"aAaaaXa\") => 4\n*/\nconst digitDiffL =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 < 97) {\n              return prev + VAR_0;\n            }\n            else {\n              return prev + VAR_0 - 55;\n            }\n          }, 0) -\n          s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 > 57) {\n              return prev + VAR_0 - 55;\n            }\n            else {\n              return prev + VAR_0;\n            }\n          }, 0);\n}\n\n/*\n  Task\n  Write a function that takes a string as input and returns the total sum of the upper and lower\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 4\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 6\n*/\nconst digitSumUL =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 > 57) {\n              return prev + VAR_0 - 55;\n            }\n            else {\n              return prev + VAR_0;\n            }\n          }, 0) +\n          s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 < 97) {\n              return prev + VAR_0;\n            }\n            else {\n              return prev + VAR_0 - 55;\n            }\n          }, 0);\n}\n\n/*\n  Task\n  Write a function that takes a string as input and returns the total sum of the upper and lower\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 2\n      digitSum(\"helloE\") => 4\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 6\n*/\nconst digitSumLL =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n            if (VAR_0 < 97) {\n              return prev + VAR_0;\n            }\n            else {\n              return prev + VAR_0 - 55;\n            }\n          }, 0) +\n          s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n// Returns an array of strings of the same length as input list\nconst filterBySubstringArray =(VAR_0, substring) => {\n  const substrings = filterBySubstring(VAR_0, substring);\n  const len = substrings.length;\n  const filtered = [];\n  for (let i = 0; i < len; i++) {\n    filtered.push(substrings[i]);\n  }\n  return filtered;\n}\n\nconst stringSubstr = (string, substr) => {\n  return string.substr(string.indexOf(substr) + substr.length);\n}\n\nconst removeSubstr = (string, substr) => {\n  return string.substr(0, string.indexOf(substr));\n}\n\n// Remove all occurrences of a substring from a string\nconst removeSubstrings = (string, substring) => {\n  const substrings = filterBySubstring(string, substring);\n  return substrings.join('');\n}\n\nconst hasSubstring = (string, substr) => {\n  return string.indexOf(substr)!= - 1;\n}\n\n// Counts how many times a substring is in a string\nconst countSubstrings = (string, substr) => {\n  const substrings = filterBySubstring(string, substr);\n  return substrings.length;\n}\n\nconst joinStrings = (VAR_0, separator) => {\n  const len = VAR_0.length;\n  const joined = [];\n  for (let i = 0; i < len; i++) {\n    joined.push(VAR_0[i]);\n  }\n  return joined.join(separator);\n}\n\nconst splitStrings = (string, separator) => {\n  const len = string.length;\n  const strings = [];\n  for (let i = 0; i < len; i++) {\n    strings.push(string.substring(i, i + 1));\n  }\n  return strings;\n}\n\n// Filter out an array of strings where any of them contain any of the given substrings\n// Returns an array of strings of the same length as input array\nconst filterBySubstrings = (VAR_0, substring) => {\n  const substrings = filterBySubstring(VAR_0, substring);\n  const len = substrings.length;\n  const filtered = [];\n  for (let i = 0; i < len; i++) {\n    filtered.push(substrings[i]);\n  }\n  return filtered;\n}\n\n// Filter out an array of strings where any of them contain any of the given substrings\n// Returns an array of strings of the same length as input array\nconst filterBySubstringsArray = (VAR_0, substring) => {\n  const substrings = filterBySubstring(VAR_0, substring);\n  const len = substrings.length;\n  const filtered = [];\n  for (let i = 0; i < len; i++) {\n    filtered.push(substrings[i]);\n  }\n  return filtered;\n}\n\n// Filter out an array of strings where any of them contain any of the given substrings\n// Returns an array of strings of the same length as input array\nconst filterBySubstringsArrayArray = (VAR_0, substring) => {\n  const substrings = filterBySubstring(VAR_0, substring);\n  const len = substrings.length;\n  const filtered = [];\n  for (let i = 0; i < len; i++) {\n    filtered.push(substrings[i]);\n  }\n  return filtered;\n}\n\n// Returns an array of the first element of each array in input\nconst flatten = (VAR_0) => {\n  const len = VAR_0.length;\n  const flattened = [];\n  for (let i = 0; i < len; i++) {\n    flattened.push(VAR_0[i]);\n  }\n  return flattened;\n}\n\n// Returns an array of the last element of each array in input\nconst flattenReverse = (VAR_0) => {\n  const len = VAR_0.length;\n  const flattened = [];\n  for (let i = 0; i < len; i++) {\n    flattened.push(VAR_0[len - i - 1]);\n  }\n  return flattened;\n}\n\n// Returns an array of the elements from the first to the last of each array in input\nconst flattenInPlace = (VAR_0) => {\n  const len = VAR_0.length;\n  for (let i = 0; i < len; i++) {\n    VAR_0[i] = VAR_0[i].slice();\n  }\n  return VAR_0;\n}\n\n// Return an array of the elements from the last to the first of each array in input\nconst flattenInPlaceReverse = (VAR_0) => {\n  const len = VAR_0.length;\n  for (let i = 0; i < len; i++) {\n    VAR_0[i] = VAR_0[len - i - 1].slice();\n  }\n  return VAR_0;\n}\n\n// Return an array of the first element of each array in input\nconst unflatten = (VAR_0) => {\n  const len = VAR_0.length;\n  const unflattened = [];\n  for (let i = 0; i < len; i++) {\n    unflattened.push(VAR_0[i].join(''));\n  }\n  return unflattened;\n}\n\n// Return an array of the last element of each array in input\nconst unflattenReverse = (VAR_0) => {\n  const len = VAR_0.length;\n  const unflattened = [];\n  for (let i = 0; i < len; i++) {\n    unflattened.push(V"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var VAR_0 = arr.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0.length == 0) return [ ];\n  return [ Math.min(... VAR_0), arr.indexOf(Math.min(... VAR_0)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var VAR_0 = arr.filter(x => x % 2 == 0);\n \n  if (VAR_0.length == 1) return [VAR_0[0], arr.indexOf(VAR_0[0])];\n  var VAR_1 = VAR_0.map(x => x - 1);\n  var VAR_2 = VAR_1.sort((a, b) => a - b);\n  return [VAR_2[0], VAR_1.indexOf(VAR_2[0])];\n};\n\n/*\n  \"Given an array that contains non-negative integers, your task is to find the largest sum of contiguous subarray.\n  If there is more than one answer, return the largest one.\n\n  Example 1:\n      Input: [1,2,3,4,5,6,7]\n      Output: 14\n      Explanation: The largest sum of contiguous subarray is 2 + 3 + 5 + 6 = 14\n\n  Example 2:\n      Input: [1,2,3,4,5]\n      Output: 10\n      Explanation: The largest sum of contiguous subarray is 1 + 2 + 3 + 4 = 10\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,8,9]\n      Output: 36\n      Explanation: The largest sum of contiguous subarray is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 36\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= nodes[i] < 10000\n  */\nconst largestSumOfContiguousSubarray = (arr) => {\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    while (i + 1 < arr.length && arr[i] + arr[i + 1] == sum) {\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  \"Given an array that contains positive integers, find the largest number that can be formed by concatenating the elements of the array.\n\n  Example 1:\n      Input: [1,2,3]\n      Output: 9\n      Explanation: The largest number that can be formed is 1 + 2 + 3 = 9\n\n  Example 2:\n      Input: [1,2,3,4]\n      Output: 16\n      Explanation: The largest number that can be formed is 1 + 2 + 3 + 4 = 16\n\n  Example 3:\n      Input: [1,2,3,4,5]\n      Output: 25\n      Explanation: The largest number that can be formed is 1 + 2 + 3 + 4 + 5 = 25\n\n  Example 4:\n      Input: [1,2,3,4,5,6,7,8,9]\n      Output: 81\n      Explanation: The largest number that can be formed is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 81\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * nodes[i] < 10000\n  */\nconst largestNumber = (arr) => {\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  \"Given an array of non-negative integers, your task is to calculate the largest product of\n  all the numbers in the array.\n\n  Example 1:\n      Input: [2,3,4]\n      Output: 24\n      Explanation: The largest product is 2 * 3 * 4 = 24\n\n  Example 2:\n      Input: [1,2,3,4,5]\n      Output: 120\n      Explanation: The largest product is 1 * 2 * 3 * 4 * 5 = 120\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,8,9]\n      Output: 1890\n      Explanation: The largest product is 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 = 1890\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * nodes[i] < 10000\n  */\nconst largestProduct = (arr) => {\n  var product = 1;\n  for (var i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*\n  \"Given an array of non-negative integers, your task is to find the largest product of contiguous subarray.\n  If there is more than one answer, return the largest one.\n\n  Example 1:\n      Input: [2,3,4]\n      Output: 6\n      Explanation: The largest product of contiguous subarray is 2 * 3 * 4 = 6\n\n  Example 2:\n      Input: [1,2,3,4,5]\n      Output: 120\n      Explanation: The largest product of contiguous subarray is 1 * 2 * 3 * 4 * 5 = 120\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,8,9]"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let VAR_0 = operator.length - 1; VAR_0 >= 0; VAR_0--) {\n      if (operator [ VAR_0 ] == '**') {\n        let u = operand [ VAR_0 ]\n        while (operand [ VAR_0 + 1 ] > 1) {\n          operand [ VAR_0 + 1 ]--;\n          operand [ VAR_0 ] *= u;\n          }\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let VAR_0 = 0; VAR_0 < operator.length; VAR_0++) {\n      if (operator [ VAR_0 ] == '*') {\n        operand [ VAR_0 ] *= operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '//') {\n        operand [ VAR_0 ] =(operand [ VAR_0 ] - operand [ VAR_0 ] % operand [ VAR_0 + 1 ]) / operand [ VAR_0 + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let VAR_0 = 0; VAR_0 < operator.length; VAR_0++) {\n      if (operator [ VAR_0 ] == '+') {\n        operand [ VAR_0 ]+=operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '-') {\n        operand [ VAR_0 ]-=operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let VAR_0 = operator.length - 1; VAR_0 >= 0; VAR_0--) {\n      if (operator [ VAR_0 ] == '**') {\n        let u = operand [ VAR_0 ]\n        while (operand [ VAR_0 + 1 ] > 1) {\n          operand [ VAR_0 + 1 ]--;\n          operand [ VAR_0 ] *= u;\n          }\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let VAR_0 = 0; VAR_0 < operator.length; VAR_0++) {\n      if (operator [ VAR_0 ] == '*') {\n        operand [ VAR_0 ] *= operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '//') {\n        operand [ VAR_0 ] =(operand [ VAR_0 ] - operand [ VAR_0 ] % operand [ VAR_0 + 1 ]) / operand [ VAR_0 + 1 ]\n       \n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break\n        }\n      else\nif (operator [ VAR_0 ] == '+') {\n        operand [ VAR_0 ] += operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '-') {\n        operand [ VAR_0 ] -= operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    }\n  return operand\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, VAR_0) => {\n  if (need <= VAR_0) {\n    return [ need + number, VAR_0 - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ VAR_0 + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, VAR_0) => {\n  if (need <= VAR_0) {\n    return [ need + number, VAR_0 - need ]\n   \n  } else {\n    return [ VAR_0, number - VAR_0 ]\n  }\n}\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let VAR_0 = n\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return y}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 % i == 0) {\n      return y}\n    }\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let VAR_0 = n\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return y}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n    if (VAR_0 % i === 0) {\n      return x\n    }\n  }\n  return y\n}\n\nconsole.log(xOrY(15, 8, 5))<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let VAR_0 = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > VAR_0) {\n      VAR_0 = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (VAR_0 != 0) {\n    k+=VAR_0 % 10\n    VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let VAR_0 = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > VAR_0) {\n      VAR_0 = lst [ i ]}\n   \n  }\n  return VAR_0}\n\nconst test_lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n\nconsole.log(skjkasdkd(test_lst))<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  for (let j = 0; j < VAR_0.length; j++) {\n    t.push(l [ VAR_0 [ j ] - 1 ])\n    }\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let temp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = temp\n      }\n    }\n  return VAR_0.reverse().map( (x) => { return x.toString()})\n}\n\nconst byReverse = (arr) => {\n  let reversed = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    reversed.push(arr [ i ])}\n  return reversed.reverse().map( (x) => { return x.toString()})\n}\n\nconst byArray = (arr) => {\n  let reversed = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    reversed.push(arr [ i ])}\n  return reversed.sort().reverse().map( (x) => { return x.toString()})\n}\n\nconst sort = (arr) => {\n  let sorted = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    sorted.push(arr [ i ])}\n  return sorted.sort().reverse().map( (x) => { return x.toString()})\n}\n\nconst main = () => {\n  let arr = [2, 1, 1, 4, 5, 8, 2, 3]\n  let reversed = byReverse (arr)\n  let sorted = sort (reversed)\n  let sortedByLength = byLength (sorted)\n  let sortedByArray = byArray (sorted)\n  console.log(sortedByLength)\n  console.log(sortedByArray)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    VAR_0+=t}\n  return VAR_0\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  return Math.round(VAR_0)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  return Math.round(VAR_0)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  return Math.round(VAR_0)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  return Math.round(VAR_0)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  return Math.round(VAR_0)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  return Math.round(VAR_0)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closest"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, VAR_0) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(VAR_0)\n  if (typeof VAR_0 == 'string') {\n    bb = Number(VAR_0.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return VAR_0}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, VAR_0) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(VAR_0)\n  if (typeof VAR_0 =='string') {\n    bb = Number(VAR_0.replace(',', '.'))}\n \n  if (aa > bb) {\n    return aa\n  }\n  if (aa < bb) {\n    return bb\n  }\n  return null\n}\n\n/*\n  Create a function that takes two arrays of numbers and returns the smaller array.\n  Return null if they are equal.\n  */\nconst compareTwo =(a, VAR_0) => {\n  let aa = a\n  if (aa.length > VAR_0.length) {\n    aa = a.slice(0, VAR_0.length)\n  }\n  if (aa.length < VAR_0.length) {\n    VAR_0 = a.slice(0, aa.length)\n  }\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (aa[i] > VAR_0[i]) {\n      return aa\n    }\n    if (aa[i] < VAR_0[i]) {\n      return VAR_0\n    }\n  }\n  return null\n}\n\n/*\n  Create a function that takes two arrays of numbers and returns the larger array.\n  Return null if they are equal.\n  */\nconst compareThree =(a, VAR_0, VAR_1) => {\n  let aa = a\n  if (aa.length > VAR_0.length) {\n    aa = a.slice(0, VAR_0.length)\n  }\n  if (aa.length > VAR_1.length) {\n    VAR_1 = a.slice(0, aa.length)\n  }\n  if (aa.length < VAR_0.length) {\n    VAR_0 = a.slice(0, aa.length)\n  }\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (aa[i] > VAR_0[i]) {\n      return aa\n    }\n    if (aa[i] < VAR_0[i]) {\n      return VAR_0\n    }\n  }\n  for (let i = 0; i < VAR_1.length; i++) {\n    if (aa[i] > VAR_1[i]) {\n      return VAR_1\n    }\n    if (aa[i] < VAR_1[i]) {\n      return aa\n    }\n  }\n  return null\n}\n\n/*\n  Create a function that takes two arrays of numbers and returns the larger array.\n  Return null if they are equal.\n  */\nconst compareFour =(a, VAR_0, VAR_1, VAR_2) => {\n  let aa = a\n  if (aa.length > VAR_0.length) {\n    aa = a.slice(0, VAR_0.length)\n  }\n  if (aa.length > VAR_1.length) {\n    VAR_1 = a.slice(0, aa.length)\n  }\n  if (aa.length > VAR_2.length) {\n    VAR_2 = a.slice(0, aa.length)\n  }\n  if (aa.length < VAR_0.length) {\n    VAR_0 = a.slice(0, aa.length)\n  }\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (aa[i] > VAR_0[i]) {\n      return aa\n    }\n    if (aa[i] < VAR_0[i]) {\n      return VAR_0\n    }\n  }\n  for (let i = 0; i < VAR_1.length; i++) {\n    if (aa[i] > VAR_1[i]) {\n      return VAR_1\n    }\n    if (aa[i] < VAR_1[i]) {\n      return aa\n    }\n  }\n  for (let i = 0; i < VAR_2.length; i++) {\n    if (aa[i] > VAR_2[i]) {\n      return VAR_2\n    }\n    if (aa[i] < VAR_2[i]) {\n      return aa\n    }\n  }\n  return null\n}\n\n/*\n  Create a function that takes two arrays of numbers and returns the larger array.\n  Return null if they are equal.\n  */\nconst compareFive =(a, VAR_0, VAR_1, VAR_2, VAR_3) => {\n  let aa = a\n  if (aa.length > VAR_0.length) {\n    aa = a.slice(0, VAR_0.length)\n  }\n  if (aa.length > VAR_1.length) {\n    VAR_1 = a.slice(0, aa.length)\n  }\n  if (aa.length > VAR_2.length) {\n    VAR_2 = a.slice(0, aa.length)\n  }\n  if (aa.length > VAR_3.length) {\n    VAR_3 = a.slice(0, aa.length)\n  }\n  if (aa.length < VAR_0.length) {\n    VAR_0 = a.slice(0, aa.length)\n  }\n  for (let i = 0; i < VAR_0.length; i++)"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(VAR_0, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = VAR_0.length * VAR_0.length\n  if (m > 0 && VAR_0 [ m - 1 ] [ n ] < min) {\n    min = VAR_0 [ m - 1 ] [ n ]}\n  if (n > 0 && VAR_0 [ m ] [ n - 1 ] < min) {\n    min = VAR_0 [ m ] [ n - 1 ]}\n  if (m < VAR_0.length - 1 && VAR_0 [ m + 1 ] [ n ] < min) {\n    min = VAR_0 [ m + 1 ] [ n ]}\n  if (n < VAR_0.length - 1 && VAR_0 [ m ] [ n + 1 ] < min) {\n    min = VAR_0 [ m ] [ n + 1 ]}\n  let p = [ ]\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) {\n      p.push(1)}\n    else {\n      p.push(min)}\n    }\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(VAR_0, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  if (m == 0) {\n    return []\n  }\n  \n  let res = []\n  res.push(VAR_0 [ m ][ n ])\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= m && j!= n && VAR_0 [ i ] [ j ] == 1) {\n        if (res.indexOf(VAR_0 [ i ][ j ]) === -1) {\n          res.push(VAR_0 [ i ][ j ])\n        }\n      }\n    }\n  }\n\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VAR_0(a [ 0 ]) * VAR_0(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = VAR_0(a [ 1 ]) * VAR_0(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VAR_0(a [ 0 ]) * VAR_0(b [ 0 ])\n \n  if (m === 1) return true\n  \n  for (let i = 1; i < a.length; i++) {\n    let aa = VAR_0(a [ i ])\n    let bb = VAR_0(b [ i ])\n    if (aa + bb === m) {\n      m = aa + bb\n      return true\n    }\n  }\n  \n  return false\n}\n\nconst VAR_0 = (n) => {\n  return n.slice(0, n.indexOf( / / / ))\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 1) {\n      p+=lst [ VAR_0 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 1) {\n      p+=lst [ VAR_0 ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(VAR_0) => {\n  let t = 0\n  if (VAR_0 [ 0 ] == 'I' && VAR_0 [ 1 ] == ' ') {\n    t = 1}\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] == '.' || VAR_0 [ i ] == '!' || VAR_0 [ i ] == '?') {\n      if (VAR_0 [ i + 1 ] == ' ' && VAR_0 [ i + 2 ] == 'I' && VAR_0 [ i + 3 ] == ' ') {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t++\n        }\n      }\n    }\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(VAR_0) => {\n  let t = 0\n  if (VAR_0 [ 0 ] == 'I' && VAR_0 [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] == '.' || VAR_0 [ i ] == '!' || VAR_0 [ i ] == '?') {\n      if (VAR_0 [ i + 1 ] =='' && VAR_0 [ i + 2 ] == 'I' && VAR_0 [ i + 3 ] =='') {\n       \n      }\n    }\n  }\n  return t\n}\n\nconst isBored2 =(VAR_0) => {\n  let t = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] == 'I') {\n      t = 1}\n  }\n  return t\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(VAR_0 => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(VAR_0.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(VAR_0 =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(VAR_0.toLowerCase())\n \n  ).join(\"\");\n};\n\nexport default removeVowels;<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(VAR_0) => {\n  return [ ... Array(VAR_0).keys(), VAR_0 ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(VAR_0) => {\n  return [... Array(VAR_0).keys(), VAR_0 ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from n upto n^2 inclusive.\n  >>> stringSequence(6)\n  '6 7 8 9 10 11 12 13 14 15 16'\n  */\nconst stringSequence_2 =(VAR_0) => {\n  return [... Array(VAR_0).keys(),... Array(VAR_0 * VAR_0 - VAR_0).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from n^2 upto n^3 inclusive.\n  >>> stringSequence_3(6)\n  '16 17 18 19 20 21 22 23 24 25 26'\n  */\nconst stringSequence_3 =(VAR_0) => {\n  return [... Array(VAR_0 * VAR_0).keys(),... Array(VAR_0 * VAR_0 * VAR_0 - VAR_0).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from n^3 upto 2^n inclusive.\n  >>> stringSequence_4(8)\n  '512 1024 2048 4096 8192 16384 32768 65536 1048576'\n  */\nconst stringSequence_4 =(VAR_0) => {\n  return [... Array(VAR_0 * VAR_0 * VAR_0).keys(),... Array(Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n upto 2^n^2 inclusive.\n  >>> stringSequence_5(9)\n  '2592 4096 8192 16384 32768 65536 1048576 2097152'\n  */\nconst stringSequence_5 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^2 upto 2^n^3 inclusive.\n  >>> stringSequence_6(10)\n  '524288 65536 1048576 2097152 4194304 8388608 16777216 33554432 67108864'\n  */\nconst stringSequence_6 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^3 upto 2^n^4 inclusive.\n  >>> stringSequence_7(11)\n  '8388608 16777216 33554432 67108864 134217728 268435456'\n  */\nconst stringSequence_7 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^4 upto 2^n^5 inclusive.\n  >>> stringSequence_8(12)\n  '134217728 268435456 67108864 134217728 536870912'\n  */\nconst stringSequence_8 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^5 upto 2^n^6 inclusive.\n  >>> stringSequence_9(13)\n  '134217728 536870912 67108864 134217728 1073741824'\n  */\nconst stringSequence_9 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^6 upto 2^n^7 inclusive.\n  >>> stringSequence_10(14)\n  '134217728 1073741824 134217728 2147483647'\n  */\nconst stringSequence_10 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^7 upto 2^n^8 inclusive.\n  >>> stringSequence_11(15)\n  '134217728 2147483647'\n  */\nconst stringSequence_11 =(VAR_0) => {\n  return [... Array(Math.pow(2, VAR_0) - 1).keys(),... Array(Math.pow(2, VAR_0) * Math.pow(2, VAR_0) - 1).keys() ].join(' ')\n \n}\n\n/*\n  Return a string containing space-delimited numbers starting from 2^n^8 upto 2^"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, VAR_0) => {\n  while (VAR_0 != 0) {\n    let temp = a;\n    a = VAR_0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = temp % VAR_0;\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, VAR_0) => {\n  while (VAR_0!= 0) {\n    let temp = a;\n    a = VAR_0;\n   \n    VAR_0 = temp % VAR_0;\n  }\n  return a;\n};\n\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV1 =(a, b) => {\n  while (b!= 0) {\n    let temp = a;\n    a = b;\n    \n    b = temp % b;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV2 =(a, b) => {\n  let temp = 1;\n  \n  while (a!= 0) {\n    while (b!= 0) {\n      temp = a;\n      a = b;\n      \n      b = temp % b;\n    }\n    a = temp % a;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV3 =(a, b) => {\n  let gcd = 1;\n  \n  while (b!= 0) {\n    gcd = a;\n    a = b;\n    \n    b = a % b;\n  }\n  return gcd;\n};\n\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV4 =(a, b) => {\n  let gcd = 1;\n  \n  while (b!= 0) {\n    gcd = b;\n    a = a % b;\n    \n    b = b % a;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV5 =(a, b) => {\n  let gcd = 1;\n  \n  if (a > b) {\n    gcd = b;\n  } else {\n    gcd = a;\n  }\n  \n  while (b!= 0) {\n    gcd = gcd % b;\n    a = a % b;\n    \n    b = b % a;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV6 =(a, b) => {\n  let gcd = 1;\n  \n  if (a > b) {\n    gcd = b;\n  } else {\n    gcd = a;\n  }\n  \n  while (b!= 0) {\n    gcd = gcd % b;\n    b = b % a;\n    \n    a = a % b;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV7 =(a, b) => {\n  let gcd = 1;\n  \n  if (a > b) {\n    gcd = b;\n  } else {\n    gcd = a;\n  }\n  \n  while (b!= 0) {\n    gcd = gcd % b;\n    a = a % b;\n    \n    b = b % a;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV8 =(a, b) => {\n  let gcd = 1;\n  \n  while (b!= 0) {\n    gcd = b;\n    a = a % b;\n    \n    b = b % a;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV9 =(a, b) => {\n  let gcd = 1;\n  \n  while (b!= 0) {\n    gcd = gcd % b;\n    b = b % a;\n    \n    a = a % b;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisorV10 =(a, b) => {\n  let gcd = 1;\n  \n  if (a > b) {\n    gcd = b;\n  } else {\n    gcd = a;\n  }\n  \n  while (b!= 0) {\n    gcd = gcd % b;\n    b = b % a;\n    \n    a = a % b;\n  }\n  return gcd;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDiv"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < grid.length; VAR_0++) {\n    let m = 0\n    for (let j = 0; j < grid [ VAR_0 ].length; j++) {\n      if (grid [ VAR_0 ] [ j ] == 1) {\n        m++}\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (m > 0) {\n      m-=capacity;\n      p++;\n      }\n    }\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < grid.length; VAR_0++) {\n    let m = 0\n    for (let j = 0; j < grid [ VAR_0 ].length; j++) {\n      if (grid [ VAR_0 ] [ j ] == 1) {\n        m++}\n      }\n   \n    p += Math.min(grid [ VAR_0 ].length - m, capacity)\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let VAR_0 = string.length\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return false}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 % i == 0) {\n      return false}\n    }\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let VAR_0 = string.length\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return false}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n    if (VAR_0 % i == 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default primeLength<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let VAR_0 = 1; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 0) {\n      t+=lst [ VAR_0 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let VAR_0 = 1; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 0) {\n      t+=lst [ VAR_0 ]\n     \n    }\n  }\n  return t\n}\n\n//export const add =(lst) => {\n//  let t = 0\n//  for (let VAR_0 = 1; VAR_0 < lst.length; VAR_0+=2) {\n//    if (lst [ VAR_0 ] % 2 == 0) {\n//      t+=lst [ VAR_0 ]\n//    }\n//  }\n//  return t\n//}<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  for (let VAR_0 = a; VAR_0 <= b; VAR_0++) {\n    if (VAR_0 == 2 || VAR_0 == 4 || VAR_0 == 6 || VAR_0 == 8) {\n      y.push(VAR_0)}\n    }\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    }\n  return result;\n  }\n\nexport default generateIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      let w1 = VAR_0 [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = VAR_0 [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && VAR_0 [ k ] < VAR_0 [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      let w1 = VAR_0 [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = VAR_0 [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n      }\n      if (f1 > f2) {\n        let temp = VAR_0 [ k ]\n        VAR_0 [ k ] = VAR_0 [ ind ]\n        VAR_0 [ ind ] = temp\n        ind++\n      }\n    }\n  }\n  return VAR_0\n}\n\nexport {sortArray}<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const VAR_0 of lst)\n      frq [ VAR_0 ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let VAR_0 = 1; VAR_0 < frq.length; VAR_0++)\n      if (frq [ VAR_0 ] >= VAR_0)\n      ans = VAR_0;\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const VAR_0 of lst)\n      frq [ VAR_0 ]+=1;\n      var ans = - 1;\n     \n      for (let VAR_1 = 1; VAR_1 <= Math.max(... lst); VAR_1++) {\n        if (frq [ VAR_1 ] >= VAR_1) {\n          ans = VAR_1;\n          break;\n        }\n      }\n      return ans;\n  };\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let VAR_0 = 0; VAR_0 < num.length; VAR_0++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (primes.includes(num [ VAR_0 ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let VAR_0 = 0; VAR_0 < num.length; VAR_0++)\n \n  {\n  const var_1 = num.charAt(VAR_0);\n  const var_2 = parseInt(var_1, 16);\n  if (primes.indexOf(var_2) > -1)\n  {\n    total += 1;\n  }\n  }\n  return total;\n}\n\n//console.log(hexKey(\"1234\"));\nconsole.log(hexKey(\"2020\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\n\n/*\n  You have been tasked to write a function that takes as input a string\n  containing a number as a decimal and counts the number of digits that are\n  primes (prime number=== or a prime=== is a natural number greater than 1\n  that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst decimalKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  var string_num = parseInt(num, 10);\n  for (var i = 0; i < string_num.toString().length; i++)\n  {\n    const var_1 = string_num.toString().charAt(i);\n    const var_2 = parseInt(var_1, 10);\n    if (primes.indexOf(var_2) > -1)\n    {\n      total += 1;\n    }\n  }\n  return total;\n}\n\nconsole.log(decimalKey(\"1234\"));\nconsole.log(decimalKey(\"2020\"));\nconsole.log(decimalKey(\"1077E\"));\nconsole.log(decimalKey(\"ABED1A33\"));\nconsole.log(decimalKey(\"123456789ABCDEF0\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(VAR_0) => {\n  return \"db\" + VAR_0.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(VAR_0) => {\n  return \"db\" + VAR_0.toString(2) + \"db\";\n \n};\n\n/*\n  Your task is to write a function which converts a number in decimal format to the binary form\n  and returns the result.\n\n  The number is given as a string. The string may contain an optional prefix and/or suffix, in\n  which case the function will ignore those parts.\n\n  Example:\n  decimalToBinary(\"100\")   # returns \"db1000000000000db\"\n\n  This means that 100 in decimal is represented as 00010000. In binary it is 10110000.\n*/\nconst decimalToBinary =(VAR_0) => {\n  let binary = \"\";\n  let sign = VAR_0.charAt(0) === '-'? 1 : 0;\n  VAR_0 = VAR_0.replace(/^-?/, \"\");\n  if(!VAR_0.length)\n    return binary;\n  for(let i = 0; i < VAR_0.length; i++) {\n    let val = VAR_0.charCodeAt(i);\n    if(val < 16) {\n      binary += \"0\";\n    }\n    binary += (val).toString(2);\n  }\n  return \"db\" + (sign? \"-\" : \"\") + binary;\n\n};\n\n/*\n  Your task is to write a function which converts a number in binary form to the decimal form.\n\n  The number is given as a string. The string may contain an optional prefix and/or suffix, in\n  which case the function will ignore those parts.\n\n  Example:\n  binaryToDecimal(\"db1000000000000db\")   # returns \"100\"\n\n  This means that 10110000 in binary is represented as 00010000 in decimal.\n*/\nconst binaryToDecimal =(VAR_0) => {\n  let dec = \"\";\n  let sign = VAR_0.charAt(0) === '-'? 1 : 0;\n  VAR_0 = VAR_0.replace(/^-?/, \"\");\n  if(!VAR_0.length)\n    return dec;\n  for(let i = 0; i < VAR_0.length; i++) {\n    let val = VAR_0.charCodeAt(i);\n    if(val < 16) {\n      dec += 0;\n    }\n    dec += parseInt(val, 2);\n  }\n  return sign? \"-\" + dec : dec;\n};\n\n/*\n  Your task is to write a function which takes a number as a string and returns a string with the\n  first two digits of the number in uppercase and the rest of the number in lowercase.\n\n  Example:\n  intToUpperCase(\"3\")   # returns \"03\"\n*/\nconst intToUpperCase =(VAR_0) => {\n  let upper = VAR_0.slice(0, 2);\n  let lower = VAR_0.slice(2);\n  return upper.toUpperCase() + lower.toLowerCase();\n};\n\n/*\n  Your task is to write a function which takes a number as a string and returns a string with the\n  first two digits of the number in lowercase and the rest of the number in uppercase.\n\n  Example:\n  intToLowerCase(\"3\")   # returns \"3\"\n*/\nconst intToLowerCase =(VAR_0) => {\n  let upper = VAR_0.slice(0, 2);\n  let lower = VAR_0.slice(2);\n  return upper.toLowerCase() + lower.toUpperCase();\n};\n\n/*\n  Your task is to write a function which takes a number as a string and returns the number as a\n  string in the form '1,234,567,890,123,456,789,012,345,678,901,234,567,890'.\n\n  Example:\n  intToString(\"1,234,567,890,123,456,789,012,345,678,901,234,567,890\")\n    # returns \"123456789012345678901234567890123456789\"\n*/\nconst intToString =(VAR_0) => {\n  let int = parseInt(VAR_0);\n  let res = \"\";\n  for(let i = 0; i < int; i++) {\n    res += i + 1;\n  }\n  return res;\n};\n\n/*\n  Your task is to write a function which takes a number as a string and returns the number as a\n  string in the form '0,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000'.\n\n  Example:\n  intToString(\"1\")   # returns \"1\"\n*/\nconst intToString =(VAR_0) => {\n  let int = parseInt(VAR_0);\n  let res = \"\";\n  for(let i = 0; i < int; i++) {\n    res += \"0\";\n  }\n  return res;\n};\n\nconst main = () => {\n  let test = \"10\";\n  console.log(decimalToBinary(test));\n  console.log(binaryToDecimal(test));\n  console.log(intToString(test));\n  console.log(intToUpperCase(test));\n  console.log(intToLowerCase(test));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n   \n  }\n  return (a === Infinity? null : [a, b])\n}\n\nconst largestSmallestIntegers2 =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n   \n  }\n  return (a === Infinity? null : [a, b])\n}\n\nconst largestSmallestIntegers3 =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let c = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < c) {\n      c = lst [ VAR_0 ]}\n   \n  }\n  return (a === Infinity? null : [a, b, c])\n}\n\nconst largestSmallestIntegers4 =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let c = 0\n  let d = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < c) {\n      c = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > d) {\n      d = lst [ VAR_0 ]}\n   \n  }\n  return (a === Infinity? null : [a, b, c, d])\n}\n\nconst largestSmallestIntegers5 =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let c = 0\n  let d = 0\n  let e = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < c) {\n      c = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > d) {\n      d = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < e) {\n      e = lst [ VAR_0 ]}\n   \n  }\n  return (a === Infinity? null : [a, b, c, d, e])\n}\n\nconst largestSmallestIntegers6 =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < c) {\n      c = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > d) {\n      d = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < e) {\n      e = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > f) {\n      f = lst [ VAR_0 ]}\n   \n  }\n  return (a === Infinity"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(VAR_0) => {\n  if (VAR_0 == 0 || VAR_0 == 1)\n  return 0;\n  if (VAR_0 == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(VAR_0 - 1) + fibfib(VAR_0 - 2) + fibfib(VAR_0 - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(VAR_0) => {\n  if (VAR_0 == 0 || VAR_0 == 1)\n  return 0;\n  if (VAR_0 == 2)\n \n  return 1;\n  \n  if (VAR_0 > 2)\n  return fibfib(VAR_0-1) + fibfib(VAR_0-2) + fibfib(VAR_0-3);\n};\n\n\nconsole.log(fibfib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, VAR_0) => VAR_0 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, VAR_0) =>(VAR_0 % 3 == 0 ? three [ VAR_0 / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, VAR_0) => VAR_0 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var two = l.filter((item, VAR_0) => VAR_0 % 3!= 0);\n  two.sort((a, b) =>(a - b));\n \n  var four = l.filter((item, VAR_0) => VAR_0 % 3 == 2);\n  four.sort((a, b) =>(a - b));\n \n  return three.concat(two, four);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const VAR_0 of numbers) {\n    sum_value+=VAR_0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= VAR_0;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const VAR_0 of numbers) {\n    sum_value+=VAR_0;\n   \n    prod_value *= VAR_0;\n  }\n  return [sum_value, prod_value];\n}\n\nconsole.log(sumProduct([1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let VAR_0 = 0; VAR_0 < s.length; VAR_0++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ VAR_0 ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ VAR_0 ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    if (t [ VAR_0 ] != t [ t.length - VAR_0 - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let VAR_0 = 0; VAR_0 < s.length; VAR_0++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ VAR_0 ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ VAR_0 ]\n      }\n   \n  }\nreturn (t, true)\n}\n\nconsole.log(reverseDelete('abcd', 'a'))\nconsole.log(reverseDelete('abcdef', 'b'))\nconsole.log(reverseDelete('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 [ i ] + VAR_0 [ j ] + VAR_0 [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n    if (VAR_0[i] + VAR_0[j] + VAR_0[k] == 0)\n    return false;\n    \n  return true;\n}\n\n/*\n  tripletsSumToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum to one,\n  and false otherwise.\n\n  >>> tripletsSumToOne([1, 3, 5, 0])\n  false\n  >>> tripletsSumToOne([1, 3, -2, 1])\n  true\n  >>> tripletsSumToOne([1, 2, 3, 7])\n  false\n  >>> tripletsSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripletsSumToOne([1])\n  false\n  */\nconst tripletsSumToOne =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n    if (VAR_0[i] + VAR_0[j] + VAR_0[k] == 1)\n    return false;\n    \n  return true;\n}\n\n/*\n  tripletsSumToThree takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum to three,\n  and false otherwise.\n\n  >>> tripletsSumToThree([1, 3, 5, 0])\n  false\n  >>> tripletsSumToThree([1, 3, -2, 1])\n  true\n  >>> tripletsSumToThree([1, 2, 3, 7])\n  false\n  >>> tripletsSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripletsSumToThree([1])\n  false\n  */\nconst tripletsSumToThree =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n    if (VAR_0[i] + VAR_0[j] + VAR_0[k] == 3)\n    return false;\n    \n  return true;\n}\n\n/*\n  tripletsSumToFour takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum to four,\n  and false otherwise.\n\n  >>> tripletsSumToFour([1, 3, 5, 0])\n  false\n  >>> tripletsSumToFour([1, 3, -2, 1])\n  true\n  >>> tripletsSumToFour([1, 2, 3, 7])\n  false\n  >>> tripletsSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripletsSumToFour([1])\n  false\n  */\nconst tripletsSumToFour =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n    if (VAR_0[i] + VAR_0[j] + VAR_0[k] == 4)\n    return false;\n    \n  return true;\n}\n\n/*\n  tripletsSumToFive takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum to five,\n  and false otherwise.\n\n  >>> tripletsSumToFive([1, 3, 5, 0])\n  false\n  >>> tripletsSumToFive([1, 3, -2, 1])\n  true\n  >>> tripletsSumToFive([1, 2, 3, 7])\n  false\n  >>> tripletsSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripletsSumToFive([1])\n  false\n  */\nconst tripletsSumToFive =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n    if (VAR_0[i] + VAR_0[j] + VAR_0[k] == 5)\n    return false;\n    \n  return true;\n}\n\n/*\n  tripletsSumToSix takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum to six,\n  and false otherwise.\n\n  >>> tripletsSumToSix([1, 3, 5, 0])\n  false\n  >>> tripletsSumToSix([1, 3, -2, 1])\n  true\n  >>> tripletsSumToSix([1, 2, 3, 7])\n  false\n  >>> tripletsSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripletsSumToSix([1])\n  false\n  */\nconst tripletsSumToSix =(VAR_0) => {\n  for (let i = 0; i"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(VAR_0 => VAR_0 != '').map(VAR_0 => note_map [ VAR_0 ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const notes = music_string.split('')\n  const note_list = notes.map((note) => {\n    return note_map[note]\n  })\n\n  const beat_list = note_list.map((note, i) => {\n    if (i == 0) {\n      return 1\n    } else if (note == 0) {\n      return 0\n    } else {\n      return note_list[i - 1] + note_map[note]\n    }\n  })\n  return beat_list\n}\n\n/*\n  Input:\n  'o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o| o o o o|"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let VAR_0 = arr.length - 1; VAR_0 > 0; VAR_0--) {\n    if (arr [ VAR_0 ] < arr [ VAR_0 - 1 ]) {\n      return VAR_0}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let VAR_0 = arr.length - 1; VAR_0 > 0; VAR_0--) {\n    if (arr [ VAR_0 ] < arr [ VAR_0 - 1 ]) {\n      return VAR_0}\n   \n  }\n  return -1\n}\n\n// console.log(canArrange([1,2,4,3,5]));\nconsole.log(canArrange([1,2,3]));<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(VAR_0, w) => {\n  if (VAR_0.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = VAR_0.length - 1;\n  while (i < j) {\n    if (VAR_0 [ i ] != VAR_0 [ j ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false;\n    i++;\n    j--;\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(VAR_0, w) => {\n  if (VAR_0.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = VAR_0.length - 1;\n  while (i < j) {\n    if (VAR_0 [ i ]!= VAR_0 [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconsole.log(willItFly([1, 2], 5)); // false\nconsole.log(willItFly([3, 2, 3], 1)); // false\nconsole.log(willItFly([3, 2, 3], 9)); // true\nconsole.log(willItFly([3], 5)); // true\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(VAR_0) => {\n  return encodeCyclic(encodeCyclic(VAR_0));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(VAR_0) => {\n  return encodeCyclic(encodeCyclic(VAR_0));\n \n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV2 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV3 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV4 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV5 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV6 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV7 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV8 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV9 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV10 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV11 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV12 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV13 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV14 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV15 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV16 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV17 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV18 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV19 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV20 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV21 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV22 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicV23 =(VAR_0) => {\n  return encodeCyclic(VAR_0);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode = (VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode = (VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_inverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 - 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_inverse function. Returns decoded string.\n  */\nconst decode_shift_inverse =(VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_inverse function. Returns decoded string.\n  */\nconst decode_inverse = (VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) + 5 - 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_inverse function. Returns decoded string.\n  */\nconst encode_inverse = (VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) + 5 - 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\nmodule.exports = {\n  decode: decode,\n  decode_shift: decode_shift,\n  decode_shift_inverse: decode_shift_inverse,\n  decode_inverse: decode_inverse,\n  encode: encode,\n  encode_shift: encode_shift,\n  encode_shift_inverse: encode_shift_inverse,\n  encode_inverse: encode_inverse\n};<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let VAR_0 = 0\n  if (hi > lo) {\n    VAR_0 = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return 'NO'}\n  for (let i = 2; i * i <= VAR_0; i++) {\n    if (VAR_0 % i == 0) {\n      return 'NO'}\n    }\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let VAR_0 = 0\n  if (hi > lo) {\n    VAR_0 = hi - lo}\n \n  let VAR_1 = 0\n  lo = interval2 [ 0 ]\n  if (interval1 [ 0 ] > lo) {\n    lo = interval1 [ 0 ]}\n  hi = interval2 [ 1 ]\n  if (interval1 [ 1 ] < hi) {\n    hi = interval1 [ 1 ]}\n  if (hi > lo) {\n    VAR_1 = hi - lo}\n \n  return (VAR_0 + VAR_1) % 2 === 0? \"YES\" : \"NO\"\n}\n\n//console.log(intersection((1, 2), (2, 3)))\n//console.log(intersection((-1, 1), (0, 4)))\n//console.log(intersection((-3, -1), (-5, 5)))<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) / 2;\n \n};\n\n/*\n  sumToNFast is a function that sums numbers from 1 to n.\n  It uses a fast algorithm to compute the sum.\n  >>> sumToNFast(30)\n  465\n  >>> sumToNFast(100)\n  5050\n  >>> sumToNFast(5)\n  15\n  >>> sumToNFast(10)\n  55\n  >>> sumToNFast(1)\n  1\n  */\nconst sumToNFast =(VAR_0) => {\n  let N = VAR_0,\n      sum = 0;\n\n  while (N > 0) {\n    sum += N;\n    N -= 1;\n  }\n  return sum;\n};\n\n/*\n  sumToNFast is a function that sums numbers from 1 to n.\n  It uses a fast algorithm to compute the sum.\n  >>> sumToNFast(30)\n  465\n  >>> sumToNFast(100)\n  5050\n  >>> sumToNFast(5)\n  15\n  >>> sumToNFast(10)\n  55\n  >>> sumToNFast(1)\n  1\n  */\nconst sumToNSlow =(VAR_0) => {\n  let N = VAR_0,\n      sum = 0;\n\n  while (N > 0) {\n    sum += N;\n    N -= 1;\n    N *= (VAR_0 + 1) / 2;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  It uses a fast algorithm to compute the sum.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  let N = VAR_0,\n      sum = 0;\n\n  while (N > 0) {\n    sum += N;\n    N -= 1;\n    N *= (VAR_0 + 1) / 2;\n    N += 1;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  It uses a slow algorithm to compute the sum.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToNSlow =(VAR_0) => {\n  let N = VAR_0,\n      sum = 0;\n\n  while (N > 0) {\n    sum += N;\n    N -= 1;\n    N *= (VAR_0 + 1) / 2;\n    N += 1;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  It uses a fast algorithm to compute the sum.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  let N = VAR_0,\n      sum = 0;\n\n  while (N > 0) {\n    sum += N;\n    N -= 1;\n    N *= (VAR_0 + 1) / 2;\n    N += 1;\n    N *= (VAR_0 + 1) / 2;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  It uses a fast algorithm to compute the sum.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  let N = VAR_0,\n      sum = 0;\n\n  while (N > 0) {\n    sum += N;\n    N -= 1;\n    N *= (VAR_0 + 1) / 2;\n    N += 1;\n    N *= (VAR_0 + 1) / 2;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  sumToN,\n  sumToNFast,\n  sumToNSlow\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(VAR_0) => {\n  if (VAR_0 < 2)\n  return false;\n  for (let k = 2; k < VAR_0 - 1; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(VAR_0) => {\n  if (VAR_0 < 2)\n  return false;\n  for (let k = 2; k < VAR_0 - 1; k++)\n \n  if (VAR_0 % k === 0)\n  return false;\n  return true;\n}\n\n/*Return true if a given number is a prime power, and false otherwise.\n  >>> isPrimePower(6)\n  false\n  >>> isPrimePower(11)\n  true\n  >>> isPrimePower(101)\n  true\n  >>> isPrimePower(2)\n  false\n  >>> isPrimePower(4)\n  false\n  >>> isPrimePower(1)\n  false\n  */\nconst isPrimePower =(VAR_0) => {\n  if (VAR_0 < 2)\n  return false;\n  for (let k = 2; k < VAR_0 - 1; k++)\n  if (VAR_0 % k === 0)\n  return false;\n  return true;\n}\n\n/*Return true if a given number is a power of 2, and false otherwise.\n  >>> isPowerOfTwo(2)\n  true\n  >>> isPowerOfTwo(3)\n  false\n  >>> isPowerOfTwo(1)\n  false\n  >>> isPowerOfTwo(0)\n  false\n  >>> isPowerOfTwo(4)\n  true\n  >>> isPowerOfTwo(6)\n  false\n  */\nconst isPowerOfTwo =(VAR_0) => {\n  if (VAR_0 < 2)\n  return false;\n  return (VAR_0 === Math.pow(2, Math.floor(Math.log(VAR_0) / Math.log(2))))\n}\n\n/*Return the smallest number greater than or equal to the given number.\n  >>> smallest(3)\n  3\n  >>> smallest(1)\n  2\n  >>> smallest(2)\n  3\n  >>> smallest(3.1)\n  4\n  >>> smallest(4)\n  4\n  */\nconst smallest =(VAR_0) => {\n  return Math.ceil(VAR_0)\n}\n\n/*Return the largest number less than or equal to the given number.\n  >>> largest(3)\n  2\n  >>> largest(1)\n  1\n  >>> largest(2)\n  2\n  >>> largest(3.1)\n  2\n  >>> largest(4)\n  3\n  */\nconst largest =(VAR_0) => {\n  return Math.floor(VAR_0)\n}\n\n/*Return true if a given number is a palindrome, and false otherwise.\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(1.1)\n  true\n  >>> isPalindrome(2.2)\n  true\n  >>> isPalindrome(3)\n  false\n  >>> isPalindrome(1)\n  true\n  */\nconst isPalindrome =(VAR_0) => {\n  if (typeof(VAR_0)!== 'number')\n  return false;\n  let s = '' + VAR_0;\n  let len = s.length;\n  for (let i = 0; i < len / 2; i++) {\n    if (s[i]!== s[len - i - 1])\n    return false;\n  }\n  return true;\n}\n\n/*Return true if a given string is a palindrome, and false otherwise.\n  >>> isPalindrome('bob')\n  true\n  >>> isPalindrome('bobdob')\n  false\n  >>> isPalindrome('BOB')\n  true\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  true\n  */\nconst isPalindrome =(VAR_0) => {\n  let s = '' + VAR_0;\n  let len = s.length;\n  for (let i = 0; i < len / 2; i++) {\n    if (s[i]!== s[len - i - 1])\n    return false;\n  }\n  return true;\n}\n\n/*Return true if a given number is a fibonacci number, and false otherwise.\n  >>> isFibonacci(1)\n  false\n  >>> isFibonacci(2)\n  true\n  >>> isFibonacci(3)\n  true\n  >>> isFibonacci(10)\n  true\n  >>> isFibonacci(99)\n  true\n  >>> isFibonacci(0)\n  false\n  >>> isFibonacci(2.1)\n  false\n  >>> isFibonacci(4.1)\n  false\n  >>> isFibonacci(3.3)\n  false\n  */\nconst isFibonacci =(VAR_0) => {\n  if (typeof(VAR_0)!== 'number')\n  return false;\n  let t1 = 0;\n  let t2 = 1;\n  let i = 1;\n  while (i < VAR_0) {\n    let a = t1 + t2;\n    t2 = t1;\n    t1 = a;\n    i++;\n  }\n  return (t1 === VAR_0) && (t2 === VAR_0)\n}\n\n/*Return true if a given number is an abundant number, and false otherwise.\n  >>> isAbundant(1)\n  false\n  >>> isAbundant(2)\n  false\n  >>> isAbundant(3)\n  false\n  >>> isAbundant(4)\n  true\n  >>> isAbundant(10)\n  true\n  >>> isAbundant(100)\n  true\n  >>> isAbundant(999)\n  true\n  */\nconst isAbundant =(VAR_0) => {\n  if (typeof(VAR_0)!== 'number')\n  return false;\n  let sum = 0;"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    let l = 0\n    for (let j = 0; j < t [ VAR_0 ].length; j++) {\n      if (t [ VAR_0 ] [ j ] != 'a' && t [ VAR_0 ] [ j ] != 'e' && t [ VAR_0 ] [ j ] != 'i' && t [ VAR_0 ] [ j ] != 'o' && t [ VAR_0 ] [ j ] != 'u' && t [ VAR_0 ] [ j ] != 'A' &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t [ VAR_0 ] [ j ] != 'U' && t [ VAR_0 ] [ j ] != 'O' && t [ VAR_0 ] [ j ] != 'I' && t [ VAR_0 ] [ j ] != 'E') {\n        l++\n        }\n      }\n    if (l == n) {\n      k.push(t [ VAR_0 ])}\n    }\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    let l = 0\n    for (let j = 0; j < t [ VAR_0 ].length; j++) {\n      if (t [ VAR_0 ] [ j ]!= 'a' && t [ VAR_0 ] [ j ]!= 'e' && t [ VAR_0 ] [ j ]!= 'i' && t [ VAR_0 ] [ j ]!= 'o' && t [ VAR_0 ] [ j ]!= 'u' && t [ VAR_0 ] [ j ]!= 'A' &&\n     \n          t [ VAR_0 ] [ j ]!= 'E' && t [ VAR_0 ] [ j ]!= 'I' && t [ VAR_0 ] [ j ]!= 'O' && t [ VAR_0 ] [ j ]!= 'U' && t [ VAR_0 ] [ j ]!= '1' && t [ VAR_0 ] [ j ]!= '2' && t [ VAR_0 ] [ j ]!= '3' && t [ VAR_0 ] [ j ]!= '4' && t [ VAR_0 ] [ j ]!= '5' && t [ VAR_0 ] [ j ]!= '6' && t [ VAR_0 ] [ j ]!= '7' && t [ VAR_0 ] [ j ]!= '8' && t [ VAR_0 ] [ j ]!= '9' && t [ VAR_0 ] [ j ]!= '0' && t [ VAR_0 ] [ j ]!= '.') {\n        l++\n        if (l == n) {\n          k.push(t [ VAR_0 ])\n        }\n      }\n    }\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var VAR_0 = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  VAR_0.push(Number(i))\n  return n - VAR_0.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var VAR_0 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n    VAR_0.push(parseInt(i));\n  \n  var VAR_1 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n    VAR_1.push(parseInt(i));\n  \n  var VAR_2 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n    VAR_2.push(parseInt(i));\n  \n  var VAR_3 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n    VAR_3.push(parseInt(i));\n  \n  \n  var VAR_4 = [];\n  for (const i of VAR_0)\n  VAR_4.push(VAR_1[i] + VAR_2[i] + VAR_3[i]);\n  \n  var VAR_5 = [];\n  for (const i of VAR_4)\n  if (!isNaN(i))\n    VAR_5.push(i);\n  \n  \n  var VAR_6 = [];\n  for (const i of VAR_5)\n  VAR_6.push(VAR_3[i] - VAR_2[i] - VAR_1[i]);\n  \n  \n  var VAR_7 = [];\n  for (const i of VAR_6)\n  if (!isNaN(i))\n    VAR_7.push(i);\n  \n  \n  var VAR_8 = [];\n  for (const i of VAR_7)\n  VAR_8.push(VAR_1[i] + VAR_2[i] + VAR_3[i]);\n  \n  \n  var VAR_9 = [];\n  for (const i of VAR_8)\n  if (!isNaN(i))\n    VAR_9.push(i);\n  \n  \n  var VAR_10 = [];\n  for (const i of VAR_9)\n  VAR_10.push(VAR_3[i] - VAR_2[i] - VAR_1[i]);\n  \n  \n  var VAR_11 = [];\n  for (const i of VAR_10)\n  if (!isNaN(i))\n    VAR_11.push(i);\n  \n  \n  var VAR_12 = [];\n  for (const i of VAR_11)\n  VAR_12.push(VAR_1[i] + VAR_2[i] + VAR_3[i]);\n  \n  \n  var VAR_13 = [];\n  for (const i of VAR_12)\n  if (!isNaN(i))\n    VAR_13.push(i);\n  \n  \n  var VAR_14 = [];\n  for (const i of VAR_13)\n  VAR_14.push(VAR_3[i] - VAR_2[i] - VAR_1[i]);\n  \n  \n  var VAR_15 = [];\n  for (const i of VAR_14)\n  if (!isNaN(i))\n    VAR_15.push(i);\n  \n  \n  var VAR_16 = [];\n  for (const i of VAR_15)\n  VAR_16.push(VAR_1[i] + VAR_2[i] + VAR_3[i]);\n  \n  \n  var VAR_17 = [];\n  for (const i of VAR_16)\n  if (!isNaN(i))\n    VAR_17.push(i);\n  \n  \n  var VAR_18 = [];\n  for (const i of VAR_17)\n  VAR_18.push(VAR_3[i] - VAR_2[i] - VAR_1[i]);\n  \n  \n  var VAR_19 = [];\n  for (const i of VAR_18)\n  if (!isNaN(i))\n    VAR_19.push(i);\n  \n  \n  var VAR_20 = [];\n  for (const i of VAR_19)\n  VAR_20.push(VAR_1[i] + VAR_2[i] + VAR_3[i]);\n  \n  \n  var VAR_21 = [];\n  for (const i of VAR_20)\n  if (!isNaN(i))\n    VAR_21.push(i);\n  \n  \n  var VAR_22 = [];\n  for (const i of VAR_21)\n  VAR_22.push(VAR_3[i] - VAR_2[i] - VAR_1[i]);\n  \n  \n  var VAR_23 = [];\n  for (const i of VAR_22)\n  if (!isNaN(i))\n    VAR_23.push(i);\n  \n  \n  var VAR_24 = [];\n  for (const i of VAR_23)\n  VAR_24.push(VAR_1[i] + VAR_2[i] + VAR_3[i]);\n  \n  \n  var VAR_25 = [];\n  for (const i of VAR_24)\n  if (!isNaN(i))\n    VAR_25.push"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let VAR_0 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (VAR_0 < 0) {\n        y = - 1; VAR_0 = - VAR_0;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (VAR_0 >= 10) {\n        m+=VAR_0 % 10;\n        VAR_0 =(VAR_0 - VAR_0 % 10) / 10;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * VAR_0\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let VAR_0 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (VAR_0 < 0) {\n        y = - 1; VAR_0 = - VAR_0;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (VAR_0 >= 10) {\n        m+=VAR_0 % 10;\n        VAR_0 =(VAR_0 - VAR_0 % 10) / 10;\n        }\n     \n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      if (VAR_0 === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10) {\n          n+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      if (m === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10) {\n          n+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      if (m === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10) {\n          n+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      if (m === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10) {\n          n+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      if (m === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10) {\n          n+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      if (m === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10) {\n          n+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      if (m === 0) {\n        while (u >= 10) {\n          n+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      else {\n        while (u >= 10) {\n          m+=u % 10;\n          u =(u - u % 10) / 10;\n          }\n        }\n      if (n === 0) {\n        while (y >= 10) {\n          m+=y % 10;\n          y =(y - y % 10) / 10;\n          }\n        }\n      else {\n        while (y >= 10"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 5)\n  30\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 3)\n  12.5\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 4)\n  20\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 6)\n  24\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 7)\n  28\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 8)\n  32\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  36\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n}<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var VAR_0, result = [ ];\n  for (const n of numbers) {\n    if (VAR_0 == undefined)\n    VAR_0 = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = Math.max(VAR_0, n);\n    result.push(VAR_0);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var VAR_0, result = [ ];\n  for (const n of numbers) {\n    if (VAR_0 == undefined)\n    VAR_0 = n;\n    else\n   \n    if (n > VAR_0) {\n      result.push(VAR_0);\n      VAR_0 = n;\n    }\n  }\n  if (VAR_0!= undefined) {\n    result.push(VAR_0);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    VAR_0+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0-=1;\n    if (VAR_0 < 0)\n    return false;\n    }\n  return VAR_0 == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    VAR_0+=1;\n    else\n   \n    if (b == \")\") {\n      if (VAR_0>0) {\n        VAR_0-=1;\n      }\n      else {\n        return false;\n      }\n    }\n  }\n  return VAR_0 == 0;\n}\n\n/*\n  Takes a string.\n  Returns a string with every opening bracket replaced with a closing bracket.\n\n  >>> removeBrackets(\"(())\")\n  \")())\"\n  >>> removeBrackets(\"(()())\")\n  \"()()())\"\n  >>> removeBrackets(\"(()\")\n  \"())\"\n  >>> removeBrackets(\"()\")\n  \"\"\n  >>> removeBrackets(\"(\")\n  \"()\"\n  */\nconst removeBrackets =(str) => {\n  var VAR_0 = 0;\n  var output = \"\";\n  for (const b of str) {\n    if (b == \"(\" && VAR_0 == 0) {\n      output += \")\";\n    }\n    else\n    if (b == \")\") {\n      if (VAR_0 == 0) {\n        output += \"(\";\n      }\n      else {\n        VAR_0-=1;\n      }\n    }\n    else\n    output += b;\n  }\n  return output;\n}\n\n/*\n  Returns a new string with the opening and closing brackets\n  replaced with new strings.\n\n  >>> replaceBrackets(\"(()()())\", \"*\", \"**\")\n  \"***\"\n  >>> replaceBrackets(\"(()())\", \"*\", \"**\")\n  \"***\"\n  >>> replaceBrackets(\"()()()\", \"*\", \"**\")\n  \"(**)()\"\n  >>> replaceBrackets(\"()()()\", \"*\", \"**\")\n  \"(**)()\"\n  >>> replaceBrackets(\"()\", \"*\", \"**\")\n  \"*\"\n  >>> replaceBrackets(\"(\", \"*\", \"**\")\n  \"*\"\n  */\nconst replaceBrackets =(str, opening, closing) => {\n  var output = \"\";\n  for (const b of str) {\n    if (b == opening) {\n      output += closing;\n    }\n    else\n    if (b == closing) {\n      output += opening;\n    }\n    else {\n      output += b;\n    }\n  }\n  return output;\n}\n\n/*\n  Returns a new string with every opening and closing bracket\n  replaced with new strings.\n\n  >>> replaceBrackets(\"(()())\", \"*\", \"**\")\n  \"***\"\n  >>> replaceBrackets(\"(()())\", \"*\", \"**\")\n  \"***\"\n  >>> replaceBrackets(\"()()()\", \"*\", \"**\")\n  \"(**)()\"\n  >>> replaceBrackets(\"()()()\", \"*\", \"**\")\n  \"(**)()\"\n  >>> replaceBrackets(\"()\", \"*\", \"**\")\n  \"*\"\n  >>> replaceBrackets(\"(\", \"*\", \"**\")\n  \"*\"\n  */\nconst replaceAllBrackets =(str, opening, closing) => {\n  var output = \"\";\n  for (const b of str) {\n    output += b;\n  }\n  output = replaceBrackets(output, opening, closing);\n  return output;\n}\n\n/*\n  Takes an array of strings.\n  Returns an array of strings with every opening and closing bracket\n  replaced with new strings.\n\n  >>> replaceBrackets([], \"*\", \"**\")\n  []\n  >>> replaceBrackets([], \"*\", \"**\")\n  []\n  >>> replaceBrackets([\"*\"], \"*\", \"**\")\n  [\"*\"]\n  >>> replaceBrackets([\"*\"], \"*\", \"**\")\n  [\"*\"]\n  >>> replaceBrackets([\"*\", \"*\"], \"*\", \"**\")\n  [\"**\", \"**\"]\n  >>> replaceBrackets([\"*\", \"*\", \"*\"], \"*\", \"**\")\n  [\"**\", \"**\", \"**\"]\n  >>> replaceBrackets([\"*\", \"*\", \"*\"], \"*\", \"**\")\n  [\"**\", \"**\", \"**\"]\n  >>> replaceBrackets([\"*\", \"*\", \"*\"], \"*\", \"**\")\n  [\"**\", \"**\", \"**\"]\n  >>> replaceBrackets([\"*\", \"*\", \"*\"], \"*\", \"**\")\n  [\"**\", \"**\", \"**\"]\n  */\nconst replaceBrackets =(arr, opening, closing) => {\n  var output = [];\n  for (const b of arr) {\n    output.push(replaceBrackets(b, opening, closing));\n  }\n  return output;\n}\n\n/*\n  Takes a string.\n  Returns a string with every opening and closing bracket\n  replaced with new strings.\n\n  >>> replaceBrackets(\"(*)\", \"*\", \"**\")\n  \"**\"\n  >>> replaceBrackets(\"(*)\", \"*\", \"**\")\n  \"**\"\n  >>> replaceBrackets(\"()()()\", \"*\", \"**\")\n  \"(**)()\"\n  >>> replaceBrackets(\"()()()\", \"*\", \"**\")\n  \"(**)()\"\n  >>> replaceBrackets(\"()\", \"*\", \"**\")\n  \"*\"\n  >>> replaceBrackets(\"(\", \"*\", \"**\")\n  \"*\"\n  */\nconst replaceAllBrackets =(str, opening, closing) => {\n  var output = \"\";\n  for (const b of str) {\n    output += b;\n  }\n  output = replaceBrackets(output, opening, closing);\n  return output;\n}\n\nmodule.exports = {\n  removeBrackets: removeBrackets,\n  replaceBrackets: replaceBrackets,\n  replaceAllBrackets: replaceAllBrackets,\n  correctBracketing: correctBracketing,\n  removeBrackets: removeBrackets,\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let VAR_0 = 0; VAR_0 < guess.length; VAR_0++) {\n    game [ VAR_0 ]-=guess [ VAR_0 ]\n    if (game [ VAR_0 ] < 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    game [ VAR_0 ] = - game [ VAR_0 ];}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let VAR_0 = 0; VAR_0 < guess.length; VAR_0++) {\n    game [ VAR_0 ]-=guess [ VAR_0 ]\n    if (game [ VAR_0 ] < 0)\n   \n  }\n  return game\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, VAR_0) => {\n  if (a + b <= VAR_0 || a + VAR_0 <= b || b + VAR_0 <= a)\n  return - 1;\n  var s =(a + b + VAR_0) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - VAR_0), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, VAR_0) => {\n  if (a + b <= VAR_0 || a + VAR_0 <= b || b + VAR_0 <= a)\n  return - 1;\n  var s =(a + b + VAR_0) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  if (VAR_0 [ i ] + VAR_0 [ j ] == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  if (VAR_0 [ i ] + VAR_0 [ j ] == 0)\n \n    return true;\n \n  return false;\n};\n \n \n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let dup = 1\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    if (VAR_0 [ i ] == pre) {\n      dup+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (dup == 3) {\n        return false}\n      }\n    else {\n      pre = VAR_0 [ i ]\n      dup = 1\n      }\n    }\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let dup = 1\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    if (VAR_0 [ i ] == pre) {\n      dup+=1;\n     \n    }\n    pre = VAR_0 [ i ]\n  }\n  return (dup === VAR_0.length)\n}\n\n/*\nGiven an array of strings, return whether or not they are sorted in\nascending order.\n*/\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    pre = VAR_0 [ i ]\n  }\n  return true\n}\n\n/*\nGiven an array of numbers, return whether or not they are sorted in\nascending order.\n*/\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    pre = VAR_0 [ i ]\n  }\n  return true\n}\n\n/*\nGiven an array of strings, return whether or not they are sorted in\ndescending order.\n*/\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] > pre) {\n      return false}\n    pre = VAR_0 [ i ]\n  }\n  return true\n}\n\n/*\nGiven an array of numbers, return whether or not they are sorted in\ndescending order.\n*/\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] > pre) {\n      return false}\n    pre = VAR_0 [ i ]\n  }\n  return true\n}\n\n/*\nGiven a list of numbers, return the sum of all the numbers in the list.\n*/\nconst sum =(VAR_0) => {\n  let sum = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    sum += VAR_0 [ i ]\n  }\n  return sum\n}\n\n/*\nGiven a list of numbers, return the average of all the numbers in the list.\n*/\nconst average =(VAR_0) => {\n  let sum = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    sum += VAR_0 [ i ]\n  }\n  return sum / VAR_0.length\n}\n\n/*\nGiven a list of numbers, return the median of all the numbers in the list.\n*/\nconst median =(VAR_0) => {\n  let list = VAR_0\n  let middle = Math.floor((list.length + 1) / 2)\n  if (list.length % 2 === 1) {\n    return list [ middle ]\n  } else {\n    return (list [ middle - 1 ] + list [ middle ]) / 2\n  }\n}\n\n/*\nGiven a list of numbers, return the mode of all the numbers in the list.\n*/\nconst mode =(VAR_0) => {\n  let list = VAR_0\n  let counts = {}\n  for (let i = 0; i < list.length; i++) {\n    if (counts [ list [ i ] ] == undefined) {\n      counts [ list [ i ] ] = 1\n    } else {\n      counts [ list [ i ] ] += 1\n    }\n  }\n  let maxCount = 0\n  let maxValue = undefined\n  for (let i in counts) {\n    if (counts [ i ] > maxCount) {\n      maxCount = counts [ i ]\n      maxValue = i\n    }\n  }\n  return maxValue\n}\n\n/*\nGiven an array of numbers, return the number of times that the number appears in\nthe array.\n*/\nconst count =(VAR_0) => {\n  let count = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] == VAR_0 [ i ]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\nGiven an array of numbers, return the mode of all the numbers in the list.\n*/\nconst mode =(VAR_0) => {\n  let list = VAR_0\n  let counts = {}\n  for (let i = 0; i < list.length; i++) {\n    if (counts [ list [ i ]"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    s+=VAR_0 [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 [ i ] == 0) {\n      return 0}\n    if (VAR_0 [ i ] < 0) {\n      n = - n; s-=2 * VAR_0 [ i ]}\n    }\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    s+=VAR_0 [ i ]\n   \n    if (VAR_0 [ i ] == 1) {\n      s += n*1\n      n = 1\n    } else if (VAR_0 [ i ] == -1) {\n      s -= n*1\n      n = 1\n    } else if (VAR_0 [ i ] == 0) {\n      s -= n*1\n      n = 1\n    }\n  }\n  return s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let VAR_0 = 18\n  for (let i = 2; i < n; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = VAR_0 * 10\n    }\n  return VAR_0\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let VAR_0 = 18\n  for (let i = 2; i < n; i++) {\n   \n    if (i % VAR_0 == 0) {\n      return 0}\n    else {\n      VAR_0 *= VAR_0\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(VAR_0) => {\n  let p = 1;\n  let t = 1;\n  while (VAR_0 > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t *= VAR_0;\n      }\n    p++;\n    VAR_0--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(VAR_0) => {\n  let p = 1;\n  let t = 1;\n  while (VAR_0 > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t *= VAR_0;\n    }\n    p++;\n    VAR_0--;\n  }\n  return t;\n}\n\n// The function will receive an integer as input and should return the\n// number of divisors of this integer.\nconst numberOfDivisors =(VAR_0) => {\n  let divisor = 1;\n  let count = 0;\n  for (let i = 1; i <= VAR_0; i++) {\n    if (VAR_0 % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfProperDivisors =(VAR_0) => {\n  let divisor = 1;\n  let count = 0;\n  for (let i = 1; i <= VAR_0; i++) {\n    if (VAR_0 % i === 0) {\n      count += 1;\n      if (i!== VAR_0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfDivisorsPerFactorial =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfProperDivisorsPerFactorial =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n    if (VAR_0 % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfDivisorsPerFactorialPerDivisor =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n    if (VAR_0 % i === 0) {\n      count += 1;\n      if (i!== VAR_0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfProperDivisorsPerFactorialPerDivisor =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n    if (VAR_0 % i === 0) {\n      count += 1;\n      if (i!== VAR_0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfDivisorsPerFactorialPerDivisorPerDivisor =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n    if (VAR_0 % i === 0) {\n      count += 1;\n      if (i!== VAR_0) {\n        count += 1;\n      }\n    }\n    if (i!== VAR_0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfProperDivisorsPerFactorialPerDivisorPerDivisor =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n    if (VAR_0 % i === 0) {\n      count += 1;\n      if (i!== VAR_0) {\n        count += 1;\n      }\n    }\n    if (i!== VAR_0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfDivisorsPerFactorialPerDivisorPerDivisorPerDivisor =(VAR_0) => {\n  let divisor = 1;\n  let count = 1;\n  for (let i = 2; i <= VAR_0; i++) {\n    count *= i;\n    if (VAR_0 % i === 0) {\n      count += 1;\n      if (i!== VAR_0) {\n        count += 1;\n      }\n    }\n    if (i!== VAR_0) {\n      count += 1;\n    }\n    if (i!== VAR_0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// The function will receive an integer as input and should return the number\n// of proper divisors of this integer.\nconst numberOfProperDivisorsPerFactorialPer"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, VAR_0 = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        VAR_0 = Math.max(VAR_0, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return VAR_0;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, VAR_0 = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        VAR_0 = Math.max(VAR_0, depth);\n        }\n      else {\n        depth-=1;\n       \n        if (depth <= VAR_0) {\n          depth = VAR_0;\n        }\n      }\n    }\n  };\n  \n  const parseParens = function(s) {\n    const len = s.length;\n    let index = 0,\n        new_s = '';\n    while (index < len) {\n      if (s[index] == '(') {\n        new_s += '(';\n        parseParenGroup(new_s);\n        new_s += ')';\n        index += 1;\n      }\n      else if (s[index] == ')') {\n        new_s += ')';\n        parseParenGroup(new_s);\n        index += 1;\n      }\n      else {\n        new_s += s[index];\n        index += 1;\n      }\n    }\n    return new_s;\n  };\n  return parseParens(paren_string);\n};\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y [ VAR_0 ] + y [ j ] + y [ k ]) % 3 == 0) {\n          u++}\n        }\n      }\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let VAR_1 = j + 1; VAR_1 < n; VAR_1++) {\n        \n        if (y[VAR_0] + y[j] + y[VAR_1] < n * n / 3) {\n          u = u + 1\n        }\n      }\n    }\n  }\n  return u\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let k = 0\n  let len = VAR_0.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (VAR_0 [ j ] < VAR_0 [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    VAR_0.push(VAR_0 [ 0 ]);\n    VAR_0.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let k = 0\n  let len = VAR_0.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (VAR_0 [ j ] < VAR_0 [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n      }\n    if (t) {\n      k = i;\n      break\n      }\n    }\n  \n  if (k == len - 1) {\n    return true}\n  else {\n    let a = []\n    for (let i = k + 1; i < len; i++) {\n      a.push(VAR_0[i])\n      }\n    \n    let s = a.slice(0)\n    for (let i = 0; i < len - k; i++) {\n      s.shift()\n      }\n    \n    return a.every((x, i) => x <= s[i])\n    }\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(VAR_0) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\nwhile (VAR_0) {\n    let div =(VAR_0 - VAR_0 % num [ i ]) / num [ i ]\n    VAR_0 = VAR_0 % num [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (div) {\n      res+=sym [ i ]\n      div-=1\n      }\n    i-=1\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(VAR_0) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\nwhile (VAR_0) {\n    let div =(VAR_0 - VAR_0 % num [ i ]) / num [ i ]\n    VAR_0 = VAR_0 % num [ i ]\n   \n    if (div > 0) {\n        res += sym [ i ]\n        VAR_0 -= num [ i ]\n    } else {\n        res += sym [ i + 1 ]\n        VAR_0 -= num [ i + 1 ]\n    }\n    i = i + 2\n}\nreturn res\n}\n\nlet n = parseInt(input())\nconsole.log(intToMiniRoman(n))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  VAR_0 = x.toString();\n  if (shift > VAR_0.length)\n  return VAR_0.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return VAR_0.slice( - shift) + VAR_0.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  VAR_0 = x.toString();\n  if (shift > VAR_0.length)\n  return VAR_0.split('').reverse().join('');\n \n  return VAR_0.split('').reverse().join('') + VAR_0.split('').reverse().join('').split('').reverse().join('');\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\n\n// Your circularShift object will be called as such:\n// var obj = circularShift(x,shift)\n// obj(x)<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      VAR_0.push(lst [ i ])\n      }\n    }\n  for (let j = VAR_0.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (VAR_0 [ k ].length > VAR_0 [ k + 1 ].length) {\n        f = 1}\n      if (VAR_0 [ k ].length == VAR_0 [ k + 1 ].length) {\n        let r = VAR_0 [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (VAR_0 [ k ] [ l ].charCodeAt() > VAR_0 [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            break;\n            }\n          if (VAR_0 [ k ] [ l ].charCodeAt() < VAR_0 [ k + 1 ] [ l ].charCodeAt()) {\n            break;\n            }\n          }\n        }\n      if (f == 1) {\n        let tmp = VAR_0 [ k ]\n        VAR_0 [ k ] = VAR_0 [ k + 1 ]\n        VAR_0 [ k + 1 ] = tmp\n        }\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      VAR_0.push(lst [ i ])\n      }\n    }\n  for (let j = VAR_0.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (VAR_0 [ k ].length > VAR_0 [ k + 1 ].length) {\n        f = 1}\n      if (VAR_0 [ k ].length == VAR_0 [ k + 1 ].length) {\n        let r = VAR_0 [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (VAR_0 [ k ] [ l ].charCodeAt() > VAR_0 [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n          }\n        }\n      }\n      if (f) {\n        VAR_0.splice(k, 1)\n        VAR_0.splice(k + 1, 0, VAR_0 [ k ])\n        j--\n        k--\n        }\n      }\n    }\n  return VAR_0\n}\n<|endoftext|>"}
