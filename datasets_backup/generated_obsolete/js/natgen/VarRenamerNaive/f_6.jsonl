{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    VAR_0+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0-=1;\n    if (VAR_0 < 0)\n    return false;\n    }\n  return VAR_0 == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    VAR_0+=1;\n    else\n   \n    VAR_0-=1;\n    if (VAR_0 < 0)\n      return false;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(VAR_0) => {\n  return Math.max(... VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(VAR_0) => {\n  return Math.max(... VAR_0);\n \n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let VAR_0 = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] == ' ' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(VAR_0);\n        VAR_0 = '';\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      k = 0;\n      VAR_0+=s [ i ]\n      }\n    }\n  if (VAR_0 != '') {\n    p.push(VAR_0);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let VAR_0 = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] =='' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(VAR_0);\n        VAR_0 = '';\n        }\n     \n      else if (k == 1) {\n        k = 2;\n        VAR_0 += s [ i ];\n      }\n    }\n    else {\n      VAR_0 += s [ i ];\n    }\n  }\n  if (k == 1) {\n    p.push(VAR_0);\n  }\n  return p;\n}\n\nwordsString(\"One, two, three, four, five, six\")\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(VAR_0, base) => {\n  var ret = \"\";\n  while (VAR_0 > 0) {\n    ret =(VAR_0 % base).toString() + ret;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = Math.floor(VAR_0 / base);\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(VAR_0, base) => {\n  var ret = \"\";\n  while (VAR_0 > 0) {\n    ret =(VAR_0 % base).toString() + ret;\n   \n    VAR_0 = (VAR_0 / base);\n  }\n  return ret;\n};\n\n/*\n  Convert decimal to hexadecimal.\n  >>> decimalToHex(0)\n  '0x0'\n  >>> decimalToHex(1)\n  '0x1'\n  >>> decimalToHex(8)\n  '0x8'\n  >>> decimalToHex(16)\n  '0x10'\n  >>> decimalToHex(10)\n  '0xa'\n  >>> decimalToHex(32)\n  '0x20'\n  >>> decimalToHex(128)\n  '0x80'\n  >>> decimalToHex(256)\n  '0x100'\n  >>> decimalToHex(1000)\n  '0x800'\n  >>> decimalToHex(10000)\n  '0x1000'\n  >>> decimalToHex(1234)\n  '0x1a34'\n  >>> decimalToHex(1234567)\n  '0x1b6d3'\n  >>> decimalToHex(123456789)\n  '0x1d0f1'\n  >>> decimalToHex(123456789012)\n  '0x1e7ba'\n  >>> decimalToHex(12345678901234567890)\n  '0x1f2f9'\n  >>> decimalToHex(1.0)\n  '0x1'\n  >>> decimalToHex(1.5)\n  '0x2'\n  >>> decimalToHex(1.234)\n  '0x1a34'\n  >>> decimalToHex(1.234567)\n  '0x1b6d3'\n  >>> decimalToHex(1.23456789)\n  '0x1d0f1'\n  >>> decimalToHex(1.23456789012)\n  '0x1e7ba'\n  >>> decimalToHex(1.2345678901234567890)\n  '0x1f2f9'\n  >>> decimalToHex(-1.0)\n  '-0x1'\n  >>> decimalToHex(-1.5)\n  '-0x2'\n  >>> decimalToHex(-1.234)\n  '-0x1a34'\n  >>> decimalToHex(-1.234567)\n  '-0x1b6d3'\n  >>> decimalToHex(-1.23456789)\n  '-0x1d0f1'\n  >>> decimalToHex(-1.23456789012)\n  '-0x1e7ba'\n  >>> decimalToHex(-1.2345678901234567890)\n  '-0x1f2f9'\n  >>> decimalToHex(-1.2345678901234567890, 2)\n  '-0x1.f9'\n  >>> decimalToHex(0.00000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.00000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.00000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.00000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  '0x0'\n  >>> decimalToHex(0.0000000000000000000000000000001)\n  "}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(VAR_0) => {\n  return(new Set(VAR_0.toLowerCase())).size;\n \n};\n \n// const uniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').filter(function(VAR_1) {\n//     return(VAR_1.length === 1);\n//   }).sort().join('')));\n// };\n\n// const uniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetter =(VAR_0) => {\n//   return(new Set(VAR_0).size === 1);\n// };\n\n// const countUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0).size);\n// };\n\n// const removeDuplicates =(VAR_0) => {\n//   return(new Set(VAR_0.split('').filter(function(VAR_1) {\n//     return(new Set(VAR_1.split('')).size === 1);\n//   }).sort().join('')));\n// };\n\n// const removeDuplicates =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').filter(function(VAR_1) {\n//     return(new Set(VAR_1.split('')).size === 1);\n//   }).sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0).size === 1);\n// };\n\n// const uniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const uniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const uniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const isUniqueLetters =(VAR_0) => {\n//   return(new Set(VAR_0.split('').sort().join('')));\n// };\n\n// const getUniqueLetters"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let VAR_0 = date.split( / - /)\n  if (VAR_0.length != 3) {\n    return false}\n  if (VAR_0 [ 0 ] < 1 || VAR_0 [ 0 ] > 12 || VAR_0 [ 1 ] < 1) {\n    return false}\n  if (VAR_0 [ 0 ] == 2 && VAR_0 [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((VAR_0 [ 0 ] == 1 || VAR_0 [ 0 ] == 3 || VAR_0 [ 0 ] == 5 || VAR_0 [ 0 ] == 7 || VAR_0 [ 0 ] == 8 || VAR_0 [ 0 ] == 10 || VAR_0 [ 0 ] == 12) && VAR_0 [ 1 ] > 31) {\n    return false}\n  if ((VAR_0 [ 0 ] == 4 || VAR_0 [ 0 ] == 6 || VAR_0 [ 0 ] == 9 || VAR_0 [ 0 ] == 11) && VAR_0 [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let VAR_0 = date.split( / - /)\n  if (VAR_0.length!= 3) {\n    return false}\n  if (VAR_0 [ 0 ] < 1 || VAR_0 [ 0 ] > 12 || VAR_0 [ 1 ] < 1) {\n    return false}\n  if (VAR_0 [ 0 ] == 2 && VAR_0 [ 1 ] > 29) {\n    return false}\n \n  if (VAR_0 [ 0 ] > 9 || VAR_0 [ 1 ] > 9 || VAR_0 [ 2 ] > 9) {\n    return false}\n \n  if (VAR_0 [ 2 ] < 2000 || VAR_0 [ 2 ] > 2040) {\n    return false}\n \n  if (VAR_0 [ 1 ] == 4 || VAR_0 [ 1 ] == 6 || VAR_0 [ 1 ] == 9 || VAR_0 [ 1 ] == 11) {\n    if (VAR_0 [ 2 ] > 30) {\n      return false}\n  }\n  if (VAR_0 [ 1 ] == 3 || VAR_0 [ 1 ] == 5 || VAR_0 [ 1 ] == 7 || VAR_0 [ 1 ] == 8 || VAR_0 [ 1 ] == 10) {\n    if (VAR_0 [ 2 ] < 30) {\n      return false}\n  }\n  return true\n}\n\n/*\n  1. You have to write a function which returns true if the string is a palindrome or false otherwise.\n  2. The string can contain only lower case letters and space''\n  3. The string can not contain the following special characters: -, /, *, +, %, $, ^, (, ), [, ], {, }, and }, or it should be empty.\n  4. The string should not contain multiple spaces.\n  5. The string should not contain any of the above special characters in any order.\n  6. The string can not start or end with a space.\n  7. The string can not contain a single quote character '\n\n  for example:\n  isPalindrome('a b c') => true\n\n  isPalindrome('a b c d') => false\n\n  isPalindrome('ab c') => true\n\n  isPalindrome('a b c d e') => false\n  */\nconst isPalindrome =(string) => {\n  let str = string.replace(/ /g, '').toLowerCase()\n  if (str.length == 0) {\n    return true}\n  if (str.indexOf(' ') > -1) {\n    return false}\n  let str_len = str.length\n  for (let i = 0; i < str_len / 2; i++) {\n    if (str[i]!= str[str_len - 1 - i]) {\n      return false}\n  }\n  return true\n}\n\n/*\n  1. You have to write a function which returns true if the string is a valid IPv4 address or false otherwise.\n  2. The string can contain zero or more of the following characters: 0-9, A-F, a-f.\n  3. The string can not contain the following special characters: -, /, *, +, %, $, ^, (, ), [, ], {, }, and }, or it should be empty.\n  4. The string should not contain multiple spaces.\n  5. The string can not start or end with a space.\n  6. The string can not contain a single quote character '\n\n  for example:\n  isValidIP('192.168.1.1') => true\n\n  isValidIP('192.168.1') => false\n\n  isValidIP('192.168.1.a') => false\n  */\nconst isValidIP =(string) => {\n  let str = string.replace(/ /g, '').toLowerCase()\n  if (str.length == 0) {\n    return true}\n  if (str.indexOf(' ') > -1) {\n    return false}\n  let str_len = str.length\n  for (let i = 0; i < str_len; i++) {\n    if (str[i] < '0' || str[i] > '9' || str[i] < 'a' || str[i] > 'f' || str[i] < 'a' || str[i] > 'f') {\n      return false}\n  }\n  return true\n}\n\n/*\n  1. You have to write a function which returns true if the number is a valid positive or negative integer or false otherwise.\n  2. The number can contain zero or more of the following characters: 0-9, A-F, a-f.\n  3. The number can not contain the following special characters: -, /, *, +, %, $, ^, (, ), [, ], {, }, and }, or it should be empty.\n  4. The number should not contain multiple spaces.\n  5. The number can not start or end with a space.\n  6. The number can not contain a single quote character '\n\n  for example:\n  isPositiveInt('123') => true\n\n  isPositiveInt('-123') => true\n\n  isPositiveInt('+123') => true\n\n  isPositiveInt('0') => true\n\n  isPositiveInt('123a') => false\n  */\nconst isPositiveInt =(string) => {\n  let str = string.replace(/ /g, '').toLowerCase()\n"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var VAR_0 = 0;\n  for (const op of operations) {\n    VAR_0+=op;\n    if (VAR_0 < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var VAR_0 = 0;\n  for (const op of operations) {\n    VAR_0+=op;\n    if (VAR_0 < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(belowZero([-4, -2, 3, -3, 1, -4, 2, -2, 1, -2, 2, -2, -4, -2, 2, 2, 3, 3, -3, -2, 2, 3, 4, -2, -2, -2, -2, 1, -3, -4, -2, -4, -2, -4, 2, 2, -2, -3, -2, -2, -2, -3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const VAR_0 of numbers) {\n    if (VAR_0 in dict) {\n      dict [ VAR_0 ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ VAR_0 ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const VAR_0 of numbers) {\n    if (VAR_0 in dict) {\n      dict [ VAR_0 ]+=1;\n      }\n    else {\n     \n      dict [ VAR_0 ]=1;\n      }\n    }\n  return [...new Set(Object.keys(dict).map((k) => dict[k]))];\n  }\n\n/* Finds the number of times a particular number occurs in a list.\n  >>> count(3, [3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10])\n  2\n  */\nconst count =(number, numbers) => {\n  return numbers.reduce((acc, num) => (acc+((num === number)? 1 : 0)), 0);\n  }\n\n/* Finds the sum of a list of numbers.\n  >>> sum(2, 3, 5, 7, 9, 11)\n  26\n  */\nconst sum =(...numbers) => {\n  return numbers.reduce((acc, num) => acc+num, 0);\n  }\n\n/* Finds the average of a list of numbers.\n  >>> average(3, 4, 5, 6)\n  4.25\n  */\nconst average =(...numbers) => {\n  return sum(...numbers)/numbers.length;\n  }\n\n/* Finds the median of a list of numbers.\n  >>> median(3, 4, 5, 6)\n  5.0\n  */\nconst median =(...numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const size = sorted.length;\n  return (size%2 === 0)? (sorted[Math.floor(size/2)] + sorted[Math.ceil(size/2)])/2.0 : sorted[Math.floor(size/2)];\n  }\n\n/* Finds the mode of a list of numbers.\n  >>> mode(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10)\n  3\n  */\nconst mode =(...numbers) => {\n  const max = numbers[0];\n  const result = {};\n  result[max] = 1;\n  for (const VAR_0 of numbers) {\n    if (VAR_0 in result) {\n      result[VAR_0]++;\n      }\n    else {\n      result[VAR_0] = 1;\n      }\n    }\n  const count = Object.keys(result).length;\n  return Object.keys(result).reduce((acc, key) => {\n    return count >= acc? count : acc;\n    }, max);\n  }\n\n/* Finds the variance of a list of numbers.\n  >>> variance(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10)\n  2.5\n  */\nconst variance =(...numbers) => {\n  const mean = average(...numbers);\n  const squared = numbers.map((num) => (num-mean) * (num-mean));\n  return sum(squared) / numbers.length;\n  }\n\n/* Finds the standard deviation of a list of numbers.\n  >>> stdev(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10)\n  2.0816\n  */\nconst stdev =(...numbers) => {\n  const variance = variance(...numbers);\n  return Math.sqrt(variance);\n  }\n\n/* Finds the percentile of a list of numbers.\n  >>> percentile(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10,.1)\n  3.0\n  */\nconst percentile =(...numbers, percentile) => {\n  const index = Math.floor(numbers.length * percentile);\n  return numbers[index];\n  }\n\n/* Finds the mode of a list of numbers.\n  >>> mode(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10,.1)\n  3.0\n  */\nconst mode =(...numbers, percentile) => {\n  const mode = percentile(...numbers,.5);\n  return mode;\n  }\n\n/* Finds the median of a list of numbers.\n  >>> median(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10,.1)\n  3.0\n  */\nconst median =(...numbers, percentile) => {\n  const median = percentile(...numbers,.5);\n  return median;\n  }\n\n/* Finds the standard deviation of a list of numbers.\n  >>> stdev(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10,.1)\n  2.0816\n  */\nconst stdev =(...numbers, percentile) => {\n  const stdev = percentile(...numbers,.5);\n  return stdev;\n  }\n\n/* Finds the variance of a list of numbers.\n  >>> variance(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10,.1)\n  2.5\n  */\nconst variance =(...numbers, percentile) => {\n  const variance = percentile(...numbers,.5);\n  return variance;\n  }\n\n/* Finds the mean of a list of numbers.\n  >>> mean(3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10,.1)\n  3.0\n  */\nconst mean =(...numbers, percentile) => {\n  const mean = percentile(...numbers,.5);\n  return mean;\n  }\n\n/* Finds the median of a list of numbers.\n  >>> median(3, 4, 3, 5, 3, 6, 3, 7, 3"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(VAR_0) => {\n  if (VAR_0 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while ( !isPalindrome(VAR_0.slice(beginning_of_suffix)))\n  beginning_of_suffix+=1;\n  return VAR_0 + VAR_0.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(VAR_0) => {\n  if (VAR_0 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  /* Find the longest postfix of supplied string that is a palindrome */\n  while (isPalindrome(VAR_0.substr(beginning_of_suffix, VAR_0.length - beginning_of_suffix)) == false) {\n    beginning_of_suffix++;\n  }\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  return beginning_of_suffix > 1? VAR_0.substr(0, beginning_of_suffix - 1) + makePalindrome(VAR_0.substr(beginning_of_suffix, VAR_0.length - beginning_of_suffix)) : VAR_0;\n}\n\n/*\n * The main function that takes in a string and returns the longest palindrome that it contains\n */\nconst longestPalindrome = (VAR_0) => {\n  if (VAR_0 == '')\n  return '';\n  \n  var longest_palindrome = makePalindrome(VAR_0);\n  var result = longest_palindrome;\n  var counter = 1;\n  \n  while (result.length < VAR_0.length) {\n    counter++;\n    var new_palindrome = makePalindrome(result + VAR_0.substr(result.length, VAR_0.length - result.length));\n    if (new_palindrome.length > result.length) {\n      result = new_palindrome;\n    }\n  }\n  \n  return result;\n}\n\n/*\n * Testing\n */\n\nconsole.log('The longest palindrome in \"abracadabra\" is:'+ longestPalindrome('abracadabra'));\nconsole.log('The longest palindrome in \"abracadabrac\" is:'+ longestPalindrome('abracadabrac'));\nconsole.log('The longest palindrome in \"abracadabrra\" is:'+ longestPalindrome('abracadabrra'));\nconsole.log('The longest palindrome in \"abracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadabracadab"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(VAR_0) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(VAR_0) + 1) {\n    if (VAR_0 % i == 0) {\n      fact.push(i);\n      VAR_0 = VAR_0 / i;\n      }\n    else {\n      i+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  \n  if (VAR_0 > 1)\n  fact.push(VAR_0);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(VAR_0) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(VAR_0) + 1) {\n    if (VAR_0 % i == 0) {\n      fact.push(i);\n      VAR_0 = VAR_0 / i;\n      }\n    else {\n      i+=1;\n     \n    }\n  }\n  if (VAR_0 > 1) {\n    fact.push(VAR_0)\n  }\n  return fact;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(VAR_0) => {\n  let t = 0\n  while (VAR_0 > 0) {\n    t+=VAR_0 % 10\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(VAR_0) => {\n  let t = 0\n  while (VAR_0 > 0) {\n    t+=VAR_0 % 10\n   \n    VAR_0 = VAR_0/10\n  }\n  return t.toString(2)\n}\n\nexport default solve<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(VAR_0) => {\n  VAR_0.sort((a, b) => a - b);\n  var len = VAR_0.length;\n  if (VAR_0.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return VAR_0 [ Math.floor(len / 2) ];\n  else\n  return(VAR_0 [ len / 2 - 1 ] + VAR_0 [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(VAR_0) => {\n  VAR_0.sort((a, b) => a - b);\n  var len = VAR_0.length;\n  if (VAR_0.length % 2 == 1)\n \n  {\n    return VAR_0[(len / 2)];\n  }\n  else {\n    return (VAR_0[(len / 2 - 1)] + VAR_0[len / 2]) / 2;\n  }\n};\n\n/*Return mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.666666666666667\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  11.0\n  */\nconst mean =(VAR_0) => {\n  var sum = 0;\n  for (let i = 0; i < VAR_0.length; i++)\n  {\n    sum += VAR_0[i];\n  }\n  return sum / VAR_0.length;\n};\n\n/*Return standard deviation of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  2.5\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  4.24264068711928\n  */\nconst variance =(VAR_0) => {\n  var meanValue = mean(VAR_0);\n  var sumOfSquaredDifferences = 0;\n  for (let i = 0; i < VAR_0.length; i++)\n  {\n    sumOfSquaredDifferences += Math.pow(VAR_0[i] - meanValue, 2);\n  }\n  return sumOfSquaredDifferences / VAR_0.length;\n};\n\n/*Return median of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode =(VAR_0) => {\n  var sortedVars = VAR_0.slice().sort();\n  var len = sortedVars.length;\n  if (len % 2 == 1)\n  {\n    return sortedVars[(len / 2)];\n  }\n  else {\n    return (sortedVars[(len / 2 - 1)] + sortedVars[len / 2]) / 2;\n  }\n};\n\n/*Return sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum =(VAR_0) => {\n  var sum = 0;\n  for (let i = 0; i < VAR_0.length; i++)\n  {\n    sum += VAR_0[i];\n  }\n  return sum;\n};\n\n/*Return standard deviation of elements in the list l.\n  >>> stdev([3, 1, 2, 4, 5])\n  2.081665\n  >>> stdev([-10, 4, 6, 1000, 10, 20])\n  3.63636648026\n  */\nconst stdev =(VAR_0) => {\n  var meanValue = mean(VAR_0);\n  var sumOfSquaredDifferences = 0;\n  for (let i = 0; i < VAR_0.length; i++)\n  {\n    sumOfSquaredDifferences += Math.pow(VAR_0[i] - meanValue, 2);\n  }\n  return Math.sqrt(sumOfSquaredDifferences / VAR_0.length);\n};\n\n/* Return the sample variance of the elements in the list l.\n  >>> sampleVariance([3, 1, 2, 4, 5])\n  2.5\n  >>> sampleVariance([-10, 4, 6, 1000, 10, 20])\n  4.25\n  */\nconst sampleVariance =(VAR_0) => {\n  var meanValue = mean(VAR_0);\n  var sumOfSquaredDifferences = 0;\n  for (let i = 0; i < VAR_0.length; i++)\n  {\n    sumOfSquaredDifferences += Math.pow(VAR_0[i] - meanValue, 2);\n  }\n  return sumOfSquaredDifferences / (VAR_0.length - 1);\n};\n\n/* Return the population variance of the elements in the list l.\n  >>> populationVariance([3, 1, 2, 4, 5])\n  2.5\n  >>> populationVariance([-10, 4, 6, 1000, 10, 20])\n  4.25\n  */\nconst populationVariance =(VAR_0) => {\n  var sumOfSquaredDifferences = 0;\n  for (let i = 0; i < VAR_0.length; i++)\n  {\n    sumOfSquaredDifferences += Math.pow(VAR_0[i], 2);\n  }\n  return sumOfSquaredDifferences / VAR_0.length;\n};\n\nmodule.exports = {\n  median,\n  mean,\n  variance,\n  mode,\n  sum,\n  stdev,\n  sampleVariance,\n  populationVariance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var VAR_0 = 1;\n  for (let i = 0; i < n; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  VAR_0 =(2 * VAR_0) % p;\n  return VAR_0;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var VAR_0 = 1;\n  for (let i = 0; i < n; i++)\n \n  if (i < p) {\n    VAR_0 = VAR_0 * 2;\n  }\n \n  return VAR_0;\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p % q)\n};\n\n/*\n  Let p and q be numbers.\n\n  >>> p = 3\n  >>> q = 5\n  >>> modp(p, q)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (p, q) => {\n  return (p"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            else {\n                  o++}\n            VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n           \n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount2 =(VAR_0) => {\n      let e = 0\n      let o = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount3 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount4 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount5 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount6 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount7 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount8 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount9 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount10 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount11 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount12 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n            else {\n                  o++}\n            VAR_0 = VAR_0 / 2}\n      return (e, o)\n}\n\nconst evenOddCount13 =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var VAR_0 = - 1.0, end = 1.0;\n  while (poly(xs, VAR_0) * poly(xs, end) > 0) {\n    VAR_0 *= 2.0;\n    end *= 2.0;\n    }\n  while (end - VAR_0 > 1e-10) {\n    let center =(VAR_0 + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, VAR_0) > 0)\n    VAR_0 = center;\n    else\n    end = center;\n    }\n  return VAR_0;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var VAR_0 = - 1.0, end = 1.0;\n  while (poly(xs, VAR_0) * poly(xs, end) > 0) {\n    VAR_0 *= 2.0;\n    end *= 2.0;\n    }\n  while (end - VAR_0 > 1e-10) {\n    let center =(VAR_0 + end) / 2.0;\n   \n    if (poly(xs, center) === 0) return center;\n    if (poly(xs, VAR_0) * poly(xs, end) < 0) VAR_0 = center;\n    else end = center;\n    }\n  return false;\n}\n\n// let p = poly([1, 2, 3, 4], 5);\n// console.log(p);\n// // 10\n// // 6\n// // 4\n// // 2\n// // 1\n// // 0\n\n// let p = poly([1, 2, 3, 4], 1);\n// console.log(p);\n// // 5\n// // 4\n// // 3\n// // 2\n// // 1\n// // 0\n\n// let p = poly([1, 2, 3, 4], 0);\n// console.log(p);\n// // 1\n// // 2\n// // 3\n// // 4\n// // 5\n\n// let p = poly([1, 2, 3, 4], 5);\n// console.log(p);\n// // 10\n// // 6\n// // 4\n// // 2\n// // 1\n// // 0\n\n// let p = poly([1, 2, 3, 4], 1);\n// console.log(p);\n// // 5\n// // 4\n// // 3\n// // 2\n// // 1\n// // 0\n\n// let p = poly([1, 2, 3, 4], 0);\n// console.log(p);\n// // 1\n// // 2\n// // 3\n// // 4\n// // 5\n\n// let p = poly([1, 2, 3, 4], -1);\n// console.log(p);\n// // -2\n// // -4\n// // -6\n// // -8\n// // -10\n\n// let p = poly([1, 2, 3, 4], -5);\n// console.log(p);\n// // -10\n// // -6\n// // -4\n// // -2\n// // -1\n// // -0\n\n// let p = poly([1, 2, 3, 4], -1);\n// console.log(p);\n// // -2\n// // -4\n// // -6\n// // -8\n// // -10\n\n// let p = poly([1, 2, 3, 4], -5);\n// console.log(p);\n// // -10\n// // -6\n// // -4\n// // -2\n// // -1\n// // -0\n\n// let p = poly([1, 2, 3, 4], -1);\n// console.log(p);\n// // -2\n// // -4\n// // -6\n// // -8\n// // -10\n\n// let p = poly([1, 2, 3, 4], -5);\n// console.log(p);\n// // -10\n// // -6\n// // -4\n// // -2\n// // -1\n// // -0\n\n// let p = poly([1, 2, 3, 4], -1);\n// console.log(p);\n// // -2\n// // -4\n// // -6\n// // -8\n// // -10\n\n// let p = poly([1, 2, 3, 4], -5);\n// console.log(p);\n// // -10\n// // -6\n// // -4\n// // -2\n// // -1\n// // -0\n\n// let p = poly([1, 2, 3, 4], -1);\n// console.log(p);\n// // -2\n// // -4\n// // -6\n// // -8\n// // -10\n\n// let p = poly([1, 2, 3, 4], -5);\n// console.log(p);\n// // -10\n// // -6\n// // -4\n// // -2\n// // -1\n// // -0\n\n// let p = poly([1, 2, 3, 4], -1);\n// console.log(p);\n// // -2\n// // -4\n// // -6\n// // -8\n// // -10\n\n// let p = poly([1, 2, 3, 4], -5);\n// console.log(p);\n// // -10\n// // -6\n// // -4\n// // -2\n// // -1\n// // -0\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0 + 1));\n   \n  }\n  return result;\n}\n\n\n\n/* Return all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0));\n  }\n  return result;\n}\n\n\n\n/* Return all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'bc', 'abc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let VAR_0 = string.length - 1; VAR_0 >= 0; VAR_0--) {\n    result.push(string.slice(VAR_0));\n  }\n  return result;\n}\n\n/* Return all strings that can be formed by inserting a given character at a given position in the given string.\n  >>> allStrings('abc', 'c')\n  ['ac', 'ad', 'bc', 'bd', 'cd']\n  */\nconst allStrings =(string, character) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 <= string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0) + character + string.slice(VAR_0));\n  }\n  return result;\n}\n\n/* Return all strings that can be formed by inserting a given string at a given position in the given string.\n  >>> allStrings('abc', 'ed')\n  ['abed', 'acd', 'bcd', 'bed', 'bcde']\n  */\nconst allStrings =(string, subString) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 <= string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0) + subString + string.slice(VAR_0));\n  }\n  return result;\n}\n\n/* Return all strings that can be formed by inserting a given string at a given position in the given string.\n  >>> allStrings('abc', 'ed')\n  ['abed', 'acd', 'bcd', 'bed', 'bcde']\n  */\nconst allStrings =(string, subString) => {\n  var result = [ ];\n  for (let VAR_0 = 0; VAR_0 <= string.length; VAR_0++) {\n    result.push(string.slice(0, VAR_0) + subString + string.slice(VAR_0));\n  }\n  return result;\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0\n}\n\nconst getOddCollatz2 =(n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return VAR_0\n}\n\n/*\n  Given a number n, return the largest number that can be formed as the sum of odd numbers.\n  */\nconst getLargestOddSum = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t)\n      t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return Math.max.apply(Math, VAR_0)\n}\n\nconst getOddSum = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t)\n      t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return Math.max.apply(Math, VAR_0)\n}\n\nconst getOddSum2 = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t)\n      t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return Math.max.apply(Math, VAR_0)\n}\n\nconst getOddSum3 = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t)\n      t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return Math.max.apply(Math, VAR_0)\n}\n\nconst getOddSum4 = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      VAR_0.push(t)\n      t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return Math.max.apply(Math, VAR_0)\n}\n\nconst getOddSum5 = (n) => {\n  let VAR_0 = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < VAR_0.length; i++) {\n      if (t == VAR_0 [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(VAR_0) => {\n  return Math.pow(VAR_0, 2);\n \n}\n\nexport default carRaceCollision;<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n        for (let j = lst [ VAR_0 ].length - 1; j >= 0; j--) {\n            if (lst [ VAR_0 ] [ j ] == x) {\n                t.push((VAR_0, j))\n               \n", "canonical_solution": "# print('@@this is the line to split##')\n                }\n            }\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n        for (let j = lst [ VAR_0 ].length - 1; j >= 0; j--) {\n            if (lst [ VAR_0 ] [ j ] == x) {\n                t.push((VAR_0, j))\n               \n            }\n        }\n    }\n    t.sort((a,b) => {\n        return a[0] > b[0]? 1 : -1\n    })\n    t.sort((a,b) => {\n        return b[1] > a[1]? 1 : -1\n    })\n    return t\n}\n\nconst getRow2 =(lst, x) => {\n    let t = [ ]\n    for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n        for (let j = lst [ VAR_0 ].length - 1; j >= 0; j--) {\n            if (lst [ VAR_0 ] [ j ] == x) {\n                t.push((VAR_0, j))\n            }\n        }\n    }\n    return t\n}\n\nconst getRow3 =(lst, x) => {\n    let t = [ ]\n    for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n        for (let j = lst [ VAR_0 ].length - 1; j >= 0; j--) {\n            if (lst [ VAR_0 ] [ j ] == x) {\n                t.push((VAR_0, j))\n            }\n        }\n    }\n    t.sort((a,b) => {\n        return a[1] > b[1]? 1 : -1\n    })\n    return t\n}<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      VAR_0.push(x [ i ])\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      VAR_0.push(x [ i ])\n      }\n   \n  }\n  return VAR_0.sort()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(VAR_0 + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(VAR_0, m) => {\n  if (VAR_0 > m) {\n    return - 1}\n  let k =(VAR_0 + m) / 2\n \n  let sum = k*(k + 1) / 2\n  return (sum / 2)\n}\n\nmodule.exports = roundedAvg<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(VAR_0).sort(function(a, b) {\n    return - VAR_0 [ a ] + VAR_0 [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = VAR_0 [ s [ 0 ] ]\n  let l = {\n    }\n  for (let ss = 0; ss < s.length; ss++) {\n    if (VAR_0 [ s [ ss ] ] == g) {\n      l [ s [ ss ] ] = VAR_0 [ s [ ss ] ]\n      }\n    }\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let VAR_0 = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in VAR_0) {\n      VAR_0 [ t [ m ] ]++\n      }\n    else {\n      VAR_0 [ t [ m ] ] = 1\n      }\n    }\n \n  return VAR_0\n}\n\nexport default histogram\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt() + 4\n    if (VAR_0 > 122) {\n      VAR_0-=26}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t+=String.fromCharCode(VAR_0)\n    }\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt() + 4\n    if (VAR_0 > 122) {\n      VAR_0-=26}\n   \n    let VAR_1 = (VAR_0 + 1) % 26\n    if (VAR_0 == -1) {\n      VAR_1++\n    }\n    t += s [ i ].charAt(0) + String.fromCharCode(VAR_1)\n  }\n  return t\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt() - 4\n    if (VAR_0 < 0) {\n      VAR_0+=26}\n    \n    let VAR_1 = (VAR_0 + 1) % 26\n    if (VAR_0 == -1) {\n      VAR_1++\n    }\n    t += s [ i ].charAt(0) + String.fromCharCode(VAR_1)\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of the alphabet. \n  For example:\n  random('hi') returns'mz'\n  random('gf') returns'mh'\n  random('fh') returns 'cg'\n  */\nconst random =(s) => {\n  let t = ''\n  let c = []\n  for (let i = 0; i < 26; i++) {\n    c.push(i)\n  }\n  let i = Math.floor(Math.random() * c.length)\n  for (let j = 0; j < s.length; j++) {\n    t += s [ j ].charAt(0) + String.fromCharCode(c [ i ])\n    i++\n    if (i == c.length) {\n      i = 0\n    }\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of the alphabet. \n  For example:\n  random('hi') returns'mz'\n  random('gf') returns'mh'\n  random('fh') returns 'cg'\n  */\nconst lowercase =(s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    t += s [ i ].toLowerCase()\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of the alphabet. \n  For example:\n  random('hi') returns'mz'\n  random('gf') returns'mh'\n  random('fh') returns 'cg'\n  */\nconst uppercase =(s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    t += s [ i ].toUpperCase()\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of the alphabet. \n  For example:\n  random('hi') returns'mz'\n  random('gf') returns'mh'\n  random('fh') returns 'cg'\n  */\nconst number =(s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let number = Math.floor(Math.random() * 10)\n    if (number < 2) {\n      t += s [ i ].toUpperCase()\n    } else {\n      t += s [ i ].toLowerCase()\n    }\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of the alphabet. \n  For example:\n  random('hi') returns'mz'\n  random('gf') returns'mh'\n  random('fh') returns 'cg'\n  */\nconst special =(s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let number = Math.floor(Math.random() * 10)\n    if (number < 3) {\n      t += s [ i ].toUpperCase()\n    } else {\n      t += s [ i ].toLowerCase()\n    }\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of the alphabet. \n  For example:\n  random('hi') returns'mz'\n  random('gf') returns'mh'\n  random('fh') returns 'cg'\n  */\nconst alphabet =(s) => {\n  let t = ''\n  for (let i = 0; i < 26; i++) {\n    t += s [ i ].toUpperCase()\n  }\n  return t\n}\n\n/* Create a function that takes a string as an argument and returns a string with \n  a random alphabet, as well as the length of"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let VAR_0 = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let VAR_0 = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((VAR_0 >= 65 && VAR_0 <= 90) ||(VAR_0 >= 97 && VAR_0 <= 122)) {\n      return true}\n   \n    return false}\n  let VAR_1 = txt [ len - 2 ].charCodeAt()\n  if (len == 2) {\n    if ((VAR_1 >= 65 && VAR_1 <= 90) ||(VAR_1 >= 97 && VAR_1 <= 122)) {\n      return true}\n   \n    return false}\n  let VAR_2 = txt [ len - 3 ].charCodeAt()\n  if (len == 3) {\n    if ((VAR_2 >= 65 && VAR_2 <= 90) ||(VAR_2 >= 97 && VAR_2 <= 122)) {\n      return true}\n   \n    return false}\n  let VAR_3 = txt [ len - 4 ].charCodeAt()\n  if (len == 4) {\n    if ((VAR_3 >= 65 && VAR_3 <= 90) ||(VAR_3 >= 97 && VAR_3 <= 122)) {\n      return true}\n   \n    return false}\n  return false\n}\n\n/**\n  Given a string, return a string with the first letter\n  capitalized.\n  Examples:\n  capitalizeFirstLetter(\"hello world\") ➞ \"Hello world\"\n  capitalizeFirstLetter(\"\") ➞ \"\"\n  */\nconst capitalizeFirstLetter = (txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return \"\"}\n  let VAR_0 = txt [ 0 ].charCodeAt()\n  if (len == 1) {\n    return txt}\n  let VAR_1 = txt [ 1 ].charCodeAt()\n  if (len == 2) {\n    return txt}\n  let VAR_2 = txt [ 2 ].charCodeAt()\n  if (len == 3) {\n    if ((VAR_1 >= 65 && VAR_1 <= 90) ||(VAR_1 >= 97 && VAR_1 <= 122)) {\n      return txt.charAt(0).toUpperCase() + txt.substring(1)}\n   \n    return txt}\n  let VAR_3 = txt [ 3 ].charCodeAt()\n  if (len == 4) {\n    if ((VAR_1 >= 65 && VAR_1 <= 90) ||(VAR_1 >= 97 && VAR_1 <= 122) ||(VAR_2 >= 65 && VAR_2 <= 90) ||(VAR_2 >= 97 && VAR_2 <= 122)) {\n      return txt.charAt(0).toUpperCase() + txt.charAt(1).toUpperCase() + txt.substring(2)}\n   \n    return txt}\n  let VAR_4 = txt [ 4 ].charCodeAt()\n  if (len == 5) {\n    if ((VAR_1 >= 65 && VAR_1 <= 90) ||(VAR_1 >= 97 && VAR_1 <= 122) ||(VAR_2 >= 65 && VAR_2 <= 90) ||(VAR_2 >= 97 && VAR_2 <= 122) ||(VAR_3 >= 65 && VAR_3 <= 90) ||(VAR_3 >= 97 && VAR_3 <= 122)) {\n      return txt.charAt(0).toUpperCase() + txt.charAt(1).toUpperCase() + txt.charAt(2).toUpperCase() + txt.substring(3)}\n   \n    return txt}\n  let VAR_5 = txt [ 5 ].charCodeAt()\n  if (len == 6) {\n    if ((VAR_1 >= 65 && VAR_1 <= 90) ||(VAR_1 >= 97 && VAR_1 <= 122) ||(VAR_2 >= 65 && VAR_2 <= 90) ||(VAR_2 >= 97 && VAR_2 <= 122) ||(VAR_3 >= 65 && VAR_3 <= 90) ||(VAR_3 >= 97 && VAR_3 <= 122) ||(VAR_4 >= 65 && VAR_4 <= 90) ||(VAR_4 >= 97 && VAR_4 <= 122)) {\n      return txt.charAt(0).toUpperCase() + txt.charAt(1).toUpperCase() + txt.charAt(2).toUpperCase() + txt.charAt(3).toUpperCase() + txt.charAt(4).toUpperCase() + txt.substring(5)}\n   \n    return txt}\n  let VAR_6 = txt [ 6 ].charCodeAt()\n  if (len == 7) {\n    if ((VAR_1 >= 65 && VAR_1 <= 90) ||(VAR_1 >= 97 && VAR_1 <= 122) ||(VAR_2 >= 65 && VAR_2 <= 90) ||(VAR_2 >= 97 && VAR_2 <= 122) ||(VAR_3 >= 65 && VAR_3 <= 90) ||(VAR_3 >= 97 && VAR_3 <= 122) ||(VAR_4 >= 65 && VAR_4 <= 90) ||(VAR_4 >= 97 && VAR_4 <= 122) ||(VAR_5 >= 65 && VAR_5 <= 90) ||(VAR_5 >= 97 && VAR_5 <= 122)) {\n      return txt.charAt(0).toUpperCase() + txt.charAt(1).toUpperCase() + txt.charAt(2).toUpperCase() + txt.charAt(3)."}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let VAR_0 = word.length - 2; VAR_0 > 0; VAR_0--) {\n    if (\n     !(word [ VAR_0 ] != 'a' && word [ VAR_0 ] != 'e' && word [ VAR_0 ] != 'i' && word [ VAR_0 ] != 'o' && word [ VAR_0 ] != 'u' && word [ VAR_0 ] != 'A' &&\n    word [ VAR_0 ] != 'U' && word [ VAR_0 ] != 'O' && word [ VAR_0 ] != 'I' && word [ VAR_0 ] != 'E')\n     &&\n    (word [ VAR_0 + 1 ] != 'a' && word [ VAR_0 + 1 ] != 'e' && word [ VAR_0 + 1 ] != 'i' && word [ VAR_0 + 1 ] != 'o' && word [ VAR_0 + 1 ] != 'u' && word [ VAR_0 + 1 ] != 'A' &&\n    word [ VAR_0 + 1 ] != 'U' && word [ VAR_0 + 1 ] != 'O' && word [ VAR_0 + 1 ] != 'I' && word [ VAR_0 + 1 ] != 'E')\n     &&\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    (word [ VAR_0 - 1 ] != 'a' && word [ VAR_0 - 1 ] != 'e' && word [ VAR_0 - 1 ] != 'i' && word [ VAR_0 - 1 ] != 'o' && word [ VAR_0 - 1 ] != 'u' && word [ VAR_0 - 1 ] != 'A' &&\n    word [ VAR_0 - 1 ] != 'U' && word [ VAR_0 - 1 ] != 'O' && word [ VAR_0 - 1 ] != 'I' && word [ VAR_0 - 1 ] != 'E')\n    ) {\n      return word [ VAR_0 ]\n      }\n    }\n  return ''}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let VAR_0 = word.length - 2; VAR_0 > 0; VAR_0--) {\n    if (\n    !(word [ VAR_0 ]!= 'a' && word [ VAR_0 ]!= 'e' && word [ VAR_0 ]!= 'i' && word [ VAR_0 ]!= 'o' && word [ VAR_0 ]!= 'u' && word [ VAR_0 ]!= 'A' &&\n    word [ VAR_0 ]!= 'U' && word [ VAR_0 ]!= 'O' && word [ VAR_0 ]!= 'I' && word [ VAR_0 ]!= 'E')\n     &&\n    (word [ VAR_0 + 1 ]!= 'a' && word [ VAR_0 + 1 ]!= 'e' && word [ VAR_0 + 1 ]!= 'i' && word [ VAR_0 + 1 ]!= 'o' && word [ VAR_0 + 1 ]!= 'u' && word [ VAR_0 + 1 ]!= 'A' &&\n    word [ VAR_0 + 1 ]!= 'U' && word [ VAR_0 + 1 ]!= 'O' && word [ VAR_0 + 1 ]!= 'I' && word [ VAR_0 + 1 ]!= 'E')\n     &&\n   \n    (word [ VAR_0 - 1 ]!= 'a' && word [ VAR_0 - 1 ]!= 'e' && word [ VAR_0 - 1 ]!= 'i' && word [ VAR_0 - 1 ]!= 'o' && word [ VAR_0 - 1 ]!= 'u' && word [ VAR_0 - 1 ]!= 'A' &&\n    word [ VAR_0 - 1 ]!= 'U' && word [ VAR_0 - 1 ]!= 'O' && word [ VAR_0 - 1 ]!= 'I' && word [ VAR_0 - 1 ]!= 'E')\n    )\n    {\n      return word [ VAR_0 ]\n    }\n  }\n  return ''\n}\n\nconst getClosestVowelByString =(word) => {\n  for (let VAR_0 = word.length - 2; VAR_0 > 0; VAR_0--) {\n    if (\n    !(word [ VAR_0 ]!= 'a' && word [ VAR_0 ]!= 'e' && word [ VAR_0 ]!= 'i' && word [ VAR_0 ]!= 'o' && word [ VAR_0 ]!= 'u' && word [ VAR_0 ]!= 'A' &&\n    word [ VAR_0 ]!= 'U' && word [ VAR_0 ]!= 'O' && word [ VAR_0 ]!= 'I' && word [ VAR_0 ]!= 'E')\n     &&\n    (word [ VAR_0 + 1 ]!= 'a' && word [ VAR_0 + 1 ]!= 'e' && word [ VAR_0 + 1 ]!= 'i' && word [ VAR_0 + 1 ]!= 'o' && word [ VAR_0 + 1 ]!= 'u' && word [ VAR_0 + 1 ]!= 'A' &&\n    word [ VAR_0 + 1 ]!= 'U' && word [ VAR_0 + 1 ]!= 'O' && word [ VAR_0 + 1 ]!= 'I' && word [ VAR_0 + 1 ]!= 'E')\n     &&\n   \n    (word [ VAR_0 - 1 ]!= 'a' && word [ VAR_0 - 1 ]!= 'e' && word [ VAR_0 - 1 ]!= 'i' && word [ VAR_0 - 1 ]!= 'o' && word [ VAR_0 - 1 ]!= 'u' && word [ VAR_0 - 1 ]!= 'A' &&\n    word [ VAR_0 - 1 ]!= 'U' && word [ VAR_0 - 1 ]!= 'O' && word [ VAR_0 - 1 ]!= 'I' && word [ VAR_0 - 1 ]!= 'E')\n    )\n    {\n      return word [ VAR_0 ]\n    }\n  }\n  return ''\n}\n\nconst isVowel =(char) => {\n  return (char!= 'a' && char!= 'e' && char!= 'i' && char!= 'o' && char!= 'u' && char!= 'A' && char!= 'U' && char!= 'O' && char!= 'I' && char!= 'E')\n}\n\nconst isVowelOrConsonant =(char) => {\n  return (isVowel(char)) || (isVowel(char[1])) || (isVowel(char[0])) || (isVowel(char[1])) || (isVowel(char[2])) || (isVowel(char[1])) || (isVowel(char[2])) || (isVowel(char[2]))\n}\n\nconst removeVowels =(word) => {\n  let newWord = ''\n  for (let VAR_0 = 0; VAR_0 < word.length; VAR_0++) {\n    if (!isVowel(word [ VAR_0 ])) {\n      newWord += word [ VAR_0 ]\n    }\n  }\n  return newWord\n}\n\nconst getClosestVowel =(word) => {\n  for (let VAR_0 = word.length - 2; VAR_0 > 0; VAR_0--) {\n    if (\n    !(word [ VAR_0 ]!= 'a' && word [ VAR_0 ]!= 'e' && word [ VAR_0 ]!= 'i' && word [ VAR_0 ]!="}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < s.length; VAR_0+=2) {\n    if (s [ VAR_0 ] == 'A' || s [ VAR_0 ] == 'E' || s [ VAR_0 ] == 'I' || s [ VAR_0 ] == 'O' || s [ VAR_0 ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n//  Explanation\n/*\n  Count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  \n  Note:\n  1. s is a string and consists of only lowercase letters.\n  2. The length of s is in range [1, 1000].\n  3. All the characters in s are lowercase letters.\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(VAR_0) => {\n  let min = VAR_0 [ 0 ]\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = i + 1; j <= VAR_0.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=VAR_0 [ k ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (s < min) {\n        min = s}\n      }\n    }\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(VAR_0) => {\n  let min = VAR_0 [ 0 ]\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = i + 1; j <= VAR_0.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=VAR_0 [ k ]\n       \n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nexport default minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, VAR_0) => {\n  return(a * a + b * b == VAR_0 * VAR_0 || a * a == b * b + VAR_0 * VAR_0 || b * b == a * a + VAR_0 * VAR_0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, VAR_0) => {\n  return(a * a + b * b == VAR_0 * VAR_0 || a * a == b * b + VAR_0 * VAR_0 || b * b == a * a + VAR_0 * VAR_0)\n \n};\n\n/*\n Given the length of a side of a triangle, return the length of the other two\n  sides. If the given side is not a right angle, return -1.\n  Example:\n  findLength(3) == 2\n  findLength(4) == -1\n  */\nconst findLength = (VAR_0) => {\n  let [a, b, c] = VAR_0;\n  if(a * a + b * b == c * c) {\n    return(Math.sqrt(a * a + b * b));\n  }\n  else {\n    return(-1);\n  }\n};\n\nconst triangle = (a, b, c) => {\n  if(rightAngleTriangle(a, b, c)) {\n    return(findLength(a, b, c));\n  }\n  else {\n    return(-1);\n  }\n};\n\n/*\n Given the length of a side of a triangle, return the length of the other two\n  sides. If the given side is not a right angle, return -1.\n  Example:\n  findLength(3) == 2\n  findLength(4) == -1\n  */\nconst findLength2 = (VAR_0) => {\n  let [a, b, c] = VAR_0;\n  if(a * a + b * b == c * c) {\n    return(Math.sqrt(a * a + b * b));\n  }\n  else {\n    return(-1);\n  }\n};\n\nconst triangle2 = (a, b, c) => {\n  if(rightAngleTriangle(a, b, c)) {\n    return(findLength2(a, b, c));\n  }\n  else {\n    return(-1);\n  }\n};\n\nconsole.log(triangle(1, 2, 3));\nconsole.log(triangle(3, 4, 5));\nconsole.log(triangle(1, 2, 5));\nconsole.log(triangle(3, 4, 1));\nconsole.log(triangle(1, 2, 3));\nconsole.log(triangle(1, 3, 4));\nconsole.log(triangle(3, 5, 4));\nconsole.log(triangle(3, 4, 5));\nconsole.log(triangle(1, 3, 1));\nconsole.log(triangle(1, 4, 1));\nconsole.log(triangle(1, 5, 1));\nconsole.log(triangle(1, 3, 1));\nconsole.log(triangle(1, 3, 3));\nconsole.log(triangle(1, 3, 4));\nconsole.log(triangle(1, 3, 5));\nconsole.log(triangle(1, 3, 3));\nconsole.log(triangle(1, 4, 3));\nconsole.log(triangle(1, 5, 3));\nconsole.log(triangle(1, 4, 3));\nconsole.log(triangle(1, 5, 3));\nconsole.log(triangle(1, 4, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 4));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));\nconsole.log(triangle(1, 5, 5));"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, VAR_0) => {\n  return x + VAR_0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, VAR_0) => {\n  return x + VAR_0;\n \n};\n \n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add3(2, 3)\n  5\n  >>> add3(5, 7)\n  12\n  */\nconst add3 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add4(2, 3)\n  5\n  >>> add4(5, 7)\n  12\n  */\nconst add4 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add5(2, 3)\n  5\n  >>> add5(5, 7)\n  12\n  */\nconst add5 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add6(2, 3)\n  5\n  >>> add6(5, 7)\n  12\n  */\nconst add6 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add7(2, 3)\n  5\n  >>> add7(5, 7)\n  12\n  */\nconst add7 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add8(2, 3)\n  5\n  >>> add8(5, 7)\n  12\n  */\nconst add8 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add9(2, 3)\n  5\n  >>> add9(5, 7)\n  12\n  */\nconst add9 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add10(2, 3)\n  5\n  >>> add10(5, 7)\n  12\n  */\nconst add10 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add11(2, 3)\n  5\n  >>> add11(5, 7)\n  12\n  */\nconst add11 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add12(2, 3)\n  5\n  >>> add12(5, 7)\n  12\n  */\nconst add12 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add13(2, 3)\n  5\n  >>> add13(5, 7)\n  12\n  */\nconst add13 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add14(2, 3)\n  5\n  >>> add14(5, 7)\n  12\n  */\nconst add14 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add15(2, 3)\n  5\n  >>> add15(5, 7)\n  12\n  */\nconst add15 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add16(2, 3)\n  5\n  >>> add16(5, 7)\n  12\n  */\nconst add16 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add17(2, 3)\n  5\n  >>> add17(5, 7)\n  12\n  */\nconst add17 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add18(2, 3)\n  5\n  >>> add18(5, 7)\n  12\n  */\nconst add18 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add19(2, 3)\n  5\n  >>> add19(5, 7)\n  12\n  */\nconst add19 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add20(2, 3)\n  5\n  >>> add20(5, 7)\n  12\n  */\nconst add20 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add21(2, 3)\n  5\n  >>> add21(5, 7)\n  12\n  */\nconst add21 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add22(2, 3)\n  5\n  >>> add22(5, 7)\n  12\n  */\nconst add22 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add23(2, 3)\n  5\n  >>> add23(5, 7)\n  12\n  */\nconst add23 =(x, y) => {\n  return x + y;\n};\n \n/*\n  Add two numbers x and y\n  >>> add24(2, 3)\n  5\n  >>> add24(5, 7)\n  12\n  */\nconst add24 =(x, y) => {\n  return x + y"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(VAR_0 =>(VAR_0.toUpperCase() == VAR_0 ? VAR_0.toLowerCase() : VAR_0.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(VAR_0 =>(VAR_0.toUpperCase() == VAR_0? VAR_0.toLowerCase() : VAR_0.toUpperCase()))\n \n .join('');\n}\n\n// Function to determine whether a given string has an odd or even number of letters.\nconst hasEvenOrOdd = (string) => {\n  return (string.split('').length % 2 === 0)? 'even' : 'odd';\n}\n\n// Function to convert a string into a number.\nconst toNumber = (string) => {\n  return parseInt(string, 10);\n}\n\n// Function to get the maximum number in a list of numbers.\nconst maxNum = (nums) => {\n  return nums.reduce((a, b) => a > b? a : b);\n}\n\n// Function to get the maximum letter in a list of letters.\nconst maxLetter = (letters) => {\n  return letters.reduce((a, b) => a > b? a : b);\n}\n\n// Function to remove spaces from the end of a string.\nconst trimEnd = (string) => {\n  return string.replace(/\\s+$/, '');\n}\n\n// Function to remove spaces from the beginning of a string.\nconst trimStart = (string) => {\n  return string.replace(/^\\s+/, '');\n}\n\n// Function to remove extra whitespaces from a string.\nconst trimWhiteSpace = (string) => {\n  return string.replace(/\\s+/g,'');\n}\n\n// Function to determine whether the given string has any characters in common.\nconst hasCommon = (a, b) => {\n  return b.indexOf(a)!== -1;\n}\n\n// Function to get the largest common string in a list of strings.\nconst largestCommon = (strings) => {\n  let largest = '';\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = i; j < strings.length; j++) {\n      if (hasCommon(strings[i], strings[j])) {\n        if (largest.length < strings[i].length) {\n          largest = strings[i];\n        }\n      }\n    }\n  }\n  return largest;\n}\n\n// Function to get the smallest common string in a list of strings.\nconst smallestCommon = (strings) => {\n  let smallest = '';\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = i; j < strings.length; j++) {\n      if (hasCommon(strings[i], strings[j])) {\n        if (smallest.length > strings[i].length) {\n          smallest = strings[i];\n        }\n      }\n    }\n  }\n  return smallest;\n}\n\n// Function to remove all the characters of the given string that are not letters.\nconst removeLetters = (string) => {\n  return string.split('').filter(VAR_0 => VAR_0.match(/[A-Za-z]/));\n}\n\n// Function to add a given number to a given string.\nconst add = (num, string) => {\n  return string + num;\n}\n\n// Function to remove a given number from a given string.\nconst remove = (num, string) => {\n  return string.replace(num, '');\n}\n\n// Function to determine if a given string has the same first letter as another string.\nconst hasSameFirstLetter = (string) => {\n  return (string.split('').shift() == string.split('').shift())? 'true' : 'false';\n}\n\n// Function to remove the spaces from the beginning of a string.\nconst trimStartSpace = (string) => {\n  return string.replace(/^\\s+/, '');\n}\n\n// Function to remove the spaces from the end of a string.\nconst trimEndSpace = (string) => {\n  return string.replace(/\\s+$/, '');\n}\n\n// Function to remove the extra spaces from a string.\nconst trimExtraSpaces = (string) => {\n  return string.replace(/\\s+/g,'');\n}\n\n// Function to remove the spaces from the beginning and end of a string.\nconst trimBothSpaces = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n// Function to remove the characters of the given string that are not letters.\nconst removeLetters = (string) => {\n  return string.split('').filter(VAR_0 => VAR_0.match(/[A-Za-z]/));\n}\n\n// Function to get the string with all the spaces removed.\nconst removeSpaces = (string) => {\n  return string.replace(/\\s+/g,'');\n}\n\n// Function to determine if a given string has the same first letter as another string.\nconst hasSameFirstLetter = (string) => {\n  return (string.split('').shift() == string.split('').shift())? 'true' : 'false';\n}\n\n// Function to remove the spaces from the beginning of a string.\nconst trimStartSpace = (string) => {\n  return string.replace(/^\\s+/, '');\n}\n\n// Function to remove the spaces from the end of a string.\nconst trimEndSpace = (string) => {\n  return string.replace(/\\s+$/, '');\n}\n\n// Function to remove the extra spaces from a string.\nconst trimExtraSpaces = (string) => {\n  return string.replace(/\\s+/g,'');\n}\n\n// Function to remove the spaces from the beginning and end of a string.\nconst trimBothSpaces = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n// Function to remove the characters of the given string that are not letters.\nconst removeLetters = (string) => {\n  return string.split('').filter(VAR_0 => VAR_0.match(/[A-Za-z]/));\n}\n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      opening_bracket_index.push(VAR_0)\n      }\n    else {\n      closing_bracket_index1.push(VAR_0)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let VAR_0 = 0; VAR_0 < closing_bracket_index1.length; VAR_0++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - VAR_0 - 1 ])\n    }\n  let cnt = 0\n  let VAR_0 = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (VAR_0 < l && opening_bracket_index [ k ] < closing_bracket_index [ VAR_0 ]) {\n      cnt+=1;\n      VAR_0+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let VAR_0 = 0; VAR_0 < string.length; VAR_0++) {\n    if (string [ VAR_0 ] == '[') {\n      opening_bracket_index.push(VAR_0)\n      }\n    else {\n      closing_bracket_index1.push(VAR_0)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let VAR_0 = 0; VAR_0 < closing_bracket_index1.length; VAR_0++) {\n   \n    if (closing_bracket_index1 [ VAR_0 ] + 1 == opening_bracket_index [ VAR_0 ]) {\n      closing_bracket_index.push(closing_bracket_index1 [ VAR_0 ])\n      }\n    }\n  return opening_bracket_index.length > 0 && closing_bracket_index.length > 0 && opening_bracket_index [ opening_bracket_index.length - 1 ] + 1 == closing_bracket_index [ 0 ]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt()\n    if (VAR_0 >= 65 && VAR_0 <= 90) {\n      VAR_0+=32;\n      t = 1;\n      }\n    else\nif (VAR_0 >= 97 && VAR_0 <= 122) {\n      VAR_0-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(VAR_0)\n    }\n  if (t == 1) {\n    return p}\n  let u = ''\nfor (let i = 0; i < p.length; i++) {\n    u+=p [ p.length - i - 1 ]\n    }\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let VAR_0 = s [ i ].charCodeAt()\n    if (VAR_0 >= 65 && VAR_0 <= 90) {\n      VAR_0+=32;\n      t = 1;\n      }\n    else\nif (VAR_0 >= 97 && VAR_0 <= 122) {\n      VAR_0-=32;\n      t = 1;\n     \n      }\n    p = p + s [ i ].toUpperCase();\n    if (t == 0) {\n      p = p + s [ i ];\n     \n      }\n    }\n    return p;\n    \n}\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const VAR_0 of l)\n  if (VAR_0 >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const VAR_0 of l)\n  if (VAR_0 >= t)\n \n}\n  /*\n  The sum of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (const VAR_0 of l)\n  sum += VAR_0\n  return sum\n}\n  /*\n  The sum of the squares of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  55\n  >>> sum([1, 2, 3, 4, 5]) ** 2\n  385\n  */\nconst squareSum = (l) => {\n  let sum = 0\n  for (const VAR_0 of l)\n  sum += VAR_0 ** 2\n  return sum\n}\n  /*\n  The median of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  */\nconst median = (l) => {\n  let sum = 0\n  for (const VAR_0 of l)\n  sum += VAR_0\n  return sum / l.length\n}\n  /*\n  The average of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) / 5\n  3.0\n  */\nconst average = (l) => {\n  let sum = 0\n  for (const VAR_0 of l)\n  sum += VAR_0\n  return sum / l.length\n}\n  /*\n  The mode of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  */\nconst mode = (l) => {\n  let max = 0\n  let maxCount = 0\n  for (const VAR_0 of l)\n  if (VAR_0 > max)\n  {\n    max = VAR_0\n    maxCount = 1\n  }\n  else if (VAR_0 === max)\n  {\n    maxCount += 1\n  }\n  return maxCount\n}\n  /*\n  The mode of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  */\nconst variance = (l) => {\n  const mean = average(l)\n  const sum = sum(l)\n  let sumSquared = 0\n  for (const VAR_0 of l)\n  sumSquared += (VAR_0 - mean) ** 2\n  return sumSquared / (l.length - 1)\n}\n  /*\n  The standard deviation of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  >>> variance([1, 2, 3, 4, 5])\n  1.6666666666666667\n  */\nconst standardDeviation = (l) => {\n  return Math.sqrt(variance(l))\n}\n  /*\n  The standard error of the mean of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  1.6666666666666667\n  */\nconst standardError = (l) => {\n  return standardDeviation(l) / Math.sqrt(l.length)\n}\n  /*\n  The geometric mean of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** (1 / 3)\n  3.0\n  */\nconst geometricMean = (l) => {\n  const gmean = 1\n  for (const VAR_0 of l)\n  gmean *= VAR_0\n  return gmean\n}\n  /*\n  The harmonic mean of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) / 3\n  3.0\n  */\nconst harmonicMean = (l) => {\n  const hmean = 1\n  for (const VAR_0 of l)\n  hmean /= VAR_0\n  return hmean\n}\n  /*\n  The maximum of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  */\nconst maximum = (l) => {\n  let max = 0\n  for (const VAR_0 of l)\n  if (VAR_0 > max)\n  {\n    max = VAR_0\n  }\n  return max\n}\n  /*\n  The minimum of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  */\nconst minimum = (l) => {\n  let min = Number.MAX_VALUE\n  for (const VAR_0 of l)\n  if (VAR_0 < min)\n  {\n    min = VAR_0\n  }\n  return min\n}\n  /*\n  The median of the numbers in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5]) ** 0.5\n  3.0\n  */\nconst medianOfList = (l)"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let VAR_0 = i.toString()\n    let p = 1\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ j ] != VAR_0 [ VAR_0.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    if (p == 1) {\n      if (VAR_0 % 2 == 0) {\n        e++}\n      else {\n        o++}\n      }\n    }\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let VAR_0 = i.toString()\n    let p = 1\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ j ]!= VAR_0 [ VAR_0.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n      }\n    }\n    if (p) {\n      if (VAR_0 [ VAR_0.length - 1 ] % 2) {\n        o++;\n      } else {\n        e++;\n      }\n    }\n  }\n  return [e, o]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return VAR_0;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let VAR_0 = n - 1; VAR_0 >= 0; VAR_0--)\n  if (n % VAR_0 == 0)\n \n  return VAR_0;\n}\n\n/*\n  For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisor =(n) => {\n  for (let VAR_0 = n + 1; VAR_0 <= n; VAR_0++)\n  if (n % VAR_0 == 0)\n \n  return VAR_0;\n}\n\n/*\n  Given two positive numbers n and m, find the product of the numbers.\n  >>> multiply(12, 5)\n  60\n  >>> multiply(12, 5)\n  60\n  >>> multiply(15, 5)\n  150\n  >>> multiply(15, 5)\n  150\n  >>> multiply(20, 5)\n  200\n  >>> multiply(20, 5)\n  200\n  >>> multiply(25, 5)\n  250\n  >>> multiply(25, 5)\n  250\n  >>> multiply(30, 5)\n  300\n  >>> multiply(30, 5)\n  300\n  >>> multiply(35, 5)\n  350\n  >>> multiply(35, 5)\n  350\n  >>> multiply(40, 5)\n  400\n  >>> multiply(40, 5)\n  400\n  >>> multiply(45, 5)\n  450\n  >>> multiply(45, 5)\n  450\n  >>> multiply(50, 5)\n  500\n  >>> multiply(50, 5)\n  500\n  >>> multiply(55, 5)\n  550\n  >>> multiply(55, 5)\n  550\n  >>> multiply(60, 5)\n  600\n  >>> multiply(60, 5)\n  600\n  >>> multiply(65, 5)\n  650\n  >>> multiply(65, 5)\n  650\n  >>> multiply(70, 5)\n  700\n  >>> multiply(70, 5)\n  700\n  >>> multiply(75, 5)\n  750\n  >>> multiply(75, 5)\n  750\n  >>> multiply(80, 5)\n  800\n  >>> multiply(80, 5)\n  800\n  >>> multiply(85, 5)\n  850\n  >>> multiply(85, 5)\n  850\n  >>> multiply(90, 5)\n  900\n  >>> multiply(90, 5)\n  900\n  >>> multiply(95, 5)\n  950\n  >>> multiply(95, 5)\n  950\n  >>> multiply(100, 5)\n  1000\n  >>> multiply(100, 5)\n  1000\n  >>> multiply(105, 5)\n  1050\n  >>> multiply(105, 5)\n  1050\n  >>> multiply(110, 5)\n  1100\n  >>> multiply(110, 5)\n  1100\n  >>> multiply(115, 5)\n  1150\n  >>> multiply(115, 5)\n  1150\n  >>> multiply(120, 5)\n  1200\n  >>> multiply(120, 5)\n  1200\n  >>> multiply(125, 5)\n  1250\n  >>> multiply(125, 5)\n  1250\n  >>> multiply(130, 5)\n  1300\n  >>> multiply(130, 5)\n  1300\n  >>> multiply(135, 5)\n  1350\n  >>> multiply(135, 5)\n  1350\n  >>> multiply(140, 5)\n  1400\n  >>> multiply(140, 5)\n  1400\n  >>> multiply(145, 5)\n  1450\n  >>> multiply(145, 5)\n  1450\n  >>> multiply(150, 5)\n  1500\n  >>> multiply(150, 5)\n  1500\n  >>> multiply(155, 5)\n  1550\n  >>> multiply(155, 5)\n  1550\n  >>> multiply(160, 5)\n  1600\n  >>> multiply(160, 5)\n  1600\n  >>> multiply(165, 5)\n  1650\n  >>> multiply(165, 5)\n  1650\n  >>> multiply(170, 5)\n  1700\n  >>> multiply(170, 5)\n  1700\n  >>> multiply(175, 5)\n  1750\n  >>> multiply(175, 5)\n  1750\n  >>> multiply(180, 5)\n  1800\n  >>> multiply(180, 5)\n  1800\n  >>> multiply(185, 5)\n  1850\n  >>> multiply(185, 5)\n  1850\n  >>> multiply(190, 5)\n  1900\n  >>> multiply(190, 5)\n  1900\n  >>> multiply(195, 5)\n  1950\n  >>> multiply(195, 5)\n  1950\n  >>> multiply(200, 5)\n  2000\n  >>> multiply(200, 5)\n  2000\n  >>> multiply(205, 5)\n  2050\n  >>> multiply(205, 5)\n  2050\n  >>> multiply(210, 5)\n  2100\n  >>> multiply(210, 5)\n  2100\n  >>> multiply(215, 5)\n  2150\n  >>> multiply(215, 5)\n  2150\n  >>> multiply(220, 5)\n  2200\n  >>> multiply(220, 5)\n  2200\n  >>> multiply(225, 5)\n  2250\n  >>> multiply(225, 5)\n  2250\n  >>> multiply(230, 5)\n  2300\n  >>> multiply(230, 5)\n  2300\n  >>> multiply(235, 5)\n  2350\n  >>> multiply(235, 5)\n  2350\n  >>> multiply(240, 5)\n  2400\n  >>> multiply(240, 5)\n  2400\n  >>> multiply(245, 5)\n  2450\n  >>> multiply(245, 5)\n  2450\n  >>> multiply(250, 5)\n  2500\n  >>> multiply(250, 5)\n  2500\n  >>> multiply(255, 5)\n  2550\n  >>> multiply(255, 5)\n  2550\n  >>> multiply(260, 5)\n  2600\n  >>> multiply(260, 5)\n  2600\n  >>> multiply(265, 5)\n  2650\n  >>> multiply(265, 5)\n  2650\n  >>> multiply(270, 5)\n  2700\n  >>> multiply(270, 5"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (n % VAR_0 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let VAR_0 = 2; VAR_0 < 101; VAR_0++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(VAR_0)) continue;\n      for (let k = 2; k < 101; k++) {\n        if ( !isPrime(k)) continue;\n        if (i * VAR_0 * k == a)\n        return true;\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (n % VAR_0 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let VAR_0 = 2; VAR_0 < 101; VAR_0++) {\n     \n      if (!isPrime(i * VAR_0)) continue;\n      return true;\n    }\n  }\n  \n  return false;\n}\n\nmodule.exports = isMultiplyPrime;<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(VAR_0) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = VAR_0.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0.at( - 1) == 'y' || VAR_0.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(VAR_0) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = VAR_0.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n};\n\n/*Write a function that returns the number of times the word appears in\n  the text\n\nExample:\n  >>> wordOccurence(\"abcde\", \"abcde\")\n  1\n  >>> wordOccurence(\"abcde\", \"ABCDE\")\n  2\n  >>> wordOccurence(\"ABCDE\", \"abcde\")\n  0\n  >>> wordOccurence(\"ABCDE\", \"ABCDE\")\n  1\n*/\nconst wordOccurence =(VAR_0, VAR_1) => {\n  return VAR_0.split('').reduce((prev, item, index) => {\n    return prev +(VAR_1.includes(item));\n  }, 0);\n};\n\n/*Write a function that returns the number of words in the text\n\nExample:\n  >>> wordCount(\"abcde\")\n  1\n  >>> wordCount(\"ABCDE\")\n  2\n  >>> wordCount(\"ABCDE\")\n  3\n  >>> wordCount(\"The quick brown fox jumped over the lazy dog\")\n  5\n*/\nconst wordCount =(VAR_0) => {\n  return VAR_0.split(/[\\s,\\?\\!\\.;\\(\\)<>\\/_\\{}\\[\\]\\\\\\^\\$\\*\\+\\-\\|\\=\\%]+/g).length;\n};\n\n/*Write a function that takes a string and returns the length of that\n  string. The length of a string is the number of characters it contains.\n  The string may contain any punctuation or whitespace, except for the\n  punctuation characters.\n\nExample:\n  >>> length(\"Hello World\")\n  11\n  >>> length(\"Hello World!\")\n  14\n  >>> length(\"Hello World??\")\n  11\n  >>> length(\"Hello World, I'm here\")\n  26\n*/\nconst length =(VAR_0) => {\n  return VAR_0.length;\n};\n\n/*Write a function that takes a string and returns the number of times\n  it appears in the string.\n\nExample:\n  >>> wordCount(\"Hello World\")\n  2\n  >>> wordCount(\"Hello World!\")\n  2\n  >>> wordCount(\"Hello World??\")\n  2\n  >>> wordCount(\"Hello World, I'm here\")\n  2\n*/\nconst wordCount =(VAR_0) => {\n  var words = VAR_0.split(/\\s+/g);\n  return words.length;\n};\n\n/*Write a function that takes a string and returns the string reversed\n  in place.\n\nExample:\n  >>> reverse(\"Hello World!\")\n  \"ldrhe World!\"\n  >>> reverse(\"Hello World!\")\n  \"rldor World!\"\n  >>> reverse(\"Hello World\")\n  \"erldor World\"\n  >>> reverse(\"Hello World\")\n  \"World rldor\"\n  >>> reverse(\"Hello World\")\n  \"World ldrhe\"\n  >>> reverse(\"Hello World\")\n  \"World Hello\"\n*/\nconst reverse =(VAR_0) => {\n  var text = VAR_0;\n  var n = text.length;\n  var reversed = text.split('');\n  reversed.reverse();\n  return reversed.join('');\n};\n\n/*Write a function that takes a string and returns the same string\n  with all punctuation removed.\n\nExample:\n  >>> clean(\"Hello, World?\")\n  \"Hello World?\"\n  >>> clean(\"Hello, World!\")\n  \"Hello, World\"\n  >>> clean(\"Hello, World?. I'm here.\")\n  \"Hello World? I'm here.\"\n  >>> clean(\"Hello, World?\")\n  \"Hello, World?\"\n  >>> clean(\"Hello, World?\")\n  \"Hello, World?\"\n*/\nconst clean =(VAR_0) => {\n  var text = VAR_0;\n  return text.replace(/[!@#$%^&*()_+\\-={}\\[\\]\\\\|\\?:\\\"<>\\.,\\/\\?\\?\\s]/g, '');\n};\n\n/*Write a function that takes two strings and returns the same string\n  with the first string concatenated to the end of the second string.\n  The first string may contain any punctuation or whitespace, except for\n  the punctuation characters.\n\nExample:\n  >>> concatenate(\"Hello\", \"World\")\n  \"HelloWorld\"\n  >>> concatenate(\"Hello\", \"World!\")\n  \"HelloWorld!\"\n  >>> concatenate(\"Hello\", \"World?\")\n  \"HelloWorld?\"\n  >>> concatenate(\"Hello\", \"World\")\n  \"HelloWorld\"\n  >>> concatenate(\"Hello\", \"World?\")\n  \"HelloWorld?\"\n  >>> concatenate(\"Hello\", \"World?\")\n  \"HelloWorld?\"\n  >>> concatenate(\"Hello\", \"World??\")\n  \"HelloWorld??\"\n  >>> concatenate(\"Hello\", \"World!\")\n  \"HelloWorld!\"\n*/\nconst concatenate =(VAR_0, VAR_1) => {\n  var text = VAR_0 + VAR_1;\n  return text;\n};\n\n/*Write a function that takes a string and returns the same string\n  with the whitespace removed.\n\nExample:\n  >>> trim(\" Hello \")\n  \"Hello\"\n  >>> trim(\" Hello, World?\")\n  \"Hello, World?\"\n  >>> trim(\"Hello, World?\")\n  \"Hello, World?\"\n  >>> trim(\"Hello, World?\")\n  \"Hello, World?\"\n  >>> trim(\"Hello, World??\")\n  \"Hello, World?\"\n*/\nconst trim =(VAR_0) => {\n  return VAR_0"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet1) {\n      lo = VAR_0}\n    }\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet2) {\n      hi = VAR_0}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  for (let VAR_0 = lo + 1; VAR_0 < hi; VAR_0++) {\n    u.push(y [ VAR_0 ])\n    }\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet1) {\n      lo = VAR_0}\n    }\n  for (let VAR_0 = 0; VAR_0 < 8; VAR_0++) {\n    if (y [ VAR_0 ] == planet2) {\n      hi = VAR_0}\n    }\n \n  if (lo < 0 || hi < 0) return ()\n  if (lo > hi) return ()\n  for (let VAR_0 = lo; VAR_0 <= hi; VAR_0++) {\n    u.push(y [ VAR_0 ])\n    }\n  return (u)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, VAR_0) => {\n  if (a < 0) {\n    a = - a}\n  if (VAR_0 < 0) {\n    VAR_0 = - VAR_0}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(VAR_0 % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, VAR_0) => {\n  if (a < 0) {\n    a = - a}\n  if (VAR_0 < 0) {\n    VAR_0 = - VAR_0}\n \n  const product = a * VAR_0\n  let result = \"\"\n  while (a > 0) {\n    result = VAR_0.toString() + result\n    a -= VAR_0\n  }\n  return parseInt(result, 10)\n}\n\n/* \n  Write a function that takes a string and returns the length of the longest string that is a concatenation of all of the characters in the string. \n  Assume the string is always valid.\n  Examples:\n  longestConcat(\"abc\") returns 3\n  longestConcat(\"abbcd\") returns 5\n  longestConcat(\"bbabcccc\") returns 5\n  longestConcat(\"aaaaa\") returns 3\n  longestConcat(\"abcabcabc\") returns 9\n  longestConcat(\"aaabbbccc\") returns 6\n  longestConcat(\"aaabbbb\") returns 5\n  longestConcat(\"aaabbb\") returns 5\n  longestConcat(\"aaabb\") returns 5\n  longestConcat(\"aab\") returns 2\n  longestConcat(\"a\") returns 1\n  longestConcat(\"\") returns 0\n  longestConcat(null) returns 0\n  longestConcat(\" \") returns 0\n  */\nconst longestConcat = (str, VAR_0) => {\n  if (str == null) {\n    return 0\n  } else {\n    const strLength = str.length\n    if (strLength == 0) {\n      return 0\n    } else {\n      const lengthOfLongest = 0\n      const lengthOfNextLongest = 0\n      let concat = \"\"\n      for (let i = 0; i < strLength; i++) {\n        concat = str[i].toString() + concat\n        lengthOfNextLongest = concat.length\n        if (lengthOfLongest < lengthOfNextLongest) {\n          lengthOfLongest = lengthOfNextLongest\n        }\n      }\n      return lengthOfLongest\n    }\n  }\n}\n\n/*\nWrite a function that takes a string and returns the number of occurrences of a given substring in the string.\nAssume the string is always valid.\nExamples:\nfindSubstring(\"abcabcabc\", \"abc\") returns 4\nfindSubstring(\"abcabcabc\", \"b\") returns 2\nfindSubstring(\"abcabcabc\", \"c\") returns 2\nfindSubstring(\"abcabcabc\", \"ab\") returns 2\nfindSubstring(\"abcabcabc\", \"ac\") returns 1\nfindSubstring(\"abcabcabc\", \"cba\") returns 1\nfindSubstring(\"abcabcabc\", \"cba\") returns 1\nfindSubstring(\"abcabcabc\", \"\") returns 0\nfindSubstring(\"abcabcabc\", \"\") returns 0\nfindSubstring(\"\", \"\") returns 0\nfindSubstring(\"\", \"b\") returns 0\nfindSubstring(\"\", \"ab\") returns 0\nfindSubstring(\"\", \"a\") returns 0\nfindSubstring(\"abcabcabc\", \"\") returns 0\nfindSubstring(\"abcabcabc\", \"\") returns 0\nfindSubstring(\"\", \"\") returns 0\nfindSubstring(\"\", \"\") returns 0\n*/\nconst findSubstring = (str, substr, VAR_0) => {\n  if (str == null) {\n    return 0\n  } else {\n    if (str.indexOf(substr)!= -1) {\n      return 1\n    } else {\n      return findSubstring(str.slice(1), substr, VAR_0 + 1)\n    }\n  }\n}\n\n/*\n  Write a function that takes a string and returns the number of occurrences of a given substring in the string.\n  Assume the string is always valid.\n  Examples:\n  findSubstring(\"abcabcabc\", \"abc\") returns 4\n  findSubstring(\"abcabcabc\", \"b\") returns 2\n  findSubstring(\"abcabcabc\", \"c\") returns 2\n  findSubstring(\"abcabcabc\", \"ab\") returns 2\n  findSubstring(\"abcabcabc\", \"ac\") returns 1\n  findSubstring(\"abcabcabc\", \"cba\") returns 1\n  findSubstring(\"abcabcabc\", \"cba\") returns 1\n  findSubstring(\"abcabcabc\", \"\") returns 0\n  findSubstring(\"abcabcabc\", \"\") returns 0\n  findSubstring(\"\", \"\") returns 0\n  findSubstring(\"\", \"b\") returns 0\n  findSubstring(\"\", \"ab\") returns 0\n  findSubstring(\"\", \"a\") returns 0\n  findSubstring(\"\", \"\") returns 0\n  findSubstring(\"\", \"\") returns 0\n  findSubstring(\"\", \"\") returns 0\n*/\nconst findSubstring = (str, substr, VAR_0) => {\n  if (str == null) {\n    return 0\n  } else {\n    if (str.indexOf(substr)!= -1) {\n      return 1\n    } else {\n      return findSubstring(str.slice(1), substr, VAR_0 + 1)\n    }\n  }\n}\n\n/*\n  Write a function that takes a string and returns a new string where all occurrences of the substring have been replaced by the replacement string.\n  Assume the string is always valid.\n  Examples:\n  replace(\"abcabcabc\", \"abc\", \"c\") returns \"cacabcac\"\n  replace(\"abcabcabc\", \"b\", \"b\") returns \"abcabcab\"\n  replace(\"abcabcabc\", \"c\", \"c\") returns \"abcabcab\"\n  replace(\"abcabcabc\", \"a\", \"a\") returns \"abcaaab\"\n  replace(\"abcabcabc\", \"b\", \"\") returns \"abcaaab\"\n  replace(\"abcabcabc\", \"b\", \"\") returns \"abcaaab\"\n  replace(\"abcabcabc\", \"a\", \"\") returns \"abcabcab\"\n  replace(\"abcabcabc\", \"c\", \"\") returns \"abcabcab\"\n  replace(\"abcabcabc\", \"c\", \"\") returns"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(VAR_0) => {\n  VAR_0 = Math.abs(VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(VAR_0, 1.0 / 3.0)), 3) == VAR_0);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(VAR_0) => {\n  VAR_0 = Math.abs(VAR_0);\n \n  const number = VAR_0;\n  let root = Math.pow(number, 1/3);\n  let x = Math.pow(root, 3);\n  if (x === number) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst is_cube = (VAR_0) => {\n  const number = VAR_0;\n  if (number < 1) {\n    return false;\n  } else if (number === 1) {\n    return true;\n  } else if (number % 1 === 0) {\n    return false;\n  } else {\n    return iscube(number);\n  }\n}\n\n// is_cube(64);\n// is_cube(8);\n// is_cube(16);\n// is_cube(9);\n// is_cube(16);\n// is_cube(9);\n// is_cube(2);\n// is_cube(0);\n// is_cube(180);\n// is_cube(64);\n// is_cube(16);\n// is_cube(9);\n// is_cube(1);\n// is_cube(2);\n// is_cube(3);\n// is_cube(4);\n// is_cube(5);\n// is_cube(6);\n// is_cube(7);\n// is_cube(8);\n// is_cube(9);\n// is_cube(10);\n// is_cube(11);\n// is_cube(12);\n// is_cube(13);\n// is_cube(14);\n// is_cube(15);\n// is_cube(16);\n// is_cube(17);\n// is_cube(18);\n// is_cube(19);\n// is_cube(20);\n// is_cube(21);\n// is_cube(22);\n// is_cube(23);\n// is_cube(24);\n// is_cube(25);\n// is_cube(26);\n// is_cube(27);\n// is_cube(28);\n// is_cube(29);\n// is_cube(30);\n// is_cube(31);\n// is_cube(32);\n// is_cube(33);\n// is_cube(34);\n// is_cube(35);\n// is_cube(36);\n// is_cube(37);\n// is_cube(38);\n// is_cube(39);\n// is_cube(40);\n// is_cube(41);\n// is_cube(42);\n// is_cube(43);\n// is_cube(44);\n// is_cube(45);\n// is_cube(46);\n// is_cube(47);\n// is_cube(48);\n// is_cube(49);\n// is_cube(50);\n// is_cube(51);\n// is_cube(52);\n// is_cube(53);\n// is_cube(54);\n// is_cube(55);\n// is_cube(56);\n// is_cube(57);\n// is_cube(58);\n// is_cube(59);\n// is_cube(60);\n// is_cube(61);\n// is_cube(62);\n// is_cube(63);\n// is_cube(64);\n// is_cube(65);\n// is_cube(66);\n// is_cube(67);\n// is_cube(68);\n// is_cube(69);\n// is_cube(70);\n// is_cube(71);\n// is_cube(72);\n// is_cube(73);\n// is_cube(74);\n// is_cube(75);\n// is_cube(76);\n// is_cube(77);\n// is_cube(78);\n// is_cube(79);\n// is_cube(80);\n// is_cube(81);\n// is_cube(82);\n// is_cube(83);\n// is_cube(84);\n// is_cube(85);\n// is_cube(86);\n// is_cube(87);\n// is_cube(88);\n// is_cube(89);\n// is_cube(90);\n// is_cube(91);\n// is_cube(92);\n// is_cube(93);\n// is_cube(94);\n// is_cube(95);\n// is_cube(96);\n// is_cube(97);\n// is_cube(98);\n// is_cube(99);\n// is_cube(100);\n// is_cube(101);\n// is_cube(102);\n// is_cube(103);\n// is_cube(104);\n// is_cube(105);\n// is_cube(106);\n// is_cube(107);\n// is_cube(108);\n// is_cube(109);\n// is_cube(110);\n// is_cube(111);\n// is_cube(112);\n// is_cube(113);\n// is_cube(114);\n// is_cube(115);\n// is_cube(116);\n// is_cube(117);\n// is_cube(118);\n// is_cube(119);\n// is_cube(120);\n// is_cube(121);\n// is_cube(122);\n// is_cube(123);\n// is_cube(124);\n// is_cube(125);\n// is_cube(126);\n// is_cube(127);\n// is_cube(128);\n// is_cube(129);\n// is_cube(130);\n// is_cube(131);\n// is_cube(132);\n// is_cube(133);\n// is_cube(134);\n// is_cube(135);\n// is_cube(136);\n// is_cube(137);\n// is_cube(138);\n// is_cube(139);\n// is_cube(140);\n// is_cube(141);\n// is_cube(142);\n// is_"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const VAR_0 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => VAR_0 [ a ] - VAR_0 [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const VAR_0 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_1 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_2 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_3 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_4 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_5 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_6 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_7 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_8 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_9 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_10 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_11 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_12 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_13 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_14 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  const VAR_15 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, VAR_0) => VAR_0 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, VAR_0) =>(VAR_0 % 2 == 0 ? even [ VAR_0 / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, VAR_0) => VAR_0 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  return even;\n};\n\nexport default sortEven;<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let VAR_0 = n; VAR_0 < n * 3; VAR_0+=2) {\n    t.push(VAR_0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let VAR_0 = n; VAR_0 < n * 3; VAR_0+=2) {\n    t.push(VAR_0)\n   \n  }\n  return t\n}\n\nlet result = makeAPile(10)\nconsole.log(result)<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let VAR_0 = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      VAR_0.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      VAR_0.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      VAR_0.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      VAR_0.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      VAR_0.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      VAR_0.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      VAR_0.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      VAR_0.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      VAR_0.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      VAR_0.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      VAR_0.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      VAR_0.push('D-')\n      }\n    else {\n      VAR_0.push('E')\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let VAR_0 = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      VAR_0.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      VAR_0.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      VAR_0.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      VAR_0.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      VAR_0.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      VAR_0.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n      VAR_0.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      VAR_0.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      VAR_0.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      VAR_0.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      VAR_0.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      VAR_0.push('D-')\n      }\n    else {\n      VAR_0.push('E')\n      }\n  }\n  return VAR_0\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var VAR_0 = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while (VAR_0 < x)\n  VAR_0 = VAR_0 * n;\n  return(VAR_0 == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var VAR_0 = 1;\n \n  while (x % n == 0)\n  {\n    x = x / n;\n    VAR_0 = VAR_0 * n;\n  }\n  if (x!= 1)\n  return false;\n  else return true;\n};\n \nconsole.log(isSimplePower(3, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(VAR_0 => VAR_0 > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(VAR_0 => VAR_0 > 0);\n \n};\n\nexport default getPositive;<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (VAR_0 % 3 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ]}\n    else\nif (VAR_0 % 4 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ] * lst [ VAR_0 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    else {\n      y+=lst [ VAR_0 ]}\n    }\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (VAR_0 % 3 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ]}\n    else\nif (VAR_0 % 4 == 0) {\n      y+=lst [ VAR_0 ] * lst [ VAR_0 ] * lst [ VAR_0 ]}\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let VAR_0 = 2; VAR_0 <= n; VAR_0++) {\n    if (VAR_0 % 2 == 0) {\n      p.push(1 + VAR_0 / 2)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      p.push(p [ VAR_0 - 2 ] + p [ VAR_0 - 1 ] + 1 +(VAR_0 + 1) / 2)\n      }\n    }\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let VAR_0 = 2; VAR_0 <= n; VAR_0++) {\n    if (VAR_0 % 2 == 0) {\n      p.push(1 + VAR_0 / 2)\n     \n    } else {\n      p.push(VAR_0 + VAR_0 + 1)\n    }\n  }\n  return p\n}\n\ntri(4)\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var VAR_0 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return VAR_0 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    VAR_0.push(VAR_0.at( - 1) + VAR_0.at( - 2) +\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0.at( - 3) + VAR_0.at( - 4));\n    VAR_0.shift();\n    }\n  return VAR_0.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var VAR_0 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return VAR_0 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    VAR_0.push(VAR_0.at( - 1) + VAR_0.at( - 2) +\n   \n    VAR_0.at( - 3) + VAR_0.at( - 4) );\n  }\n  return VAR_0.at( - 1);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let VAR_0 = y; VAR_0 >= x; VAR_0--) {\n    if (VAR_0 % 2 == 0) {\n      return VAR_0}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let VAR_0 = y; VAR_0 >= x; VAR_0--) {\n    if (VAR_0 % 2 == 0) {\n      return VAR_0}\n   \n  }\n}\n\n//console.log(chooseNum(12, 15))\n\n/*This function returns a random number in the range [0, x] inclusive, \n  where x is a number passed as a parameter.\n  */\nconst getRandNum =(x) => {\n  let VAR_0 = 0\n  while (VAR_0 < x) {\n    VAR_0 += Math.floor(Math.random() * x)\n  }\n  return VAR_0\n}\n\n//console.log(getRandNum(15))\n\n/*This function returns a random number in the range [0, x] inclusive, \n  where x is a number passed as a parameter.\n  */\nconst getRandNum2 =(x) => {\n  let VAR_0 = 0\n  let VAR_1 = x\n  let VAR_2 = x\n  while (VAR_2 >= VAR_1) {\n    VAR_2 -= VAR_1\n    VAR_1 = VAR_1 * VAR_1\n  }\n  return VAR_2 + VAR_1\n}\n\n//console.log(getRandNum2(15))\n\n\n/* This function returns the number of the day of the week, where Monday is 1\n  and Sunday is 7.\n\n  For example:\n  dayOfWeek(3) = 2\n  dayOfWeek(4) = 3\n  dayOfWeek(10) = 4\n  dayOfWeek(11) = 5\n  dayOfWeek(12) = 6\n  dayOfWeek(14) = 7\n  */\nconst dayOfWeek =(day) => {\n  let VAR_0 = 0\n  let VAR_1 = 0\n  while (VAR_0 < day) {\n    VAR_0 += VAR_1\n    VAR_1 = 7 - VAR_0 % 7\n  }\n  return VAR_0\n}\n\n//console.log(dayOfWeek(3))\n//console.log(dayOfWeek(4))\n//console.log(dayOfWeek(10))\n//console.log(dayOfWeek(11))\n//console.log(dayOfWeek(12))\n//console.log(dayOfWeek(14))\n\n/*This function takes a string argument and returns the number of \n  characters in the string.\n  */\nconst strLen =(s) => {\n  return s.length\n}\n\n//console.log(strLen(\"abcdef\"))\n\n/*This function takes a string argument and returns the first character of the\n  string.\n  */\nconst strFirst =(s) => {\n  return s[0]\n}\n\n//console.log(strFirst(\"abcdef\"))\n\n/*This function takes a string argument and returns the last character of the\n  string.\n  */\nconst strLast =(s) => {\n  return s[s.length - 1]\n}\n\n//console.log(strLast(\"abcdef\"))\n\n/*This function takes a string argument and returns the number of \n  occurrences of the specified character in the string.\n  */\nconst charCount =(s, c) => {\n  let VAR_0 = 0\n  let VAR_1 = 0\n  while (VAR_0 < s.length) {\n    VAR_1 += s[VAR_0] == c\n    VAR_0++\n  }\n  return VAR_1\n}\n\n//console.log(charCount(\"abcdef\", \"d\"))\n\n/*This function takes a string argument and returns the number of \n  occurrences of the specified substring in the string.\n  */\nconst substrCount =(s, subStr) => {\n  let VAR_0 = 0\n  let VAR_1 = 0\n  while (VAR_0 < s.length) {\n    VAR_1 += s.indexOf(subStr, VAR_0)\n    VAR_0++\n  }\n  return VAR_1\n}\n\n//console.log(substrCount(\"abcdef\", \"def\"))\n\n/*This function takes two strings and returns the number of \n  characters in the first string that appears in the second string.\n  */\nconst charCount2 =(s1, s2) => {\n  let VAR_0 = 0\n  let VAR_1 = 0\n  while (VAR_0 < s1.length) {\n    VAR_1 += s2.indexOf(s1[VAR_0], VAR_1)\n    VAR_0++\n  }\n  return VAR_1\n}\n\n//console.log(charCount2(\"abcdef\", \"ef\"))\n\n/*This function takes two strings and returns the number of \n  occurrences of the specified substring in the first string that appears in\n  the second string.\n  */\nconst substrCount2 =(s1, s2) => {\n  let VAR_0 = 0\n  let VAR_1 = 0\n  while (VAR_0 < s1.length) {\n    VAR_1 += s1.indexOf(s2, VAR_0)\n    VAR_0++\n  }\n  return VAR_1\n}\n\n//console.log(substrCount2(\"abcdef\", \"ef\"))\n\n/*This function takes a string argument and returns the number of \n  occurrences of the specified character in the string.\n  */\nconst charCount3 =(s, c) => {\n  let VAR_0 = 0\n  let VAR_1 = 0\n  while (VAR_0 < s.length) {\n    VAR_1 += s.indexOf(c, VAR_0)\n    VAR_0++\n  }\n  return VAR_1\n}\n\n//console.log(charCount3(\"abcdef\", \"d\"))\n\n/*This function takes two strings and returns the number of \n  occurrences"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] % 2 == 1 && lst [ VAR_0 ] > 0) {\n      p+=lst [ VAR_0 ] * lst [ VAR_0 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] % 2 == 1 && lst [ VAR_0 ] > 0) {\n      p+=lst [ VAR_0 ] * lst [ VAR_0 ]\n     \n    }\n  }\n  return p\n}\n\n/*\n  Given a list of strings, return the longest string.\n  If there are two or more strings with the same length, return the longest one.\n  If there are none, return an empty string.\n  */\nconst longestString = (lst) => {\n  let max = ''\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ].length > max.length) {\n      max = lst [ VAR_0 ]\n    }\n  }\n  return max\n}\n\n/*\n  Given a list of words, return a list of all the words that can be formed by\n  combining the first letter of each word with the second letter of each word.\n  Ignore any word that contains a double letter or a letter that is not in\n  the alphabet.\n  combine('cat', 'dog') == ['cad', 'cog', 'cogd', 'dogd', 'dogg']\n  combine('cat', 'dog', 'dog') == ['catdog', 'catdogd', 'catdogg', 'dogdogd', 'dogdogg']\n  combine('dog', 'cat') == ['dogcat', 'dogcatd', 'dogcatg', 'catdogg']\n  combine('cat', 'dog', 'dog') == ['catdogdog', 'catdogdogd', 'catdogdogg', 'dogdogdogd', 'dogdogdogg']\n  combine('cat', 'dog', 'dog', 'dog') == ['catdogdogdog', 'catdogdogdogd', 'catdogdogdogg', 'dogdogdogdogd', 'dogdogdogdogg']\n  combine('cat', 'dog', 'dog', 'dog', 'dog') == ['catdogdogdogdog', 'catdogdogdogdogd', 'catdogdogdogdogg', 'dogdogdogdogdogd', 'dogdogdogdogdogg']\n  */\nconst combine = (...args) => {\n  let ret = []\n  let VAR_0 = args.length\n  let VAR_1 = args [ VAR_0 - 1 ]\n  while (VAR_0 > 1) {\n    let VAR_2 = args [ VAR_0 - 2 ]\n    let VAR_3 = args [ VAR_0 - 3 ]\n    let VAR_4 = args [ VAR_0 - 4 ]\n    for (let VAR_5 = 0; VAR_5 < 26; VAR_5++) {\n      let VAR_6 = VAR_2 + VAR_3 + VAR_4 + VAR_5\n      if (VAR_6 > 96) {\n        break\n      }\n      ret.push(VAR_1 + String.fromCharCode(VAR_6))\n    }\n    VAR_0 -= 4\n  }\n  return ret\n}\n\n/*\n  Given a list of strings, return the list of strings with the first letter\n  capitalized.\n  */\nconst capitalize = (lst) => {\n  return lst.map((x) => x.charAt(0).toUpperCase() + x.slice(1))\n}\n\n/*\n  Given a string, return a string with all of the upper-case letters in\n  the string replaced by their lower-case counterparts.\n  */\nconst toLowerCase = (str) => {\n  return str.replace(/[A-Z]/g, (match) => match.toLowerCase())\n}\n\n/*\n  Given a string, return a string with all of the lower-case letters in\n  the string replaced by their upper-case counterparts.\n  */\nconst toUpperCase = (str) => {\n  return str.replace(/[a-z]/g, (match) => match.toUpperCase())\n}\n\n/*\n  Given a string, return a string with all of the punctuation removed.\n  */\nconst stripPunctuation = (str) => {\n  return str.replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/*\n  Given a string, return a string with all of the whitespace characters removed.\n  */\nconst stripWhiteSpace = (str) => {\n  return str.replace(/\\s/g, '')\n}\n\n/*\n  Given a string, return a string with all of the uppercase letters in\n  the string replaced by their lowercase counterparts.\n  */\nconst toLowerCase = (str) => {\n  return str.replace(/[A-Z]/g, (match) => match.toLowerCase())\n}\n\n/*\n  Given a string, return a string with all of the uppercase letters in\n  the string replaced by their lowercase counterparts.\n  */\nconst toUpperCase = (str) => {\n  return str.replace(/[a-z]/g, (match) => match.toUpperCase())\n}\n\n/*\n  Given a string, return a string with all of the punctuation removed.\n  */\nconst stripPunctuation = (str) => {\n  return str.replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/*\n  Given a string, return a string with all of the whitespace characters removed.\n  */\nconst stripWhiteSpace = (str) => {\n  return str.replace(/\\s/g, '')\n}\n\n/*\n  Given a string, return a string with all of the uppercase letters in\n  the string replaced by their lowercase counterparts.\n"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList3 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList4 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList5 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList6 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList7 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList8 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList9 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList10 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList11 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList12 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList13 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList14 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList15 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList16 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList17 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList18 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList19 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList20 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList21 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList22 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList23 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList24 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList25 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList26 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList27 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList28 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList29 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList30 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList31 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList32 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList33 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList34 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList35 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList36 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList37 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList38 =(l) => {\n  return l.map(VAR_0 => VAR_0 + 1);\n \n};\n\nconst incrList39"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(VAR_0) => {\n  if (VAR_0.length < 3)\n  return false;\n  for (let i = 0; i < VAR_0.length - 2; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 [ i ] == VAR_0 [ i + 1 ] || VAR_0 [ i + 1 ] == VAR_0 [ i + 2 ] || VAR_0 [ i ] == VAR_0 [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(VAR_0) => {\n  if (VAR_0.length < 3)\n  return false;\n  for (let i = 0; i < VAR_0.length - 2; i++)\n \n  if (VAR_0[i] == VAR_0[i + 1] && VAR_0[i] == VAR_0[i + 2])\n  return false;\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(VAR_0 => Number.isInteger(VAR_0));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(VAR_0 => Number.isInteger(VAR_0));\n \n}\n\n/* \n  Given a list of python values, convert them to a list of string \n  values suitable for sending as an http request\n  >>> toHttpString([1,2,3,4,5,6,7])\n  '1,2,3,4,5,6,7'\n  >>> toHttpString(['a','b','c','d','e'])\n  'a,b,c,d,e'\n  >>> toHttpString(['a','b','c','d','e'], ',')\n  'a,b,c,d,e'\n  >>> toHttpString(['a','b','c','d','e'], ':')\n  'a:b:c:d:e'\n  >>> toHttpString(['a','b','c','d','e'], '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], ':')\n  'a:b:c:d:e'\n  >>> toHttpString(['a','b','c','d','e'], '::', ':')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], ':', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', ':')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], ':', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], ':', '::', ':')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', ':', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', ':', '::', ':')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::', '::', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::', '::', '::', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::', '::', '::', '::', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::', '::', '::', '::', '::', '::')\n  'a::b::c::d::e'\n  >>> toHttpString(['a','b','c','d','e'], '::', '::', '::', '::', '::', '::', '::', '::', '::')\n  'a::b::c::d::e'\n  */\nconst toHttpString =(values, delimiter, prefix, suffix, postfix, postfix2, postfix3, postfix4, postfix5) => {\n  let result = values.map(VAR_0 => {\n    return typeof VAR_0 === 'object'? VAR_0.toString() : VAR_0;\n  }).join(delimiter);\n  if(prefix) {\n    result = prefix + result;\n  }\n  if(suffix) {\n    result = result + suffix;\n  }\n  if(postfix) {\n    result = result + postfix;\n  }\n  if(postfix2) {\n    result = result + postfix2;\n  }\n  if(postfix3) {\n    result = result + postfix3;\n  }\n  if(postfix4) {\n    result = result + postfix4;\n  }\n  if(postfix5) {\n    result = result + postfix5;\n  }\n  return result;\n}\n\n/*\n  Given a list of python values, convert them to a list of integer\n  values suitable for sending as an http request\n  >>> toHttpInteger([1,2,3,4,5,6,7])\n  [1,2,3,4,5,6,7]\n  >>> toHttpInteger([1,2,3,4,5,6,7], ',')\n  [1,2,3,4,5,6,7]\n  >>> toHttpInteger([1,2,3,4,5,6,7], ':')\n  [1,2,3,4,5,6,7]\n  >>> toHttpInteger([1,2,3,4,5,6,7], '::')\n  [1,2,3,4,5,6,7]\n  >>> toHttpInteger([1,2,3,4,5,6,7], ':')\n  [1,2,3,4,5,6,7]\n  >>> toHttpInteger([1,2,3,4,5,6,7], '::', ':')\n  [1,2,3,4,5,6,7]\n  >>> toHttpInteger([1,2,3,4,5,6,7], '::', '::')\n  [1,2,3,4,5,6,7]\n"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return VAR_0.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n   \n    VAR_0 [ j ] = VAR_0 [ ind ]\n    }\n  return VAR_0.slice(0, k)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(VAR_0) => {\n  return VAR_0.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(VAR_0) => {\n  return VAR_0.map((x, i) => x * i).slice(1);\n \n};\n\nexport default derivative;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(VAR_0)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(VAR_0)\n  return result\n}\n\n/**\n  Given an array 'arr', return its md5 hash equivalent string.\n  If 'arr' is an empty array, return null.\n\n  >>> stringToMd5([1, 2, 3]) == 'd0a8eafdae2b6d1d1a8a5e4c80f7b52f1e'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == []) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(VAR_0)\n  return result\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5({a: 1, b: 2}) == 'c9cfce9d6a4d1f5e2d5f9f8d3b7dc4'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == {}) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5(['a', 'b']) == '2c1f0f2d0e3d6b3b8a0b0d4f8b6d9'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == []) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5({a: 'b', c: 'd'}) == '5f5bd4bea3e7e4b0b7a1d0f1f2d3d'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == {}) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n\n/**\n  Given an array 'arr', return its md5 hash equivalent string.\n  If 'arr' is an empty array, return null.\n\n  >>> stringToMd5([1, 2, 3, 4]) == 'c6e3d7a5b9d3a1eea3f8a8f1e1d9f0'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == []) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n\n/**\n  Given an array 'arr', return its md5 hash equivalent string.\n  If 'arr' is an empty array, return null.\n\n  >>> stringToMd5({a: 1, b: 2, c: 3, d: 4}) == '2d3b0f3c2d6d1d3a3d2e3e1f0f9f'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == {}) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('a') == 'e5d6b1a0b3c0b9b0c4e5f5b6d7'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(VAR_0)\n  return result\n}\n\n/**\n  Given an array 'arr', return its md5 hash equivalent string.\n  If 'arr' is an empty array, return null.\n\n  >>> stringToMd5(['a', 'b', 'c']) == '0a3a0b3a1b1b2b3a2a3a4a5a6'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == []) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n\n/**\n  Given an array 'arr', return its md5 hash equivalent string.\n  If 'arr' is an empty array, return null.\n\n  >>> stringToMd5({a: 'b', c: 'd', e: 'f'}) == '3e2b7a0b0e9b7c0e9d0e1e0f'\n  */\nconst stringToMd5 =(VAR_0) => {\n  if (VAR_0 == {}) {\n    return null}\n  var md5 = require('js-md5')\n \n  var result = md5(JSON.stringify(VAR_0))\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let VAR_0 = 0; VAR_0 < arr.length; VAR_0++) {\n    for (let j = 0; j < arr [ VAR_0 ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ VAR_0 ].length; k++) {\n        if (arr [ VAR_0 ] [ k ].charCodeAt() < arr [ VAR_0 ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ VAR_0 ] = arr [ VAR_0 ].slice(0, j) + arr [ VAR_0 ] [ ind ] + arr [ VAR_0 ].slice(j + 1, ind) + arr [ VAR_0 ] [ j ] + arr [ VAR_0 ].slice(ind + 1, arr [ VAR_0 ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let VAR_0 = 0; VAR_0 < arr.length; VAR_0++) {\n    if (VAR_0 > 0) {\n      t = t + ' '}\n    t = t + arr [ VAR_0 ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let VAR_0 = 0; VAR_0 < arr.length; VAR_0++) {\n    for (let j = 0; j < arr [ VAR_0 ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ VAR_0 ].length; k++) {\n        if (arr [ VAR_0 ] [ k ].charCodeAt() < arr [ VAR_0 ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ VAR_0 ] = arr [ VAR_0 ].slice(0, j) + arr [ VAR_0 ] [ ind ] + arr [ VAR_0 ].slice(j + 1, ind) + arr [ VAR_0 ] [ j ] + arr [ VAR_0 ].slice(ind + 1, arr [ VAR_0 ].length)\n       \n        }\n      }\n    }\n    return arr.join(' ')\n  }\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(VAR_0, prefix) => {\n  return VAR_0.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(VAR_0, prefix) => {\n  return VAR_0.filter(x => x.startsWith(prefix));\n \n};\n\n// Test it out\n\nconst test = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test2 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test3 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test4 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test5 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test6 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test7 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test8 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test9 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test10 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test11 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test12 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test13 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test14 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test15 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test16 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test17 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test18 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test19 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test20 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test21 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test22 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test23 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test24 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test25 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test26 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test27 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test28 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test29 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test30 = [\n  {name: 'abc', num: 4},\n  {name: 'bcd', num: 7},\n  {name: 'cde', num: 12}\n];\n\nconst test31 = [\n  {name"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let VAR_0 = lst\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = VAR_0 [ j ]\n    VAR_0 [ j ] = VAR_0 [ ind ]\n    VAR_0 [ ind ] = tmp\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let smallest = VAR_0 [ 0 ]\n  let pt = 1\n  while (pt < VAR_0.length) {\n    if (VAR_0 [ pt ] > smallest) {\n      return VAR_0 [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let VAR_0 = lst\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] < VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = VAR_0 [ j ]\n    VAR_0 [ j ] = VAR_0 [ ind ]\n    VAR_0 [ ind ] = tmp\n   \n  }\n  \n  let result = VAR_0 [ 1 ]\n  if (VAR_0.length > 2) {\n    result = nextSmallest(VAR_0.slice(2))\n  }\n  return result\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]) === 2)\nconsole.log(nextSmallest([5, 1, 4, 3, 2]) === 2)\nconsole.log(nextSmallest([]) === null)\nconsole.log(nextSmallest([1, 1]) === null)\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let VAR_0 = message [ i ].charCodeAt()\n    if (VAR_0 > 96) {\n      VAR_0-=32}\n    else\nif (VAR_0 != 32 && VAR_0 < 96) {\n      VAR_0+=32}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 == 65 || VAR_0 == 97 || VAR_0 == 69 || VAR_0 == 101 || VAR_0 == 73 || VAR_0 == 105 || VAR_0 == 79 || VAR_0 == 111 || VAR_0 == 85 || VAR_0 == 117) {\n      VAR_0+=2}\n    t+=String.fromCharCode(VAR_0)\n    }\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let VAR_0 = message [ i ].charCodeAt()\n    if (VAR_0 > 96) {\n      VAR_0-=32}\n    else\nif (VAR_0!= 32 && VAR_0 < 96) {\n      VAR_0+=32}\n   \n    t+=String.fromCharCode(VAR_0)\n  }\n  return t\n}\n\nconst decode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let VAR_0 = message [ i ].charCodeAt()\n    if (VAR_0 >= 96 && VAR_0 <= 122) {\n      VAR_0+=32\n    }\n    else\nif (VAR_0 >= 65 && VAR_0 <= 90) {\n      VAR_0-=32\n    }\n    else\nif (VAR_0 >= 97 && VAR_0 <= 122) {\n      VAR_0+=32\n    }\n    else\nif (VAR_0 == 32) {\n      VAR_0=32\n    }\n    t+=String.fromCharCode(VAR_0)\n  }\n  return t\n}\n\nconsole.log(encode(\"This is a message\"))\nconsole.log(encode(\"TEST\"))\nconsole.log(encode(\"This is a message\"))\nconsole.log(encode(\"Test\"))\nconsole.log(encode(\"This is a message\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"This is a message\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole.log(encode(\"ThisIsAMessage\"))\nconsole"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let VAR_0 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      VAR_0++}\n    else {\n      VAR_0--}\n    if (VAR_0 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_0 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  VAR_0 = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      VAR_0++}\n    else {\n      VAR_0--}\n    if (VAR_0 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_0 == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let VAR_0 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      VAR_0++}\n    else {\n      VAR_0--}\n    if (VAR_0 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && VAR_0 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  let w2 = lst [ 0 ] + lst [ 1 ]\n  let VAR_1 = 0\n  u = 1\n  for (let i = 0; i < w2.length; i++) {\n    if (w2 [ i ] == '(') {\n      VAR_1++}\n    else {\n      VAR_1--}\n    if (VAR_1 < 0) {\n      u = 0;\n      break\n      }\n    }\n  if (u == 1 && VAR_1 == 0) {\n    return 'No'}\n  }\n}\n\nconsole.log(matchParens([]));\nconsole.log(matchParens(['()()']));\nconsole.log(matchParens(['()']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        VAR_0++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    VAR_0 = VAR_0.toString()\n    d.push('the number of odd elements ' + VAR_0 + 'n the str' + VAR_0 + 'ng ' + VAR_0 + ' of the ' + VAR_0 + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        VAR_0++}\n     \n    }\n    d[i] = `the number of odd elements ${VAR_0} of the str4ng ${i} of the ${i}put.`\n    \n  }\n  return d\n}\n\nmodule.exports = oddCount<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let VAR_0 = 0; VAR_0 < key.length; VAR_0++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (key [ VAR_0 ].charCodeAt() < 65 || key [ VAR_0 ].charCodeAt() > 90) {\n        hi = 0}\n      if (key [ VAR_0 ].charCodeAt() < 97 || key [ VAR_0 ].charCodeAt() > 122) {\n        lo = 0}\n      }\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let VAR_0 = 0; VAR_0 < key.length; VAR_0++) {\n     \n      if (key[VAR_0] >= 97 && key[VAR_0] <= 122) {\n        lo = lo + 1\n        if (hi === 0) {\n          hi = hi + 1\n        }\n      } else if (key[VAR_0] >= 65 && key[VAR_0] <= 90) {\n        hi = hi + 1\n      } else {\n        return false\n      }\n    }\n  }\n  if (c === 0) {\n    return false\n  }\n  if (c === lo) {\n    return true\n  }\n  if (c === hi) {\n    return true\n  }\n  return false\n}\n\n// The function below returns true if all the keys in the dictionary are lowercase,\n// or all the keys are uppercase, and the value of the dictionary is a number.\nconst checkNumberDict = (dict) => {\n  for (let key in dict) {\n    if (key === 0) {\n      return false\n    }\n    if (dict[key] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let VAR_0 = 0; VAR_0 < key.length; VAR_0++) {\n     \n      if (key[VAR_0] >= 97 && key[VAR_0] <= 122) {\n        lo = lo + 1\n        if (hi === 0) {\n          hi = hi + 1\n        }\n      } else if (key[VAR_0] >= 65 && key[VAR_0] <= 90) {\n        hi = hi + 1\n      } else {\n        return false\n      }\n    }\n  }\n  if (c === 0) {\n    return false\n  }\n  if (c === lo) {\n    return true\n  }\n  if (c === hi) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let VAR_0 = 0; VAR_0 < key.length; VAR_0++) {\n     \n      if (key[VAR_0] >= 97 && key[VAR_0] <= 122) {\n        lo = lo + 1\n        if (hi === 0) {\n          hi = hi + 1\n        }\n      } else if (key[VAR_0] >= 65 && key[VAR_0] <= 90) {\n        hi = hi + 1\n      } else {\n        return false\n      }\n    }\n  }\n  if (c === 0) {\n    return false\n  }\n  if (c === lo) {\n    return true\n  }\n  if (c === hi) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let VAR_0 = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        u = 0}\n      }\n    if (u == 0) {\n      continue}\n    if (VAR_0 == '') {\n      VAR_0+=t [ j ]}\n    else {\n      VAR_0 = VAR_0 + ' ' + t [ j ]}\n    }\n  return VAR_0\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let VAR_0 = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n      if (len % i == 0) {\n        u = 0\n        break\n      }\n    }\n    if (u == 1) {\n      VAR_0 += t [ j ]\n    }\n  }\n  return VAR_0\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence2 =(sentence) => {\n  let t = sentence.split( / s /)\n  let VAR_0 = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n      if (len % i == 0) {\n        u = 0\n        break\n      }\n    }\n    if (u == 1) {\n      VAR_0 += t [ j ]\n    }\n  }\n  return VAR_0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const VAR_0 of paren_string) {\n    if (VAR_0 == '(') {\n      current_depth+=1;\n      current_string.push(VAR_0);\n      }\n    else\nif (VAR_0 == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(VAR_0);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const VAR_0 of paren_string) {\n    if (VAR_0 == '(') {\n      current_depth+=1;\n      current_string.push(VAR_0);\n      }\n    else\nif (VAR_0 == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n        }\n      else\n        current_string.push(VAR_0);\n      }\n    }\n  \n  return result;\n};\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(VAR_0, delimeter) => {\n  if ( !Array.isArray(VAR_0) || VAR_0.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of VAR_0) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(VAR_0, delimeter) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of VAR_0) {\n   \n  result.push(n);\n  }\n  return result.join(delimeter);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(VAR_0) => {\n  var mean = VAR_0.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / VAR_0.length;\n  return VAR_0.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / VAR_0.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(VAR_0) => {\n  var mean = VAR_0.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / VAR_0.length;\n  return VAR_0.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n  }, 0);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(VAR_0) => {\n  var mean = VAR_0.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / VAR_0.length;\n  return VAR_0.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n  }, 0);\n};\n\nconst main = (VAR_0) => {\n  // Print the output of meanAbsoluteDeviation()\n  console.log(meanAbsoluteDeviation(VAR_0));\n};\n\nmain(ARRAY_0);\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (VAR_0 >= 10) {\n      k+=VAR_0 % 10;\n      VAR_0 =(VAR_0 - VAR_0 % 10) / 10;\n      }\n    k-=VAR_0;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums2 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums3 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums4 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums5 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums6 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums7 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums8 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums9 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR_0 > 0) {\n      p++;\n      continue\n      }\n    let k = 0\n    VAR_0 = - VAR_0\n   \n    while (VAR_0 > 0) {\n      k++;\n      VAR_0 = VAR_0 / 10\n      }\n    if (k > 0) {\n      p++;\n      continue\n    }\n  }\n  return p;\n}\n\nconst countNums10 =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let VAR_0 = arr [ i ]\n    if (VAR"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < nums.length; VAR_0++) {\n    if (nums [ VAR_0 ] < 10) {\n      continue}\n    let y = nums [ VAR_0 ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      p++\n      }\n    }\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < nums.length; VAR_0++) {\n    if (nums [ VAR_0 ] < 10) {\n      continue}\n    let y = nums [ VAR_0 ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n      p++\n    }\n  }\n  return p\n}\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let VAR_0 = 0; VAR_0 < string.length - substring.length + 1; VAR_0++) {\n    if (string.slice(VAR_0, VAR_0 + substring.length) == substring) {\n      times+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let VAR_0 = 0; VAR_0 < string.length - substring.length + 1; VAR_0++) {\n    if (string.slice(VAR_0, VAR_0 + substring.length) == substring) {\n      times+=1;\n     \n    }\n  }\n  return times;\n};\n\n/* Find how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes2 =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i + substring.length) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes3 =(string, substring) => {\n  let count = 0;\n  let stringLen = string.length;\n  let substringLen = substring.length;\n  for (let i = 0; i < stringLen - substringLen + 1; i++) {\n    if (string.slice(i, i + substringLen) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\n/*\nFind how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes4 =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i + substring.length) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes5 =(string, substring) => {\n  let count = 0;\n  let stringLen = string.length;\n  let substringLen = substring.length;\n  for (let i = 0; i < stringLen - substringLen + 1; i++) {\n    if (string.slice(i, i + substringLen) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes6 =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i + substring.length) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes7 =(string, substring) => {\n  let count = 0;\n  let stringLen = string.length;\n  let substringLen = substring.length;\n  for (let i = 0; i < stringLen - substringLen + 1; i++) {\n    if (string.slice(i, i + substringLen) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given string can be found in the original string.\n  >>> howManyTimes('aa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes8 =(string, substring) => {\n  let count = 0;\n  let stringLen = string.length;\n  let substringLen = substring.length;\n  for (let i = 0; i < stringLen - substringLen + 1; i++) {\n    if (string.slice(i, i + substringLen) == substring) {\n      count+=1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  howManyTimes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let VAR_0 = 0; VAR_0 < text.length; VAR_0++)\n  if (text [ VAR_0 ] != text.at( - VAR_0 - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let VAR_0 = 0; VAR_0 < text.length; VAR_0++)\n  if (text [ VAR_0 ]!= text.at( - VAR_0 - 1))\n \n  return false;\n}\n\n/*\n  Finds the longest palindrome in the string\n  >>> findLongestPalindrome('ab')\n  'ab'\n  >>> findLongestPalindrome('aba')\n  'aba'\n  >>> findLongestPalindrome('aaaaaaaa')\n  'aaaaaaaa'\n  >>> findLongestPalindrome('zab')\n  ''\n  */\nconst findLongestPalindrome =(text) => {\n    let str = text.split(\"\")\n    let longest = \"\"\n    for (let VAR_0 = 0; VAR_0 < str.length; VAR_0++) {\n        if (isPalindrome(str[ VAR_0 ]) && str[ VAR_0 ].length > longest.length) {\n            longest = str[ VAR_0 ]\n        }\n    }\n    return longest\n}\n\n/*\n  Returns the reverse of the given string\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('aba')\n  'baa'\n  >>> reverse('aaaaaaaa')\n  'aaaaaaaa'\n  >>> reverse('zab')\n  'zba'\n  */\nconst reverse =(text) => {\n    let str = text.split(\"\")\n    let reversed = \"\"\n    for (let VAR_0 = 0; VAR_0 < str.length; VAR_0++) {\n        reversed = str[ VAR_0 ] + reversed\n    }\n    return reversed\n}\n\n/*\n  Returns the longest palindrome in the given string\n  >>> findLongestPalindrome('ab')\n  'ab'\n  >>> findLongestPalindrome('aba')\n  'aba'\n  >>> findLongestPalindrome('aaaaaaaa')\n  'aaaaaaaa'\n  >>> findLongestPalindrome('zab')\n  ''\n  */\nconst findLongestPalindrome =(text) => {\n    let str = text.split(\"\")\n    let longest = \"\"\n    for (let VAR_0 = 0; VAR_0 < str.length; VAR_0++) {\n        if (isPalindrome(str[ VAR_0 ]) && str[ VAR_0 ].length > longest.length) {\n            longest = str[ VAR_0 ]\n        }\n    }\n    return longest\n}\n\n/*\n  Finds the first occurrence of a given character in the given string\n  >>> findFirst('ab', 'a')\n  0\n  >>> findFirst('ab', 'z')\n  -1\n  >>> findFirst('ab', 'a')\n  0\n  >>> findFirst('ab', 'c')\n  -1\n  >>> findFirst('ab', 'a')\n  0\n  >>> findFirst('abc', 'b')\n  1\n  >>> findFirst('abc', 'a')\n  0\n  >>> findFirst('ab', 'c')\n  -1\n  */\nconst findFirst =(text, character) => {\n    for (let VAR_0 = 0; VAR_0 < text.length; VAR_0++) {\n        if (text[ VAR_0 ] == character) {\n            return VAR_0\n        }\n    }\n    return - 1\n}\n\n/*\n  Finds the last occurrence of a given character in the given string\n  >>> findLast('ab', 'a')\n  2\n  >>> findLast('ab', 'z')\n  -1\n  >>> findLast('ab', 'a')\n  2\n  >>> findLast('ab', 'c')\n  -1\n  >>> findLast('ab', 'a')\n  2\n  >>> findLast('abc', 'b')\n  3\n  >>> findLast('abc', 'a')\n  2\n  >>> findLast('ab', 'c')\n  -1\n  */\nconst findLast =(text, character) => {\n    for (let VAR_0 = text.length - 1; VAR_0 >= 0; VAR_0--) {\n        if (text[ VAR_0 ] == character) {\n            return VAR_0\n        }\n    }\n    return - 1\n}\n\n/*\n  Counts the number of occurrences of a given character in the given string\n  >>> count('ab', 'a')\n  2\n  >>> count('ab', 'z')\n  0\n  >>> count('ab', 'a')\n  2\n  >>> count('ab', 'c')\n  0\n  >>> count('ab', 'a')\n  2\n  >>> count('abc', 'b')\n  1\n  >>> count('abc', 'a')\n  2\n  >>> count('ab', 'c')\n  0\n  */\nconst count =(text, character) => {\n    return findFirst(text, character) + 1\n}\n\n/*\n  Replaces occurrences of a given character in the given string with a new character\n  >>> replace('ab', 'a', 'c')\n  'bc'\n  >>> replace('ab', 'c', 'd')\n  'bd'\n  >>> replace('ab', 'a', 'c')\n  'bc'\n  >>> replace('ab', 'c', 'd')\n  'bd'\n  */\nconst replace =(text, character, newCharacter) => {\n    for (let VAR_0 = 0; VAR_0 < text.length; VAR_0++) {\n        if (text[ VAR_0 ] == character) {\n            text = text.slice(0, VAR_0) + newCharacter + text.slice(VAR_0 + 1)\n        }\n    }\n    return text\n}\n\n/*\n  Returns a list of all the characters in the given string\n  >>> characters('ab')\n  ['a', 'b']\n  >>> characters('abcd')\n  ['a', 'b', 'c', 'd']\n  >>> characters('ab')\n  ['a', 'b']\n  >>> characters('abc')\n  ['a', 'b', 'c']"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(VAR_0) => {\n  if ( !Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  for (const s of VAR_0) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(VAR_0) => {\n  if (!Array.isArray(VAR_0) || VAR_0.length == 0)\n  return null;\n  var maxlen = Math.max(... VAR_0.map(x => x.length));\n  for (const s of VAR_0) {\n   \n    if (s.length > maxlen)\n      maxlen = s.length;\n  }\n  return VAR_0[0] || VAR_0[1] || VAR_0[2];\n}\n\n/*\n  >>> longest([0,1,2])\n  2\n  >>> longest([1,2,3,4])\n  4\n  >>> longest([0,0,1,0])\n  1\n  >>> longest([1,0,0,0])\n  1\n  >>> longest([1,0,0,0,1,0,0,0,1,0,0,0])\n  1\n  */\nconst longest =(VAR_0) => {\n  const maxlen = Math.max(... VAR_0.map(x => x.length));\n  return VAR_0[0] || VAR_0[1] || VAR_0[2];\n}\n\n// console.log(longest(['a','b','c']));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let VAR_0 = extensions.length - 1; VAR_0 >= 0; VAR_0--) {\n    let y = 0\n    for (let j = 0; j < extensions [ VAR_0 ].length; j++) {\n      let k = extensions [ VAR_0 ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (y >= s) {\n      s = y;\n      u = VAR_0;\n      }\n    }\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let VAR_0 = extensions.length - 1; VAR_0 >= 0; VAR_0--) {\n    let y = 0\n    for (let j = 0; j < extensions [ VAR_0 ].length; j++) {\n      let k = extensions [ VAR_0 ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n    }\n    let z = y\n    if (z < s) {\n      s = z\n      u = VAR_0\n    }\n  }\n  return `${class_name}.${extensions [ u ]}`\n}\n\nconst getUserInput = (class_name) => {\n  return prompt(`Please enter the class name:`)\n}\n\nconst createNewClass = (class_name, extensions) => {\n  let class_def = {}\n  let i = 0\n  for (i = 0; i < extensions.length; i++) {\n    class_def[extensions [ i ]] = {}\n  }\n  return class_def\n}\n\nconst getUserInput2 = (class_def) => {\n  return prompt(`Please enter the name of the class (a string):`)\n}\n\nconst addExtension = (class_def, extension) => {\n  if (class_def[extension] === undefined) {\n    class_def[extension] = {}\n  }\n}\n\nconst getExtensions = (class_def) => {\n  let extensions = []\n  for (let extension in class_def) {\n    extensions.push(extension)\n  }\n  return extensions\n}\n\nconst printExtensions = (class_def) => {\n  for (let extension in class_def) {\n    let strength = class_def[extension].strength\n    if (strength === undefined) {\n      strength = 0\n    }\n    console.log(`${extension} (${strength})`)\n  }\n}\n\nconst printClassDef = (class_def) => {\n  for (let extension in class_def) {\n    let strength = class_def[extension].strength\n    if (strength === undefined) {\n      strength = 0\n    }\n    console.log(`${extension} (${strength})`)\n  }\n}\n\nconst loadClass = (class_name, extensions, class_def) => {\n  let strength = strongestExtension(class_name, extensions)\n  for (let extension in class_def) {\n    if (extension === strength) {\n      for (let i = 0; i < extensions.length; i++) {\n        addExtension(class_def, extensions [ i ])\n      }\n    }\n  }\n}\n\nconst createClass = (class_name, extensions) => {\n  let class_def = createNewClass(class_name, extensions)\n  let userInput = getUserInput2(class_def)\n  loadClass(userInput, extensions, class_def)\n  printExtensions(class_def)\n}\n\nconst main = () => {\n  let class_name = getUserInput(class_name)\n  let extensions = getUserInput(extensions)\n  createClass(class_name, extensions)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n   \n  }\n  return p\n}\n\nconst addElements2 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements3 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements4 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements5 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements6 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements7 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements8 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements9 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements10 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements11 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements12 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements13 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements14 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements15 =(arr, k) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < k; VAR_0++) {\n    if (arr [ VAR_0 ] < 100 && arr [ VAR_0 ] > - 100) {\n      p+=arr [ VAR_0 ]}\n  }\n  return p\n}\n\nconst addElements16 =(arr, k) => {\n  let p = 0\n  for (let V"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let VAR_0 = array\n  let tot = VAR_0 [ 0 ] + VAR_0 [ VAR_0.length - 1 ]\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if ((tot % 2 == 1 && VAR_0 [ k ] < VAR_0 [ ind ]) ||(tot % 2 == 0 && VAR_0 [ k ] > VAR_0 [ ind ])) {\n        ind = k\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    let tmp = VAR_0 [ j ]\n    VAR_0 [ j ] = VAR_0 [ ind ]\n    VAR_0 [ ind ] = tmp\n    }\n  return VAR_0\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let VAR_0 = array\n  let tot = VAR_0 [ 0 ] + VAR_0 [ VAR_0.length - 1 ]\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if ((tot % 2 == 1 && VAR_0 [ k ] < VAR_0 [ ind ]) ||(tot % 2 == 0 && VAR_0 [ k ] > VAR_0 [ ind ])) {\n        ind = k\n       \n      }\n    }\n    if (ind!= j) {\n      let temp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = temp\n    }\n  }\n  return VAR_0\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == ' ') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      VAR_0 = 0;\n      }\n    else {\n      t+=text [ i ]\n      }\n    }\n  if (VAR_0 == 1) {\n    t+='_'}\n  if (VAR_0 == 2) {\n    t+='__'}\n  if (VAR_0 > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      VAR_0 = 0}\n    else {\n      t+=text [ i ]\n      VAR_0 = 0}\n  }\n  return t\n}\n\n// ------------------------------------------------------------\n// Example 3\n// ------------------------------------------------------------\n// Given a string text, \n//   replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//   \n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\" Example 2\") == \"Example_2\"\n// fixSpaces(\" Example   3\") == \"Example_3\"\n\n// Example 3\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      VAR_0 = 0}\n    else {\n      t+=text [ i ]\n      VAR_0 = 0}\n  }\n  return t\n}\n\n\n// ------------------------------------------------------------\n// Example 4\n// ------------------------------------------------------------\n// Given a string text, \n//   replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//   \n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\" Example 2\") == \"Example_2\"\n// fixSpaces(\" Example   3\") == \"Example_3\"\n\n// Example 4\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      VAR_0 = 0}\n    else {\n      t+=text [ i ]\n      VAR_0 = 0}\n  }\n  return t\n}\n\n\n\n\n\n// ------------------------------------------------------------\n// Example 5\n// ------------------------------------------------------------\n// Given a string text, \n//   replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//   \n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\" Example 2\") == \"Example_2\"\n// fixSpaces(\" Example   3\") == \"Example_3\"\n\n// Example 5\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      VAR_0 = 0}\n    else {\n      t+=text [ i ]\n      VAR_0 = 0}\n  }\n  return t\n}\n\n// ------------------------------------------------------------\n// Example 6\n// ------------------------------------------------------------\n// Given a string text, \n//   replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//   \n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\" Example 2\") == \"Example_2\"\n// fixSpaces(\" Example   3\") == \"Example_3\"\n\n// Example 6\nconst fixSpaces =(text) => {\n  let t = '' let VAR_0 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      VAR_0++}\n    else\nif (VAR_0 > 0) {\n      if (VAR_0 == 1) {\n        t+='_'}\n      if (VAR_0 == 2) {\n        t+='__'}\n      if (VAR_0 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      VAR_0 = 0}\n    else {\n      t+=text [ i ]\n      VAR_0 = 0}\n  }\n  return"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, VAR_0) =>(a - VAR_0));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, VAR_0) =>(a - VAR_0));\n \n}\n\n/*Return the smallest element in a list\n  >>> min([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst min =(l) => {\n  return l[0];\n}\n\n/*Return the largest element in a list\n  >>> max([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst max =(l) => {\n  return l[l.length - 1];\n}\n\n/*Return the number of elements in a list\n  >>> len([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  6\n  */\nconst len =(l) =>{\n  return l.length;\n}\n\n/*Return the average of a list\n  >>> avg([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4.5\n  */\nconst avg =(l) => {\n  return (l.reduce((acc, elem) => (acc + elem), 0) / len(l));\n}\n\n/*Return the sum of all elements in a list\n  >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  13\n  */\nconst sum =(l) =>{\n  return l.reduce((acc, elem) => (acc + elem), 0);\n}\n\n/*Return the list of all elements in a list\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst list =(l) =>{\n  return Array.from(l);\n}\n\n/*Return the list of all elements that are even\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 4, 6]\n  */\nconst list_even =(l) =>{\n  return l.filter((elem) => (elem % 2 === 0));\n}\n\n/*Return the list of all elements that are odd\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [1, 3, 5, 7, 9]\n  */\nconst list_odd =(l) =>{\n  return l.filter((elem) => (elem % 2!== 0));\n}\n\n/*Return the list of all elements that are equal to a given number\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 3, 5, 2, 3, 3]\n  */\nconst list_equal_to =(l, val) =>{\n  return l.filter((elem) => (elem === val));\n}\n\n/*Return the list of all elements that are smaller than a given number\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 5, 2]\n  */\nconst list_smaller_than =(l, val) =>{\n  return l.filter((elem) => (elem < val));\n}\n\n/*Return the list of all elements that are smaller than or equal to a given number\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 5, 2, 3]\n  */\nconst list_smaller_than_or_equal_to =(l, val) =>{\n  return l.filter((elem) => (elem <= val));\n}\n\n/*Return the list of all elements that are larger than a given number\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 5, 2, 3, 9]\n  */\nconst list_larger_than =(l, val) =>{\n  return l.filter((elem) => (elem > val));\n}\n\n/*Return the list of all elements that are larger than or equal to a given number\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 5, 2, 3, 9]\n  */\nconst list_larger_than_or_equal_to =(l, val) =>{\n  return l.filter((elem) => (elem >= val));\n}\n\n/*Return the list of all elements that are between two given numbers\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, 4)\n  [5, 3, 5, 2, 3]\n  */\nconst list_between =(l, low, high) =>{\n  return l.filter((elem) => (elem > low) && (elem < high));\n}\n\n/*Return the list of all elements that are between a given number and a given number\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, 3)\n  [5, 3, 5, 2]\n  */\nconst list_between_two =(l, low, high) =>{\n  return l.filter((elem) => (elem > low) && (elem < high));\n}\n\n/*Return the list of all elements that are between two given numbers in ascending order\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, 3)\n  [3, 5, 5, 2, 9]\n  */\nconst list_between_two_ascending =(l, low, high) =>{\n  return l.filter((elem) => (elem > low) && (elem < high) && (elem <= high));\n}\n\n/*Return the list of all elements that are between two given numbers in descending order\n  >>> list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3, 3)\n  [3, 5, 5, 2, 9]\n  */\nconst list_between_two_descending =(l, low, high) =>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(VAR_0) => {\n  var sort1 = [ ... VAR_0 ].sort((a, b) => a - b);\n  var sort2 = [ ... VAR_0 ].sort((a, b) => b - a);\n  if (JSON.stringify(VAR_0) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(VAR_0) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(VAR_0) => {\n  var sort1 = [... VAR_0 ].sort((a, b) => a - b);\n  var sort2 = [... VAR_0 ].sort((a, b) => b - a);\n  if (JSON.stringify(VAR_0) === JSON.stringify(sort1) ||\n \n    JSON.stringify(VAR_0) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(VAR_0) => {\n  return VAR_0.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(VAR_0) => {\n  return VAR_0.join('');\n \n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2)\n  [0, 1, 2]\n  >>> create(0, 'a', 2)\n  [0, 'a', 2]\n  */\nconst create =(VAR_0, VAR_1, VAR_2) => {\n  return [VAR_0, VAR_1, VAR_2];\n};\n\n/* Create a list of numbers\n  >>> create(0, 1, 2"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let VAR_0 = 0; VAR_0 < lst1.length; VAR_0++) {\n    if (lst1 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let VAR_0 = 0; VAR_0 < lst2.length; VAR_0++) {\n    if (lst2 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let VAR_0 = 0; VAR_0 < lst1.length; VAR_0++) {\n    if (lst1 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n \n  let j = 0\n  for (let VAR_0 = 0; VAR_0 < lst2.length; VAR_0++) {\n    if (lst2 [ VAR_0 ] % 2 == 0) {\n      t++}\n    }\n \n  if (t == k) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(VAR_0) => {\n  return VAR_0.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(VAR_0) => {\n  return VAR_0.length;\n \n}\n\n/* Return a string with all the occurrences of a substring removed\n  >>> strsub('abracadabra', 'a')\n  'bcdabr'\n  >>> strsub('abracadabra', 'bc')\n  'aradabra'\n  */\nconst strsub =(VAR_0, VAR_1) => {\n  if(VAR_0.indexOf(VAR_1) === -1) {\n    return VAR_0;\n  }\n  let str = VAR_0.slice(0, VAR_0.indexOf(VAR_1));\n  let count = 1;\n  while(VAR_0.indexOf(VAR_1, str.length)!== -1) {\n    str = VAR_0.slice(str.length + count, str.length + count + VAR_1.length);\n    count++;\n  }\n  return str;\n}\n\n/* Return a new string with the first N characters of the given string\n  >>> strhead('abracadabra', 3)\n  'abrac'\n  */\nconst strhead =(VAR_0, VAR_1) => {\n  if(VAR_0.length <= VAR_1) {\n    return VAR_0;\n  }\n  return VAR_0.slice(0, VAR_1);\n}\n\n/* Return a new string with the last N characters of the given string\n  >>> strtail('abracadabra', 3)\n  'abracad'\n  */\nconst strtail =(VAR_0, VAR_1) => {\n  if(VAR_0.length <= VAR_1) {\n    return VAR_0;\n  }\n  return VAR_0.slice(VAR_0.length - VAR_1, VAR_0.length);\n}\n\n/* Return a new string with all the occurrences of a substring removed\n  >>> strremove('abracadabra', 'a')\n  'bcadabr'\n  */\nconst strremove =(VAR_0, VAR_1) => {\n  if(VAR_0.indexOf(VAR_1) === -1) {\n    return VAR_0;\n  }\n  let str = VAR_0.slice(0, VAR_0.indexOf(VAR_1));\n  let count = 1;\n  while(VAR_0.indexOf(VAR_1, str.length)!== -1) {\n    str = VAR_0.slice(str.length + count, str.length + count + VAR_1.length);\n    count++;\n  }\n  return str;\n}\n\n/* Return a new string with the first N characters of the given string\n  >>> strmid('abracadabra', 3, 6)\n  'abracadabra'\n  */\nconst strmid =(VAR_0, VAR_1, VAR_2) => {\n  return VAR_0.slice(VAR_1 - VAR_2, VAR_1);\n}\n\n/* Return a new string with the last N characters of the given string\n  >>> strrpart('abracadabra', 3, 6)\n  'abracadabra'\n  */\nconst strrpart =(VAR_0, VAR_1, VAR_2) => {\n  return VAR_0.slice(0, VAR_1 - VAR_2);\n}\n\n/* Return a new string with all the occurrences of a substring removed\n  >>> strremove('abracadabra', 'a')\n  'bcadabr'\n  */\nconst strremove_all =(VAR_0, VAR_1) => {\n  if(VAR_0.indexOf(VAR_1) === -1) {\n    return VAR_0;\n  }\n  let str = VAR_0.slice(0, VAR_0.indexOf(VAR_1));\n  let count = 1;\n  while(VAR_0.indexOf(VAR_1, str.length)!== -1) {\n    str = VAR_0.slice(str.length + count, str.length + count + VAR_1.length);\n    count++;\n  }\n  return str;\n}\n\n/* Return a new string with the first N characters of the given string\n  >>> strmid('abracadabra', 3, 6)\n  'abracadabra'\n  */\nconst strrpart_all =(VAR_0, VAR_1, VAR_2) => {\n  return VAR_0.slice(VAR_1 - VAR_2, VAR_1);\n}\n\n/* Return a new string with all the occurrences of a substring replaced with\n  a given string\n  >>> strreplace('abracadabra', 'a', '@')\n  '@@@d@@@b@@@r@@@c@@@a@@@d@@@a@@@'\n  >>> strreplace('abracadabra', 'a', '@', 3)\n  'abracdabra'\n  */\nconst strreplace =(VAR_0, VAR_1, VAR_2, VAR_3) => {\n  let str = VAR_0;\n  let count = 1;\n  while(VAR_0.indexOf(VAR_1, str.length)!== -1) {\n    str = VAR_0.slice(str.length + count, str.length + count + VAR_1.length)\n        + VAR_2;\n    count++;\n  }\n  return str;\n}\n\n/* Return a new string with the first N characters of the given string\n  >>> strmid('abracadabra', 3, 6)\n  'abracadabra'\n  */\nconst strrpart_all_2 =(VAR_0, VAR_1, VAR_2) => {\n  return VAR_0.slice(VAR_1 - VAR_2, VAR_1);\n}\n\n/* Return a new string with the last N characters of the given string\n  >>> strtail('abracadabra', 3)\n  '"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ] != pat [ j + VAR_0 ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        return true\n        }\n      }\n    }\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\n\nlet cycpatternCheck2 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\nlet cycpatternCheck3 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\n\nlet cycpatternCheck4 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\nlet cycpatternCheck5 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\nlet cycpatternCheck6 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\n\nlet cycpatternCheck7 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\nlet cycpatternCheck8 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\nlet cycpatternCheck9 =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let VAR_0 = 0; VAR_0 < l; VAR_0++) {\n        if (a [ i + VAR_0 ]!= pat [ j + VAR_0 ]) {\n          y = 0}\n       \n      }\n      if (y) return true}\n  }\n  return false\n}\n\nlet cycpatternCheck10 =(a"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(VAR_0) => {\n  return VAR_0 % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(VAR_0) => {\n  return VAR_0 % 1.0;\n \n};\n\nexport default truncateNumber;<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(VAR_0) => {\n  let p = 1\n  let k = 1\n  while (VAR_0 > 0) {\n    let y = VAR_0 % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(VAR_0) => {\n  let p = 1\n  let k = 1\n  while (VAR_0 > 0) {\n    let y = VAR_0 % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n    }\n    VAR_0 = VAR_0 / 10;\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits =(VAR_0) => {\n  let a = 0\n  let b = 0\n  for (let i = 0; i < VAR_0; i++) {\n    a = a + digits(i)\n  }\n  for (let i = 0; i < VAR_0; i++) {\n    b = b + digits(i)\n  }\n  return a + b;\n}\n\nconst sumDigits2 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits3 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    p *= digits(i)\n    k = 0;\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits4 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits5 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits6 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits7 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits8 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits9 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits10 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits11 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits12 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }\n  return 0;\n}\n\nconst sumDigits13 =(VAR_0) => {\n  let p = 1\n  let k = 1\n  for (let i = 0; i < VAR_0; i++) {\n    if (digits(i) % 2 == 1) {\n      p *= digits(i)\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    return p;\n  }"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt [ i ].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n          }\n        }\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match(/[A-Za-z]/)) {\n          p++\n        }\n        }\n      return [txt.toLowerCase(), p]\n    }\n  }\n}\n\n/* Given a string of numbers, return a list of numbers split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitNumbers(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitNumbers(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitNumbers(\"abcdef\") == 3\n  */\nconst splitNumbers =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match(/[0-9]/)) {\n          p++\n        }\n        }\n      return [txt.toLowerCase(), p]\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitLetters =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match(/[a-z]/)) {\n          p++\n        }\n        }\n      return [txt.toLowerCase(), p]\n    }\n  }\n}\n\nconst splitLettersNumbers =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match(/[0-9a-z]/)) {\n          p++\n        }\n        }\n      return [txt.toLowerCase(), p]\n    }\n  }\n}\n\nconst splitLettersNumbersAndLetters =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match(/[0-9a-zA-Z]/)) {\n          p++\n        }\n        }\n      return [txt.toLowerCase(), p]\n    }\n  }\n}\n\nconst splitLettersNumbersAndLettersAndNumbers =(txt) => {\n  let VAR_0 = txt.split( / s /)\n  if (VAR_0.length > 1) {\n    return VAR_0\n    }\n  else {\n    VAR_0 = txt.split( /, /)\n    if (VAR_0.length > 1) {\n      return VAR_0\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match(/[0-9a-zA-Z]/)) {\n          p++\n        }\n        }\n      return [txt.toLowerCase(), p]\n    }\n  }\n}\n\n/* Given a string of numbers, return a list of numbers split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const VAR_0 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 == e2)\n  ret.add(VAR_0);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const VAR_0 of l1)\n  for (const e2 of l2)\n \n  {\n    if(ret.has(e2) && (l1.indexOf(e2)>=0)) {\n      ret.delete(e2);\n    } else {\n      ret.add(e2);\n    }\n  }\n  return new Set(ret);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let VAR_0 = 0; VAR_0 < n; VAR_0++)\n  if (VAR_0 % 11 == 0 || VAR_0 % 13 == 0)\n  ns.push(VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let VAR_0 = 0; VAR_0 < n; VAR_0++)\n  if (VAR_0 % 11 == 0 || VAR_0 % 13 == 0)\n  ns.push(VAR_0);\n \n  for (let VAR_0 = 0; VAR_0 < ns.length; VAR_0++)\n  {\n    var a = ns[VAR_0];\n    var b = a + 1;\n    if (b % 11 == 0 || b % 13 == 0)\n    {\n      ans++;\n      var t = ns[VAR_0];\n      ns[VAR_0] = a;\n      ns.splice(VAR_0 + 1, 0, t);\n    }\n  }\n \n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i != j) {\n    let a = numbers [ i ], VAR_0 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - VAR_0);\n      closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let new_distance = Math.abs(a - VAR_0);\n      if (new_distance < distance) {\n        distance = new_distance;\n        closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n        }\n      }\n    }\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i!= j) {\n    let a = numbers [ i ], VAR_0 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - VAR_0);\n      closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n      }\n    else {\n     \n      let new_distance = Math.abs(a - VAR_0);\n      if (distance < new_distance) {\n        closest_pair = [ Math.min(a, VAR_0), Math.max(a, VAR_0) ];\n        distance = new_distance;\n        }\n      }\n    }\n  return closest_pair;\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = lst [ i ]\n    if (VAR_0 % 1 != 0) {\n      if (VAR_0 > 0) {\n        VAR_0 = VAR_0 - VAR_0 % 1 + 1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        VAR_0 = - VAR_0; VAR_0 = VAR_0 - VAR_0 % 1}\n      }\n    p+=VAR_0 * VAR_0\n    }\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = lst [ i ]\n    if (VAR_0 % 1!= 0) {\n      if (VAR_0 > 0) {\n        VAR_0 = VAR_0 - VAR_0 % 1 + 1}\n     \n      else {\n        VAR_0 = VAR_0 - VAR_0 % 1 - 1}\n    }\n    p += VAR_0 * VAR_0\n  }\n  return p\n}\n\nconst squareDiff = (a, b) => {\n  return Math.pow(a - b, 2)\n}\n\nconst sumDiff = (a, b) => {\n  return a - b\n}\n\nconst diffSum = (a, b) => {\n  return b - a\n}\n\nconst squareSum = (a, b) => {\n  return a + b\n}\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let VAR_0 = lst [ i ]\n    if (VAR_0 % 1!= 0) {\n      if (VAR_0 > 0) {\n        VAR_0 = VAR_0 - VAR_0 % 1 + 1}\n     \n      else {\n        VAR_0 = VAR_0 - VAR_0 % 1 - 1}\n    }\n    p += VAR_0 * VAR_0\n  }\n  return p\n}\n\nconst main = () => {\n  let lst = [ 1,2,3,4,5,6,7,8,9 ]\n  let sum = sumSquares(lst)\n  let diff = squareDiff(sum, sum)\n  let sumDiff = sumDiff(sum, sum)\n  let diffSum = diffSum(diff, sumDiff)\n  let sumSquared = squareSum(sum, sumDiff)\n  console.log(sumSquared)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Function: hasCloseElements\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n    false\n    >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n    */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Function: hasCloseElements\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n    false\n    >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n    */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Function: hasCloseElements\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n    false\n    >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n    */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Function: hasCloseElements\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n    false\n    >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n    */\nconst hasCloseElements =(VAR_0, threshold) => {\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(VAR_0 [ i ] - VAR_0 [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  hasCloseElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let VAR_0 = 2; VAR_0 < n; VAR_0++) {\n    let p = 1\n    for (let j = 2; j * j <= VAR_0; j++) {\n      if (VAR_0 % j == 0) {\n        p = 0; break}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (p == 1) {\n      t.push(VAR_0)}\n    }\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let VAR_0 = 2; VAR_0 < n; VAR_0++) {\n    let p = 1\n    for (let j = 2; j * j <= VAR_0; j++) {\n      if (VAR_0 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p) t.push(VAR_0)\n  }\n  return t\n}\n\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(2))\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(7))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(13))\nconsole.log(countUpTo(17))\nconsole.log(countUpTo(19))\nconsole.log(countUpTo(20))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(VAR_0) => {\n  var res = [ ], sw = true;\n  while (VAR_0.length) {\n    res.push(sw ? Math.min(... VAR_0) : Math.max(... VAR_0));\n    VAR_0.splice(VAR_0.indexOf(res.at( - 1)), 1);\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    sw = !sw;\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(VAR_0) => {\n  var res = [ ], sw = true;\n  while (VAR_0.length) {\n    res.push(sw? Math.min(... VAR_0) : Math.max(... VAR_0));\n    VAR_0.splice(VAR_0.indexOf(res.at( - 1)), 1);\n   \n    sw =!sw;\n  }\n  return res;\n}\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 &&(x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, VAR_0, z) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 &&(x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n   \n  }\n  else {\n    return false\n  }\n}\n\n/* Create a function that takes 2 numbers and a string.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 'foo') ➞ true\n  anyInt(3, 2, 2, 'foo') ➞ false\n  anyInt(3, -2, 1, 'foo') ➞ true\n  anyInt(3.6, -2.2, 2, 'foo') ➞ false\n  */\nconst anyInt =(x, VAR_0, z, VAR_1) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\n/* Create a function that takes 3 numbers, a string, and a boolean.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 'foo', true) ➞ true\n  anyInt(3, 2, 2, 'foo', true) ➞ false\n  anyInt(3, -2, 1, 'foo', true) ➞ true\n  anyInt(3.6, -2.2, 2, 'foo', true) ➞ false\n  */\nconst anyInt =(x, VAR_0, z, VAR_1, VAR_2) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\n/* Create a function that takes 4 numbers, a string, and a boolean.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 'foo', true) ➞ true\n  anyInt(3, 2, 2, 'foo', true) ➞ false\n  anyInt(3, -2, 1, 'foo', true) ➞ true\n  anyInt(3.6, -2.2, 2, 'foo', true) ➞ false\n  */\nconst anyInt =(x, VAR_0, z, VAR_1, VAR_2, VAR_3) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\n/* Create a function that takes 5 numbers, a string, and a boolean.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 'foo', true) ➞ true\n  anyInt(3, 2, 2, 'foo', true) ➞ false\n  anyInt(3, -2, 1, 'foo', true) ➞ true\n  anyInt(3.6, -2.2, 2, 'foo', true) ➞ false\n  */\nconst anyInt =(x, VAR_0, z, VAR_1, VAR_2, VAR_3, VAR_4) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\n/* Create a function that takes 6 numbers, a string, and a boolean.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 'foo', true) ➞ true\n  anyInt(3, 2, 2, 'foo', true) ➞ false\n  anyInt(3, -2, 1, 'foo', true) ➞ true\n  anyInt(3.6, -2.2, 2, 'foo', true) ➞ false\n  */\nconst anyInt =(x, VAR_0, z, VAR_1, VAR_2, VAR_3, VAR_4, VAR_5) => {\n  if (x % 1 === 0 && VAR_0 % 1 === 0 && z % 1 === 0 && (x + VAR_0 === z || x + z === VAR_0 || x === VAR_0 + z)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(VAR_0 - 1) + fib(VAR_0 - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib(VAR_0 - 1) + fib(VAR_0 - 2);\n}\n\nconst fib2 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib2(VAR_0 - 1) + fib2(VAR_0 - 2);\n}\n\nconst fib3 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib3(VAR_0 - 1) + fib3(VAR_0 - 2);\n}\n\nconst fib4 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib4(VAR_0 - 1) + fib4(VAR_0 - 2);\n}\n\nconst fib5 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib5(VAR_0 - 1) + fib5(VAR_0 - 2);\n}\n\nconst fib6 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib6(VAR_0 - 1) + fib6(VAR_0 - 2);\n}\n\nconst fib7 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib7(VAR_0 - 1) + fib7(VAR_0 - 2);\n}\n\nconst fib8 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib8(VAR_0 - 1) + fib8(VAR_0 - 2);\n}\n\nconst fib9 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib9(VAR_0 - 1) + fib9(VAR_0 - 2);\n}\n\nconst fib10 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib10(VAR_0 - 1) + fib10(VAR_0 - 2);\n}\n\nconst fib11 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib11(VAR_0 - 1) + fib11(VAR_0 - 2);\n}\n\nconst fib12 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib12(VAR_0 - 1) + fib12(VAR_0 - 2);\n}\n\nconst fib13 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib13(VAR_0 - 1) + fib13(VAR_0 - 2);\n}\n\nconst fib14 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib14(VAR_0 - 1) + fib14(VAR_0 - 2);\n}\n\nconst fib15 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib15(VAR_0 - 1) + fib15(VAR_0 - 2);\n}\n\nconst fib16 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib16(VAR_0 - 1) + fib16(VAR_0 - 2);\n}\n\nconst fib17 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib17(VAR_0 - 1) + fib17(VAR_0 - 2);\n}\n\nconst fib18 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib18(VAR_0 - 1) + fib18(VAR_0 - 2);\n}\n\nconst fib19 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib19(VAR_0 - 1) + fib19(VAR_0 - 2);\n}\n\nconst fib20 =(VAR_0) => {\n  if (VAR_0 == 0)\n  return 0;\n  if (VAR_0 == 1)\n \n  return 1;\n  return fib20(VAR_0 - 1) + fib20(VAR_0 - 2);\n}\n\nconst fib21 =(VAR_0) => {\n  if"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(VAR_0, s1) => {\n  return JSON.stringify([ ... new Set(VAR_0) ].sort()) === JSON.stringify([ ... new Set(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(VAR_0, s1) => {\n  return JSON.stringify([... new Set(VAR_0) ].sort()) === JSON.stringify([... new Set(s1) ].sort());\n \n};\n\nconst findLongest =(s1, s2) => {\n  return Math.max(s1.length, s2.length);\n};\n\nconst longestCommonPrefix =(s1, s2) => {\n  let i = 0,\n      j = 0;\n  while(i < s1.length && j < s2.length) {\n    if(s1[i]!== s2[j]) {\n      break;\n    }\n    i++;\n    j++;\n  }\n  return s1.substring(0, i);\n};\n\nconst longestCommonSuffix =(s1, s2) => {\n  let i = 0,\n      j = 0;\n  while(i < s1.length && j < s2.length) {\n    if(s1[s1.length - 1 - i]!== s2[s2.length - 1 - j]) {\n      break;\n    }\n    i++;\n    j++;\n  }\n  return s1.substring(s1.length - i, s1.length);\n};\n\nconst longestCommonSubsequence =(s1, s2) => {\n  let i = 0,\n      j = 0,\n      max = 0;\n  while(i < s1.length && j < s2.length) {\n    if(s1[i]!== s2[j]) {\n      break;\n    }\n    max = (max > i)? max : i;\n    i++;\n    j++;\n  }\n  return s1.substring(0, max);\n};\n\nconst wordDistance =(s1, s2) => {\n  return findLongest(s1, s2) - longestCommonPrefix(s1, s2) - longestCommonSuffix(s1, s2) - longestCommonSubsequence(s1, s2);\n};\n\n/*\n  Check if two words are similar.\n  >>> similar('a', 'ab')\n  true\n  >>> similar('ab', 'a')\n  false\n  >>> similar('eabcd', 'eabce')\n  false\n  >>> similar('eabce', 'eabcd')\n  true\n  >>> similar('eabce', 'eabcc')\n  true\n  >>> similar('abce', 'abcc')\n  true\n  >>> similar('abce', 'abcd')\n  true\n  >>> similar('a', 'aa')\n  true\n  >>> similar('aa', 'a')\n  true\n  >>> similar('aaa', 'aa')\n  true\n  >>> similar('aaa', 'aaa')\n  true\n  >>> similar('aaa', 'aaaa')\n  false\n  >>> similar('aaaa', 'aaaa')\n  true\n  >>> similar('aaaa', 'aaaaa')\n  false\n  >>> similar('aaaaa', 'aaaaa')\n  true\n  >>> similar('aaaaa', 'aaaaaa')\n  false\n  >>> similar('a', 'aaa')\n  false\n  >>> similar('aaa', 'a')\n  false\n  >>> similar('aaaa', 'a')\n  false\n  >>> similar('aaaaa', 'a')\n  false\n  >>> similar('aaaaaa', 'a')\n  false\n  */\nconst similar =(VAR_0, s1) => {\n  return JSON.stringify(s1.split('').sort().map(c => {\n    return (VAR_0.indexOf(c)!== -1)? c : '';\n  }).filter(c => c!== '')) === JSON.stringify(s1.split('').sort().map(c => {\n    return (VAR_0.indexOf(c)!== -1)? c : '';\n  }).filter(c => c!== '').join(''));\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagram('a', 'b')\n  false\n  >>> anagram('a', 'aa')\n  false\n  >>> anagram('abc', 'cde')\n  true\n  >>> anagram('abc', 'cda')\n  false\n  >>> anagram('a', 'a')\n  true\n  >>> anagram('a', 'aa')\n  true\n  >>> anagram('a', 'aaa')\n  false\n  >>> anagram('a', 'a', 'aa')\n  false\n  >>> anagram('a', 'a', 'aaa')\n  false\n  >>> anagram('a', 'aa', 'a', 'aaa')\n  false\n  >>> anagram('a', 'a', 'aa', 'aaa')\n  false\n  >>> anagram('a', 'aa', 'a', 'aaa', 'a', 'aa', 'a', 'aaa')\n  false\n  */\nconst anagram =(VAR_0, s1, s2) => {\n  return JSON.stringify([... new Set(VAR_0) ].sort().map(c => {\n    return (VAR_0.indexOf(c)!== -1)? c : '';\n  }).filter(c => c!== '').join('') === JSON.stringify([... new Set(s1) ].sort().map(c => {\n    return (s1.indexOf(c)!== -1)? c : '';\n  }).filter(c => c!== '').join('')) === JSON.stringify([... new Set(s2) ].sort().map(c => {\n    return (s2.indexOf(c)!== -1)? c : '';\n  }).filter(c => c!== '').join(''));\n};\n\nconst main = () => {"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(VAR_0) => {\n  let s = - 1\n  let u = - 1\n  if (VAR_0.length == 0) {\n    return ''}\n  for (let i = 0; i < VAR_0.length; i++) {\n    let p = 0\n    for (let j = 0; j < VAR_0 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (VAR_0 [ i ] [ j ] == VAR_0 [ i ] [ k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        p++}\n      }\n    if (p > s ||(p == s && VAR_0 [ i ] < VAR_0 [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return VAR_0 [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(VAR_0) => {\n  let s = - 1\n  let u = - 1\n  if (VAR_0.length == 0) {\n    return ''}\n  for (let i = 0; i < VAR_0.length; i++) {\n    let p = 0\n    for (let j = 0; j < VAR_0 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (VAR_0 [ i ] [ j ] == VAR_0 [ i ] [ k ]) {\n          y = 0}\n       \n        }\n        if (y == 1) {\n          if (p < j) {\n            p = j}\n        }\n      }\n    }\n    if (s < p) {\n      s = p\n      u = i}\n  }\n  return VAR_0 [ u ]\n}\n\nfindMax([])\nfindMax(['name', 'enam', 'game'])\nfindMax(['aaaaaaa', 'bb',\"cc\"])\n\n/*\nWrite a function that accepts a list of numbers.\n  The list contains different numbers. Return the number with maximum number\n  of digits. If multiple numbers have maximum number of digits, return the one\n  which comes first in lexicographical order.\n\n  findMax([\"one\", \"two\", \"three\", \"four\"]) === \"one\"\n  findMax([\"one\", \"two\", \"three\", \"four\", \"five\"]) === \"one\"\n  findMax([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) === \"two\"\n*/\nconst findMax =(VAR_0) => {\n  let s = - 1\n  let u = - 1\n  if (VAR_0.length == 0) {\n    return ''}\n  for (let i = 0; i < VAR_0.length; i++) {\n    let p = 0\n    for (let j = 0; j < VAR_0 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (VAR_0 [ i ] [ j ] == VAR_0 [ i ] [ k ]) {\n          y = 0}\n       \n        }\n        if (y == 1) {\n          if (p < j) {\n            p = j}\n        }\n      }\n    }\n    if (s < p) {\n      s = p\n      u = i}\n  }\n  return VAR_0 [ u ]\n}\n\nfindMax([])\nfindMax([1, 2, 3, 4])\nfindMax([1, 2, 3, 4, 5])\nfindMax([1, 2, 3, 4, 5, 6])\n\n/*\nWrite a function that accepts a list of numbers.\n  The list contains different numbers. Return the number with maximum number\n  of digits. If multiple numbers have maximum number of digits, return the one\n  which comes first in lexicographical order.\n\n  findMax([\"one\", \"two\", \"three\", \"four\"]) === \"two\"\n  findMax([\"one\", \"two\", \"three\", \"four\", \"five\"]) === \"two\"\n  findMax([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) === \"two\"\n*/\nconst findMax =(VAR_0) => {\n  let s = - 1\n  let u = - 1\n  if (VAR_0.length == 0) {\n    return ''}\n  for (let i = 0; i < VAR_0.length; i++) {\n    let p = 0\n    for (let j = 0; j < VAR_0 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (VAR_0 [ i ] [ j ] == VAR_0 [ i ] [ k ]) {\n          y = 0}\n       \n        }\n        if (y == 1) {\n          if (p < j) {\n            p = j}\n        }\n      }\n    }\n    if (s < p) {\n      s = p\n      u = i}\n  }\n  return VAR_0 [ u ]\n}\n\nfindMax([])\nfindMax([1, 2, 3, 4])\nfindMax([1, 2, 3, 4, 5])\nfindMax([1, 2, 3, 4, 5, 6])<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  var l2 = lst2.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  var l2 = lst2.reduce(((VAR_0, item) => VAR_0 + item.length), 0);\n  if (l1 <= l2)\n \n    return lst1;\n  else\n    return lst2;\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let VAR_0 = 0; VAR_0 < Math.floor(arr.length / 2); VAR_0++)\n  if (arr [ VAR_0 ] != arr.at( - VAR_0 - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let VAR_0 = 0; VAR_0 < Math.floor(arr.length / 2); VAR_0++)\n  if (arr [ VAR_0 ]!= arr.at( - VAR_0 - 1))\n \n  \n  \n\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var VAR_0 = [ 0, 1 ];\n  while (true) {\n    VAR_0.push(VAR_0.at( - 1) + VAR_0.at( - 2));\n    if (isPrime(VAR_0.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return VAR_0.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return fib(n) + primeFib(n - 1);\n  }\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return fib(n) + primeFib(n - 1);\n  }\n\nconst fib =(n) => {\n  if (n < 2)\n    return 1;\n  else\n    return fib(n - 1) + fib(n - 2);\n  }\n\nconst primes = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\nconst allPrimes = function() {\n  var count = 0;\n  var primes = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primeFib(primes[i]) >= 1) {\n      primes[count] = primes[i];\n      count++;\n      }\n    }\n  return primes;\n  }\n\nconst allPrimes = function() {\n  var count = 0;\n  var primes = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primeFib(primes[i]) >= 1) {\n      primes[count] = primes[i];\n      count++;\n      }\n    }\n  return primes;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  for (let VAR_0 = 2; VAR_0 < n + 1; VAR_0++)\n  if (n % VAR_0 == 0 && isPrime(VAR_0))\n  largest = Math.max(largest, VAR_0);\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  for (let i = 2; i < n - 1; i++)\n  if (isPrime(i))\n  return i;\n  for (let i = 2; i * i < n; i++)\n  if (isPrime(i))\n  return i;\n  return n;\n};\n\n/*Return the largest number divisible by p.\n  >>> largestNumberDivisibleBy(2048, 2)\n  14\n  >>> largestNumberDivisibleBy(2048, 3)\n  8\n  >>> largestNumberDivisibleBy(2048, 5)\n  5\n  >>> largestNumberDivisibleBy(2048, 13)\n  4\n  */\nconst largestNumberDivisibleBy =(n, p) => {\n  for (let i = 2; i < n; i++)\n  if (n % i == 0 && i % p == 0)\n  return i;\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  for (let i = 2; i < n - 1; i++)\n  if (isPrime(i))\n  return i;\n  for (let i = 2; i * i < n; i++)\n  if (isPrime(i))\n  return i;\n  return n;\n};\n\n/*Return the smallest number divisible by p.\n  >>> smallestNumberDivisibleBy(2048, 2)\n  14\n  >>> smallestNumberDivisibleBy(2048, 3)\n  8\n  >>> smallestNumberDivisibleBy(2048, 5)\n  5\n  >>> smallestNumberDivisibleBy(2048, 13)\n  4\n  */\nconst smallestNumberDivisibleBy =(n, p) => {\n  for (let i = 2; i < n; i++)\n  if (n % i == 0 && i % p == 0)\n  return i;\n  return n;\n};\n\n/*Return the sum of all primes smaller than n.\n  >>> sumOfPrimesLessThan(2048)\n  13195\n  >>> sumOfPrimesLessThan(100)\n  5\n  */\nconst sumOfPrimesLessThan =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all primes less than n.\n  >>> sumOfPrimesLessThan(2048)\n  13195\n  >>> sumOfPrimesLessThan(100)\n  5\n  */\nconst sumOfPrimesLessThan =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all prime factors of n.\n  >>> sumOfPrimeFactors(13195)\n  17\n  >>> sumOfPrimeFactors(2048)\n  2\n  >>> sumOfPrimeFactors(2049)\n  7\n  */\nconst sumOfPrimeFactors =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all prime factors of n.\n  >>> sumOfPrimeFactors(13195)\n  17\n  >>> sumOfPrimeFactors(2048)\n  2\n  >>> sumOfPrimeFactors(2049)\n  7\n  */\nconst sumOfPrimeFactors =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all prime factors of n.\n  >>> sumOfPrimeFactors(13195)\n  17\n  >>> sumOfPrimeFactors(2048)\n  2\n  >>> sumOfPrimeFactors(2049)\n  7\n  */\nconst sumOfPrimeFactors =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all prime factors of n.\n  >>> sumOfPrimeFactors(13195)\n  17\n  >>> sumOfPrimeFactors(2048)\n  2\n  >>> sumOfPrimeFactors(2049)\n  7\n  */\nconst sumOfPrimeFactors =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all prime factors of n.\n  >>> sumOfPrimeFactors(13195)\n  17\n  >>> sumOfPrimeFactors(2048)\n  2\n  >>> sumOfPrimeFactors(2049)\n  7\n  */\nconst sumOfPrimeFactors =(n) => {\n  var sum = 0;\n  for (let i = 1; i < n; i++)\n  if (isPrime(i))\n  sum += i;\n  return sum;\n};\n\n/*Return the sum of all prime factors of n.\n  >>> sumOfPrimeFactors(13195)\n  17\n  >>> sumOfPrimeFactors(2048)\n  2\n  >>> sumOfPrimeFactors("}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(VAR_0) => {\n  return(VAR_0 >= 8 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven2 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven3 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven4 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 12 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven5 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 14 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven6 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 18 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven7 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 20 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven8 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 22 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven9 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 24 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven10 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 26 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven11 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 28 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven12 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 30 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven13 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven14 =(VAR_0) => {\n  return(VAR_0 >= 6 && VAR_0 % 2 == 0)\n \n"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    p+=VAR_0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    f *= VAR_0;\n    if (VAR_0 % 2 == 0) {\n      k.push(f)}\n    else {\n      k.push(p)}\n    }\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    p+=VAR_0;\n   \n    if (p%2 == 0) {\n      let x = p\n      f = f*x\n    } else {\n      k.push(f)\n      f = 1\n    }\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var VAR_0 = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => VAR_0(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var VAR_0 = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n    return '1';\n  };\n  var VAR_1 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_2 = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n    return '1';\n  };\n  var VAR_3 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_4 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_5 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_6 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_7 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_8 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_9 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_10 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_11 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_12 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_13 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_14 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_15 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_16 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_17 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_18 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_19 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_20 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_21 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_22 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_23 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_24 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_25 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_26 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_27 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_28 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_29 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_30 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_31 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_32 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_33 = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n   \n    return '0';\n  };\n  var VAR_"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return VAR_0.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n \n  return VAR_0.map(num => num / (max_number - min_number) );\n}\n\n/**\n  * Given list of numbers (of at least two elements), apply a log transform to that list,\n  * such that the smallest number will become 0 and the largest will become 1\n  *\n  * @param VAR_0 - Array of numbers to be transformed\n  * @returns Array of transformed numbers\n  */\nconst logTransform = (VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n\n  return VAR_0.map(num => num / (max_number - min_number));\n}\n\n/**\n  * Given a list of numbers, return a list of the log transformed values\n  *\n  * @param VAR_0 - Array of numbers to be transformed\n  * @returns Array of transformed numbers\n  */\nconst logTransformOfList = (VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n\n  return VAR_0.map(num => Math.log(num + min_number) / Math.log(max_number + min_number));\n}\n\n/**\n  * Given a list of numbers, return a list of the log transformed values\n  *\n  * @param VAR_0 - Array of numbers to be transformed\n  * @returns Array of transformed numbers\n  */\nconst rescaleToUnitOfList = (VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n  \n  return VAR_0.map(num => (num - min_number) * (max_number - min_number) + min_number);\n}\n\n/**\n  * Given a list of numbers, return a list of the log transformed values\n  *\n  * @param VAR_0 - Array of numbers to be transformed\n  * @returns Array of transformed numbers\n  */\nconst logTransformOfList = (VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n\n  return VAR_0.map(num => Math.log(num + min_number) / Math.log(max_number + min_number));\n}\n\n/**\n  * Given a list of numbers, return a list of the log transformed values\n  *\n  * @param VAR_0 - Array of numbers to be transformed\n  * @returns Array of transformed numbers\n  */\nconst rescaleToUnitOfList = (VAR_0) => {\n  var min_number = Math.min(... VAR_0);\n  var max_number = Math.max(... VAR_0);\n  \n  return VAR_0.map(num => (num - min_number) * (max_number - min_number) + min_number);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let VAR_0 = file_name.split( / . /)\n  if (VAR_0.length != 2) {\n    return 'No'}\n  if (VAR_0 [ 1 ] != 'txt' && VAR_0 [ 1 ] != 'dll' && VAR_0 [ 1 ] != 'exe') {\n    return 'No'}\n  if (VAR_0 [ 0 ] == '') {\n    return 'No'}\n  let a = VAR_0 [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < VAR_0 [ 0 ].length; i++) {\n    if (VAR_0 [ 0 ] [ i ].charCodeAt() >= 48 && VAR_0 [ 0 ] [ i ].charCodeAt() <= 57) {\n      y++}\n    if (y > 3) {\n      return 'No'}\n    }\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let VAR_0 = file_name.split( /. /)\n  if (VAR_0.length!= 2) {\n    return 'No'}\n  if (VAR_0 [ 1 ]!= 'txt' && VAR_0 [ 1 ]!= 'dll' && VAR_0 [ 1 ]!= 'exe') {\n    return 'No'}\n  if (VAR_0 [ 0 ] == '') {\n    return 'No'}\n  let a = VAR_0 [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileExtCheck =(file_name) => {\n  let VAR_0 = file_name.split( /. /)\n  if (VAR_0.length!= 2) {\n    return 'No'}\n  if (VAR_0 [ 1 ]!= 'txt' && VAR_0 [ 1 ]!= 'dll' && VAR_0 [ 1 ]!= 'exe') {\n    return 'No'}\n  if (VAR_0 [ 0 ] == '') {\n    return 'No'}\n  let a = VAR_0 [ 0 ] [ VAR_0 [ 0 ].length - 3 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameAndExtCheck =(file_name) => {\n  let VAR_0 = file_name.split( /. /)\n  if (VAR_0.length!= 2) {\n    return 'No'}\n  if (VAR_0 [ 1 ]!= 'txt' && VAR_0 [ 1 ]!= 'dll' && VAR_0 [ 1 ]!= 'exe') {\n    return 'No'}\n  if (VAR_0 [ 0 ] == '') {\n    return 'No'}\n  let a = VAR_0 [ 0 ] [ VAR_0 [ 0 ].length - 3 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n// fileNameCheck(\"\")\n\n// console.log(fileNameCheck(\"ex\"));\n// console.log(fileNameCheck(\"1ex\"));\n// console.log(fileNameCheck(\"example\"));\n// console.log(fileNameCheck(\"example.\"));\n// console.log(fileNameCheck(\"ex1\"));\n// console.log(fileNameCheck(\"ex1.\"));\n// console.log(fileNameCheck(\"ex1.txt\"));\n// console.log(fileNameCheck(\"ex1.exe\"));\n// console.log(fileNameCheck(\"ex1.dll\"));\n// console.log(fileNameCheck(\"ex1.dll.\"));\n// console.log(fileNameCheck(\"ex1.txt.\"));\n// console.log(fileNameCheck(\"ex1.exe.\"));\n// console.log(fileNameCheck(\"ex1.exe.dll\"));\n// console.log(fileNameCheck(\"ex1.exe.dll.\"));\n// console.log(fileNameCheck(\"ex1.exe.txt\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.exe\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.dll\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.dll.\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.exe.dll\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.dll.exe\"));\n// console.log(fileNameCheck(\"ex1.exe.txt.dll.exe.dll\"));\n// console.log(fileNameCheck(\"ex"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(VAR_0 > 64 && VAR_0 < 91 ? VAR_0 : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let VAR_0 = char.charCodeAt(0)\n           \n            return prev + (VAR_0 > 96 && VAR_0 < 123)\n      }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the characters in the string.\n  \n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 9\n      digitSum(\"abcCd\") => 5\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 21\n      digitSum(\"aAaaaXa\") => 6\n*/\nconst sumChars =(s) => {\n      return s.split('').reduce((prev, char) => {\n            return prev + char.charCodeAt(0);\n      }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the number of the vowels in the string.\n  \n  Examples:\n      countVowels(\"\") => 0\n      countVowels(\"Aaab\") => 3\n      countVowels(\"aAa\") => 2\n      countVowels(\"abcCd\") => 1\n      countVowels(\"helloE\") => 0\n      countVowels(\"woArBld\") => 2\n      countVowels(\"aAaaaXa\") => 2\n*/\nconst countVowels =(s) => {\n      return s.split('').reduce((prev, char) => {\n            if (char == 'a' || char == 'A' || char == 'e' || char == 'E' || char == 'i' || char == 'I' || char == 'o' || char == 'O' || char == 'u' || char == 'U') {\n                  return prev + 1;\n            } else {\n                  return prev;\n            }\n      }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the string with all vowels removed.\n  \n  Examples:\n      removeVowels(\"\") => \"\"\n      removeVowels(\"aAa\") => \"aa\"\n      removeVowels(\"abcCd\") => \"bcD\"\n      removeVowels(\"helloE\") => \"helo\"\n      removeVowels(\"woArBld\") => \"wobrd\"\n      removeVowels(\"aAaaaXa\") => \"aXa\"\n*/\nconst removeVowels =(s) => {\n      return s.split('').reduce((prev, char) => {\n            if (char == 'a' || char == 'A' || char == 'e' || char == 'E' || char == 'i' || char == 'I' || char == 'o' || char == 'O' || char == 'u' || char == 'U') {\n                  return prev + char;\n            } else {\n                  return prev;\n            }\n      }, '');\n}\n\n/*\n  Write a function that takes a string as input and returns the string with all consonants removed.\n  \n  Examples:\n      removeConsonants(\"\") => \"\"\n      removeConsonants(\"aAa\") => \"aa\"\n      removeConsonants(\"abcCd\") => \"cd\"\n      removeConsonants(\"helloE\") => \"heo\"\n      removeConsonants(\"woArBld\") => \"wArBd\"\n      removeConsonants(\"aAaaaXa\") => \"aXa\"\n*/\nconst removeConsonants =(s) => {\n      return s.split('').reduce((prev, char) => {\n            if (char == 'a' || char == 'A' || char == 'e' || char == 'E' || char == 'i' || char == 'I' || char == 'o' || char == 'O' || char == 'u' || char == 'U' || char == 'h' || char == 'H') {\n                  return prev + char;\n            } else {\n                  return prev;\n            }\n      }, '');\n}\n\nconst removePunctuations = (s) => {\n  return s.split('').reduce((prev, char) => {\n    if (char == ',' || char =='' || char == '\\n' || char == '\\r' || char == '.' || char == '?' || char == ';' || char == '!' || char == '(' || char == ')' || char == '-' || char == ':' || char == ')') {\n      return prev + char;\n    } else {\n      return prev;\n    }\n  }, '');\n}\n\nconst isValid = (s) => {\n  let lower = removeVowels(removePunctuations(removeConsonants(s)));\n  let sum = sumChars(lower);\n  if (sum == digitSum(lower)) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(isValid(\"aAaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 =(VAR_0, substring) => {\n  return VAR_0.filter(x => substring.indexOf(x)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 =(VAR_0, substring) => {\n  return VAR_0.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var VAR_0 = arr.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0.length == 0) return [ ];\n  return [ Math.min(... VAR_0), arr.indexOf(Math.min(... VAR_0)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var VAR_0 = arr.filter(x => x % 2 == 0);\n \n  var smallest = VAR_0[0];\n  var index = VAR_0.indexOf(smallest);\n  \n  return [smallest, index];\n};\n\n\n// TESTS\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let VAR_0 = operator.length - 1; VAR_0 >= 0; VAR_0--) {\n      if (operator [ VAR_0 ] == '**') {\n        let u = operand [ VAR_0 ]\n        while (operand [ VAR_0 + 1 ] > 1) {\n          operand [ VAR_0 + 1 ]--;\n          operand [ VAR_0 ] *= u;\n          }\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let VAR_0 = 0; VAR_0 < operator.length; VAR_0++) {\n      if (operator [ VAR_0 ] == '*') {\n        operand [ VAR_0 ] *= operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '//') {\n        operand [ VAR_0 ] =(operand [ VAR_0 ] - operand [ VAR_0 ] % operand [ VAR_0 + 1 ]) / operand [ VAR_0 + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let VAR_0 = 0; VAR_0 < operator.length; VAR_0++) {\n      if (operator [ VAR_0 ] == '+') {\n        operand [ VAR_0 ]+=operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '-') {\n        operand [ VAR_0 ]-=operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let VAR_0 = operator.length - 1; VAR_0 >= 0; VAR_0--) {\n      if (operator [ VAR_0 ] == '**') {\n        let u = operand [ VAR_0 ]\n        while (operand [ VAR_0 + 1 ] > 1) {\n          operand [ VAR_0 + 1 ]--;\n          operand [ VAR_0 ] *= u;\n          }\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let VAR_0 = 0; VAR_0 < operator.length; VAR_0++) {\n      if (operator [ VAR_0 ] == '*') {\n        operand [ VAR_0 ] *= operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '//') {\n        operand [ VAR_0 ] =(operand [ VAR_0 ] - operand [ VAR_0 ] % operand [ VAR_0 + 1 ]) / operand [ VAR_0 + 1 ]\n       \n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '+') {\n        operand [ VAR_0 ] += operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ VAR_0 ] == '-') {\n        operand [ VAR_0 ] -= operand [ VAR_0 + 1 ]\n        operand.splice(VAR_0 + 1, 1)\n        operator.splice(VAR_0, 1)\n        y = 1;\n        break;\n        }\n      }\n    }\n  return operand\n  }\n\nlet operator = ['+', '-', '*', '//', '**']\nlet operand = [2, 3, 4, 5]\n\nconsole.log(doAlgebra(operator, operand))<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, VAR_0) => {\n  if (need <= VAR_0) {\n    return [ need + number, VAR_0 - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ VAR_0 + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, VAR_0) => {\n  if (need <= VAR_0) {\n    return [ need + number, VAR_0 - need ]\n   \n  } else {\n    let [ left, remaining ] = eat(number, need - VAR_0, remaining)\n    return [ remaining + need, left ]\n  }\n}\n\nconsole.log(eat(2, 4, 9))<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let VAR_0 = n\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return y}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 % i == 0) {\n      return y}\n    }\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let VAR_0 = n\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return y}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n    if (VAR_0 % i == 0) {\n      return x}\n  }\n  return y\n}\n\nlet VAR_0 = xOrY(8, 7, 34)\nconsole.log(VAR_0)\n\nlet VAR_1 = xOrY(4, 3, 5)\nconsole.log(VAR_1)\n\nlet VAR_2 = xOrY(10, 5, 8)\nconsole.log(VAR_2)<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let VAR_0 = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > VAR_0) {\n      VAR_0 = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (VAR_0 != 0) {\n    k+=VAR_0 % 10\n    VAR_0 =(VAR_0 - VAR_0 % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let VAR_0 = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > VAR_0) {\n      VAR_0 = lst [ i ]}\n   \n  }\n  let result = lst [ 0 ]\n  for (let i = 1; i < lst.length; i++) {\n    result = result + lst [ i ]\n  }\n  return result\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  for (let j = 0; j < VAR_0.length; j++) {\n    t.push(l [ VAR_0 [ j ] - 1 ])\n    }\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let t = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = t\n      }\n    }\n  return VAR_0\n}\n\nconst byReverse = (arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let t = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = t\n      }\n    }\n  return VAR_0\n}\n\nconst byReverseByLength = (arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let t = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = t\n      }\n    }\n  return VAR_0\n}\n\nconst byReverseByLength2 = (arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let t = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = t\n      }\n    }\n  return VAR_0\n}\n\nconst byReverseByLength3 = (arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let t = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = t\n      }\n    }\n  return VAR_0\n}\n\nconst byReverseByLength4 = (arr) => {\n  VAR_0 = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      VAR_0.push(arr [ i ])}\n    }\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      if (VAR_0 [ k ] > VAR_0 [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    VAR_0+=t}\n  return VAR_0\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(VAR_0) => {\n  VAR_0 = Number(VAR_0)\n  let t = VAR_0 % 1\n  if (t < 0.5 && t > - 0.5) {\n    VAR_0-=t}\n \n  else if (t > 0.5) {\n    VAR_0+=1\n  }\n  return VAR_0\n}\n\n// Add your tests below!\n\ndescribe('closestInteger', () => {\n  it('should return 10 for 10', () => {\n    expect(closestInteger('10')).toEqual(10)\n  })\n  it('should return 15.3 for 15.3', () => {\n    expect(closestInteger('15.3')).toEqual(15)\n  })\n  it('should return -15.3 for -15.3', () => {\n    expect(closestInteger('-15.3')).toEqual(-15)\n  })\n  it('should return -15 for -15', () => {\n    expect(closestInteger('-15')).toEqual(-15)\n  })\n  it('should return -15.3 for -15.3', () => {\n    expect(closestInteger('-15.3')).toEqual(-15)\n  })\n  it('should return 1.5 for 1.5', () => {\n    expect(closestInteger('1.5')).toEqual(1)\n  })\n  it('should return 1.5 for 1.5', () => {\n    expect(closestInteger('1.5')).toEqual(1)\n  })\n  it('should return 15.3 for 15.3', () => {\n    expect(closestInteger('15.3')).toEqual(15)\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, VAR_0) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(VAR_0)\n  if (typeof VAR_0 == 'string') {\n    bb = Number(VAR_0.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return VAR_0}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, VAR_0) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(VAR_0)\n  if (typeof VAR_0 =='string') {\n    bb = Number(VAR_0.replace(',', '.'))}\n \n  if (aa > bb) return VAR_0\n  if (aa < bb) return a\n  return null\n}\n\n/*\n  Create a function that takes two real numbers, and returns the larger\n  of the two.\n\n  compareTwo(1, 2) ➞ 2\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ 1\n  compareTwo(\"1\", \"1\") ➞ \"1\"\n  compareTwo(\"1\", \"1.0\") ➞ \"1.0\"\n  */\nconst compareTwo =(a, VAR_0) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(VAR_0)\n  if (typeof VAR_0 =='string') {\n    bb = Number(VAR_0.replace(',', '.'))}\n \n  if (aa > bb) return a\n  if (aa < bb) return VAR_0\n  return null\n}\n\n/*\n  Create a function that takes two real numbers, and returns the larger\n  of the two.\n\n  compareThree(1, 2) ➞ 2\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ 1\n  compareThree(\"1\", \"1\") ➞ \"1\"\n  compareThree(\"1\", \"1.0\") ➞ \"1.0\"\n  */\nconst compareThree =(a, VAR_0) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(VAR_0)\n  if (typeof VAR_0 =='string') {\n    bb = Number(VAR_0.replace(',', '.'))}\n \n  if (aa > bb) return a\n  if (aa < bb) return VAR_0\n  if (aa === bb) return a\n  return null\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(VAR_0, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = VAR_0.length * VAR_0.length\n  if (m > 0 && VAR_0 [ m - 1 ] [ n ] < min) {\n    min = VAR_0 [ m - 1 ] [ n ]}\n  if (n > 0 && VAR_0 [ m ] [ n - 1 ] < min) {\n    min = VAR_0 [ m ] [ n - 1 ]}\n  if (m < VAR_0.length - 1 && VAR_0 [ m + 1 ] [ n ] < min) {\n    min = VAR_0 [ m + 1 ] [ n ]}\n  if (n < VAR_0.length - 1 && VAR_0 [ m ] [ n + 1 ] < min) {\n    min = VAR_0 [ m ] [ n + 1 ]}\n  let p = [ ]\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) {\n      p.push(1)}\n    else {\n      p.push(min)}\n    }\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(VAR_0, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    for (let j = 0; j < VAR_0.length; j++) {\n      if (VAR_0 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  let lst = [0]\n  let stack = [VAR_0[m] [ n ]]\n  let nn = n + 1\n  let mm = m + 1\n  let step = 1\n  while (step <= k) {\n    if (stack.length > 0) {\n      let item = stack.pop()\n      if (lst[item] > lst[n] && lst[item] < lst[nn]) {\n        lst[item] = lst[n]\n        lst[n] = item\n      }\n      if (lst[item] > lst[mm]) {\n        lst[item] = lst[mm]\n        lst[mm] = item\n      }\n      stack = stack.concat(VAR_0[mm] [ nn ])\n      mm++\n      nn++\n    } else {\n      break\n    }\n    step++\n  }\n  return lst\n}\n\nlet m = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n\nconsole.log(minPath(m, 3))<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VAR_0(a [ 0 ]) * VAR_0(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = VAR_0(a [ 1 ]) * VAR_0(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VAR_0(a [ 0 ]) * VAR_0(b [ 0 ])\n \n  if(m % VAR_0(b [ 1 ]) === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst VAR_0 =(x) => {\n  if(x === 0) {\n    return 0\n  } else {\n    return 1\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 1) {\n      p+=lst [ VAR_0 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 1) {\n      p+=lst [ VAR_0 ]\n     \n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(VAR_0) => {\n  let t = 0\n  if (VAR_0 [ 0 ] == 'I' && VAR_0 [ 1 ] == ' ') {\n    t = 1}\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] == '.' || VAR_0 [ i ] == '!' || VAR_0 [ i ] == '?') {\n      if (VAR_0 [ i + 1 ] == ' ' && VAR_0 [ i + 2 ] == 'I' && VAR_0 [ i + 3 ] == ' ') {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t++\n        }\n      }\n    }\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(VAR_0) => {\n  let t = 0\n  if (VAR_0 [ 0 ] == 'I' && VAR_0 [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] == '.' || VAR_0 [ i ] == '!' || VAR_0 [ i ] == '?') {\n      if (VAR_0 [ i + 1 ] =='' && VAR_0 [ i + 2 ] == 'I' && VAR_0 [ i + 3 ] =='') {\n       \n        t++\n      }\n    }\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(VAR_0 => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(VAR_0.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(VAR_0 =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(VAR_0.toLowerCase())\n \n  )\n .join(\"\");\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers('abcdef\\nghijklm')\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers =(text) => {\n  return text.split(\"\")\n .filter(VAR_0 =>![ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n .includes(VAR_0.toLowerCase())\n \n  )\n .join(\"\");\n};\n\n/*\n  removePunctuations is a function that takes string and returns string without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations('abcdef\\nghijklm')\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations =(text) => {\n  return text.split(\"\")\n .filter(VAR_0 =>![ \"!\",\".\", \",\", \":\", \";\", \"?\", \"!\", \".\", \",\", \"?\", \"!\", \",\", \":\", \";\", \"?\", \"!\", \".\", \",\", \":\", \";\", \"?\", \"!\", \".\", \",\", \":\", \";\", \"?\", \"!\", \".\", \",\", \":\", \";\", \"?\", \"!\", \".\", \",\", \":\", \";\", \"?\", \"!\", \".\" ]\n .includes(VAR_0.toLowerCase())\n \n  )\n .join(\"\");\n};\n\n/*\n  main is the main function.\n  */\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(VAR_0) => {\n  return [ ... Array(VAR_0).keys(), VAR_0 ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(VAR_0) => {\n  return [... Array(VAR_0).keys(), VAR_0 ].join(' ')\n \n}\n\nmodule.exports = stringSequence\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, VAR_0) => {\n  while (VAR_0 != 0) {\n    let temp = a;\n    a = VAR_0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = temp % VAR_0;\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, VAR_0) => {\n  while (VAR_0!= 0) {\n    let temp = a;\n    a = VAR_0;\n   \n    VAR_0 = temp % VAR_0;\n  }\n  return a;\n}\n\n/* Return the sum of two integers\n  >>> sum(1, 2)\n  3\n  >>> sum(1, -2)\n  -1\n  >>> sum(25, 15)\n  40\n  >>> sum(-1, -2)\n  -3\n  >>> sum(1, -1)\n  0\n  >>> sum(0, 0)\n  0\n  */\nconst sum = (a, b) => {\n  if (a == 0 || b == 0) return 0;\n  return a + b;\n}\n\n/* Return the product of two integers\n  >>> product(2, 3)\n  6\n  >>> product(2, -3)\n  -6\n  >>> product(0, 0)\n  0\n  >>> product(25, 15)\n  75\n  */\nconst product = (a, b) => {\n  if (a == 0 || b == 0) return 0;\n  return a * b;\n}\n\n/* Return a square of an integer\n  >>> square(3)\n  9\n  >>> square(-3)\n  9\n  >>> square(0)\n  0\n  >>> square(25)\n  25\n  */\nconst square = (x) => x * x;\n\n/* Return a cube of an integer\n  >>> cube(3)\n  27\n  >>> cube(-3)\n  9\n  >>> cube(0)\n  0\n  >>> cube(25)\n  625\n  */\nconst cube = (x) => x * x * x;\n\n/* Return a string representation of an integer\n  >>> str(2)\n  '2'\n  >>> str(-3)\n  '-3'\n  >>> str(0)\n  '0'\n  >>> str(25)\n  '25'\n  >>> str(25.0)\n  '25'\n  */\nconst str = (x) => String(x);\n\n/* Return the remainder of dividing two integers\n  >>> remainder(5, 3)\n  2\n  >>> remainder(15, 5)\n  0\n  >>> remainder(0, 0)\n  0\n  >>> remainder(25, 15)\n  5\n  >>> remainder(-1, -1)\n  1\n  >>> remainder(1, -1)\n  -1\n  >>> remainder(25, 15)\n  5\n  >>> remainder(5, 3)\n  2\n  >>> remainder(15, 5)\n  0\n  >>> remainder(0, 0)\n  0\n  >>> remainder(25, 15)\n  5\n  */\nconst remainder = (a, b) => {\n  return a % b;\n}\n\n/* Return the factorial of an integer\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(0)\n  1\n  >>> factorial(25)\n  62500\n  >>> factorial(25.0)\n  62500\n  */\nconst factorial = (x) => {\n  const factorial = (n) => {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n  }\n  return factorial(x);\n}\n\n/* Return the factorial of a non-negative integer\n  >>> factorialNonNegative(2)\n  2\n  >>> factorialNonNegative(3)\n  6\n  >>> factorialNonNegative(4)\n  24\n  >>> factorialNonNegative(0)\n  1\n  >>> factorialNonNegative(25)\n  62500\n  >>> factorialNonNegative(25.0)\n  62500\n  */\nconst factorialNonNegative = (x) => {\n  const factorial = (n) => {\n    if (n == 0) return 1;\n    return n * factorialNonNegative(n - 1);\n  }\n  return factorial(x);\n}\n\n/* Return the sum of all elements of an array\n  >>> sumArray([1, 2, 3, 4, 5])\n  15\n  >>> sumArray([])\n  0\n  >>> sumArray([1, 2, 3, 4, 5, 6])\n  21\n  >>> sumArray([1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sumArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/* Return the sum of all elements of an array,\n  excluding zero elements\n  >>> sumArrayNonZero([1, 2, 3, 4, 5])\n  15\n  >>> sumArrayNonZero([])\n  0\n  >>> sumArrayNonZero([1, 2, 3, 4, 5, 6])\n  21\n  >>> sumArrayNonZero([1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sumArrayNonZero = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n/* Return the sum of all elements of an array,\n  including zero elements\n  >>> sumArrayIncludingZero([1, 2, 3, 4, 5])\n  15\n  >>> sumArrayIncludingZero([])\n  0\n  >>> sumArrayIncludingZero([1, 2, 3, 4, 5, 6])\n  21\n  >>> sumArrayIncludingZero([1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sumArrayIncludingZero = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/* Return the sum of all elements of an array,\n  excluding zero elements\n  >>> sumArrayNonZeroIncluding"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < grid.length; VAR_0++) {\n    let m = 0\n    for (let j = 0; j < grid [ VAR_0 ].length; j++) {\n      if (grid [ VAR_0 ] [ j ] == 1) {\n        m++}\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (m > 0) {\n      m-=capacity;\n      p++;\n      }\n    }\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let VAR_0 = 0; VAR_0 < grid.length; VAR_0++) {\n    let m = 0\n    for (let j = 0; j < grid [ VAR_0 ].length; j++) {\n      if (grid [ VAR_0 ] [ j ] == 1) {\n        m++}\n      }\n   \n    p += Math.min(m, capacity)\n  }\n  return p\n}\n\nconst solution =(grid, capacity) => {\n  let count = 0\n  for (let VAR_0 = 0; VAR_0 < grid.length; VAR_0++) {\n    let m = 0\n    for (let j = 0; j < grid [ VAR_0 ].length; j++) {\n      if (grid [ VAR_0 ] [ j ] == 1) {\n        m++}\n    }\n    \n    if (m > 0 && m < capacity) {\n      count += m\n    }\n  }\n  return count\n}\n\n/*\n  Solution:\n    It is only necessary to fill the buckets in each row,\n    from the left to the right.\n    \n    The algorithm for each row is the following:\n        For each 1 in a row, fill the buckets in the row.\n        Find the bucket that can contain the maximum of the remaining buckets in the row.\n        Decrease the capacity of that bucket.\n        Update the count of the number of buckets that can be filled in the row.\n        If the row is fully filled, increase the count of the number of rows that have been filled.\n        \n    For example:\n        grid:\n        [\n          [0,0,1,0],\n          [0,1,0,0],\n          [1,1,1,1]\n        ]\n        bucket_capacity: 3\n        \n    For row 1, it will first fill the buckets in the row,\n    find the bucket that can contain the maximum of the remaining buckets in the row,\n    decrease the capacity of that bucket,\n    update the count of the number of buckets that can be filled in the row,\n    if the row is fully filled, increase the count of the number of rows that have been filled.\n    \n    After the first row, the remaining rows will be filled in a similar way.\n    \n    The algorithm will terminate after filling all the wells.\n    \n    The count of the number of rows that have been filled will be the maximum of all the counts of the rows that have been filled.\n    \n    Example:\n    grid:\n    [\n      [0,0,1,0],\n      [0,1,0,0],\n      [1,1,1,1]\n    ]\n    bucket_capacity: 3\n    \n    The count of the number of rows that have been filled will be the maximum of all the counts of the rows that have been filled.\n    \n    The result: 6\n    \n  Time complexity: O(grid.length)\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let VAR_0 = string.length\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return false}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 % i == 0) {\n      return false}\n    }\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let VAR_0 = string.length\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return false}\n  for (let i = 2; i * i <= VAR_0; i++) {\n   \n    if (VAR_0 % i == 0) {\n      return false}\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let VAR_0 = 1; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 0) {\n      t+=lst [ VAR_0 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let VAR_0 = 1; VAR_0 < lst.length; VAR_0+=2) {\n    if (lst [ VAR_0 ] % 2 == 0) {\n      t+=lst [ VAR_0 ]\n     \n    }\n  }\n  return t\n}\n\nconst add2 =(lst) => {\n  let t = 0\n  for (let VAR_0 = 1; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] % 2 == 0) {\n      t+=lst [ VAR_0 ]\n     \n    }\n  }\n  return t\n}\n\n\n\n// add([4, 2, 6, 7]) ===> 2\n\nconsole.log(add([4, 2, 6, 7]))\nconsole.log(add2([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  for (let VAR_0 = a; VAR_0 <= b; VAR_0++) {\n    if (VAR_0 == 2 || VAR_0 == 4 || VAR_0 == 6 || VAR_0 == 8) {\n      y.push(VAR_0)}\n    }\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let range = [];\n  for (let i = a; i <= b; i++) {\n    range.push(i);\n    }\n  return range.filter((num) => num % 2 === 0);\n}\n\nconst findLargestSum =(a, b) => {\n  let range = generateIntegers(a, b);\n  let sum = 0;\n  for (let i = 0; i < range.length; i++) {\n    sum += range[i];\n    }\n  return sum;\n}\n\nmodule.exports = findLargestSum;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      let w1 = VAR_0 [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = VAR_0 [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && VAR_0 [ k ] < VAR_0 [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = VAR_0 [ j ]\n      VAR_0 [ j ] = VAR_0 [ ind ]\n      VAR_0 [ ind ] = tmp\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let VAR_0 = arr\n  for (let j = 0; j < VAR_0.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < VAR_0.length; k++) {\n      let w1 = VAR_0 [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = VAR_0 [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n        }\n      if (f1 > f2) {\n        let temp = VAR_0 [ ind ]\n        VAR_0 [ ind ] = VAR_0 [ k ]\n        VAR_0 [ k ] = temp\n      }\n      ind++\n    }\n  }\n  return VAR_0\n}\n\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2,"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const VAR_0 of lst)\n      frq [ VAR_0 ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let VAR_0 = 1; VAR_0 < frq.length; VAR_0++)\n      if (frq [ VAR_0 ] >= VAR_0)\n      ans = VAR_0;\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const VAR_0 of lst)\n      frq [ VAR_0 ]+=1;\n      var ans = - 1;\n     \n      for (const VAR_0 of lst)\n      if (frq [ VAR_0 ] >= frq [ VAR_0 ])\n      ans = Math.max(VAR_0, ans);\n      return ans;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let VAR_0 = 0; VAR_0 < num.length; VAR_0++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (primes.includes(num [ VAR_0 ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let VAR_0 = 0; VAR_0 < num.length; VAR_0++)\n \n  {\n    let VAR_1 = parseInt(num[VAR_0], 16),\n    digit = VAR_1,\n    pos = primes.indexOf(VAR_1);\n    if (pos > -1)\n      {\n        total++;\n      }\n    else\n    {\n      total++;\n    }\n  }\n  return total;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(VAR_0) => {\n  return \"db\" + VAR_0.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(VAR_0) => {\n  return \"db\" + VAR_0.toString(2) + \"db\";\n \n}\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]}\n   \n    }\n    }\n  \n  return (a === Infinity)? (null, null) : (a, b)\n  }\n\nconst largestSmallestIntegersBy =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let res = null\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]\n      res = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]\n      res = lst [ VAR_0 ]}\n   \n    }\n    }\n  \n  return res\n  }\n\nconst largestSmallestIntegersBy =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let res = null\n  for (let VAR_0 = 0; VAR_0 < lst.length; VAR_0++) {\n    if (lst [ VAR_0 ] > 0 && lst [ VAR_0 ] < a) {\n      a = lst [ VAR_0 ]\n      res = lst [ VAR_0 ]}\n    if (lst [ VAR_0 ] < 0 && lst [ VAR_0 ] > b) {\n      b = lst [ VAR_0 ]\n      res = lst [ VAR_0 ]}\n   \n    }\n    }\n  \n  return res\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(VAR_0) => {\n  if (VAR_0 == 0 || VAR_0 == 1)\n  return 0;\n  if (VAR_0 == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(VAR_0 - 1) + fibfib(VAR_0 - 2) + fibfib(VAR_0 - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(VAR_0) => {\n  if (VAR_0 == 0 || VAR_0 == 1)\n  return 0;\n  if (VAR_0 == 2)\n \n  return 1;\n \n  VAR_0 = VAR_0 - 1;\n \n  return fibfib(VAR_0) + fibfib(VAR_0 - 1) + fibfib(VAR_0 - 2);\n};\n\nconsole.log(fibfib(4));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, VAR_0) => VAR_0 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, VAR_0) =>(VAR_0 % 3 == 0 ? three [ VAR_0 / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, VAR_0) => VAR_0 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var four = l.filter((item, VAR_0) => VAR_0 % 3!= 0);\n  four.sort((a, b) =>(a - b));\n  return [...three,...four];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const VAR_0 of numbers) {\n    sum_value+=VAR_0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= VAR_0;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const VAR_0 of numbers) {\n    sum_value+=VAR_0;\n   \n    prod_value *= VAR_0;\n  }\n  return sum_value, prod_value;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let VAR_0 = 0; VAR_0 < s.length; VAR_0++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ VAR_0 ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ VAR_0 ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    if (t [ VAR_0 ] != t [ t.length - VAR_0 - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let VAR_0 = 0; VAR_0 < s.length; VAR_0++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ VAR_0 ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ VAR_0 ]\n      }\n   \n  }\n  return (t, true)\n}\n\nmodule.exports = reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 [ i ] + VAR_0 [ j ] + VAR_0 [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  for (let k = j + 1; k < VAR_0.length; k++)\n \n    if (VAR_0[i] === VAR_0[j] && VAR_0[i] === VAR_0[k])\n      return true\n    else if (VAR_0[i] === VAR_0[j] && VAR_0[i]!== VAR_0[k])\n      return false\n    else if (VAR_0[j] === VAR_0[k] && VAR_0[i]!== VAR_0[j])\n      return false\n    else if (VAR_0[i]!== VAR_0[j] && VAR_0[i]!== VAR_0[k] && VAR_0[j]!== VAR_0[k])\n      return false\n    else if (VAR_0[i] === VAR_0[j] && VAR_0[i]!== VAR_0[k] && VAR_0[j] === VAR_0[k])\n      return false\n    else if (VAR_0[j] === VAR_0[k] && VAR_0[i]!== VAR_0[j] && VAR_0[j] === VAR_0[k])\n      return false\n    else if (VAR_0[i]!== VAR_0[j] && VAR_0[i] === VAR_0[k] && VAR_0[j] === VAR_0[k])\n      return false\n    else if (VAR_0[i]!== VAR_0[j] && VAR_0[i]!== VAR_0[k] && VAR_0[j]!== VAR_0[k])\n      return false\n  return false\n}\n\n// test cases\ntriplesSumToZero([1, 3, 5, 0])\ntriplesSumToZero([1, 3, -2, 1])\ntriplesSumToZero([1, 2, 3, 7])\ntriplesSumToZero([2, 4, -5, 3, 9, 7])\ntriplesSumToZero([1])\ntriplesSumToZero([2, 4, -5, 3, 9, 7])\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(VAR_0 => VAR_0 != '').map(VAR_0 => note_map [ VAR_0 ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const beats = music_string.split('')\n   .map(x => parseInt(x,10))\n   .filter(x => x > 0)\n   .reduce((a, b) => a + b)\n    ;\n \n  return beats;\n}\n\n//test\ntest = parseMusic(\"o o|.| o| o|.|.|.|.| o o\")\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let VAR_0 = arr.length - 1; VAR_0 > 0; VAR_0--) {\n    if (arr [ VAR_0 ] < arr [ VAR_0 - 1 ]) {\n      return VAR_0}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let VAR_0 = arr.length - 1; VAR_0 > 0; VAR_0--) {\n    if (arr [ VAR_0 ] < arr [ VAR_0 - 1 ]) {\n      return VAR_0}\n   \n    if (arr [ VAR_0 ] > arr [ VAR_0 - 1 ]) {\n      return - 1}\n  }\n  return - 1\n}\n\n/*\n  Given an array of n integers, return the number of permutations of the array.\n  The permutations are the same as the permutations of the integers themselves.\n  For example, [1, 2, 3, 4] is a permutation of [1, 2, 3, 4] and [1, 3, 2, 4]\n  is a permutation of [1, 2, 3, 4].\n\n  Examples:\n  permutations([1, 2, 3, 4]) = 24\n  permutations([1, 2, 3, 4, 5]) = 720\n  */\nconst permutations = (arr) => {\n  let counter = 1;\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  for (let i = 0; i < arrLength; i++) {\n    for (let j = i + 1; j < arrLength; j++) {\n      if (arr[i] > arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n    counter *= arrLength;\n    arrCopy = arrCopy.slice();\n    for (let i = 0; i < arrLength; i++) {\n      arrCopy[i] = arr[i];\n    }\n    counter /= arrLength;\n  }\n  return counter\n}\n\n/*\n  Given a string, return the number of characters that are not alphanumeric.\n  For example, the string \"Hello13\" has the non-alphanumeric characters \"1\" and\n  \"3\", so the answer is 2.\n\n  Examples:\n  notAlphanumeric(\"Hello1A\") = 2\n  notAlphanumeric(\"Hello13\") = 2\n  notAlphanumeric(\"Hello\") = 0\n  notAlphanumeric(\"Hello\") = 0\n  */\nconst notAlphanumeric = (str) => {\n  let nonAlphanumeric = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (isNaN(str[i])) {\n      nonAlphanumeric += 1}\n  }\n  return nonAlphanumeric\n}\n\n/*\n  Given a string, return the number of non-alphanumeric characters in the\n  string. For example, the string \"Hello1A\" has the non-alphanumeric\n  characters \"1\" and \"A\", so the answer is 1.\n\n  Examples:\n  nonAlphanumeric(\"Hello1A\") = 1\n  nonAlphanumeric(\"Hello13\") = 1\n  nonAlphanumeric(\"Hello\") = 0\n  nonAlphanumeric(\"Hello\") = 0\n  */\nconst nonAlphanumeric = (str) => {\n  let nonAlphanumeric = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (!isNaN(str[i])) {\n      nonAlphanumeric += 1}\n  }\n  return nonAlphanumeric\n}\n\n/*\n  Given a string, return the number of lowercase characters in the string.\n  For example, the string \"Hello1A\" has the lowercase characters \"h\", \"e\" and\n  \"l\", so the answer is 3.\n\n  Examples:\n  lowercase(\"Hello1A\") = 3\n  lowercase(\"Hello13\") = 3\n  lowercase(\"Hello\") = 0\n  lowercase(\"Hello\") = 0\n  */\nconst lowercase = (str) => {\n  let lowercase = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toLowerCase() === str[i]) {\n      lowercase += 1}\n  }\n  return lowercase\n}\n\n/*\n  Given a string, return the number of uppercase characters in the string.\n  For example, the string \"Hello1A\" has the uppercase characters \"H\", \"E\" and\n  \"L\", so the answer is 3.\n\n  Examples:\n  uppercase(\"Hello1A\") = 3\n  uppercase(\"Hello13\") = 3\n  uppercase(\"Hello\") = 0\n  uppercase(\"Hello\") = 0\n  */\nconst uppercase = (str) => {\n  let uppercase = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toUpperCase() === str[i]) {\n      uppercase += 1}\n  }\n  return uppercase\n}\n\n/*\n  Given an array of strings, return the total number of words in the array.\n\n  Examples:\n  words([]) = 0\n  words([\"Hello1A\", \"Hello13\", \"Hello\"]) = 3\n  words([\"Hello1A\", \"Hello13\"]) = 2\n  words([\"Hello1A\", \"Hello13\", \"Hello\", \"World\"]) = 5\n  */\nconst words = (arr) => {\n  let words = 0;\n  for (let i = 0; i < arr.length; i++) {\n    words += arr[i].split(\" \").length\n  }\n  return words\n}\n\n/*\n  Given an array of strings, return the total number of unique words in the\n  array.\n\n  Examples:\n  uniqueWords([]) = 0\n  uniqueWords([\"Hello1A\", \"Hello13\", \"Hello\"]) = 1\n  uniqueWords([\"Hello1A\", \"Hello13\"]) = 1\n  uniqueWords([\"Hello1A\", \"Hello13\", \"Hello\", \"World\"]) = 2\n  */\nconst uniqueWords = (arr) => {\n  let uniqueWords = 0;\n  "}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(VAR_0, w) => {\n  if (VAR_0.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = VAR_0.length - 1;\n  while (i < j) {\n    if (VAR_0 [ i ] != VAR_0 [ j ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false;\n    i++;\n    j--;\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(VAR_0, w) => {\n  if (VAR_0.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = VAR_0.length - 1;\n  while (i < j) {\n    if (VAR_0 [ i ]!= VAR_0 [ j ])\n   \n    return false;\n    ++i;\n    --j;\n  }\n  return true;\n};\n\nconsole.log(willItFly([1, 2, 3, 4, 5, 6], 7));<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(VAR_0) => {\n  return encodeCyclic(encodeCyclic(VAR_0));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(VAR_0) => {\n  return encodeCyclic(encodeCyclic(VAR_0));\n \n}\n\n/*\n  encodes string by cycling groups of four characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 3) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic2 function. Returns decoded string.\n  */\nconst decodeCyclic2 =(VAR_0) => {\n  return encodeCyclic2(encodeCyclic2(VAR_0));\n}\n\nexport default { encodeCyclic, decodeCyclic, encodeCyclic2, decodeCyclic2 };<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeOne = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOne function. Returns decoded string.\n  */\nconst decodeOne =(VAR_0) => {\n  return VAR_0.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 1 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n )).join(\"\");\n}\n\n/*\n  takes as input string. Returns decoded string.\n  */\nconst decode = (VAR_0) => {\n  return decodeShift(decodeOne(VAR_0));\n}\n\n/*\n  takes as input string. Returns encoded string.\n  */\nconst encode = (VAR_0) => {\n  return encodeShift(decodeOne(VAR_0));\n}\n\nmodule.exports = {\n  encode,\n  decode,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let VAR_0 = 0\n  if (hi > lo) {\n    VAR_0 = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 == 1 || VAR_0 == 0) {\n    return 'NO'}\n  for (let i = 2; i * i <= VAR_0; i++) {\n    if (VAR_0 % i == 0) {\n      return 'NO'}\n    }\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let VAR_0 = 0\n  if (hi > lo) {\n    VAR_0 = hi - lo}\n \n  if (VAR_0 < 1) {\n    return \"NO\"\n  }\n  let n = VAR_0 + 1\n  let VAR_1 = 1\n  let VAR_2 = 0\n  while (n < VAR_0) {\n    VAR_1 = VAR_1 + 2\n    VAR_2 = n + VAR_2\n    n = VAR_1 + 1\n  }\n  if (VAR_2 > 2) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN2 is a function that sums numbers from 1 to n.\n  >>> sumToN2(30)\n  465\n  >>> sumToN2(100)\n  5050\n  >>> sumToN2(5)\n  15\n  >>> sumToN2(10)\n  55\n  >>> sumToN2(1)\n  1\n  */\nconst sumToN2 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * VAR_0 / 2;\n \n}\n\n/*\n  sumToN3 is a function that sums numbers from 1 to n.\n  >>> sumToN3(30)\n  465\n  >>> sumToN3(100)\n  5050\n  >>> sumToN3(5)\n  15\n  >>> sumToN3(10)\n  55\n  >>> sumToN3(1)\n  1\n  */\nconst sumToN3 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN4 is a function that sums numbers from 1 to n.\n  >>> sumToN4(30)\n  465\n  >>> sumToN4(100)\n  5050\n  >>> sumToN4(5)\n  15\n  >>> sumToN4(10)\n  55\n  >>> sumToN4(1)\n  1\n  */\nconst sumToN4 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN5 is a function that sums numbers from 1 to n.\n  >>> sumToN5(30)\n  465\n  >>> sumToN5(100)\n  5050\n  >>> sumToN5(5)\n  15\n  >>> sumToN5(10)\n  55\n  >>> sumToN5(1)\n  1\n  */\nconst sumToN5 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN6 is a function that sums numbers from 1 to n.\n  >>> sumToN6(30)\n  465\n  >>> sumToN6(100)\n  5050\n  >>> sumToN6(5)\n  15\n  >>> sumToN6(10)\n  55\n  >>> sumToN6(1)\n  1\n  */\nconst sumToN6 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN7 is a function that sums numbers from 1 to n.\n  >>> sumToN7(30)\n  465\n  >>> sumToN7(100)\n  5050\n  >>> sumToN7(5)\n  15\n  >>> sumToN7(10)\n  55\n  >>> sumToN7(1)\n  1\n  */\nconst sumToN7 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN8 is a function that sums numbers from 1 to n.\n  >>> sumToN8(30)\n  465\n  >>> sumToN8(100)\n  5050\n  >>> sumToN8(5)\n  15\n  >>> sumToN8(10)\n  55\n  >>> sumToN8(1)\n  1\n  */\nconst sumToN8 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN9 is a function that sums numbers from 1 to n.\n  >>> sumToN9(30)\n  465\n  >>> sumToN9(100)\n  5050\n  >>> sumToN9(5)\n  15\n  >>> sumToN9(10)\n  55\n  >>> sumToN9(1)\n  1\n  */\nconst sumToN9 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) / 2;\n \n}\n\n/*\n  sumToN10 is a function that sums numbers from 1 to n.\n  >>> sumToN10(30)\n  465\n  >>> sumToN10(100)\n  5050\n  >>> sumToN10(5)\n  15\n  >>> sumToN10(10)\n  55\n  >>> sumToN10(1)\n  1\n  */\nconst sumToN10 =(VAR_0) => {\n  return VAR_0 *(VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1) * (VAR_0 + 1)"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(VAR_0) => {\n  if (VAR_0 < 2)\n  return false;\n  for (let k = 2; k < VAR_0 - 1; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (VAR_0 % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(VAR_0) => {\n  if (VAR_0 < 2)\n  return false;\n  for (let k = 2; k < VAR_0 - 1; k++)\n \n  if (VAR_0 % k === 0)\n    return false;\n  return true;\n};\n\nexport default isPrime;<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    let l = 0\n    for (let j = 0; j < t [ VAR_0 ].length; j++) {\n      if (t [ VAR_0 ] [ j ] != 'a' && t [ VAR_0 ] [ j ] != 'e' && t [ VAR_0 ] [ j ] != 'i' && t [ VAR_0 ] [ j ] != 'o' && t [ VAR_0 ] [ j ] != 'u' && t [ VAR_0 ] [ j ] != 'A' &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t [ VAR_0 ] [ j ] != 'U' && t [ VAR_0 ] [ j ] != 'O' && t [ VAR_0 ] [ j ] != 'I' && t [ VAR_0 ] [ j ] != 'E') {\n        l++\n        }\n      }\n    if (l == n) {\n      k.push(t [ VAR_0 ])}\n    }\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    let l = 0\n    for (let j = 0; j < t [ VAR_0 ].length; j++) {\n      if (t [ VAR_0 ] [ j ]!= 'a' && t [ VAR_0 ] [ j ]!= 'e' && t [ VAR_0 ] [ j ]!= 'i' && t [ VAR_0 ] [ j ]!= 'o' && t [ VAR_0 ] [ j ]!= 'u' && t [ VAR_0 ] [ j ]!= 'A' &&\n     \n      t [ VAR_0 ] [ j ]!= 'E' && t [ VAR_0 ] [ j ]!= 'I' && t [ VAR_0 ] [ j ]!= 'O' && t [ VAR_0 ] [ j ]!= 'U') {\n        l = l + 1\n        if (l == n) {\n          k.push(t [ VAR_0 ])\n          break\n        }\n      }\n    }\n  }\n  return k\n}\n\nconst selectWords2 =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let VAR_0 = 0; VAR_0 < t.length; VAR_0++) {\n    for (let VAR_1 = 0; VAR_1 < t [ VAR_0 ].length; VAR_1++) {\n      if (t [ VAR_0 ] [ VAR_1 ]!= 'a' && t [ VAR_0 ] [ VAR_1 ]!= 'e' && t [ VAR_0 ] [ VAR_1 ]!= 'i' && t [ VAR_0 ] [ VAR_1 ]!= 'o' && t [ VAR_0 ] [ VAR_1 ]!= 'u' && t [ VAR_0 ] [ VAR_1 ]!= 'A' &&\n     \n      t [ VAR_0 ] [ VAR_1 ]!= 'E' && t [ VAR_0 ] [ VAR_1 ]!= 'I' && t [ VAR_0 ] [ VAR_1 ]!= 'O' && t [ VAR_0 ] [ VAR_1 ]!= 'U') {\n        if (k.indexOf(t [ VAR_0 ]) == -1) {\n          k.push(t [ VAR_0 ])\n        }\n      }\n    }\n  }\n  return k\n}<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var VAR_0 = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  VAR_0.push(Number(i))\n  return n - VAR_0.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var VAR_0 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n  \n  return Number(n);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let VAR_0 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (VAR_0 < 0) {\n        y = - 1; VAR_0 = - VAR_0;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (VAR_0 >= 10) {\n        m+=VAR_0 % 10;\n        VAR_0 =(VAR_0 - VAR_0 % 10) / 10;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * VAR_0\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let VAR_0 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (VAR_0 < 0) {\n        y = - 1; VAR_0 = - VAR_0;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (VAR_0 >= 10) {\n        m+=VAR_0 % 10;\n        VAR_0 =(VAR_0 - VAR_0 % 10) / 10;\n        }\n     \n      while (d >= 10) {\n        n+=d % 10;\n        d = (d - d % 10) / 10;\n        }\n      if (m!= n) {\n        break;\n        }\n      }\n      if (m == n) {\n        p[k] = y * p [ k ] + u * p [ k + 1 ] + (y * n + u * m)\n        p.splice(k + 1, 1)\n        }\n    }\n  return p\n}\n\nmodule.exports = orderByPoints<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, VAR_0) => {\n  return a * VAR_0 / 2.0;\n \n};\n/*\n  Given a triangle and the side length, return the area.\n  >>> triangleArea(2, 3)\n  6\n  */\nconst triangleArea2 =(a, b, c) => {\n  return Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) - Math.pow(a + b, 2) + Math.pow(c + b, 2);\n};\n/*\n  Given the length of a side and high, return the perimeter.\n  >>> trianglePerimeter(5, 3)\n  14\n  */\nconst trianglePerimeter =(a, VAR_0) => {\n  return a + VAR_0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 =(a, b, c) => {\n  return Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) - Math.pow(a + b, 2) + Math.pow(c + b, 2);\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 =(a, b, c) => {\n  return (a + b + c) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 =(a, b, c) => {\n  return (a * b) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 =(a, b, c) => {\n  return (a * b) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 =(a, b, c) => {\n  return (a + b) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 =(a, b, c) => {\n  return (a + c) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 =(a, b, c) => {\n  return (a + b + c) / 3.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 =(a, b, c) => {\n  return (a * b) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 =(a, b, c) => {\n  return (a * b) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 =(a, b, c) => {\n  return (a * c) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 =(a, b, c) => {\n  return (a + b * c) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 =(a, b, c) => {\n  return (a + b + c) / 3.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 =(a, b, c) => {\n  return (a + b + c) / 3.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 =(a, b, c) => {\n  return (a + b) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 =(a, b, c) => {\n  return (a + c) / 2.0;\n};\n/*\n  Given the length of a side and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 =(a, b, c) => {\n  return (a + b + c) / 3.0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var VAR_0, result = [ ];\n  for (const n of numbers) {\n    if (VAR_0 == undefined)\n    VAR_0 = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = Math.max(VAR_0, n);\n    result.push(VAR_0);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var VAR_0, result = [ ];\n  for (const n of numbers) {\n    if (VAR_0 == undefined)\n    VAR_0 = n;\n    else\n   \n    {\n      VAR_0 = n;\n      if (result.length < VAR_0)\n        result.push(VAR_0);\n      else\n        result[result.length - VAR_0] = VAR_0;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    VAR_0+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0-=1;\n    if (VAR_0 < 0)\n    return false;\n    }\n  return VAR_0 == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var VAR_0 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    VAR_0+=1;\n    else\n   \n    if (b == \")\")\n    VAR_0-=1;\n    if (VAR_0 < 0)\n      return false;\n  }\n  return true;\n};\n\n/*\n  Return a string, consisting of `n` copies of `str`.\n  \n  >>> repeatedString(0, \"ABC\")\n  'ABC'\n  >>> repeatedString(1, \"ABC\")\n  'ABCABC'\n  >>> repeatedString(2, \"ABC\")\n  'ABCABCABC'\n  >>> repeatedString(3, \"ABC\")\n  'ABCABCABCABC'\n  >>> repeatedString(4, \"ABC\")\n  'ABCABCABCABCABC'\n  >>> repeatedString(5, \"ABC\")\n  'ABCABCABCABCABCABC'\n  \n  >>> repeatedString(6, \"ABC\")\n  'ABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(7, \"ABC\")\n  'ABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(8, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(9, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(10, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(11, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(12, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(13, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(14, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(15, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(16, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(17, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(18, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(19, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(20, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(21, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(22, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(23, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(24, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(25, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(26, \"ABC\")\n  'ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC'\n  \n  >>> repeatedString(27, \"ABC\")\n}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let VAR_0 = 0; VAR_0 < guess.length; VAR_0++) {\n    game [ VAR_0 ]-=guess [ VAR_0 ]\n    if (game [ VAR_0 ] < 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    game [ VAR_0 ] = - game [ VAR_0 ];}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let VAR_0 = 0; VAR_0 < guess.length; VAR_0++) {\n    game [ VAR_0 ]-=guess [ VAR_0 ]\n    if (game [ VAR_0 ] < 0)\n   \n  }\n};\n\nexport default compare;<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, VAR_0) => {\n  if (a + b <= VAR_0 || a + VAR_0 <= b || b + VAR_0 <= a)\n  return - 1;\n  var s =(a + b + VAR_0) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - VAR_0), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, VAR_0) => {\n  if (a + b <= VAR_0 || a + VAR_0 <= b || b + VAR_0 <= a)\n  return - 1;\n  var s =(a + b + VAR_0) / 2;\n \n  if (a === b)\n  return Math.sqrt(VAR_0);\n  else if (a === s)\n  return Math.sqrt(VAR_0 - b);\n  else if (b === s)\n  return Math.sqrt(a - VAR_0);\n  else\n  return Math.sqrt(Math.abs((a * b) - (VAR_0 * (VAR_0 - a) - b * (VAR_0 - b))))\n};\n\n//expect\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || c + b <= a)\n  return - 1;\n  var s = (a + b + c) / 2;\n  if (a === b && b === c)\n  return Math.sqrt(s);\n  else if (a === s)\n  return Math.sqrt(c - b);\n  else if (b === s)\n  return Math.sqrt(a - c);\n  else\n  return Math.sqrt(Math.abs((a * b) - (c * (c - a) - b * (b - c))))\n};\n\n//expect\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || c + b <= a)\n  return - 1;\n  var s = (a + b + c) / 2;\n  if (a === b && b === c)\n  return Math.sqrt(s);\n  else if (a === s)\n  return Math.sqrt(c - b);\n  else if (b === s)\n  return Math.sqrt(a - c);\n  else\n  return Math.sqrt(Math.abs((a * b) - (c * (c - a) - b * (b - c))))\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  if (VAR_0 [ i ] + VAR_0 [ j ] == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(VAR_0) => {\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  if (VAR_0 [ i ] + VAR_0 [ j ] == 0)\n \n  return true\n  \n  else\n    return false\n};\n\n/*\n  sumPairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> sumPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> sumPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> sumPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> sumPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> sumPairsSumToZero([1])\n  false\n  */\nconst sumPairsSumToZero =(VAR_0) => {\n  let counter = 0\n  for (let i = 0; i < VAR_0.length; i++)\n  for (let j = i + 1; j < VAR_0.length; j++)\n  if (VAR_0 [ i ] + VAR_0 [ j ] == 0)\n  {\n    counter++\n  }\n  \n  if (counter == 2)\n    return true\n  else\n    return false\n};\n\nmodule.exports = {\n  pairsSumToZero,\n  sumPairsSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let dup = 1\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    if (VAR_0 [ i ] == pre) {\n      dup+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (dup == 3) {\n        return false}\n      }\n    else {\n      pre = VAR_0 [ i ]\n      dup = 1\n      }\n    }\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let dup = 1\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    if (VAR_0 [ i ] == pre) {\n      dup+=1;\n     \n      if (dup > 1) {\n        return false}\n    }\n    pre = VAR_0 [ i ]\n  }\n  return true\n}\n\n/* Given an array of strings, return whether or not they are sorted\n  in ascending order.\n  Examples\n  isSortedStrings([ \"1\", \"2\", \"3\" ]) ➞ true\n  isSortedStrings([ \"1\", \"2\", \"3\", \"2\" ]) ➞ false\n  isSortedStrings([ \"1\", \"2\", \"3\", \"2\", \"3\" ]) ➞ true\n  */\nconst isSortedStrings =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let dup = 1\n  let pre = VAR_0 [ 0 ]\n  for (let i = 1; i < VAR_0.length; i++) {\n    if (VAR_0 [ i ] < pre) {\n      return false}\n    if (VAR_0 [ i ] == pre) {\n      dup+=1;\n     \n      if (dup > 1) {\n        return false}\n    }\n    pre = VAR_0 [ i ]\n  }\n  return true\n}\n\n/* Given a sorted array of numbers, return the index of the first\n  number in the array that is not in the list. If no such number\n  exists, return -1.\n  Examples\n  findFirstInSorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 2\n  findFirstInSorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ -1\n  */\nconst findFirstInSorted =(VAR_0) => {\n  let i = 0\n  while (i < VAR_0.length && VAR_0 [ i ] == i) {\n    i += 1\n  }\n  if (i >= VAR_0.length) {\n    return -1}\n  return i\n}\n\n/* Given an unsorted array of numbers, return the index of the first\n  number in the array that is not in the list. If no such number\n  exists, return -1.\n  Examples\n  findFirstInUnsorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ -1\n  findFirstInUnsorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ -1\n  */\nconst findFirstInUnsorted =(VAR_0) => {\n  let i = 0\n  while (i < VAR_0.length && VAR_0 [ i ] == i) {\n    i += 1\n  }\n  if (i >= VAR_0.length) {\n    return -1}\n  return i\n}\n\n/* Given an array of strings, return the index of the first string\n  in the array that is not in the list. If no such string exists,\n  return -1.\n  Examples\n  findFirstInUnsortedStrings([ \"1\", \"2\", \"3\", \"4\" ]) ➞ -1\n  findFirstInUnsortedStrings([ \"1\", \"2\", \"3\", \"4\", \"5\" ]) ➞ 2\n  */\nconst findFirstInUnsortedStrings =(VAR_0) => {\n  let i = 0\n  while (i < VAR_0.length && VAR_0 [ i ] == i) {\n    i += 1\n  }\n  if (i >= VAR_0.length) {\n    return -1}\n  return i\n}\n\n/* Given a list of numbers, return the index of the first number\n  in the list that is not in the list. If no such number exists,\n  return -1.\n  Examples\n  findFirstInList([1, 2, 3, 4, 5, 6, 7, 8]) ➞ -1\n  findFirstInList([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 2\n  */\nconst findFirstInList =(VAR_0) => {\n  let i = 0\n  while (i < VAR_0.length && VAR_0 [ i ] == i) {\n    i += 1\n  }\n  if (i >= VAR_0.length) {\n    return -1}\n  return i\n}\n\n/* Given a sorted array of strings, return the index of the first string\n  in the array that is not in the list. If no such string exists,\n  return -1.\n  Examples\n  findFirstInSortedStrings([ \"1\", \"2\", \"3\" ]) ➞ 2\n  findFirstInSortedStrings([ \"1\", \"2\", \"3\", \"2\" ]) ➞ -1\n  findFirstInSortedStrings([ \"1\", \"2\", \"3\", \"2\", \"3\" ]) ➞ -1\n  */\nconst findFirstInSortedStrings =(VAR_0) => {\n  let i = 0\n"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    s+=VAR_0 [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (VAR_0 [ i ] == 0) {\n      return 0}\n    if (VAR_0 [ i ] < 0) {\n      n = - n; s-=2 * VAR_0 [ i ]}\n    }\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < VAR_0.length; i++) {\n    s+=VAR_0 [ i ]\n   \n    if (VAR_0[i] < 0) {\n      s *= -1}\n    n *= VAR_0 [ i ]\n  }\n  return s*n\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\nconsole.log(prodSigns([0, 1]))\nconsole.log(prodSigns([1, 2, 2, -4, 5, -7, -9, -12]))\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let VAR_0 = 18\n  for (let i = 2; i < n; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    VAR_0 = VAR_0 * 10\n    }\n  return VAR_0\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let VAR_0 = 18\n  for (let i = 2; i < n; i++) {\n   \n    let VAR_1 = VAR_0 + 9\n    let VAR_2 = VAR_1 + 9\n    let VAR_3 = VAR_2 + 9\n    let VAR_4 = VAR_3 + 9\n    let VAR_5 = VAR_4 + 9\n    let VAR_6 = VAR_5 + 9\n    let VAR_7 = VAR_6 + 9\n    let VAR_8 = VAR_7 + 9\n    let VAR_9 = VAR_8 + 9\n    let VAR_10 = VAR_9 + 9\n    let VAR_11 = VAR_10 + 9\n    let VAR_12 = VAR_11 + 9\n    let VAR_13 = VAR_12 + 9\n    let VAR_14 = VAR_13 + 9\n    let VAR_15 = VAR_14 + 9\n    let VAR_16 = VAR_15 + 9\n    let VAR_17 = VAR_16 + 9\n    \n    let VAR_20 = VAR_17 + 9\n    let VAR_21 = VAR_20 + 9\n    let VAR_22 = VAR_21 + 9\n    let VAR_23 = VAR_22 + 9\n    let VAR_24 = VAR_23 + 9\n    let VAR_25 = VAR_24 + 9\n    let VAR_26 = VAR_25 + 9\n    let VAR_27 = VAR_26 + 9\n    let VAR_28 = VAR_27 + 9\n    let VAR_29 = VAR_28 + 9\n    let VAR_30 = VAR_29 + 9\n    let VAR_31 = VAR_30 + 9\n    let VAR_32 = VAR_31 + 9\n    let VAR_33 = VAR_32 + 9\n    let VAR_34 = VAR_33 + 9\n    let VAR_35 = VAR_34 + 9\n    let VAR_36 = VAR_35 + 9\n    let VAR_37 = VAR_36 + 9\n    let VAR_38 = VAR_37 + 9\n    let VAR_39 = VAR_38 + 9\n    let VAR_40 = VAR_39 + 9\n    \n    let VAR_45 = VAR_40 + 9\n    let VAR_46 = VAR_45 + 9\n    let VAR_47 = VAR_46 + 9\n    let VAR_48 = VAR_47 + 9\n    let VAR_49 = VAR_48 + 9\n    let VAR_50 = VAR_49 + 9\n    let VAR_51 = VAR_50 + 9\n    let VAR_52 = VAR_51 + 9\n    let VAR_53 = VAR_52 + 9\n    let VAR_54 = VAR_53 + 9\n    let VAR_55 = VAR_54 + 9\n    let VAR_56 = VAR_55 + 9\n    let VAR_57 = VAR_56 + 9\n    let VAR_58 = VAR_57 + 9\n    let VAR_59 = VAR_58 + 9\n    let VAR_60 = VAR_59 + 9\n    let VAR_61 = VAR_60 + 9\n    let VAR_62 = VAR_61 + 9\n    let VAR_63 = VAR_62 + 9\n    let VAR_64 = VAR_63 + 9\n    let VAR_65 = VAR_64 + 9\n    let VAR_66 = VAR_65 + 9\n    let VAR_67 = VAR_66 + 9\n    let VAR_68 = VAR_67 + 9\n    let VAR_69 = VAR_68 + 9\n    let VAR_70 = VAR_69 + 9\n    let VAR_71 = VAR_70 + 9\n    let VAR_72 = VAR_71 + 9\n    let VAR_73 = VAR_72 + 9\n    let VAR_74 = VAR_73 + 9\n    let VAR_75 = VAR_74 + 9\n    let VAR_76 = VAR_75 + 9\n    let VAR_77 = VAR_76 + 9\n    let VAR_78 = VAR_77 + 9\n    let VAR_79 = VAR_78 + 9\n    let VAR_80 = VAR_79 + 9\n    let VAR_81 = VAR_80 + 9\n    let VAR_82 = VAR_81 + 9\n    let VAR_83 = VAR_82 + 9\n    let VAR_84 = VAR_83 + 9\n    let VAR_85 = VAR_84 + 9\n    let VAR_86 = VAR_85 + 9\n    let VAR_87 = VAR_86 + 9\n    let VAR_88 = VAR_87 + 9\n    let VAR_89 = VAR_88 + 9\n    let VAR_90 = VAR_89 + 9\n    let VAR_91 = VAR_90 + 9\n    let VAR_92 = VAR_91 + 9\n    let VAR_93 = VAR_92 + 9\n    let VAR_94 = VAR_93 + 9\n    let VAR_95 = VAR_94 + 9\n    let VAR_96 = VAR_95 + 9\n    let VAR_97 = VAR_96 + 9\n    let VAR_98 = VAR_97 + 9\n    let VAR_99 = VAR_98 + 9\n    let VAR_100 = VAR_99 + 9\n    let VAR_101 = VAR_100 + 9\n    let VAR_102 = VAR_101 + 9\n    let VAR_103 = VAR_102 + 9\n    let VAR_104 = VAR_103 + 9\n    let VAR_105 = VAR_104 + 9\n    let VAR_106 = VAR_105 + 9\n    let VAR_107 = VAR_106 + 9\n    let VAR_108 = VAR_107 + 9\n    let VAR_109 = VAR_108 + 9\n    let V"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(VAR_0) => {\n  let p = 1;\n  let t = 1;\n  while (VAR_0 > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t *= VAR_0;\n      }\n    p++;\n    VAR_0--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(VAR_0) => {\n  let p = 1;\n  let t = 1;\n  while (VAR_0 > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * VAR_0;\n      if (t == VAR_0) {\n        break;\n      }\n    }\n    p = t;\n    VAR_0--;\n  }\n  return t;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, VAR_0 = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        VAR_0 = Math.max(VAR_0, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return VAR_0;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, VAR_0 = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        VAR_0 = Math.max(VAR_0, depth);\n        }\n      else {\n        depth-=1;\n       \n        VAR_0 = Math.min(VAR_0, depth);\n        }\n      }\n    return depth;\n    }\n  var paren_strings = paren_string.split(\" \");\n  var max_depth = 0;\n  paren_strings.forEach(function(s) {\n    var depth = parseParenGroup(s);\n    if (depth > max_depth) {\n      max_depth = depth;\n      }\n    });\n  return max_depth;\n  }\n\n/**\n  Given an input string, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 =(paren_string) => {\n  var depth = 0;\n  var open_paren_count = 0;\n  var i = 0;\n  while (i < paren_string.length) {\n    if (paren_string[i] == '(') {\n      open_paren_count++;\n      }\n    else if (paren_string[i] == ')') {\n      open_paren_count--;\n      }\n    else {\n      depth++;\n      }\n    i++;\n    }\n  return depth;\n  }\n\nconst main = (args) => {\n  var paren_string = args[0];\n  console.log(parseNestedParens(paren_string));\n  console.log(parseNestedParens2(paren_string));\n  }\n\nif (process.argv.length < 3) {\n  console.log(\"Please provide a paren_string\");\n}\nelse {\n  main(process.argv.slice(2));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y [ VAR_0 ] + y [ j ] + y [ k ]) % 3 == 0) {\n          u++}\n        }\n      }\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let VAR_0 = 1; VAR_0 <= n; VAR_0++) {\n    y.push(VAR_0 * VAR_0 - VAR_0 + 1)\n    }\n  let u = 0\n  for (let VAR_0 = 0; VAR_0 < n - 2; VAR_0++) {\n    for (let j = VAR_0 + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        let a = y[VAR_0] + y[j] +"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let k = 0\n  let len = VAR_0.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (VAR_0 [ j ] < VAR_0 [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    VAR_0.push(VAR_0 [ 0 ]);\n    VAR_0.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(VAR_0) => {\n  if (VAR_0.length == 0) {\n    return true}\n  let k = 0\n  let len = VAR_0.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (VAR_0 [ j ] < VAR_0 [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n      }\n    if (t == 1) {\n      VAR_0 [ k ] = VAR_0 [ i ]\n      k++\n      }\n    }\n  \n  return (k == len)\n  }\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(VAR_0) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\nwhile (VAR_0) {\n    let div =(VAR_0 - VAR_0 % num [ i ]) / num [ i ]\n    VAR_0 = VAR_0 % num [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (div) {\n      res+=sym [ i ]\n      div-=1\n      }\n    i-=1\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(VAR_0) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\nwhile (VAR_0) {\n    let div =(VAR_0 - VAR_0 % num [ i ]) / num [ i ]\n    VAR_0 = VAR_0 % num [ i ]\n   \n    res = sym [ i ] + res\n    i--\n}\nreturn res.toLowerCase()\n}\n\nmodule.exports = {\n  intToMiniRoman\n}<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  VAR_0 = x.toString();\n  if (shift > VAR_0.length)\n  return VAR_0.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return VAR_0.slice( - shift) + VAR_0.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  VAR_0 = x.toString();\n  if (shift > VAR_0.length)\n  return VAR_0.split('').reverse().join('');\n \n  return VAR_0.split('').reverse().join('');\n}\n\n/*\n  Reverse the digits of the number x, i.e.\n  >>> reverse(12)\n  13\n  >>> reverse(123)\n  321\n  >>> reverse(1234)\n  4321\n  >>> reverse(12345)\n  5432\n  >>> reverse(123456)\n  6543\n  >>> reverse(1234567)\n  7856\n  >>> reverse(12345678)\n  9078\n  >>> reverse(123456789)\n  987\n  >>> reverse(1234567890)\n  9876\n  >>> reverse(12345678901)\n  9886\n  >>> reverse(123456789012)\n  9887\n  >>> reverse(1234567890123)\n  9888\n  >>> reverse(12345678901234)\n  9989\n  >>> reverse(123456789012345)\n  9990\n  >>> reverse(1234567890123456)\n  9991\n  >>> reverse(12345678901234567)\n  9992\n  >>> reverse(123456789012345678)\n  9993\n  >>> reverse(1234567890123456789)\n  9994\n  >>> reverse(12345678901234567890)\n  9995\n  >>> reverse(123456789012345678901)\n  9996\n  >>> reverse(1234567890123456789012)\n  9997\n  >>> reverse(12345678901234567890123)\n  9998\n  >>> reverse(123456789012345678901234)\n  9999\n*/\nconst reverse =(x) => {\n  return x.toString().split('').reverse().join('');\n}\n\n/*\n  Return the next fibonacci number\n  >>> nextFib(0)\n  0\n  >>> nextFib(1)\n  1\n  >>> nextFib(2)\n  1\n  >>> nextFib(3)\n  2\n  >>> nextFib(4)\n  3\n  >>> nextFib(5)\n  5\n  >>> nextFib(6)\n  8\n  >>> nextFib(7)\n  13\n  >>> nextFib(8)\n  21\n  >>> nextFib(9)\n  34\n  >>> nextFib(10)\n  55\n  >>> nextFib(11)\n  89\n  >>> nextFib(12)\n  144\n  >>> nextFib(13)\n  233\n  >>> nextFib(14)\n  377\n  >>> nextFib(15)\n  610\n  >>> nextFib(16)\n  987\n*/\nconst nextFib =(x) => {\n  if (x === 0)\n  return 0;\n  if (x === 1)\n  return 1;\n  return fib(x-2) + fib(x-1);\n}\n\n/*\n  Return the fibonacci number at the index x.\n  >>> fib(0)\n  0\n  >>> fib(1)\n  1\n  >>> fib(2)\n  1\n  >>> fib(3)\n  2\n  >>> fib(4)\n  3\n  >>> fib(5)\n  5\n  >>> fib(6)\n  8\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n*/\nconst fib =(x) => {\n  return (x+1)%2? fib(x-1) + fib(x-2) : fib(x-1) ;\n}\n\n/*\n  Return the sum of the fibonacci number at the index x and y.\n  >>> sumFib(0,0)\n  0\n  >>> sumFib(0,1)\n  1\n  >>> sumFib(1,0)\n  1\n  >>> sumFib(1,1)\n  1\n  >>> sumFib(2,0)\n  1\n  >>> sumFib(2,1)\n  1\n  >>> sumFib(3,0)\n  1\n  >>> sumFib(3,1)\n  1\n  >>> sumFib(4,0)\n  1\n  >>> sumFib(4,1)\n  1\n  >>> sumFib(5,0)\n  1\n  >>> sumFib(5,1)\n  1\n  >>> sumFib(6,0)\n  1\n  >>> sumFib(6,1)\n  1\n  >>> sumFib(7,0)\n  1\n  >>> sumFib(7,1)\n  1\n  >>> sumFib(8,0)\n  1\n  >>> sumFib(8,1)\n  1\n  >>> sumFib(9,0)\n  1\n  >>> sumFib(9,1)\n  1\n  >>> sumFib(10,0)\n  1\n  >>> sumFib(10,1)\n  1\n  >>> sumFib(11,0)\n  1\n  >>> sumFib(11,1)\n  1\n  >>> sumFib(12,0)\n  1\n  >>> sumFib(12,1)\n  1\n  >>> sumFib(13,0)\n  1\n  >>> sumFib(13,1)\n  1\n  >>> sumFib(14,0)\n  1\n  >>> sumFib(14,1)\n  1\n  >>> sumFib(15,0)\n  1\n  >>> sumFib(15,1)\n  1\n  "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      VAR_0.push(lst [ i ])\n      }\n    }\n  for (let j = VAR_0.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (VAR_0 [ k ].length > VAR_0 [ k + 1 ].length) {\n        f = 1}\n      if (VAR_0 [ k ].length == VAR_0 [ k + 1 ].length) {\n        let r = VAR_0 [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (VAR_0 [ k ] [ l ].charCodeAt() > VAR_0 [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            break;\n            }\n          if (VAR_0 [ k ] [ l ].charCodeAt() < VAR_0 [ k + 1 ] [ l ].charCodeAt()) {\n            break;\n            }\n          }\n        }\n      if (f == 1) {\n        let tmp = VAR_0 [ k ]\n        VAR_0 [ k ] = VAR_0 [ k + 1 ]\n        VAR_0 [ k + 1 ] = tmp\n        }\n      }\n    }\n  return VAR_0\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let VAR_0 = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      VAR_0.push(lst [ i ])\n      }\n    }\n  for (let j = VAR_0.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (VAR_0 [ k ].length > VAR_0 [ k + 1 ].length) {\n        f = 1}\n      if (VAR_0 [ k ].length == VAR_0 [ k + 1 ].length) {\n        let r = VAR_0 [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (VAR_0 [ k ] [ l ].charCodeAt() > VAR_0 [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n            }\n          }\n        }\n      if (f) {\n        VAR_0.splice(k, 1)\n        }\n      }\n    }\n  return VAR_0\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))<|endoftext|>"}
