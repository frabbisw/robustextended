{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    depth-=1;\n    else\n    return false;\n  }\n  return (depth == 0);\n};\n\n/*\n  Given a string and a list of brackets, return the string inside of any brackets.\n  If there are brackets, they are removed.\n\n  >>> splitIntoBrackets(\"<>\")\n  []\n  >>> splitIntoBrackets(\"<\")\n  \"<>\"\n  >>> splitIntoBrackets(\"<>\")\n  \"<>\"\n  >>> splitIntoBrackets(\"<>\", [\"<\", \">\"])\n  []\n  >>> splitIntoBrackets(\"<>\", [\"<\", \">\"])\n  \"<>\"\n  >>> splitIntoBrackets(\"<>\", [\"<\", \">\", \">\"])\n  \"<>\"\n  >>> splitIntoBrackets(\"<>\", [\"<\", \">\", \">\", \">\", \">\"])\n  \"<>\"\n  >>> splitIntoBrackets}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n};\n\nexport default maxElement;<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == ' ' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        k = 0;\n        t+=s [ i ]\n        }\n      }\n    i++;}\n  if (t != '') {\n    p.push(t);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] =='' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n        else if (k == 2) {\n          k = 3;\n          p.push(t);\n          t = '';\n          }\n       \n        else if (k == 3) {\n          k = 2;\n          p.push(t);\n          t = '';\n          }\n       }\n       \n       else {\n        t += s [ i ];\n        }\n      }\n     \n    i++;\n    }\n  \n  if (k == 1) {\n    p.push(t);\n    }\n  \n  return p;\n}\n\nconsole.log(wordsString(\"Hi, my name is John\"));<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      x = Math.floor(x / base);\n      }\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n      x = Math.floor(x/base);\n     }\n  }\n  return ret;\n}\n\n/*\n  Convert decimal number to binary number.\n  >>> decimalToBinary(12)\n  '1010'\n  >>> decimalToBinary(12.5)\n  '11001'\n  >>> decimalToBinary(9.99)\n  '100101'\n  >>> decimalToBinary(9)\n  '1001'\n  >>> decimalToBinary(1.5)\n  '101'\n  >>> decimalToBinary(0.5)\n  '10'\n  >>> decimalToBinary(0)\n  '0'\n  >>> decimalToBinary(-1)\n  '-1'\n  >>> decimalToBinary(-1.5)\n  '-101'\n  >>> decimalToBinary(-0.5)\n  '-10'\n  >>> decimalToBinary(-0)\n  '-0'\n  >>> decimalToBinary(-9.99)\n  '-100101'\n  >>> decimalToBinary(-9)\n  '-1001'\n  >>> decimalToBinary(-1)\n  '-1'\n  >>> decimalToBinary(-0)\n  '-0'\n  >>> decimalToBinary(0)\n  '0'\n  >>> decimalToBinary(1)\n  '1'\n  >>> decimalToBinary(1.5)\n  '101'\n  >>> decimalToBinary(0.5)\n  '10'\n  >>> decimalToBinary(0.0)\n  '0'\n  >>> decimalToBinary(9.99)\n  '100101'\n  >>> decimalToBinary(9)\n  '1001'\n  >>> decimalToBinary(1)\n  '1'\n  >>> decimalToBinary(0.0)\n  '0'\n  >>> decimalToBinary(0.0)\n  '0'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9.999)\n  '100101'\n  >>> decimalToBinary(9"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length != 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((t [ 0 ] == 1 || t [ 0 ] == 3 || t [ 0 ] == 5 || t [ 0 ] == 7 || t [ 0 ] == 8 || t [ 0 ] == 10 || t [ 0 ] == 12) && t [ 1 ] > 31) {\n    return false}\n  if ((t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) && t [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length!= 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n  if (t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) {\n    if (t [ 2 ] < 1 || t [ 2 ] > 31) {\n      return false}\n  }\n  if (t [ 0 ] == 3 || t [ 0 ] == 5 || t [ 0 ] == 7 || t [ 0 ] == 8 || t [ 0 ] == 10 || t [ 0 ] == 12) {\n    if (t [ 2 ] < 1 || t [ 2 ] > 30) {\n      return false}\n  }\n  return true\n}\n\n/*\nGiven a number of days, calculate the number of months the person will have lived.\n\nfor example:\n\ndays = 2 => 1 month\n\ndays = 4 => 2 months\n\ndays = 0 => 1 month\n\ndays = 5 => 2 months\n\ndays = 7 => 3 months\n\ndays = 10 => 4 months\n\ndays = 31 => 5 months\n\ndays = 32 => 5 months\n\ndays = 33 => 5 months\n\ndays = 34 => 5 months\n\ndays = 35 => 5 months\n\ndays = 36 => 5 months\n\ndays = 37 => 5 months\n\ndays = 38 => 5 months\n\ndays = 39 => 5 months\n\ndays = 40 => 5 months\n\ndays = 41 => 5 months\n\ndays = 42 => 5 months\n\ndays = 43 => 5 months\n\ndays = 44 => 5 months\n\ndays = 45 => 5 months\n\ndays = 46 => 5 months\n\ndays = 47 => 5 months\n\ndays = 48 => 5 months\n\ndays = 49 => 5 months\n\ndays = 50 => 5 months\n\ndays = 51 => 5 months\n\ndays = 52 => 5 months\n\ndays = 53 => 5 months\n\ndays = 54 => 5 months\n\ndays = 55 => 5 months\n\ndays = 56 => 5 months\n\ndays = 57 => 5 months\n\ndays = 58 => 5 months\n\ndays = 59 => 5 months\n\ndays = 60 => 5 months\n\ndays = 61 => 5 months\n\ndays = 62 => 5 months\n\ndays = 63 => 5 months\n\ndays = 64 => 5 months\n\ndays = 65 => 5 months\n\ndays = 66 => 5 months\n\ndays = 67 => 5 months\n\ndays = 68 => 5 months\n\ndays = 69 => 5 months\n\ndays = 70 => 5 months\n\ndays = 71 => 5 months\n\ndays = 72 => 5 months\n\ndays = 73 => 5 months\n\ndays = 74 => 5 months\n\ndays = 75 => 5 months\n\ndays = 76 => 5 months\n\ndays = 77 => 5 months\n\ndays = 78 => 5 months\n\ndays = 79 => 5 months\n\ndays = 80 => 5 months\n\ndays = 81 => 5 months\n\ndays = 82 => 5 months\n\ndays = 83 => 5 months\n\ndays = 84 => 5 months\n\ndays = 85 => 5 months\n\ndays = 86 => 5 months\n\ndays = 87 => 5 months\n\ndays = 88 => 5 months\n\ndays = 89 => 5 months\n\ndays = 90 => 5 months\n\ndays = 91 => 5 months\n\ndays = 92 => 5 months\n\ndays = 93 => 5 months\n\ndays = 94 => 5 months\n\ndays = 95 => 5 months\n\ndays = 96 => 5 months\n\ndays = 97 => 5 months\n\ndays = 98 => 5 months\n\ndays = 99 => 5 months\n\ndays = 100 => 5 months\n\ndays = 101 => 5 months\n\ndays = 102 => 5 months\n\ndays = 103 => 5 months\n\ndays = 104 => 5 months\n\ndays = 105 => 5 months\n\ndays = 106 => 5 months\n\ndays = 107 => 5 months\n\ndays = 108 => 5 months\n\ndays = 109 => 5 months\n\ndays = 110 => 5 months\n\ndays = 111 => 5 months\n\ndays = 112 => 5 months\n\ndays = 113 => 5 months\n\ndays = 114 => 5 months\n\ndays = 115 => 5 months\n\ndays = 116 => 5 months\n\ndays = 117 => 5 months\n\ndays = 118 => 5 months\n\ndays = 119 => 5 months\n\ndays = 120 => 5 months\n\ndays = 121 => 5 months\n\ndays = 122 => 5 months\n\ndays = 123 => 5 months\n\ndays = 124 => 5 months\n\ndays = 125 => 5 months\n\ndays = 126 => 5 months\n\ndays = 127 => 5 months\n\ndays = 128 => 5 months\n\ndays = 129 => 5 months\n\ndays = 130 => 5 months\n\ndays = 131 => 5 months\n\ndays = 132 => 5 months\n\ndays = 133 => 5 months\n\ndays = 134 => 5 months\n\ndays = 135 => 5 months\n\ndays = 136 => 5 months\n\ndays = 137 => 5 months\n\ndays = 138 => 5 months\n\ndays = 139 => 5 months\n\ndays = 140 => 5 months\n\ndays = 141 => 5 months\n\ndays = 142 => 5 months\n\ndays = 143 => 5 months\n\ndays = 144 => 5 months\n\ndays = 145 => 5 months\n\ndays = 146 => 5 months\n\ndays = 147 => 5 months\n\ndays = 148 => 5 months\n\ndays = 149 => 5 months\n\ndays = 150 => 5 months\n\ndays = 151 => 5 months\n\ndays = 152 => 5 months\n\ndays = 153 => 5"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ num ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n      dict[num] = 1;\n      }\n    }\n  return [...new Set(Object.keys(dict).sort())];\n  };\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; !isPalindrome(string.slice(beginning_of_suffix));) {\n    beginning_of_suffix+=1;\n    }\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  /* Find the longest postfix of supplied string that is a palindrome. */\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(string.slice(i))) {\n      beginning_of_suffix = i;\n      break;\n    }\n  }\n\n  return string.slice(0, beginning_of_suffix) + string.slice(beginning_of_suffix).split('').reverse().join('');\n}\n\n/* Return the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n  var length = 0;\n\n  /* Find the longest postfix of supplied string that is a palindrome. */\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(string.slice(i))) {\n      beginning_of_suffix = i;\n      length = string.slice(i).length;\n      break;\n    }\n  }\n\n  return string.slice(0, beginning_of_suffix) + string.slice(beginning_of_suffix).split('').reverse().join('');\n}\n\n/* Return the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string suffix that comes before the palindromic prefix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('catac')\n  'catac'\n  >>> longestPalindrome('cata')\n  'cata'\n  */\nconst longestPalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_prefix = 0;\n  var length = 0;\n\n  /* Find the longest postfix of supplied string that is a palindrome. */\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(string.slice(string.length - i - 1))) {\n      beginning_of_prefix = string.length - i - 1;\n      length = string.slice(string.length - i - 1).length;\n      break;\n    }\n  }\n\n  return string.slice(0, beginning_of_prefix) + string.slice(beginning_of_prefix).split('').reverse().join('');\n}\n\n/* Return the shortest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string suffix that comes before the palindromic prefix.\n  >>> shortestPalindrome('cat')\n  'cat'\n  >>> shortestPalindrome('catac')\n  'catac'\n  >>> shortestPalindrome('cata')\n  'cata'\n  */\nconst shortestPalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_prefix = 0;\n  var length = 0;\n\n  /* Find the longest postfix of supplied string that is a palindrome. */\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(string.slice(string.length - i - 1))) {\n      beginning_of_prefix = string.length - i - 1;\n      length = string.slice(string.length - i - 1).length;\n      break;\n    }\n  }\n\n  return string.slice(0, beginning_of_prefix) + string.slice(beginning_of_prefix).split('').reverse().join('');\n}\n\n// Tests\n\nconsole.log(isPalindrome('cat'));\nconsole.log(isPalindrome('cata'));\nconsole.log(isPalindrome('cata'));\nconsole.log(longestPalindrome('cata'));\nconsole.log(longestPalindrome('cat'));\nconsole.log(longestPalindrome('cata'));\nconsole.log(shortestPalindrome('cat'));\nconsole.log(shortestPalindrome('cata'));\nconsole.log(shortestPalindrome('cata'));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    \n    }\n  if (n > 1)\n  fact.push(n);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n        }\n      }\n    }\n    if (n > 1) {\n        fact.push(n);\n      }\n    return fact;\n}\n\nconst p = (x,y) => x+y;\n\nconst multiply =(x,y) => x*y;\n\nconst sum =(x,y) => x+y;\n\nconst product =(x,y) => x*y;\n\nconst divide =(x,y) => x/y;\n\nconst minus =(x,y) => x-y;\n\nconst mod =(x,y) => x%y;\n\nconst divide_by =(x,y) => x/y;\n\nconst negate =(x) => -x;\n\nconst abs =(x) => Math.abs(x);\n\nconst square =(x) => x*x;\n\nconst is_square =(x) => x==Math.round(x*x);\n\nconst factorial =(x) => Math.pow(x,x);\n\nconst sum_of_squares =(x) => x*x + x*x;\n\nconst sum_of_squares_n =(x,y) => x*x + x*y;\n\nconst nth_root =(x,y) => Math.pow(x,1/y);\n\nconst pow =(x,y) => Math.pow(x,y);\n\nconst is_integer =(x) => x==Math.round(x);\n\nconst is_palindrome =(x) => x == reverse(x);\n\nconst reverse =(x) => x.split('').reverse().join('');\n\nconst is_palindromic =(x) => is_palindrome(x);\n\nconst is_power_of_two =(x) => x == Math.round(x);\n\nconst is_power_of_three =(x) => x == Math.round(x) && x==Math.pow(x,1/3);\n\nconst is_power_of_four =(x) => x == Math.round(x) && x==Math.pow(x,1/4);\n\nconst is_power_of_five =(x) => x == Math.round(x) && x==Math.pow(x,1/5);\n\nconst is_power_of_six =(x) => x == Math.round(x) && x==Math.pow(x,1/6);\n\nconst is_power_of_seven =(x) => x == Math.round(x) && x==Math.pow(x,1/7);\n\nconst is_power_of_eight =(x) => x == Math.round(x) && x==Math.pow(x,1/8);\n\nconst is_power_of_nine =(x) => x == Math.round(x) && x==Math.pow(x,1/9);\n\nconst is_power_of_ten =(x) => x == Math.round(x) && x==Math.pow(x,1/10);\n\nconst is_power_of_twenty =(x) => x == Math.round(x) && x==Math.pow(x,1/20);\n\nconst is_power_of_thirty =(x) => x == Math.round(x) && x==Math.pow(x,1/30);\n\nconst is_power_of_forty =(x) => x == Math.round(x) && x==Math.pow(x,1/40);\n\nconst is_power_of_fifty =(x) => x == Math.round(x) && x==Math.pow(x,1/50);\n\nconst is_power_of_sixty =(x) => x == Math.round(x) && x==Math.pow(x,1/60);\n\nconst is_power_of_seventy =(x) => x == Math.round(x) && x==Math.pow(x,1/70);\n\nconst is_power_of_eighty =(x) => x == Math.round(x) && x==Math.pow(x,1/80);\n\nconst is_power_of_ninety =(x) => x == Math.round(x) && x==Math.pow(x,1/90);\n\nconst is_power_of_one_hundred =(x) => x == Math.round(x) && x==Math.pow(x,1/100);\n\nconst is_power_of_one_thousand =(x) => x == Math.round(x) && x==Math.pow(x,1/1000);\n\nconst is_power_of_one_thousand_two =(x) => x == Math.round(x) && x==Math.pow(x,1/1002);\n\nconst is_power_of_one_thousand_three =(x) => x == Math.round(x) && x==Math.pow(x,1/10003);\n\nconst is_power_of_one_thousand_four =(x) => x == Math.round(x) && x==Math.pow(x,1/10004);\n\nconst is_power_of_one_thousand_five =(x) => x == Math.round(x) && x==Math.pow(x,1/10005);\n\nconst is_power_of_one_thousand_six =(x) => x == Math.round(x) && x==Math.pow(x,1/10006);\n\nconst is_power_of_one_th"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      N =(N - N % 10) / 10\n      }\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n      N = N/10\n     }\n  }\n  \n  return t.toString(2)\n}\n\nconst test = (N) => {\n  \n  let result = solve(N)\n  \n  console.log(result)\n}\n\ntest(1000)\ntest(1500)\ntest(2000)\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l [ Math.floor(len / 2) ];\n  else\n  return(l [ len / 2 - 1 ] + l [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n  if (l.length % 2 == 1)\n    return l[(len - 1) / 2];\n  else\n    return (l[len / 2] + l[(len / 2) - 1]) / 2;\n}\n\nmodule.exports = median;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ret =(2 * ret) % p;\n  return ret;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n    ret = (ret * p) % n;\n    i++;\n  }\n  return ret;\n}\n\n// console.log(modp(3, 5));\n// console.log(modp(1101, 101));\n// console.log(modp(0, 101));\n// console.log(modp(3, 11));\n// console.log(modp(100, 101));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n", "canonical_solution": "# print('@@this is the line to split##')\n                  else {\n                        o++}\n                  num =(num - num % 10) / 10\n                  }\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n                  else {\n                        o++\n                  }\n              }\n      \n          num = num / 2}\n      return (e, o)\n}\n\nconsole.log(evenOddCount(-12))\nconsole.log(evenOddCount(123))\nconsole.log(evenOddCount(0))\nconsole.log(evenOddCount(12))\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n    begin = center;\n    else\n    end = center;\n    }\n  return begin;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) === 0) {\n      return center;\n    }\n    {\n      if (poly(xs, begin) * poly(xs, center) < 0) {\n        end = center;\n      }\n      else {\n        begin = center;\n      }\n    }\n  }\n  return end;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoot finds the root of the polynomial.\n  returns only one point, even if there are many.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  \n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) === 0) {\n      return center;\n    }\n    {\n      if (poly(xs, begin) * poly(xs, center) < 0) {\n        end = center;\n      }\n      else {\n        begin = center;\n      }\n    }\n  }\n  \n  return end;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoots finds the roots of the polynomial.\n  returns array of only one point, even if there are many.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n    }\n  }\n  return result;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'cb', 'bc', 'abc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(i));\n     \n    }\n  }\n  return result;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'cb', 'bc', 'abc']\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixesAndPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(i, i + 1));\n     \n    }\n  }\n  return result;\n}\n\n/* Return list of all strings that contain the given substring, ignoring case\n  >>> contains('abcd', 'ab')\n  True\n  >>> contains('abcd', 'Ab')\n  False\n  >>> contains('abcd', 'ab', 'i')\n  True\n  >>> contains('abcd', 'ab', 'i', 'l')\n  False\n  >>> contains('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst contains =(string, substring) => {\n  if (string.indexOf(substring) > -1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/* Return true if string ends with given string\n  >>> endsWith('abcd', 'cd')\n  True\n  >>> endsWith('abcd', 'ab')\n  False\n  >>> endsWith('abcd', 'ab', 'i')\n  True\n  >>> endsWith('abcd', 'ab', 'i', 'l')\n  False\n  >>> endsWith('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst endsWith =(string, suffix) => {\n  return string.slice(-suffix.length) === suffix;\n}\n\n/* Return true if string starts with given string\n  >>> startsWith('abcd', 'ab')\n  True\n  >>> startsWith('abcd', 'ab', 'i')\n  False\n  >>> startsWith('abcd', 'ab', 'i', 'l')\n  False\n  >>> startsWith('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst startsWith =(string, prefix) => {\n  return string.slice(0, prefix.length) === prefix;\n}\n\n/* Return true if string contains the given substring\n  >>> contains('abcd', 'ab')\n  True\n  >>> contains('abcd', 'ab', 'i')\n  True\n  >>> contains('abcd', 'ab', 'i', 'l')\n  True\n  >>> contains('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst containsWith =(string, substring) => {\n  if (string.indexOf(substring) > -1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/* Return true if string contains the given substring\n  >>> containsWith('abcd', 'ab')\n  True\n  >>> containsWith('abcd', 'ab', 'i')\n  True\n  >>> containsWith('abcd', 'ab', 'i', 'l')\n  True\n  >>> containsWith('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst containsWithAny =(string, substrings) => {\n  for (var i = 0; i < substrings.length; i++) {\n    if (contains(string, substrings[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Return true if string contains the given substrings\n  >>> containsWithAny('abcd', ['ab', 'bc', 'cd'])\n  True\n  >>> containsWithAny('abcd', ['ab', 'bc', 'cd'])\n  False\n  */\nconst containsWithAnyIn =(string, substrings) => {\n  for (var i = 0; i < substrings.length; i++) {\n    if (containsWith(string, substrings[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Return true if string ends with the given string\n  >>> endsWith('abcd', 'cd')\n  True\n  >>> endsWith('abcd', 'ab')\n  False\n  >>> endsWith('abcd', 'ab', 'i')\n  False\n  >>> endsWith('abcd', 'ab', 'i', 'l')\n  True\n  >>> endsWith('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst endsWithIn =(string, suffixes) => {\n  for (var i = 0; i < suffixes.length; i++) {\n    if (endsWith(string, suffixes[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Return true if string starts with the given string\n  >>> startsWith('abcd', 'ab')\n  True\n  >>> startsWith('abcd', 'ab', 'i')\n  True\n  >>> startsWith('abcd', 'ab', 'i', 'l')\n  False\n  >>> startsWith('abcd', 'ab', 'i', 'l', 'I')\n  True\n  */\nconst startsWithIn =(string, prefixes) => {\n  for (var i = 0; i < prefixes.length; i++) {\n    if (startsWith(string, prefixes["}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n  return p\n}\n\nconst getOddCollatzResult =(n) => {\n  let p = getOddCollatz(n)\n  return p.sort((a, b) => a - b)\n}\n\nconsole.log(getOddCollatzResult(12))\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n}\n\n/*\n  What is the number of collisions if a car has a speed of m units per second?\n  */\nconst carSpeedCollision =(m) => {\n  return n => m * Math.pow(n, 2);\n \n}\n\nconst carsCollision = (cars) => {\n  let collisions = [];\n\n  cars.forEach(car => {\n    let collision = cars.map(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions.push(distance);\n    });\n  });\n  return collisions;\n}\n\nconst carsCollision_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    return cars.map(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n  });\n  return collisions;\n}\n\nconst carsCollision_nested = (cars) => {\n  let collisions = cars.map((car, index) => {\n    cars.forEach(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n    return collisions;\n  });\n  return collisions;\n}\n\nconst carsCollision_nested_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    return cars.map(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n  });\n  return collisions;\n}\n\nconst carsCollision_nested_map_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    return cars.map(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n  });\n  return collisions;\n}\n\nconst carsCollision_nested_map_map_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    return cars.map(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n  });\n  return collisions;\n}\n\n\nconst carsCollision_map_nested = (cars) => {\n  let collisions = cars.map((car, index) => {\n    cars.forEach(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n    return collisions;\n  });\n  return collisions;\n}\n\n\nconst carsCollision_map_nested_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    cars.forEach(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n    return collisions;\n  });\n  return collisions;\n}\n\nconst carsCollision_map_nested_map_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    cars.forEach(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance = Math.pow(car1.x - car.x, 2) + Math.pow(car1.y - car.y, 2);\n      if(distance < Math.pow(car1.speed, 2)) collisions[index].push(distance);\n    });\n    return collisions;\n  });\n  return collisions;\n}\n\nconst carsCollision_map_nested_map_map_map = (cars) => {\n  let collisions = cars.map((car, index) => {\n    cars.forEach(car1 => {\n      if(car1.speed > car.speed) return;\n      let distance ="}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n", "canonical_solution": "# print('@@this is the line to split##')\n                    }\n                }\n            j--;}\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n                }\n                j--;\n             }\n        }\n    }\n    let tmp = t.sort((a, b) => a[0] - b[0]);\n    let tmp2 = t.sort((a, b) => b[0] - a[0]);\n    return tmp.concat(tmp2)\n}\n\n// console.log(getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n// ], 3))\n// console.log(getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n// ], 4))\n// console.log(getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n// ], 5))\n// console.log(getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n// ], 0))\n// console.log(getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n// ], 7))\n// console.log(getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n// ], 8))\n\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 2))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 3))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 4))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 5))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 0))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 7))\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 8))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n      }\n    i++\n    }\n    return p\n}\n\nexport default uniqueDigits\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(n + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n  return Math.round((n + m) / 2)\n}\n\nconst calculateAverage =(a, b) => {\n  let total = a + b\n  return roundedAvg(total, total)\n}\n\nconsole.log(calculateAverage(1, 2))<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(d).sort(function(a, b) {\n    return - d [ a ] + d [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = d [ s [ 0 ] ]\n  let l = {\n    }\n  let ss = 0;\n  while (ss < s.length) {\n     {\n      if (d [ s [ ss ] ] == g) {\n        l [ s [ ss ] ] = d [ s [ ss ] ]\n        }\n      }\n    ss++;}\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d\n}\n\n/*Given a string, return the string reversed. \n  Example:\n  reverse('g') == 'gnhge'\n  reverse('cba') == 'acbj'\n  reverse('') == ''\n  */\nconst reverse = (test) => {\n    let t = test.split('')\n    t.reverse()\n    return t.join('')\n}\n\n/*Given two strings, return the lexicographically largest string possible. \n  Example:\n  largest('a', 'b') == 'ab'\n  largest('aa', 'bb') == 'bb'\n  largest('aa', 'aaa') == 'aaa'\n  largest('abc', 'def') == 'def'\n  largest('aa', 'aaa') == 'aaa'\n  largest('', 'abc') == 'abc'\n  largest('abcd', '') == 'abcd'\n  */\nconst largest = (a, b) => {\n  if (a === b) {\n    return a\n    }\n  else if (a.length < b.length) {\n    return largest(b, a)\n    }\n  else if (a.length > b.length) {\n    return largest(a, b)\n    }\n  else {\n    for (let i = 0; i < a.length; i++) {\n      if (a [ i ] > b [ i ]) {\n        return largest(a, b)\n        }\n      }\n    }\n  }\n\n/*Given two strings, return the lexicographically smallest string possible. \n  Example:\n  smallest('a', 'b') == 'a'\n  smallest('aa', 'bb') == 'aa'\n  smallest('aa', 'aaa') == 'aa'\n  smallest('abc', 'def') == 'abc'\n  smallest('aa', 'aaa') == 'aa'\n  smallest('', 'abc') == 'abc'\n  smallest('abcd', '') == 'abcd'\n  */\nconst smallest = (a, b) => {\n  if (a === b) {\n    return a\n    }\n  else if (a.length < b.length) {\n    return smallest(b, a)\n    }\n  else if (a.length > b.length) {\n    return smallest(a, b)\n    }\n  else {\n    for (let i = 0; i < a.length; i++) {\n      if (a [ i ] < b [ i ]) {\n        return smallest(a, b)\n        }\n      }\n    }\n  }\n\n/*Given two strings, return their lexicographical difference. \n  Example:\n  difference('aa', 'aaa') == 'aaa'\n  difference('ab', 'ac') == 'ac'\n  difference('aa', 'bbb') == 'bbb'\n  difference('', 'ab') == 'ab'\n  difference('aa', 'bb') == 'bb'\n  difference('aaa', 'bbb') == 'bbb'\n  */\nconst difference = (a, b) => {\n  let t = ''\n  let i = 0\n  while (i < a.length && i < b.length) {\n    if (a [ i ]!== b [ i ]) {\n      t += a [ i ]\n      }\n    i++\n    }\n  if (a.length > b.length) {\n    t += b [ i ]\n    }\n  if (a.length < b.length) {\n    t += a [ i ]\n    }\n  return t\n}\n\n/*Given a string, return the string without any consecutive repetitions. \n  Example:\n  repeats('aa', 'aaa') == 'aa'\n  repeats('aa', 'aaa') == 'aaa'\n  repeats('aa', 'bbb') == 'aa'\n  repeats('', 'ab') == 'ab'\n  repeats('aa', 'bb') == 'bb'\n  repeats('aaa', 'bbb') == 'aaa'\n  */\nconst repeats = (test, char) => {\n  let t = ''\n  let i = 0\n  while (i < test.length) {\n    if (test [ i ] === char) {\n      t += test [ i ]\n      }\n    i++\n    }\n  return t\n}\n\n/*Given a string, return the string without any consecutive repetitions. \n  Example:\n  repeats('aa', 'aaa') == 'aa'\n  repeats('aa', 'aaa') == 'aaa'\n  repeats('aa', 'bbb') == 'aa'\n  repeats('', 'ab') == 'ab'\n  repeats('aa', 'bb') == 'bb'\n  repeats('aaa', 'bbb') == 'aaa'\n  */\nconst repeats_reverse = (test, char) => {\n  let t = ''\n  let i = test.length - 1\n  while (i >= 0) {\n    if (test [ i ] === char) {\n      t += test [ i ]\n      }\n    i--\n    }\n  return t\n}\n\n// Test cases\nconst test_cases = [\n  ['a', 'a'],\n  ['a', 'b'],\n  ['aa', 'aa'],\n  ['ab', 'ac'],\n  ['aaa', 'bbb'],\n  ['', 'ab'],\n  ['ab', 'bc'],\n  "}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n      t += String.fromCharCode(p)\n     }\n     {\n      let p = s [ i ].charCodeAt() - 2\n      if (p < 0) {\n        p+=26}\n     \n      t += String.fromCharCode(p)\n     }\n     i++\n  }\n  return t\n}\n\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\nconsole.log(encrypt('et'));<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((y >= 65 && y <= 90) ||(y >= 97 && y <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let x = txt [ len - 2 ].charCodeAt()\n  if (y >= 97 && y <= 122) {\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n      return false}\n    return true}\n  return false}\n\n/* Create a function that returns true if the first character\n  of a given string is a letter and is not part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ 0 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let x = txt [ 1 ].charCodeAt()\n  if (y >= 97 && y <= 122) {\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n      return false}\n    return true}\n  return false}\n\n/* Create a function that returns true if the string starts\n  with a letter and is not part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfStartsWithALetter(\"apple pie\") ➞ false\n  checkIfStartsWithALetter(\"apple pi e\") ➞ true\n  checkIfStartsWithALetter(\"apple pi e \") ➞ false\n  checkIfStartsWithALetter(\"apple pie \") ➞ true\n  checkIfStartsWithALetter(\"apple pi\") ➞ true\n  */\nconst checkIfStartsWithALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ 0 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let x = txt [ 1 ].charCodeAt()\n  if (y >= 97 && y <= 122) {\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n      return false}\n    return true}\n  return false}\n\n/* Create a function that returns true if the string ends\n  with a letter and is not part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfEndsWithALetter(\"apple pie\") ➞ false\n  checkIfEndsWithALetter(\"apple pi e\") ➞ true\n  checkIfEndsWithALetter(\"apple pie \") ➞ false\n  checkIfEndsWithALetter(\"apple pi\") ➞ true\n  */\nconst checkIfEndsWithALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let x = txt [ len - 2 ].charCodeAt()\n  if (y >= 97 && y <= 122) {\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n      return false}\n    return true}\n  return false}\n\n/* Create a function that returns true if the string is a valid\n  password, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfValidPassword(\"apple pie\") ➞ false\n  checkIfValidPassword(\"apple pi e\") ➞ true\n  checkIfValidPassword(\"apple pie \") ➞ false\n  checkIfValidPassword(\"apple pi\") ➞ true\n  checkIfValidPassword(\"apple\") ➞ true\n  */\nconst checkIfValidPassword =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ 0 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n      return false}\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n      return false}\n    return true}\n  let x = txt [ 1 ].charCodeAt()\n  if (y >= 97 && y <= 122) {\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n      return false}\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n      return false}\n    return true}\n  if (y >= 65 && y <= 90) {\n    if ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) {\n"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n       !(word [ i ] != 'a' && word [ i ] != 'e' && word [ i ] != 'i' && word [ i ] != 'o' && word [ i ] != 'u' && word [ i ] != 'A' &&\n      word [ i ] != 'U' && word [ i ] != 'O' && word [ i ] != 'I' && word [ i ] != 'E')\n       &&\n      (word [ i + 1 ] != 'a' && word [ i + 1 ] != 'e' && word [ i + 1 ] != 'i' && word [ i + 1 ] != 'o' && word [ i + 1 ] != 'u' && word [ i + 1 ] != 'A' &&\n      word [ i + 1 ] != 'U' && word [ i + 1 ] != 'O' && word [ i + 1 ] != 'I' && word [ i + 1 ] != 'E')\n       &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      (word [ i - 1 ] != 'a' && word [ i - 1 ] != 'e' && word [ i - 1 ] != 'i' && word [ i - 1 ] != 'o' && word [ i - 1 ] != 'u' && word [ i - 1 ] != 'A' &&\n      word [ i - 1 ] != 'U' && word [ i - 1 ] != 'O' && word [ i - 1 ] != 'I' && word [ i - 1 ] != 'E')\n      ) {\n        i--; return word [ i ]\n        }\n      }\n    i--;}\n  return ' '}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n      !(word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n      word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n       &&\n      (word [ i + 1 ]!= 'a' && word [ i + 1 ]!= 'e' && word [ i + 1 ]!= 'i' && word [ i + 1 ]!= 'o' && word [ i + 1 ]!= 'u' && word [ i + 1 ]!= 'A' &&\n      word [ i + 1 ]!= 'U' && word [ i + 1 ]!= 'O' && word [ i + 1 ]!= 'I' && word [ i + 1 ]!= 'E')\n       &&\n     \n      (word [ i - 1 ]!= 'a' && word [ i - 1 ]!= 'e' && word [ i - 1 ]!= 'i' && word [ i - 1 ]!= 'o' && word [ i - 1 ]!= 'u' && word [ i - 1 ]!= 'A' &&\n      word [ i - 1 ]!= 'U' && word [ i - 1 ]!= 'O' && word [ i - 1 ]!= 'I' && word [ i - 1 ]!= 'E')\n      )\n      return word [ i ];\n    }\n    i--;\n  }\n  return '';\n}\n\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"abc\"));\nconsole.log(getClosestVowel(\"abcd\"));\nconsole.log(getClosestVowel(\"abcd\"));\nconsole.log(getClosestVowel(\"abcd\"));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countLower =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countDigits =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= '0' && s [ i ] <= '9') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countLetters =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= 'A' && s [ i ] <= 'Z') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countSpecials =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= '0' && s [ i ] <= '9' || s [ i ] >= 'A' && s [ i ] <= 'Z' || s [ i ] >= 'a' && s [ i ] <= 'z' || s [ i ] =='' || s [ i ] == '\\t' || s [ i ] == '\\n' || s [ i ] == '\\r') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countNonVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countSpecialsAndNonVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= '0' && s [ i ] <= '9' || s [ i ] >= 'A' && s [ i ] <= 'Z' || s [ i ] >= 'a' && s [ i ] <= 'z' || s [ i ] =='' || s [ i ] == '\\t' || s [ i ] == '\\n' || s [ i ] == '\\r' || s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countLettersAndDigits =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= 'A' && s [ i ] <= 'Z' || s [ i ] >= 'a' && s [ i ] <= 'z' || s [ i ] >= '0' && s [ i ] <= '9') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countLettersAndDigitsAndLetters =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= 'A' && s [ i ] <= 'Z' || s [ i ] >= 'a' && s [ i ] <= 'z' || s [ i ] >= '0' && s [ i ] <= '9' || s [ i ] >= 'A' && s [ i ] <= 'Z' || s [ i ] >= 'a' && s [ i ] <= 'z') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\nconst countLettersAndDigitsAndLettersAndSpecials =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] >= 'A' && s [ i ] <= 'Z'"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (s < min) {\n          min = s}\n        }\n      }\n    i++;}\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n        }\n        if (s < min) {\n          min = s\n        }\n      }\n    }\n    i+=1;\n  }\n  return min;\n}\n\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n}\n\n//check for right angle triangle\nconst checkForRightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c && c === a) return true\n  return false\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) &&!checkForRightAngleTriangle(a, b, c)\n}\n\nconst checkForRightAngleTriangle2 = (a, b, c) => {\n  if (a === b && b === c && c === a) return true\n  return false\n}\n\n//check for right angle triangle\nconst isRightAngleTriangle2 = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) &&!checkForRightAngleTriangle2(a, b, c)\n}\n\n//check for right angle triangle\nconst isRightAngleTriangle3 = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && checkForRightAngleTriangle(a, b, c)\n}\n\n//check for right angle triangle\nconst isRightAngleTriangle4 = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && checkForRightAngleTriangle2(a, b, c)\n}\n\n//check for right angle triangle\nconst isRightAngleTriangle5 = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && checkForRightAngleTriangle3(a, b, c)\n}\n\n//check for right angle triangle\nconst isRightAngleTriangle6 = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && checkForRightAngleTriangle4(a, b, c)\n}\n\n//check for right angle triangle\nconst isRightAngleTriangle7 = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && checkForRightAngleTriangle5(a, b, c)\n}\n\nconst triangle = {\n  isRightAngleTriangle,\n  isRightAngleTriangle2,\n  isRightAngleTriangle3,\n  isRightAngleTriangle4,\n  isRightAngleTriangle5,\n  isRightAngleTriangle6,\n  isRightAngleTriangle7\n}\n\nexport default triangle<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n};\n\n/*\n  Calculate the sum of numbers 1 to n\n  >>> sum(1, 5)\n  15\n  >>> sum(3, 4)\n  9\n  >>> sum(1, n)\n  n + 1\n  */\nconst sum =(x, y) => {\n  return x + y;\n};\n\n/*\n  Calculate the difference between two numbers\n  >>> subtract(3, 4)\n  1\n  >>> subtract(4, 3)\n  1\n  >>> subtract(2, 2)\n  0\n  >>> subtract(1, 1)\n  0\n  */\nconst subtract =(x, y) => {\n  return x - y;\n};\n\n/*\n  Multiply two numbers\n  >>> multiply(2, 2)\n  4\n  >>> multiply(5, 5)\n  25\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply =(x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers\n  >>> divide(15, 5)\n  3\n  >>> divide(12, 3)\n  4\n  >>> divide(3, 3)\n  1\n  >>> divide(2, 2)\n  1\n  */\nconst divide =(x, y) => {\n  return x / y;\n};\n\n/*\n  Equal two numbers\n  >>> equal(2, 2)\n  true\n  >>> equal(3, 2)\n  false\n  >>> equal(2, 3)\n  false\n  */\nconst equal =(x, y) => {\n  return x == y;\n};\n\n/*\n  Greater than two numbers\n  >>> greater(2, 2)\n  false\n  >>> greater(2, 3)\n  true\n  >>> greater(3, 2)\n  true\n  */\nconst greater =(x, y) => {\n  return x > y;\n};\n\n/*\n  Less than two numbers\n  >>> less(2, 2)\n  false\n  >>> less(2, 3)\n  false\n  >>> less(3, 2)\n  true\n  */\nconst less =(x, y) => {\n  return x < y;\n};\n\n/*\n  Greater than equal two numbers\n  >>> greaterEqual(2, 2)\n  true\n  >>> greaterEqual(2, 3)\n  true\n  >>> greaterEqual(3, 2)\n  true\n  */\nconst greaterEqual =(x, y) => {\n  return x >= y;\n};\n\n/*\n  Less than equal two numbers\n  >>> lessEqual(2, 2)\n  true\n  >>> lessEqual(2, 3)\n  true\n  >>> lessEqual(3, 2)\n  true\n  */\nconst lessEqual =(x, y) => {\n  return x <= y;\n};\n\n/*\n  Logical AND\n  >>> and(true, false)\n  false\n  >>> and(false, false)\n  false\n  >>> and(false, true)\n  false\n  >>> and(true, true)\n  true\n  */\nconst and =(x, y) => {\n  return x && y;\n};\n\n/*\n  Logical OR\n  >>> or(true, false)\n  true\n  >>> or(false, false)\n  false\n  >>> or(false, true)\n  true\n  >>> or(true, true)\n  true\n  */\nconst or =(x, y) => {\n  return x || y;\n};\n\n/*\n  Logical NOT\n  >>> not(true)\n  false\n  >>> not(false)\n  true\n  */\nconst not =(x) => {\n  return!x;\n};\n\n/*\n  If statement\n  >>> if(3 > 1) {\n  3\n  }\n  >>> if(3 > 2) {\n  3\n  }\n  >>> if(3 > 3) {\n  3\n  }\n  >>> if(3 > 4) {\n  4\n  }\n  >>> if(3 > 5) {\n  5\n  }\n  >>> if(3 > 6) {\n  6\n  }\n  >>> if(3 > 7) {\n  7\n  }\n  >>> if(3 > 8) {\n  8\n  }\n  >>> if(3 > 9) {\n  9\n  }\n  >>> if(3 > 10) {\n  10\n  }\n  >>> if(3 > 11) {\n  11\n  }\n  >>> if(3 > 12) {\n  12\n  }\n  >>> if(3 > 13) {\n  13\n  }\n  >>> if(3 > 14) {\n  14\n  }\n  >>> if(3 > 15) {\n  15\n  }\n  >>> if(3 > 16) {\n  16\n  }\n  >>> if(3 > 17) {\n  17\n  }\n  >>> if(3 > 18) {\n  18\n  }\n  >>> if(3 > 19) {\n  19\n  }\n  >>> if(3 > 20) {\n  20\n  }\n  >>> if(3 > 21) {\n  21\n  }\n  >>> if(3 > 22) {\n  22\n  }\n  >>> if(3 > 23) {\n  23\n  }\n  >>> if(3 > 24) {\n  24\n  }\n  >>> if(3 > 25) {\n  25\n  }\n  >>> if(3 > 26) {\n  26\n  }\n  >>> if(3 > 27) {\n  27\n  }\n  >>> if(3 > 28) {\n  28\n  }\n  >>> if(3 > 29) {\n  29\n  }\n  >>> if(3 > 30) {\n  30\n  }\n  >>> if(3 > 31) {\n  31\n  }\n  >>> if(3 > 32) {\n  32\n  }\n  >>> if(3 > 33) {\n  33\n  }\n  >>> if(3 > 34) {\n  34\n  }\n  >>> if(3 > 35) {\n  35\n  }\n  >>> if(3 > 36) {\n  36\n  }\n  >>> if(3 > 37) {"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(x =>(x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(x =>(x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n \n .join('')\n}\n\n/*\n  Convert a string to lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase =(string) =>{\n  return string.toLowerCase()\n}\n\n/*\n  Convert a string to uppercase.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toUpperCase =(string) =>{\n  return string.toUpperCase()\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print2 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println2 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print3 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println3 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print4 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println4 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print5 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println5 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print6 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println6 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print7 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println7 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print8 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println8 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print9 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println9 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print10 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println10 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print11 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println11 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print12 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println12 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print13 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println13 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print14 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n  Hello\n  */\nconst println14 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> print('Hello')\n  Hello\n  */\nconst print15 =(string) =>{\n  console.log(string)\n}\n\n/*\n  Print a string to the console.\n  >>> println('Hello')\n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - i - 1 ])\n    }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index [ k ] < closing_bracket_index [ i ]) {\n      cnt+=1;\n      i+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n    let index = closing_bracket_index1 [ i ]\n    let closing_bracket = string [ index ]\n    let open_bracket = string [ index - 1 ]\n    \n    if (closing_bracket == ']' && open_bracket == '[') {\n      closing_bracket_index.push(index)\n      }\n    }\n  if (opening_bracket_index.length == closing_bracket_index.length) {\n    for (let i = 0; i < opening_bracket_index.length; i++) {\n      if (closing_bracket_index [ i ]!= opening_bracket_index [ i ]) {\n        return false\n        }\n      }\n    return true\n    }\n  else {\n    return false\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = '' let i = 0;\n  while (i < p.length) {\n     {\n      u+=p [ p.length - i - 1 ]\n      }\n    i++;}\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n    }\n    else {\n    t = 0;\n    }\n    if (t) {\n      p = p + s[i].toUpperCase();\n    }\n    else {\n      p = p + s[i].toLowerCase();\n    }\n    }\n    return p;\n  }\n\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ] != k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      if (p == 1) {\n        if (k % 2 == 0) {\n          e++}\n        else {\n          o++}\n        }\n      }\n    i++;}\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ]!= k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n        }\n      }\n      if (p) {\n        if (k.length % 2 == 0) {\n          e++;\n        } else {\n          o++;\n        }\n        i++;\n      }\n     }\n  }\n  return [e, o]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i--;}\n  return i;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n    return i;\n    i--;\n  }\n}\n\nconsole.log(largestDivisor(15));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(j)) continue;\n      let k = 2;\n      while (k < 101) {\n         {\n          if ( !isPrime(k)) k++; continue;\n          if (i * j * k == a)\n          k++; return true;\n          }\n        k++;}\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n      if (i * j < a && isPrime(a)) return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s.at( - 1) == 'y' || s.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  var end = s.split('').reduce((prev, item) => {\n    return prev +(item === 'y' && s.endsWith(item));\n    }\n , 0);\n  \n  return n_vowels + end;\n}\n\nconsole.log(vowelsCount(\"acde\"));\nconsole.log(vowelsCount(\"aCde\"));\nconsole.log(vowelsCount(\"abcc\"));\nconsole.log(vowelsCount(\"aBcC\"));\nconsole.log(vowelsCount(\"aBcCd\"));\nconsole.log(vowelsCount(\"aBcCdE\"));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  let i = lo + 1;\n  while (i < hi) {\n     {\n      u.push(y [ i ])\n      }\n    i++;}\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo > hi) {\n    return ()\n  }\n  for (let i = lo; i <= hi; i++) {\n    u.push (y[i])\n  }\n  return (u)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n  let product = 0\n  let sum = 0\n  \n  for (let i = 0; i < b; i++) {\n    sum = sum + (Math.pow(a, b))\n  }\n  \n  for (let i = 1; i <= a; i++) {\n    if (sum % a === 0) {\n      product += i\n    }\n  }\n  return product\n}\n\n// console.log(multiply(148, 412))\n// console.log(multiply(19, 28))\n// console.log(multiply(2020, 1851))\n// console.log(multiply(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n  let p = Math.pow(10, Math.floor(Math.log10(a)));\n  let q = a / p;\n  \n  if (Math.floor(q) === q) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(iscube(2))\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => value_map [ a ] - value_map [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  const sorted_array = Object.keys(value_map).map(\n    (key) => {\n      return value_map[key]\n    });\n  return sorted_array.sort()\n};\n\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine one three')\n  'one three nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  const sorted_array = Object.keys(value_map).map(\n    (key) => {\n      return value_map[key]\n    });\n  return sorted_array.sort().reverse();\n};\n\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  const sorted_array = Object.keys(value_map).map(\n    (key) => {\n      return value_map[key]\n    });\n  return sorted_array.sort().reverse().join('');\n};\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse2('one two three')\n  'one two three'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  const sorted_array = Object.keys(value_map).map(\n    (key) => {\n      return value_map[key]\n    });\n  return sorted_array.sort().reverse().join('');\n};\n\n// test\nconst numbers = [\n  'one',\n  'two',\n  'three'\n];\n\nconsole.log(sortNumbers(numbers));\nconsole.log(sortNumbersReverse(numbers));\nconsole.log(sortNumbersReverse2(numbers));\nconsole.log(sortNumbersReverse3(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 2 == 0 ? even [ index / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  return even;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd =(l) => {\n  var odd = l.filter((item, index) => index % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  return odd;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortAll =(l) =>{\n  var even = sortEven(l);\n  var odd = sortOdd(l);\n  return even.concat(odd);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortAllBy =(l, by) =>{\n  var sorted = sortAll(l);\n  return sorted.sort(by);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortAllBy2 =(l, by) =>{\n  var sorted = sortAllBy(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortAllBy3 =(l, by) =>{\n  var sorted = sortAllBy2(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortAllBy4 =(l, by) =>{\n  var sorted = sortAllBy3(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy5 =(l, by) =>{\n  var sorted = sortAllBy4(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy6 =(l, by) =>{\n  var sorted = sortAllBy5(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy7 =(l, by) =>{\n  var sorted = sortAllBy6(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy8 =(l, by) =>{\n  var sorted = sortAllBy7(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy9 =(l, by) =>{\n  var sorted = sortAllBy8(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy10 =(l, by) =>{\n  var sorted = sortAllBy9(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy11 =(l, by) =>{\n  var sorted = sortAllBy10(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy12 =(l, by) =>{\n  var sorted = sortAllBy11(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy13 =(l, by) =>{\n  var sorted = sortAllBy12(l, by);\n  return sorted.sort((a, b) =>(b - a));\n};\n\nconst sortAllBy14 =(l, by) =>{\n  var sorted = sortAll"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n     i += 2\n     }\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      }\n    i++;}\n  return letter_grade\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else\n        {\n        letter_grade.push('E')\n        }\n    }\n  return letter_grade\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; power < x;) {\n    power = power * n;\n    }\n  return(power == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n  while (x % n == 0) {\n    x = x / n;\n    power++;\n  }\n  return(power === n);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n};\n\n/*Return all the elements of the list that are in the given set.\n  >>> getSubset([1, 2, 3, 4], {2, 3, 5, 6})\n  [2, 3, 5, 6]\n  >>> getSubset([1, 2, 3, 4], {1, 2, 3, 4})\n  []\n  >>> getSubset([1, 2, 3, 4], {1, 2})\n  [1, 2]\n  */\nconst getSubset =(l, set) => {\n  return l.filter(e => set.has(e));\n};\n\n/*Return all the elements of the list that are not in the given set.\n  >>> getSuperset([1, 2, 3, 4], {2, 3, 5, 6})\n  [1, 4]\n  >>> getSuperset([1, 2, 3, 4], {1, 2, 3, 4})\n  [1, 2, 3, 4]\n  >>> getSuperset([1, 2, 3, 4], {1, 2, 3})\n  [1, 2, 3]\n  */\nconst getSuperset =(l, set) => {\n  return l.filter(e =>!set.has(e));\n};\n\n/*Return the union of all the sets in the list.\n  >>> getUnion([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}])\n  {2, 3, 4, 5, 6}\n  >>> getUnion([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2})\n  {1, 2, 3, 4, 5, 6}\n  >>> getUnion([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2, 3, 4, 5})\n  {1, 2, 3, 4, 5, 6}\n  >>> getUnion([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2, 3, 4, 5, 6})\n  {1, 2, 3, 4, 5, 6}\n  */\nconst getUnion =(l, set) => {\n  return set.union(...l);\n};\n\n/*Return the intersection of all the sets in the list.\n  >>> getIntersection([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}])\n  {3, 4, 5}\n  >>> getIntersection([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2})\n  {1, 2}\n  >>> getIntersection([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2, 3, 4, 5})\n  {3, 4, 5}\n  >>> getIntersection([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2, 3, 4, 5, 6})\n  {3, 4, 5}\n  */\nconst getIntersection =(l, set) => {\n  return set.intersection(...l);\n};\n\n/*Return the difference of all the sets in the list.\n  >>> getDifference([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}])\n  {2, 3, 5, 6}\n  >>> getDifference([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2})\n  {1, 2, 3, 4, 5, 6}\n  >>> getDifference([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2, 3, 4, 5})\n  {2, 3, 5, 6}\n  >>> getDifference([{2, 3, 5, 6}, {3, 4, 5}, {4, 5, 6}], {1, 2, 3, 4, 5, 6})\n  {2, 3, 5, 6}\n  */\nconst getDifference =(l, set) => {\n  return set.difference(...l);\n};\n\nmodule.exports = {\n  getPositive,\n  getSubset,\n  getSuperset,\n  getUnion,\n  getIntersection,\n  getDifference\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        y+=lst [ i ]}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n    }\n    i++\n  }\n  return y\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ] * lst [ i ]}\n     \n    }\n    i++\n  }\n  return y\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSqCubes =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ] * lst [ i ]}\n     \n    }\n    i++\n  }\n  return y\n}\n\nconst sum = (lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      y+=lst [ i ]}\n    i++\n  }\n  return y\n}\n\nmodule.exports = {\nsumSquares,\nsumCubes,\nsumSqCubes,\nsum\n}<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        p.push(p [ i - 2 ] + p [ i - 1 ] + 1 +(i + 1) / 2)\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n      } else {\n        p.push(p[p.length - 1] + p[p.length - 2] + p[p.length - 1])\n      }\n      i++;\n    }\n  }\n  return p\n}\n\nconsole.log(tri(3));<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      results.at( - 3) + results.at( - 4));\n      results.shift();\n      }\n    i++;}\n  return results.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n     results.at( - 3) + results.at( - 4));\n      i++;\n     }\n   }\n  return results.at(n - 1);\n}\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n      }\n      i--;\n  }\n}\n\nconsole.log(chooseNum(5, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n      }\n    }\n    i+=1\n  }\n  return p\n}\n\n// doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// doubleTheDifference([-1, -2, 0]) == 0\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0]) == 0\n// doubleTheDifference([1, -1, 1, 1, 1, 1]) == 0\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([2, 3, 4])\n  [1, 2, 3]\n  >>> decrList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decrList =(l) => {\n  return l.map(e => e - 1);\n \n};\n\n/*Return list with elements reversed.\n  >>> revList([2, 3, 4])\n  [4, 3, 2]\n  >>> revList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [10, 4, 6, 3, 4, 4, 1, 0, 123]\n  */\nconst revList =(l) => {\n  return l.slice().reverse();\n \n};\n\n/*Return list with elements reversed.\n  >>> incrList([2, 3, 4])\n  [4, 3, 2]\n  >>> incrList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [10, 4, 6, 3, 4, 4, 1, 0, 123]\n  */\nconst decrList =(l) => {\n  return l.slice().reverse();\n \n};\n\n/*Return list with elements reversed.\n  >>> revList([2, 3, 4])\n  [4, 3, 2]\n  >>> revList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [10, 4, 6, 3, 4, 4, 1, 0, 123]\n  */\nconst revList =(l) => {\n  return l.slice().reverse();\n \n};\n\n/* Return list with elements rotated by 90 degrees.\n   >>> rotateList([1, 2, 3])\n   [2, 3, 1]\n   >>> rotateList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n   [10, 4, 6, 3, 4, 4, 1, 0, 123]\n   >>> rotateList([10, 4, 6, 3, 4, 4, 1, 0, 123])\n   [4, 6, 10, 3, 4, 4, 1, 0, 123]\n   */\nconst rotateList =(l) => {\n    return l.slice().reverse().concat(l.slice());\n};\n\n/*Return list with elements rotated by 180 degrees.\n   >>> rotateList([1, 2, 3])\n   [3, 2, 1]\n   >>> rotateList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n   [4, 6, 10, 3, 4, 4, 1, 0, 123]\n   >>> rotateList([10, 4, 6, 3, 4, 4, 1, 0, 123])\n   [6, 10, 4, 3, 4, 4, 1, 0, 123]\n   */\nconst rotateList =(l) => {\n    return l.slice().reverse().concat(l.slice().reverse());\n};\n\n/* Return list with elements rotated by 270 degrees.\n   >>> rotateList([1, 2, 3])\n   [1, 2, 3]\n   >>> rotateList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n   [10, 4, 6, 3, 4, 4, 1, 0, 123]\n   >>> rotateList([10, 4, 6, 3, 4, 4, 1, 0, 123])\n   [4, 6, 10, 3, 4, 4, 1, 0, 123]\n   */\nconst rotateList =(l) => {\n    return l.slice().reverse().concat(l.slice());\n};\n\n/* Return list with elements rotated by 360 degrees.\n   >>> rotateList([1, 2, 3])\n   [1, 2, 3]\n   >>> rotateList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n   [10, 4, 6, 3, 4, 4, 1, 0, 123]\n   >>> rotateList([10, 4, 6, 3, 4, 4, 1, 0, 123])\n   [4, 6, 10, 3, 4, 4, 1, 0, 123]\n   */\nconst rotateList =(l) => {\n    return l.slice().reverse().concat(l.slice().reverse());\n};\n\n/* Return list with elements rotated by 90 degrees.\n   >>> rotateList([1, 2, 3])\n   [2, 3, 1]\n   >>> rotateList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n   [10, 4, 6, 3, 4, 4, 1, 0, 123]\n   >>> rotateList([10, 4, 6, 3, 4, 4, 1, 0, 123])\n   [4, 6, 10, 3, 4, 4, 1, 0, 123]\n   */\nconst rotateList =(l) => {\n    return l.slice().reverse().concat(l.slice());\n};\n\nmodule.exports = {\n    rotateList,\n    incrList,\n    decrList,\n    revList,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n   let j = i + 1;\n   let k = i + 2;\n   \n   while (j < s.length && k < s.length) {\n    if (s[i] === s[j] && s[i] === s[k])\n      return false;\n    j++;\n    k++;\n   }\n   i++;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n}\n \nconst getFileData = (data) => {\n  const split = data.split('\\n')\n  return split.map(x => x.trim()).filter(x => x.length > 0)\n}\n \nconst filterFiles = (files) => {\n  return files.filter(x => x.indexOf('.py')!== -1)\n}\n \nconst filterFile = (file) => {\n  return file.indexOf('.py')!== -1\n}\n \nconst getLines = (file) => {\n  const split = file.split('\\n')\n  return split.map(x => x.trim()).filter(x => x.length > 0)\n}\n \nconst getFileInfo = (file) => {\n  const lines = getLines(file)\n  const fileData = getFileData(lines)\n  const fileName = getFileName(file)\n  const moduleName = getModuleName(fileName)\n  return {fileName, moduleName, fileData}\n}\n \nconst getFileName = (file) => {\n  const index = file.lastIndexOf('.py')\n  return file.substring(0, index)\n}\n \nconst getModuleName = (fileName) => {\n  const split = fileName.split('/')\n  return split[split.length - 1]\n}\n \nconst getFilteredLines = (file) => {\n  const lines = getLines(file)\n  const filteredLines = filterIntegers(lines)\n  return filteredLines\n}\n \nconst getFilteredFileInfo = (file) => {\n  const lines = getFilteredLines(file)\n  const fileData = getFileData(lines)\n  const fileName = getFileName(file)\n  const moduleName = getModuleName(fileName)\n  return {fileName, moduleName, fileData}\n}\n \nconst getFilteredFileInfoArray = (files) => {\n  return files.map(x => getFilteredFileInfo(x))\n}\n \nconst getFileInfoArray = (files) => {\n  return files.map(x => getFileInfo(x))\n}\n \nconst main = (data) => {\n  const files = filterFiles(data)\n  const filteredFiles = getFilteredFileInfoArray(files)\n  console.log(filteredFiles)\n}\n \nmain(process.argv[2])\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return p.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n    p.splice(ind, 1)\n  }\n  return p\n};\n\nconsole.log(maximum([-3, -4, 5], 3))\nconsole.log(maximum([4, -4, 4], 2))\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n}\n \n/*\n  Given a polynomial, return the coefficients in the form of a list.\n  >>> coeff([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coeff([1, 2, 3])\n  [1, 2, 3]\n  */\nconst coeff =(p) => {\n  return p.split(/\\s*\\+\\s*/).map((x) => parseInt(x));\n}\n \n/*\n  Given a list of polynomial coefficients, return a polynomial\n  represented by a string.\n  >>> coeff([3, 1, 2, 4, 5])\n  '3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4'\n  >>> coeff([1, 2, 3])\n  '1 + 2*x + 3*x^2'\n  */\nconst poly =(xs) => {\n  return xs.join(' + ') +'+'+ xs.map((x) => x + '*x').join(' + ');\n}\n \n/*\n  Given a string of a polynomial, return the list of coefficients\n  represented by a list.\n  >>> poly('3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4')\n  [3, 1, 2, 4, 5]\n  >>> poly('1 + 2*x + 3*x^2')\n  [1, 2, 3]\n  */\nconst parsePoly =(p) => {\n  let xs = p.split(' + ');\n  return [...xs,...derivative(xs)];\n}\n \n/*\n  Given a list of polynomial coefficients, return a string\n  representing the polynomial.\n  >>> poly([3, 1, 2, 4, 5])\n  '3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4'\n  >>> poly([1, 2, 3])\n  '1 + 2*x + 3*x^2'\n  */\nconst polyStr =(xs) => {\n  return poly(xs.join(' + '));\n}\n \n/*\n  Given a list of polynomial coefficients, return a string\n  representing the derivative of the polynomial.\n  >>> polyStr([3, 1, 2, 4, 5])\n  '1 + 4*x + 12*x^2 + 20*x^3'\n  >>> polyStr([1, 2, 3])\n  '2 + 6*x'\n  */\nconst polyDeriv =(xs) => {\n  return poly(derivative(xs).join(' + '));\n}\n \n/*\n  Given a string representing a polynomial, return the list\n  of coefficients represented by a list.\n  >>> polyStr('3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4')\n  [3, 1, 2, 4, 5]\n  >>> polyStr('1 + 2*x + 3*x^2')\n  [1, 2, 3]\n  */\nconst parsePolyStr =(p) => {\n  return parsePoly(p);\n}\n \n/*\n  Given a string representing a polynomial, return the derivative\n  of the polynomial represented by a list.\n  >>> polyDeriv('3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4')\n  [1, 4, 12, 20]\n  >>> polyDeriv('1 + 2*x + 3*x^2')\n  [2, 6]\n  */\nconst parsePolyDeriv =(p) => {\n  return polyDeriv(p);\n}\n \n/*\n  Given a list of coefficients represented by a list, return a string\n  representing the polynomial.\n  >>> poly([3, 1, 2, 4, 5])\n  '3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4'\n  >>> poly([1, 2, 3])\n  '1 + 2*x + 3*x^2'\n  */\nconst polyStr2 =(xs) => {\n  return polyStr(poly(xs));\n}\n \n/*\n  Given a list of coefficients represented by a list, return a string\n  representing the derivative of the polynomial.\n  >>> polyDeriv([3, 1, 2, 4, 5])\n  '1 + 4*x + 12*x^2 + 20*x^3'\n  >>> polyDeriv([1, 2, 3])\n  '2 + 6*x'\n  */\nconst polyDerivStr =(xs) => {\n  return polyDerivStr(polyDeriv(xs));\n}\n \n/*\n  Given a list of polynomial coefficients, return the string\n  representing the polynomial.\n  >>> polyStr2([3, 1, 2, 4, 5])\n  '3 + 1*x + 2*x^2 + 4*x^3 + 5*x^4'\n  >>> polyStr2([1, 2, 3])\n  '1 + 2*x + 3*x^2'\n  */\nconst polyStr3 =(xs) => {\n  return polyStr2(poly(xs));\n}\n \n/*\n  Given a list of polynomial coefficients, return the string\n  representing the derivative of the polynomial.\n  >>> polyDerivStr([3, 1, 2, 4, 5])\n  '1 + 4*x + 12*x^2 + 20*x^3'\n  >>> polyDerivStr([1, 2, 3])\n  '2 + 6*x'\n  */\nconst polyDerivStr2 =(xs) => {\n  return polyDerivStr(polyDeriv(xs));\n}\n \n/*\n  Given a list of polynomial coefficients, return a string\n  representing the po"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(text)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  var hash = md5(text)\n  return hash\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e6b6d6c6c67e3a4b3c0f1a7d6f8f6c2a7a1c0b8b4a2b0c5b9b6a8f9b0a1b'\n  */\nconst stringToSha256 =(text) => {\n  if (text == '') {\n    return null}\n  var sha256 = require('js-sha256')\n  var hash = sha256(text)\n  return hash\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'c60b8d7d6b2d4b9c6dde4d2d3e7c9d4e5c2d9c6a2d8d9b9d6b0c5d9c6a2d8d9b0c5b9b6a8f9b0a1b'\n  */\nconst stringToSha512 =(text) => {\n  if (text == '') {\n    return null}\n  var sha512 = require('js-sha512')\n  var hash = sha512(text)\n  return hash\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'd7a74a28f9f6f9d28a9a2d1d2e3cc49e3a9d2a823c7f9f8a5b9b6a9c5a9c6a2a8b9b0a1b'\n  */\nconst stringToSha1 =(text) => {\n  if (text == '') {\n    return null}\n  var sha1 = require('js-sha1')\n  var hash = sha1(text)\n  return hash\n}\n\n/*\n  Given a string 'text', return its base64-encoded hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToBase64('Hello world') == 'SGVsbG8sIHdvcmxkIG1lIG9uIGZyb20='\n  */\nconst stringToBase64 =(text) => {\n  if (text == '') {\n    return null}\n  var b64 = require('js-base64')\n  var hash = b64(text)\n  return hash\n}\n\n/*\n  Given a string 'text', return its base64url-encoded hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToBase64Url('Hello world') == 'SGVsbG8sIHdvcmxkIG1lIG9uIGZyb20='\n  */\nconst stringToBase64Url =(text) => {\n  if (text == '') {\n    return null}\n  var b64 = require('js-base64')\n  var hash = b64.encode(text, 'base64url')\n  return hash\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha256,\n  stringToSha512,\n  stringToSha1,\n  stringToBase64,\n  stringToBase64Url\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '}\n    t = t + arr [ i ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n        }\n      }\n  }\n  return arr.join('')\n}\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n}\n\n/* \n  Given a list of strings, filter out all but the longest string.\n  >>> filterLongest([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> filterLongest([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> filterLongest([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> filterLongest([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> filterLongest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst filterLongest =(strings) => {\n  return strings.filter(x => x.length > 0);\n \n}\n\n/*\n  Given a list of strings, return a list of the words in the strings,\n  separated by spaces.\n  >>> words(['this', 'is', 'a', 'test'])\n  ['this', 'is', 'a', 'test']\n  >>> words(['this', 'is', 'a', 'test', 'with', 'words'])\n  ['this', 'is', 'a', 'test', 'with', 'words']\n  */\nconst words =(strings) => {\n  return strings.split(' ').filter(x => x.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of the lines in the strings,\n  separated by newlines.\n  >>> lines(['this', 'is', 'a', 'test'])\n  ['this\\nis\\ta\\ntest']\n  >>> lines(['this', 'is', 'a', 'test', 'with', 'words'])\n  ['this\\nis\\ta\\ntest\\nwith\\nwords']\n  */\nconst lines =(strings) => {\n  return strings.split('\\n').filter(x => x.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of the lines that start with a given\n  prefix.\n  >>> prefixLines('hello world', 'hello')\n  ['hello world']\n  >>> prefixLines('hello world', 'hello ')\n  []\n  >>> prefixLines('hello world', 'hell')\n  ['hello world']\n  >>> prefixLines('hello world', 'hell ')\n  []\n  */\nconst prefixLines =(strings, prefix) => {\n  return lines(filterByPrefix(strings, prefix));\n}\n\n/*\n  Given a list of strings, return the longest string in the list.\n  >>> longest('a', 'b', 'c')\n  'c'\n  >>> longest('a', 'b', 'c', 'd')\n  'c'\n  */\nconst longest =(...strings) => {\n  return strings.sort((a, b) => b.length - a.length)[0];\n}\n\n/*\n  Given a list of strings, return the shortest string in the list.\n  >>> shortest('a', 'b', 'c')\n  'a'\n  >>> shortest('a', 'b', 'c', 'd')\n  'a'\n  */\nconst shortest =(...strings) => {\n  return strings.sort((a, b) => a.length - b.length)[0];\n}\n\n/*\n  Given a list of strings, return the list of words in the strings,\n  separated by spaces.\n  >>> words(['this', 'is', 'a', 'test'])\n  ['this', 'is', 'a', 'test']\n  >>> words(['this', 'is', 'a', 'test', 'with', 'words'])\n  ['this', 'is', 'a', 'test', 'with', 'words']\n  */\nconst words(strings) => {\n  return strings.split(' ');\n}\n\n/*\n  Given a list of strings, return the list of lines in the strings,\n  separated by newlines.\n  >>> lines(['this', 'is', 'a', 'test'])\n  ['this\\nis\\ta\\ntest']\n  >>> lines(['this', 'is', 'a', 'test', 'with', 'words'])\n  ['this\\nis\\ta\\ntest\\nwith\\nwords']\n  */\nconst lines(strings) => {\n  return strings.split('\\n');\n}\n\n/*\n  Given a list of strings, return the list of lines that start with a given\n  prefix.\n  >>> prefixLines('hello world', 'hello')\n  ['hello world']\n  >>> prefixLines('hello world', 'hello ')\n  []\n  >>> prefixLines('hello world', 'hell')\n  ['hello world']\n  >>> prefixLines('hello world', 'hell ')\n  []\n  */\nconst prefixLines(strings, prefix) => {\n  return lines(filterByPrefix(strings, prefix));\n}\n\nmodule.exports = {\n  filterByPrefix,\n  filterLongest,\n  words,\n  lines,\n  longest,\n  shortest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    j++;}\n  let smallest = arr [ 0 ]\n  let pt = 1\n  while (pt < arr.length) {\n    if (arr [ pt ] > smallest) {\n      return arr [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n    }\n    j++;\n  }\n  if (j === 0) {\n    return null;\n  }\n  return arr [ j - 1 ]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p != 32 && p < 96) {\n        p+=32}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) {\n        p+=2}\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p!= 32 && p < 96) {\n        p+=32}\n     \n      t = t + String.fromCharCode(p)\n      i += 1;\n    }\n  }\n  return t;\n}\n\n/*\n  Write a function that takes a message, and decodes it in \n  such a way that it swaps case of all letters, and removes \n  all vowels from the message. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode =(message) => {\n  let t = '';\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p-=32}\n    else\n    if (p!= 32 && p < 96) {\n      p+=32}\n    t = t + String.fromCharCode(p)\n  }\n  return t;\n}\n\n/*\n  Write a function that takes a message, and swaps case of \n  all letters, and removes all vowels from the message. \n  Assume only letters. \n  \n  Examples:\n  >>> swapcase('This is a message')\n  'This Is A message'\n  >>> swapcase('This is a message')\n  'This Is A message'\n  */\nconst swapcase =(message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p-=32}\n    else\n    if (p!= 32 && p < 96) {\n      p+=32}\n    t = t + String.fromCharCode(p)\n  }\n  return t;\n}\n\n/*\n  Write a function that takes a message, and converts it \n  into a number. \n  Assume only letters. \n  \n  Examples:\n  >>> int(message)\n  3\n  >>> int(message)\n  3\n  */\nconst int =(message) => {\n  let t = 0;\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p-=32}\n    else\n    if (p!= 32 && p < 96) {\n      p+=32}\n    t = t + p\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and returns a \n  string with all spaces removed. \n  Assume only letters. \n  \n  Examples:\n  >>> removeSpaces('This is a message')\n  'This is a message'\n  >>> removeSpaces('This is a message')\n  'This is a message'\n  */\nconst removeSpaces =(message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p-=32}\n    else\n    if (p!= 32 && p < 96) {\n      p+=32}\n    t = t + String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and returns a \n  string with all non-letters removed. \n  Assume only letters. \n  \n  Examples:\n  >>> removeNonLetters('This is a message')\n  'This is a message'\n  >>> removeNonLetters('This is a message')\n  'This is a message'\n  */\nconst removeNonLetters =(message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p-=32}\n    else\n    if (p!= 32 && p < 96) {\n      p+=32}\n    t = t + String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and returns a \n  string with all vowels removed. \n  Assume only letters. \n  \n  Examples:\n  >>> removeVowels('This is a message')\n  'This is a message'\n  >>> removeVowels('This is a message')\n  'This is a message'\n  */\nconst removeVowels =(message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p-=32}\n    else\n    if (p!= 32 && p < 96) {\n      p+=32}\n    t = t + String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and returns a \n  string with all all vowels and consonants removed. \n  Assume only letters. \n  \n  Examples:\n  >>> removeVowels('This is a message')\n  'This is a message'\n  >>> removeVowels('This is a message')\n  'This is a message'\n  */\nconst removeConsonants =(message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p >= 96) {\n      p"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (y < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == ')') {\n        y--}\n      else {\n        y++}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No';\n  }\n\nconst matchParens_2 =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == ')') {\n        y--}\n      else {\n        y++}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No';\n  }\n\nconst matchParens_3 =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == ')') {\n        y--}\n      else {\n        y++}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No';\n  }\n\n\nconst matchParens_4 =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == ')') {\n        y--}\n      else {\n        y++}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No';\n  }\n\nconst matchParens_5 =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == ')') {\n        y--}\n      else {\n        y++}\n      if ("}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n        j++\n      }\n    }\n    d.push(`the number of odd elements ${p} of the str4ng ${i} of the ${h}nput.`)\n  }\n  return d\n}\n\n//export\nmodule.exports = oddCount<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (key [ i ].charCodeAt() < 65 || key [ i ].charCodeAt() > 90) {\n          hi = 0}\n        if (key [ i ].charCodeAt() < 97 || key [ i ].charCodeAt() > 122) {\n          lo = 0}\n        }\n      i++;}\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n        let a = key[i]\n        let b = key.toLowerCase()[i]\n        if (a!= b) {\n          lo = 0\n          break\n        }\n        hi = i + 1\n      }\n      i++\n    }\n    if (lo == 0) break\n  }\n  return c == dict.length\n}\n\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n        let a = key[i]\n        let b = key.toUpperCase()[i]\n        if (a!= b) {\n          lo = 0\n          break\n        }\n        hi = i + 1\n      }\n      i++\n    }\n    if (lo == 0) break\n  }\n  return c == dict.length\n}\n\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n        let a = key[i]\n        let b = key.toLocaleUpperCase()[i]\n        if (a!= b) {\n          lo = 0\n          break\n        }\n        hi = i + 1\n      }\n      i++\n    }\n    if (lo == 0) break\n  }\n  return c == dict.length\n}\n\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n        let a = key[i]\n        let b = key.toLocaleLowerCase()[i]\n        if (a!= b) {\n          lo = 0\n          break\n        }\n        hi = i + 1\n      }\n      i++\n    }\n    if (lo == 0) break\n  }\n  return c == dict.length\n}\n\n\n\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (len % i == 0) {\n          u = 0}\n        }\n      i++;}\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ j ]}\n    else {\n      p = p + ' ' + t [ j ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n       if (len % i == 0) {\n        p += t[ j ] +''\n        break}\n       else {\n        i++}\n       }\n    }\n    if (p!= '') {\n      p = p.substring(0, p.length - 1)\n      p +=''\n    }\n  }\n  return p\n}\n\n// let wordsInSentence =(sentence) => {\n//   let t = sentence.split( / s /)\n//   let p = ''\n//   for (let j = 0; j < t.length; j++) {\n//     let len = t [ j ].length\n//     let i = 1\n//     while (i * i <= len) {\n//       {\n//       if (len % i == 0) {\n//        p += t[ j ] +''\n//        break}\n//       else {\n//        i++}\n//       }\n//     }\n//     if (p!= '') {\n//       p = p.substring(0, p.length - 1)\n//       p +=''\n//     }\n//   }\n//   return p\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      else\n      current_string.push(c);\n      }\n    }\n  \n  return result;\n  };\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\nconsole.log(separate"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if ( !Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n    if (result.length == 0)\n      result.push(n);\n    else if (result[result.length - 1]!= n)\n      result.push(delimeter);\n    else\n      result.pop();\n  }\n  return result;\n}\n\n/*\n  Removes duplicate elements in input list `numbers'\n  >>> removeDuplicates([1, 2, 3, 3, 3])\n  [1, 2, 3]\n  */\nconst removeDuplicates =(numbers) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var sorted = [ ];\n  var i = 0;\n  while (i < numbers.length) {\n    if (sorted.indexOf(numbers[i]) < 0) {\n      sorted.push(numbers[i]);\n    }\n    i++;\n  }\n  return sorted;\n}\n\n/*\n  Given an array of ints `numbers', return the largest and smallest elements\n  >>> largestAndSmallest([1, 5, 3, 6, 2, 7])\n  [7, 6, 5, 3, 2, 1]\n  */\nconst largestAndSmallest =(numbers) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var min = numbers[0];\n  var max = numbers[0];\n  for (const n of numbers) {\n    if (n < min)\n      min = n;\n    if (n > max)\n      max = n;\n  }\n  return [ max, min ];\n}\n\nmodule.exports = {\n  intersperse,\n  removeDuplicates,\n  largestAndSmallest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / numbers.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n    }\n , 0);\n};\n\nconsole.log(meanAbsoluteDeviation([1, 2, 3, 4]));\n\n\n/*\n  For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Deviation is the average of the absolute value of the differences\n  between each element and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    \n    return Math.abs(item - mean);\n    }\n , 0);\n};\n\nconsole.log(standardDeviation([1, 2, 3, 4]));\n\n\n\n/*\n  For a given list of input numbers, calculate Variance\n  around the mean of this dataset.\n  Variance is the average of the squares of the differences\n  between each element and the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    \n    return Math.pow(item - mean, 2);\n    }\n , 0);\n};\n\nconsole.log(variance([1, 2, 3, 4]));\n\n\n/*\n  For a given list of input numbers, calculate the Geometric Mean\n  around the mean of this dataset.\n  Geometric Mean is the product of the logarithms of the\n  numbers in this dataset.\n  >>> geometricMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst geometricMean =(numbers) => {\n  var sum = numbers.reduce((prev, item) => {\n    return prev + Math.log(item);\n    }\n , 0) / numbers.length;\n  return Math.pow(Math.E, sum);\n};\n\nconsole.log(geometricMean([1, 2, 3, 4]));\n\n\n/*\n  For a given list of input numbers, calculate the Harmonic Mean\n  around the mean of this dataset.\n  Harmonic Mean is the sum of the reciprocals of the numbers\n  in this dataset.\n  >>> harmonicMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst harmonicMean =(numbers) => {\n  var sum = numbers.reduce((prev, item) => {\n    return prev + 1 / item;\n    }\n , 0) / numbers.length;\n  return 1 / sum;\n};\n\nconsole.log(harmonicMean([1, 2, 3, 4]));\n\n\n/*\n  For a given list of input numbers, calculate the Geometric Mean\n  around the mean of this dataset.\n  Geometric Mean is the product of the logarithms of the\n  numbers in this dataset.\n  >>> geometricMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst harmonicMean =(numbers) => {\n  var sum = numbers.reduce((prev, item) => {\n    return prev + Math.log(item);\n    }\n , 0) / numbers.length;\n  return Math.pow(Math.E, sum);\n};\n\nconsole.log(harmonicMean([1, 2, 3, 4]));\n\n\n/*\n  For a given list of input numbers, calculate the Harmonic Mean\n  around the mean of this dataset.\n  Harmonic Mean is the sum of the reciprocals of the numbers\n  in this dataset.\n  >>> harmonicMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst harmonicMean =(numbers) => {\n  var sum = numbers.reduce((prev, item) => {\n    return prev + 1 / item;\n    }\n , 0) / numbers.length;\n  return 1 / sum;\n};\n\nconsole.log(harmonicMean([1, 2, 3, 4]));<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    \n    for (; h >= 10;) {\n       {\n        k+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n      }\n    k-=h;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n    while (h > 0) {\n      let t = h % 10\n      if (t == 0) {\n        break;\n        }\n      k++;\n      h = h / 10\n      }\n    if (k > 0) {\n      p++;\n      }\n    }\n  return p\n}\n\n/*\n  Write a function sumDigits which takes an array of integers and returns\n  the sum of their first signed digits.\n  >>> sumDigits([1, -2, -3, 4, 9])\n  >>> sumDigits([-1, 11, -11])\n  >>> sumDigits([1, 1, 2])\n  */\nconst sumDigits = (arr) => {\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h < 0) {\n      h = -h\n      }\n    while (h > 0) {\n      s += h % 10\n      h = h / 10\n      }\n    }\n  return s\n}\n\n/*\n  Write a function sumSignedDigits which takes an array of integers and\n  returns the sum of their first signed digits.\n  >>> sumSignedDigits([1, -2, -3, 4, 9])\n  >>> sumSignedDigits([-1, 11, -11])\n  >>> sumSignedDigits([1, 1, 2])\n  */\nconst sumSignedDigits = (arr) => {\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h < 0) {\n      h = -h\n      }\n    while (h > 0) {\n      s += h % 10\n      h = h / 10\n      }\n    }\n  return s\n}\n\n/*\n  Write a function isValidSignedInt which takes an int and returns a boolean\n  that says if the int is a valid signed int.\n  >>> isValidSignedInt(1)\n  >>> isValidSignedInt(11)\n  >>> isValidSignedInt(-1)\n  >>> isValidSignedInt(0)\n  >>> isValidSignedInt(-2)\n  >>> isValidSignedInt(-3)\n  >>> isValidSignedInt(-4)\n  >>> isValidSignedInt(9)\n  */\nconst isValidSignedInt = (i) => {\n  let sign = 1\n  if (i < 0) {\n    i = -i\n    sign = -1\n    }\n  let k = 0\n  while (i > 0) {\n    k++;\n    i = i / 10\n    }\n  return sign * (k + 1)\n}\n\n/*\n  Write a function isValidInt which takes an int and returns a boolean that\n  says if the int is a valid int.\n  >>> isValidInt(1)\n  >>> isValidInt(11)\n  >>> isValidInt(-1)\n  >>> isValidInt(0)\n  >>> isValidInt(-2)\n  >>> isValidInt(-3)\n  >>> isValidInt(-4)\n  >>> isValidInt(9)\n  */\nconst isValidInt = (i) => {\n  let sign = 1\n  if (i < 0) {\n    i = -i\n    sign = -1\n    }\n  let k = 0\n  while (i > 0) {\n    k++;\n    i = i / 10\n    }\n  return sign * k\n}\n\n/*\n  Write a function isValidSignedStr which takes a string and returns a boolean\n  that says if the string is a valid signed int.\n  >>> isValidSignedStr('1')\n  >>> isValidSignedStr('11')\n  >>> isValidSignedStr('-1')\n  >>> isValidSignedStr('0')\n  >>> isValidSignedStr('-2')\n  >>> isValidSignedStr('-3')\n  >>> isValidSignedStr('-4')\n  >>> isValidSignedStr('9')\n  */\nconst isValidSignedStr = (s) => {\n  let sign = 1\n  if (s.charAt(0) == '-') {\n    sign = -1\n    s = s.substr(1)\n    }\n  let k = 0\n  while (s.length > 0) {\n    k++;\n    s = s.substr(1)\n    }\n  return sign * k\n}\n\n/*\n  Write a function isValidStr which takes a string and returns a boolean that\n  says if the string is a valid int.\n  >>> isValidStr('1')\n  >>> isValidStr('11')\n  >>> isValidStr('-1')\n  >>> isValidStr('0')\n  >>> isValidStr('-2')\n  >>> isValidStr('-3')\n  >>> isValidStr('-4')\n  >>> isValidStr('9')\n  */\nconst isValidStr = (s) => {\n  let k = 0\n  while (s.length > 0) {\n    k++;\n    s = s.substr(1)\n    }\n  return k > 0\n}\n\n/*\n  Write a function toSignedStr which takes an int and returns a string\n  that is a valid signed int.\n  >>> toSignedStr(1)\n  >>> toSignedStr(11)\n  >>> toSignedStr(-1)\n  >>> toSignedStr(0)\n  >>> toSignedStr(-2)\n  >>> toSignedStr(-3)\n  >>> toSignedStr(-4)\n  >>> toSignedStr(9)\n  */\nconst toSignedStr = (i) => {"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        p++\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n        p += 1\n      }\n      i++;\n    }\n  }\n  return p\n}\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0\n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter2 =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 0 && Number(y [ y.length - 1 ]) % 2 == 0) {\n       \n        p += 1\n      }\n      i++;\n    }\n  }\n  return p\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter2([15, -73, 14, -15]));\nconsole.log(specialFilter2([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\n/**\n  * Find out how many times a given string can be found in the original string. Count overlaping cases.\n  * @param {string} string\n  * @param {string} substring\n  * @returns {number}\n  */\nconst howManyTimesInString = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\n/**\n * Find out how many times a given string can be found in the original string. Count overlaping cases.\n * @param {string} string\n * @param {string} substring\n * @returns {number}\n */\nconst howManyTimesInString2 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString3 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString4 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString5 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString6 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString7 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString8 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString9 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString10 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i+=substring.length;\n      } else {\n        i++;\n      }\n    }\n  }\n  return times;\n};\n\nconst howManyTimesInString11 = (string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n    {\n      if (string.slice(i, i + substring.length) == substring) {\n"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ] != text.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ]!= text.at( - i - 1))\n   \n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if ( !Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n    if (s.length === maxlen)\n      return s;\n  }\n  return strings[0];\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y >= s) {\n        s = y;\n        u = i;\n        }\n      }\n    i--;}\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n      }\n      let z = 0\n      for (let j = 0; j < class_name.length; j++) {\n        let k = class_name [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          z+=1}\n        if (k >= 97 && k <= 122) {\n          z-=1}\n      }\n      let x = Math.abs(z - y)\n      if (x < s) {\n        s = x\n        u = i\n      }\n     }\n     i -= 1\n  }\n  return class_name + \".\" + extensions [ u ]\n}\n\n//test\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]))\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"Se\", \"Fu\", \"Ce\"]))\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"Se\", \"Fu\", \"Ce\", \"B\", \"D\", \"C\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n      else if (arr [ i ] < 10 && arr [ i ] > -10) {\n        p+=arr [ i ]}\n     \n      else if (arr [ i ] < 0) {\n        p+=arr [ i ]}\n     \n      else {\n        p+=arr [ i ]*10}\n    }\n    i++;\n  }\n  return p;\n};\n\nmodule.exports = addElements;<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      k++;}\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n    }\n  return arr\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n        } else {\n          break\n        }\n      }\n      k++;\n    }\n    if (j!= ind) {\n      let temp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = temp\n    }\n  }\n  return arr\n}\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] == ' ') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        c = 0;\n        }\n      else {\n        t+=text [ i ]\n        }\n      }\n    i++;}\n  if (c == 1) {\n    t+='_'}\n  if (c == 2) {\n    t+='__'}\n  if (c > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\n\n\n//  given a string text, replace all spaces in it with underscores, \n//  and if a string has more than 2 consecutive spaces, \n//  then replace all consecutive spaces with - \n//\n//fixSpaces(\"Example\") == \"Example\"\n//fixSpaces(\"Example 1\") == \"Example_1\"\n//fixSpaces(\" Example 2\") == \"_Example_2\"\n//fixSpaces(\" Example   3\") == \"_Example-3\"\nconst fixSpaces2 =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\n// fixSpaces(\"Example\") == \"Example\"\nconst fixSpaces3 =(text) => {\n  let t = ''\n  let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\nconst fixSpaces4 =(text) => {\n  let t = ''\n  let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\nconst fixSpaces5 =(text) => {\n  let t = ''\n  let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\nconst fixSpaces6 =(text) => {\n  let t = ''\n  let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\nconst fixSpaces7 =(text) => {\n  let t = ''\n  let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++\n  }\n  return t\n}\n\n\n\n\n\n//  given a string text, replace all spaces in it with underscores, \n//  and if a string has more than 2 consecutive spaces, \n//  then replace all consecutive spaces with - \n//\n//fixSpaces(\"Example\") == \"Example\"\n//fixSpaces(\"Example 1\") == \"Example_1\"\n//fixSpaces(\" Example 2\") == \"_Example_2\"\n//fixSpaces(\" Example   3\") == \"_Example-"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n};\n\n/**\n * Get an array of integers in a range\n * \n * @param {number} start start index\n * @param {number} end end index\n * @returns {Array}\n * \n * \n */\nconst getArrayInRange =(start, end) => {\n  return Array.from(new Array(end - start + 1), (x, i) => start + i);\n};\n\n/**\n * Get an array of integers in a range\n * \n * @param {number} start start index\n * @param {number} end end index\n * @returns {Array}\n * \n * \n */\nconst getArrayInRange2 =(start, end) => {\n  return Array.from(new Array(end - start + 1), (x, i) => start + i);\n};\n\n/**\n * Get the length of an array\n * \n * @param {Array}\n * @returns {number}\n */\nconst getArrayLength = (a) => {\n  return a.length;\n};\n\n/**\n * Get the sum of a range of numbers\n * \n * @param {number} start start index\n * @param {number} end end index\n * @returns {number}\n * \n * \n */\nconst getSumInRange =(start, end) => {\n  let sum = 0;\n  for(let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * Get the sum of a range of numbers\n * \n * @param {number} start start index\n * @param {number} end end index\n * @returns {number}\n * \n * \n */\nconst getSumInRange2 =(start, end) => {\n  let sum = 0;\n  for(let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * Given an array of integers, return the number of times\n * that number appears in the array\n * \n * @param {Array}\n * @param {number}\n * @returns {number}\n * \n * \n */\nconst countNumberInArray = (a, num) => {\n  let count = 0;\n  for(let i = 0; i < a.length; i++) {\n    if(a[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  countNumberInArray,\n  getArrayInRange,\n  getArrayInRange2,\n  getArrayLength,\n  getSumInRange,\n  getSumInRange2,\n  unique\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [ ... l ].sort((a, b) => a - b);\n  var sort2 = [ ... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(l) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [... l ].sort((a, b) => a - b);\n  var sort2 = [... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n  JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  else\n    return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n}\n\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenate =(strings, separator) => {\n  return strings.join(separator);\n}\n\n\n/* Concatenate list of strings into a single string, and replace the first occurrence of 'x' with 'y'\n  >>> concatenate_replace(['x', 'x', 'x'], 'x', 'y')\n  'yyyy'\n  >>> concatenate_replace(['x', 'x', 'x'], 'x', 'y', 0)\n  'y'\n  >>> concatenate_replace(['x', 'x', 'x'], 'x', 'y', 2)\n  'yx'\n  */\nconst concatenate_replace =(strings, separator, replacement, index) => {\n  return strings.join(separator).replace(replacement, index);\n}\n\n\n/*\n  >>> concatenate_replace(['x', 'x', 'x'], 'x', 'y', 0)\n  'y'\n  >>> concatenate_replace(['x', 'x', 'x'], 'x', 'y', 2)\n  'yx'\n  >>> concatenate_replace(['x', 'x', 'x'], 'x', 'y', 3)\n  'xyx'\n  */\nconst concatenate_replace =(strings, separator, replacement, index, end) => {\n  return strings.join(separator).replace(replacement, index, end);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let i = 0;\n  while (i < lst2.length) {\n     {\n      if (lst2 [ i ] % 2 == 0) {\n        t++}\n      }\n    i++;}\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n  let j = lst2.length\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2 [ i ] % 2 == 0) {\n      j++}\n    }\n\n  if (j < k) {\n    return \"NO\"\n  }\n\n  return \"YES\"\n}\n\nconst test = [\n  [ [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ] ],\n  [ [ 1, 2, 3, 4 ], [ 1, 5, 3, 4 ] ],\n  [ [ 1, 2, 3, 4 ], [ 1, 2, 3, 5 ] ]\n]\n\nconst test_string = 'exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\\nexchange([1, 2, 3, 4], [1, 2, 3, 5]) => \"NO\"'\n\nlet test_ans = test.map(t => t[1])\n\nconsole.log(exchange(test_ans[0], test_ans[1]))\nconsole.log(exchange(test_ans[0], test_ans[2]))\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n};\n \n/* Return string with upper case characters\n  >>> strtoupper('abc')\n  'ABC'\n  >>> strtoupper('aBc')\n  'ABC'\n  >>> strtoupper('A')\n  'A'\n  */\nconst strtoupper =(string) => {\n    return string.toUpperCase();\n \n};\n \n/* Return string with lower case characters\n  >>> strtolower('abc')\n  'abc'\n  >>> strtolower('aBc')\n  'abc'\n  >>> strtolower('A')\n  'a'\n  */\nconst strtolower =(string) => {\n    return string.toLowerCase();\n \n};\n \n/* Convert a string to uppercase\n  >>> strtoupper('abc')\n  'ABC'\n  */\nconst strtoupper =(string) => {\n    return string.toUpperCase();\n \n};\n \n/* Convert a string to lowercase\n  >>> strtolower('abc')\n  'abc'\n  */\nconst strtolower =(string) => {\n    return string.toLowerCase();\n \n};\n \n/* Return index of a character in a string\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'c')\n  2\n  */\nconst strindex =(string, search) => {\n    return string.indexOf(search);\n \n};\n \n/* Return character at given index of a string\n  >>> strindex('abc', 1)\n  'b'\n  >>> strindex('abc', 2)\n  'c'\n  */\nconst strindex =(string, index) => {\n    return string.charAt(index);\n \n};\n \n/* Return string from index 1 to length of a string\n  >>> strslice('abc', 1, 3)\n  'bc'\n  >>> strslice('abc', 1, 2)\n  'b'\n  */\nconst strslice =(string, start, end) => {\n    return string.substring(start, end);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n};\n \n/* Return a string that is the concatenation of the given strings\n  >>> strconcat(['a', 'b', 'c'])\n  'abc'\n  */\nconst strconcat =(...strings) => {\n    return strings.reduce((a, b) => a + b);\n \n"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ] != pat [ j + k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          i++; return true\n          }\n        }\n      }\n    i++;}\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ]!= pat [ j + k ]) {\n            y = 0}\n         \n        }\n        if (y) return true}\n        }\n    i++}\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInteger =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt2 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt3 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt4 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt5 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt6 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt7 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt8 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt9 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt10 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt11 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt12 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt13 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInt14 =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      n =(n - n % 10) / 10\n      }\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n      }\n      n = n / 10\n    }\n  }\n  return p * k\n}\n\nexport {digits}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 0;\n      while (i < txt.length) {\n         {\n          let m = txt [ i ].charCodeAt()\n          if (m >= 97 && m <= 122 && m % 2 == 0) {\n            p++\n            }\n          }\n        i++;}\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < 26; i++) {\n        let x = txt.charAt(p++)\n        if (x ==='') {\n          return txt.substr(0, p).split( / /)\n          }\n        }\n      }\n    }\n  }\n\nconst toUpperCase = (str) => {\n  let a = str.split( / /)\n  let b = []\n  for (let i = 0; i < a.length; i++) {\n    b[i] = a[i].charAt(0).toUpperCase() + a[i].slice(1)\n    }\n  return b.join('')\n  }\n\nconst toLowerCase = (str) => {\n  let a = str.split( / /)\n  let b = []\n  for (let i = 0; i < a.length; i++) {\n    b[i] = a[i].charAt(0).toLowerCase() + a[i].slice(1)\n    }\n  return b.join('')\n  }\n\nconst containsAll = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        c[i] = true\n        }\n      else {\n        c[i] = false\n        }\n      }\n    }\n  return c.every(x => x)\n  }\n\nconst containsAny = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        c[i] = true\n        }\n      }\n    }\n  return c.some(x => x)\n  }\n\nconst contains = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        c[i] = true\n        }\n      }\n    }\n  return c\n  }\n\nconst containsCaseInsensitive = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i].toLowerCase() === b[j].toLowerCase()) {\n        c[i] = true\n        }\n      }\n    }\n  return c\n  }\n\nconst startsWith = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i].toLowerCase() === b[j].toLowerCase()) {\n        c[i] = true\n        }\n      }\n    }\n  return c\n  }\n\nconst endsWith = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i].toLowerCase() === b[j].toLowerCase()) {\n        c[i] = true\n        }\n      }\n    }\n  return c\n  }\n\nconst containsAllCaseInsensitive = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i].toLowerCase() === b[j].toLowerCase()) {\n        c[i] = true\n        }\n      }\n    }\n  return c\n  }\n\nconst containsAnyCaseInsensitive = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i].toLowerCase() === b[j].toLowerCase()) {\n        c[i] = true\n        }\n      }\n    }\n  return c\n  }\n\nconst containsCaseInsensitive = (str) => {\n  let a = str.split( / /)\n  let b = str.split( / /)\n  let c = []\n  for (let i = 0; i < a.length"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  ret.add(e1);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n    if (ret.has(e1) || ret.has(e2))\n      return ret;\n    else\n      ret.add(e1);\n  return ret;\n};\n\n// console.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n// console.log(common([5, 3, 2, 8], [3, 2]));<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n  return ns;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i != j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        let new_distance = Math.abs(a - b);\n        if (new_distance < distance) {\n          distance = new_distance;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;}\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i!= j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n        if (Math.abs(a - b) < distance) {\n          distance = Math.abs(a - b);\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;\n    }\n  return closest_pair;\n  }\n\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i!= j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n        if (Math.abs(a - b) < distance) {\n          distance = Math.abs(a - b);\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;\n    }\n  return closest_pair;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1 != 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        else {\n          y = - y; y = y - y % 1}\n        }\n      p+=y * y\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1!= 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n        if (y < 0) {\n          y = y + y % 1 - 1}\n       \n        p += y * y\n      }\n    }\n    i++\n  }\n  return p\n}\n\nlet x = sumSquares([1,2,3,4,5])\nconsole.log(x)<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i != j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            }\n          }\n        }\n      j++;}\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i!= j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Find the minimum number in an array\n  >>> findMin([1, 2, 3, 4, 5])\n  1\n  >>> findMin([])\n  Infinity\n  >>> findMin([-1])\n  -1\n  >>> findMin([1.1, 2.2, 3.3])\n  1.1\n  >>> findMin([1.1, 2.2, 3.3, 4.4])\n  1.1\n  >>> findMin([1.1, 2.2, 3.3, 4.4, 5.5])\n  1.1\n  */\nconst findMin =(array) => {\n  let min = Infinity;\n  for (let i = 0; i < array.length; i++) {\n    if (min > array [ i ]) {\n      min = array [ i ];\n    }\n  }\n  return min;\n};\n\n/*\n  Find the maximum number in an array\n  >>> findMax([1, 2, 3, 4, 5])\n  5\n  >>> findMax([])\n  Infinity\n  >>> findMax([-1])\n  -1\n  >>> findMax([1.1, 2.2, 3.3])\n  3.3\n  >>> findMax([1.1, 2.2, 3.3, 4.4])\n  4.4\n  >>> findMax([1.1, 2.2, 3.3, 4.4, 5.5])\n  5.5\n  */\nconst findMax =(array) => {\n  let max = -Infinity;\n  for (let i = 0; i < array.length; i++) {\n    if (max < array [ i ]) {\n      max = array [ i ];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the median number in an array\n  >>> findMedian([1, 2, 3, 4, 5])\n  3\n  >>> findMedian([])\n  Infinity\n  >>> findMedian([-1])\n  -1\n  >>> findMedian([1.1, 2.2, 3.3])\n  2.2\n  >>> findMedian([1.1, 2.2, 3.3, 4.4])\n  2.2\n  >>> findMedian([1.1, 2.2, 3.3, 4.4, 5.5])\n  3.0\n  */\nconst findMedian =(array) => {\n  let len = array.length;\n  if (len == 0) {\n    return Infinity;\n  }\n  if (len == 1) {\n    return array [ 0 ];\n  }\n  let half = len / 2;\n  if (len % 2 == 0) {\n    return (array [ half ] + array [ half - 1 ]) / 2.0;\n  } else {\n    return array [ half ];\n  }\n};\n\nmodule.exports = {\n  hasCloseElements,\n  findMin,\n  findMax,\n  findMedian,\n};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (p == 1) {\n        t.push(i)}\n      }\n    i++;}\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i);\n        i++;\n      }\n    }\n  }\n  return t\n}\n\nconsole.log(countUpTo(10))<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw ? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      sw = !sw;\n      }\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n      sw =!sw;\n    }\n  }\n  \n  return res;\n}\n\nconsole.log(strangeSortList([5, 5, 5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(n - 1) + fib(n - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n  return 1;\n \n  if (n == 2)\n  return 1;\n \n  return fib(n - 1) + fib(n - 2);\n \n}\n \n \n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([ ... new Set(s0) ].sort()) === JSON.stringify([ ... new Set(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([... new Set(s0) ].sort()) === JSON.stringify([... new Set(s1) ].sort());\n \n}\n\nexport default sameChars;<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          p++}\n        }\n      j++;}\n    if (p > s ||(p == s && words [ i ] < words [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return words [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n        }\n        if (y) {\n          j++}\n        }\n      }\n    }\n    if (s < j) {\n      s = j;\n      u = i}\n  }\n  return words[u]\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n  return lst1;\n  else\n    return lst2;\n}\n\nconst test = [\n  { lst: ['hi', 'admin'], res: ['hI', 'Hi'] },\n  { lst: ['hi', 'admin'], res: ['hi', 'hi', 'admin', 'project'] },\n  { lst: ['hi', 'admin'], res: ['hI', 'hi', 'hi'] },\n  { lst: ['4'], res: ['4'] },\n  { lst: ['1', '2', '3', '4', '5'], res: ['1', '2', '3', '4'] }\n];\n\ntest.forEach(({ lst, res}) => {\n  console.log(`totalMatch(${lst}, ${res}) = ${totalMatch(lst, res)}`);\n})\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ] != arr.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ]!= arr.at( - i - 1))\n   \n    ans = arr.at(i) > arr.at(i + 1)? ans + 1 : 0;\n    i++;\n  }\n  return ans;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var f = [ 0, 1 ];\n  while (true) {\n    f.push(f.at( - 1) + f.at( - 2));\n    if (isPrime(f.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return f.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n  return ((Math.pow(2, n) - 1) + (Math.pow(2, n - 1) - 1)) % p;\n  }\n \n// Print the Fibonacci number at position 'n'\nconsole.log(primeFib(n));<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  let j = 2;\n  while (j < n + 1) {\n    if (n % j == 0 && isPrime(j))\n    largest = Math.max(largest, j);\n    j++;}\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  if (isPrime(n))\n    return n;\n  else\n  {\n    for (let i = 2; i < n - 1; i++)\n    if (isPrime(n))\n      return n;\n    else\n      n = n / i;\n  }\n};\n\nconsole.log(largestPrimeFactor(2048));<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n}\n\nexport {\n  isEqualToSumEven\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      f *= i;\n      if (i % 2 == 0) {\n        k.push(f)}\n      else {\n        k.push(p)}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      if (i%2 === 0) {\n         k.push(f);\n         f= f*i;\n      } else {\n         k.push(p);\n         p= 0;\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n * Implementation of the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the fibonacci number of i.\n  i starts from 1.\n  the fibonacci number of i is the sum of numbers from i to i+1 (i+1 = i+2 = 2*i +1)\n  Example:\n  f(5) == [1, 1, 2, 3, 5]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1\n  while (i <= n) {\n     {\n      p+=i;\n     \n      if (i%2 === 0) {\n         k.push(f);\n         f= f*(2*i+1);\n      } else {\n         k.push(p);\n         p= 0;\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n * Implementation of the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of fibonacci numbers of i.\n  i starts from 1.\n  the fibonacci number of i is the sum of numbers from i to i+1 (i+1 = i+2 = 2*i +1)\n  Example:\n  f(5) == [1, 1, 2, 3, 5]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1\n  while (i <= n) {\n     {\n      p+=f;\n     \n      if (i%2 === 0) {\n         k.push(f);\n         f= f*(2*i+1);\n      } else {\n         k.push(p);\n         p= 0;\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n * Implementation of the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the harmonic number of i.\n  i starts from 1.\n  the fibonacci number of i is the sum of numbers from i to i+1 (i+1 = i+2 = 2*i +1)\n  Example:\n  f(5) == [1, 1, 2, 3, 5]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1\n  while (i <= n) {\n     {\n      p+=f;\n     \n      if (i%2 === 0) {\n         k.push(f);\n         f= f*(2*i+1);\n      } else {\n         k.push(p);\n         p= 0;\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n * Implementation of the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of n and the sum of fibonacci numbers of i.\n  i starts from 1.\n  the fibonacci number of i is the sum of numbers from i to i+1 (i+1 = i+2 = 2*i +1)\n  Example:\n  f(5) == [1, 1, 2, 3, 5]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1\n  while (i <= n) {\n     {\n      p+=f;\n     \n      if (i%2 === 0) {\n         k.push(f);\n         f= f*(2*i+1);\n      } else {\n         k.push(p);\n         p= 0;\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n * Implementation of the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of fibonacci numbers of n and the sum of n-1 and the sum of n-2.\n  i starts from 1.\n  the fibonacci number of i is the sum of numbers from i to i+1 (i+1 = i+2 = 2*i +1)\n  Example:\n  f(5) == [1, 1, 2, 3, 5]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1\n  while (i <= n) {\n     {\n      p+=f;\n     \n      if (i%2 === 0) {\n         k.push(f);\n         f= f*(2*i+1);\n      } else {\n         k.push(p);\n         p= 0;\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n * Implementation of the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of fibonacci numbers of n and the sum of n+1 and n+2.\n  i starts from 1.\n  the fibonacci number of i is the sum of numbers from i to i+1 (i+"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n    return '1';\n  };\n  return a + b;\n};\n\nconst main = () => {\n  var test = stringXor('010', '110');\n  console.log(test);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return numbers.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = (numbers[i] - min_number) / (max_number - min_number);\n  }\n  return new_numbers;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( / . /)\n  if (t.length != 2) {\n    return 'No'}\n  if (t [ 1 ] != 'txt' && t [ 1 ] != 'dll' && t [ 1 ] != 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  let i = 1;\n  while (i < t [ 0 ].length) {\n     {\n      if (t [ 0 ] [ i ].charCodeAt() >= 48 && t [ 0 ] [ i ].charCodeAt() <= 57) {\n        y++}\n      if (y > 3) {\n        i++; return 'No'}\n      }\n    i++;}\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains only digits ('0'-'9') and dots '.'.\n  - The file's name contains only one dot '.'.\n  - The file's name contains one of the following extensions:\n    - 'txt'\n    - 'exe'\n    - 'dll'\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'No' (the file's name contains a dot '.')\n  fileNameCheck(\"1example.txt\") # => 'No' (the file's name contains only digits '0'-'9')\n  fileNameCheck(\"example.exe\") # => 'Yes'\n  fileNameCheck(\"example.dll\") # => 'Yes'\n  */\nconst fileNameCheckWithExtension =(file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 48 && a <= 57) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  \n  return 'Yes'\n}\n\nconst validFileName = (file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  \n  return 'Yes'\n}\n\nconst validFileNameWithExtension = (file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 48 && a <= 57) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  \n  return 'Yes'\n}\n\n/*\n  create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains only digits ('0'-'9') and dots '.'.\n  - The file's name contains only one dot '.'.\n  - The file's name contains one of the following extensions:\n    - 'txt'\n    - 'exe'\n    - 'dll'\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'No' (the file's name contains a dot '.')\n  fileNameCheck(\"1example.txt\") # => 'No' (the file's name contains only digits '0'-'9')\n  fileNameCheck(\"example.exe\") # => 'Yes'\n  fileNameCheck(\"example.dll\") # => 'Yes'\n  */\nconst validFileNameWithExtension = (file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 48 && a <= 57) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  \n  return 'Yes'\n}\n\n\n\nconst main = () => {\n  const t = fileNameCheck(\"example.txt\")\n  if (t == 'No') {\n    console.log(\"Invalid File Name\")\n  } else {\n    console."}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(ord_char > 64 && ord_char < 91 ? ord_char : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n            return prev + (ord_char > 96 && ord_char < 123? ord_char : 0);\n      })\n}\n\nconsole.log(digitSum(\"helloE\"))\nconsole.log(digitSum(\"aAaaaXa\"))<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n\n// filter out the ones that do not contain the substring\nconst filterBySubstring2 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\n//filter out the ones that do not contain the substring\nconst filterBySubstring3 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring4 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring5 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring6 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring7 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring8 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring9 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring10 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring11 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring12 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring13 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring14 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring15 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring16 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring17 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring18 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring19 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring20 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring21 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring22 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring23 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring24 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring25 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring26 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring27 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring28 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring29 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring30 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring31 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring32 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring33 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring34 =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n \n}\n\nconst filterBySubstring35 =(strings"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), arr.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n  if (evens.length == 0) return [ ];\n  return evens.reduce((acc, x) => {\n    if (acc[0] > x) return [x, acc.indexOf(x)];\n    return [x, acc.indexOf(x)];\n  }, evens[0]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '+') {\n        operand [ i ]+=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '-') {\n        operand [ i ]-=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '**') {\n        operand [ i ] =(operand [ i ] ** operand [ i + 1 ])\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '+') {\n        operand [ i ] = operand [ i ] + operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '-') {\n        operand [ i ] = operand [ i ] - operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    }\n    return operand\n    }\n    \n  //console.log(operand);\n  let result = operand [ 0 ]\n  while (operand [ 0 ] > 1) {\n    operand [ 0 ]--\n    result = result * operand [ 0 ] + result\n    }\n  \n  return result\n}\n\nmodule.exports = doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ remaining + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n  } else {\n    return [ remaining, number ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ number + need, remaining - need ]\n   \n  } else {\n    return [ remaining, number ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ number + need, remaining - need ]\n   \n  } else {\n    return [ remaining, number ]\n  }\n}<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return y}\n      }\n    i++;}\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n        if (n % i == 0) {\n        return x}\n     }\n     i++\n  }\n  return y\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (t != 0) {\n    k+=t % 10\n    t =(t - t % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n    }\n  }\n  return t\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  let j = 0;\n  while (j < p.length) {\n     {\n      t.push(l [ p [ j ] - 1 ])\n      }\n    j++;}\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n    return p\n  }\n}\n\n/*\n  Given an array of strings, sort the strings using alphabetical order and return them in sorted order.\n\n  For example:\n    arr = [\"Z\", \"A\", \"E\", \"K\", \"O\", \"I\", \"L\", \"X\"]\n          -> sort arr -> [\"A\", \"E\", \"I\", \"K\", \"L\", \"O\", \"Z\", \"X\"]\n          -> reverse arr -> [\"X\", \"L\", \"O\", \"K\", \"I\", \"E\", \"Z\", \"A\"]\n    return [\"A\", \"E\", \"I\", \"K\", \"L\", \"O\", \"Z\", \"X\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Z\", \"A\", \"E\", \"K\", \"O\", \"I\", \"L\", \"X\"]\n          -> sort arr -> [\"A\", \"E\", \"I\", \"K\", \"L\", \"O\", \"Z\", \"X\"]\n          -> reverse arr -> [\"X\", \"L\", \"O\", \"K\", \"I\", \"E\", \"Z\", \"A\"]\n    return = [\"A\", \"E\", \"I\", \"K\", \"L\", \"O\", \"Z\", \"X\"]\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    p.push(arr [ i ])}\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n    return p\n  }\n}\n\nconst reverse =(arr) => {\n  let ret = [ ]\n  for (let i = arr.length - 1; i >= 0; i--) {\n    ret.push(arr [ i ])\n    }\n  return ret\n}\n\nconst findMax =(arr) => {\n  let max = arr [ 0 ]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr [ i ] > max) {\n      max = arr [ i ]\n      }\n    }\n  return max\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)\n}\n\nconst sortByLength =(arr) => {\n  let reverse = reverse(arr)\n  return byLength(reverse)"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    value+=t}\n  return value\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n  let floor = Math.floor(value)\n  let ceil = Math.ceil(value)\n  let diff = value-floor\n  if (diff > 0) {\n    return ceil\n  } else {\n    return floor\n  }\n}\n\n\n// TEST\n//console.log(closestInteger(\"10\"))\n//console.log(closestInteger(\"15.3\"))\n//console.log(closestInteger(\"-14.5\"))\n//console.log(closestInteger(\"-14.5\"))\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b == 'string') {\n    bb = Number(b.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return b}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return a\n  } else if (aa == bb) {\n    return null\n  } else {\n    return b\n  }\n}\n\nexport default compareOne\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid [ m - 1 ] [ n ] < min) {\n    min = grid [ m - 1 ] [ n ]}\n  if (n > 0 && grid [ m ] [ n - 1 ] < min) {\n    min = grid [ m ] [ n - 1 ]}\n  if (m < grid.length - 1 && grid [ m + 1 ] [ n ] < min) {\n    min = grid [ m + 1 ] [ n ]}\n  if (n < grid.length - 1 && grid [ m ] [ n + 1 ] < min) {\n    min = grid [ m ] [ n + 1 ]}\n  let p = [ ]\n  let i = 0;\n  while (i < k) {\n     {\n      if (i % 2 == 0) {\n        p.push(1)}\n      else {\n        p.push(min)}\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n    let lst = []\n    let visited = []\n    for (let i = 0; i < k; i++) {\n      if (m!= 0 && n!= 0) {\n        lst.push(grid [ m ] [ n ])\n        visited.push(grid [ m ] [ n ])\n        grid [ m ] [ n ] = 0\n        m--;\n        n--;\n        }\n      }\n    \n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid.length; j++) {\n        if (grid [ i ] [ j ] == 0 && visited.indexOf(grid [ i ] [ j ]) == -1) {\n          grid [ i ] [ j ] = 1\n          lst.push(grid [ i ] [ j ])\n          visited.push(grid [ i ] [ j ])\n          break\n        }\n      }\n    }\n    \n    return lst\n  }\n  \n  return minPath(grid, k)\n}\n\nconsole.log(minPath([ [ 1,2,3 ], [ 4,5,6 ], [ 7,8,9 ]], 1))\nconsole.log(minPath([ [ 5,9,3 ], [ 4,1,6 ], [ 7,8,2 ]], 1))\nconsole.log(minPath([ [ 1,2,3 ], [ 4,5,6 ], [ 7,8,9 ]], 3))\nconsole.log(minPath([ [ 5,9,3 ], [ 4,1,6 ], [ 7,8,2 ]], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = Number(a [ 1 ]) * Number(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) > 0){\n    return false\n  }\n\n  if(Number(a [ 0 ]) == 0 && Number(b [ 0 ]) > 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) == 0){\n    return true\n  }\n\n  if(Number(a [ 1 ]) == 0){\n    return false\n  }\n\n  if(Number(b [ 1 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 0 ]) == 0){\n    return false\n  }\n\n  if(Number(b [ 0 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 0 ]) == 1 && Number(b [ 0 ]) == 1){\n    return true\n  }\n\n  if(Number(a [ 0 ]) == 1 && Number(b [ 0 ]) > 1){\n    return true\n  }\n\n  if(Number(a [ 0 ]) == 1 && Number(b [ 0 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) == 1 && Number(b [ 1 ]) > 1){\n    return true\n  }\n\n  if(Number(a [ 1 ]) == 1 && Number(b [ 1 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) > 1){\n    return false\n  }\n\n  if(Number(a [ 0 ]) == 0 && Number(b [ 0 ]) > 1){\n    return false\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) == 1){\n    return true\n  }\n\n  if(Number(a [ 1 ]) > 1 && Number(b [ 1 ]) == 1){\n    return true\n  }\n\n  if(Number(a [ 0 ]) > 1 && Number(b [ 0 ]) == 1){\n    return true\n  }\n\n  if(Number(a [ 0 ]) > 1 && Number(b [ 1 ]) > 1){\n    return true\n  }\n\n  if(Number(a [ 0 ]) > 1 && Number(b [ 0 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 0 ]) > 1 && Number(b [ 1 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) > 1 && Number(b [ 0 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) > 1 && Number(b [ 1 ]) == 0){\n    return false\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) > 1){\n    return false\n  }\n\n  if(Number(a [ 1 ]) > 1 && Number(b [ 1 ]) > 1){\n    return true\n  }\n\n  if(Number(a [ 0 ]) == 0 && Number(b [ 0 ]) == 0){\n    return true\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 0 ]) == 0){\n    return true\n  }\n\n  if(Number(a [ 0 ]) == 0 && Number(b [ 1 ]) == 0){\n    return true\n  }\n\n  if(Number(a [ 1 ]) == 0 && Number(b [ 1 ]) == 0){\n    return true\n  }\n\n  return false\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n      }\n    }\n    i+=1\n  }\n  return p\n}\n\n\n\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] == ' ') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] == ' ' && S [ i + 2 ] == 'I' && S [ i + 3 ] == ' ') {\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          t++\n          }\n        }\n      }\n    i++;}\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n         \n        t = t + 1}\n      }\n    }\n    i = i + 1}\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredom sentences. A boredom sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoredSentence =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n         \n        t = t + 1}\n      }\n    }\n    i = i + 1}\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoredSentenceInWords =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n         \n        t = t + 1}\n      }\n    }\n    i = i + 1}\n  return t\n}\n\n//Test cases\n\nconsole.log(isBored(\"Hello world\"))\nconsole.log(isBored(\"Hello world\"))\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\n\nconsole.log(isBoredSentence(\"Hello world\"))\nconsole.log(isBoredSentence(\"Hello world\"))\nconsole.log(isBoredSentence(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoredSentence(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoredSentence(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoredSentence(\"The sky is blue. The sun is shining. I love this weather\"))\n\nconsole.log(isBoredSentenceInWords(\"Hello world\"))\nconsole.log(isBoredSentenceInWords(\"Hello world\"))\nconsole.log(isBoredSentenceInWords(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoredSentenceInWords(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoredSentenceInWords(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoredSentenceInWords(\"The sky is blue. The sun is shining. I love this weather\"))<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n  )\n .join(\"\");\n}\n\n/*\n  getRandomElement is a function that takes array and returns an element from array at random.\n  >>> getRandomElement([1,2,3,4])\n  4\n  >>> getRandomElement([\"a\", \"b\", \"c\"])\n  a\n  >>> getRandomElement([\"a\", \"b\", \"c\"])\n  b\n  >>> getRandomElement([\"a\", \"b\", \"c\"])\n  c\n  >>> getRandomElement([])\n  []\n  */\nconst getRandomElement = (arr) => {\n  let element = arr[Math.floor(Math.random() * arr.length)];\n  return element;\n}\n\n/*\n  shuffle is a function that shuffles an array.\n  >>> shuffle([1,2,3,4])\n  [1, 2, 3, 4]\n  >>> shuffle([1,2,3,4])\n  [4, 3, 2, 1]\n  >>> shuffle([1,2,3,4])\n  [1, 2, 3, 4]\n  >>> shuffle([])\n  []\n  >>> shuffle([1,2,3,4,5])\n  [4, 3, 2, 1, 5]\n  */\nconst shuffle = (arr) => {\n  let shuffledArray = arr.slice();\n  let shuffledArrayIndex = 0;\n  while (shuffledArrayIndex < shuffledArray.length) {\n    let currentIndex = Math.floor(Math.random() * shuffledArray.length);\n    let temp = shuffledArray[shuffledArrayIndex];\n    shuffledArray[shuffledArrayIndex] = shuffledArray[currentIndex];\n    shuffledArray[currentIndex] = temp;\n    shuffledArrayIndex++;\n  }\n  return shuffledArray;\n}\n\n/*\n  replaceAll is a function that takes string and returns string with\n  all occurrences of the first argument replaced with the second.\n  >>> replaceAll(\"abcdef\", \"a\", \"b\")\n  'bcdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"\")\n  'bdef'\n  >>> replaceAll(\"abcdef\", \"\", \"\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"\", \"b\")\n  'bdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"a\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"abcdef\", \"\")\n  ''\n  >>> replaceAll(\"abcdef\", \"abcdef\", \"b\")\n  'bdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"b\")\n  'bcdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"aa\")\n  'bcdee'\n  >>> replaceAll(\"abcdef\", \"aa\", \"aa\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"aa\", \"a\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"aa\", \"\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"abcdef\", \"b\")\n  'bdef'\n  >>> replaceAll(\"abcdef\", \"b\", \"\")\n  'abdef'\n  >>> replaceAll(\"abcdef\", \"b\", \"aa\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"b\", \"b\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"b\", \"bb\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"b\", \"b\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"b\", \"bb\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"bb\", \"bb\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"bb\", \"b\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"bb\", \"\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"aa\", \"\")\n  'abdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"b\")\n  'bcdef'\n  >>> replaceAll(\"abcdef\", \"\", \"\")\n  ''\n  >>> replaceAll(\"abcdef\", \"\", \"b\")\n  ''\n  >>> replaceAll(\"abcdef\", \"aa\", \"b\")\n  'abdef'\n  >>> replaceAll(\"abcdef\", \"aa\", \"bb\")\n  'abdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"b\")\n  'bcdef'\n  >>> replaceAll(\"abcdef\", \"a\", \"\")\n  'bcdef'\n  >>> replaceAll(\"abcdef\", \"\", \"\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"\", \"b\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"\", \"\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"b\", \"\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"b\", \"aa\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"b\", \"b\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"b\", \"bb\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"b\", \"\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"bb\", \"\")\n  'abcdef'\n  >>> replaceAll(\"abcdef\", \"bb\", \"aa\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"bb\", \"b\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"bb\", \"\")\n  'abcdee'\n  >>> replaceAll(\"abcdef\", \"aa\", \"\")\n  'abdef"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [ ... Array(n).keys(), n ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n}\n \n/* Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n  >>> stringSequenceExclusive(0)\n  '0'\n  >>> stringSequenceExclusive(5)\n  '0 1 2 3 4'\n  */\nconst stringSequenceExclusive =(n) => {\n  return [... Array(n).keys(), n + 1 ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n exclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceInclusive =(n) => {\n  return [... Array(n).keys(), n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n exclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceInclusive2 =(n) => {\n  return [... Array(n).keys(), n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n exclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceExclusive2 =(n) => {\n  return [... Array(n).keys(), n + 1 ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceInclusiveExclusive =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n exclusive to n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '4 5'\n  */\nconst stringSequenceInclusiveExclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n exclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceInclusiveExclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n exclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceInclusiveExclusive =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n exclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceExclusiveExclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceInclusiveExclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceExclusiveExclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceExclusiveInclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceInclusiveExclusive =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceExclusiveInclusive2 =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> stringSequenceExclusive(5)\n  '4 5'\n  */\nconst stringSequenceExclusiveInclusive =(n) => {\n  return [... Array(n).keys(), n, n + 1 ].reverse().join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive to n inclusive.\n  >>> stringSequenceExclusive(0)\n  ''\n  >>> string"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b != 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      b = temp % b;\n      }\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n      b = temp % b;\n      }\n   }\n   return a;\n}\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (m > 0) {\n        m-=capacity;\n        p++;\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n        if (m > p) {\n          p = m}\n      }\n      i++\n    }\n  }\n\n  let j = 0;\n  while (j < p) {\n    for (let i = 0; i < grid.length; i++) {\n      if (grid[i][j] === 1) {\n        grid[i][j] = 0\n        j++\n      }\n    }\n  }\n\n  return p;\n}\n\nconst solve = (grid, capacity) => {\n  let m = grid.length;\n  let n = grid[0].length;\n  let p = 0;\n  let i = 0;\n  while (i < m) {\n    p += maxFill(grid, capacity);\n    i++\n  }\n\n  return p;\n}\n\n// console.log(solve([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))\n// console.log(solve([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 2))\nconsole.log(solve([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 5))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return false}\n      }\n    i++;}\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n     if (len % i == 0) {\n      return false}\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(primeLength(\"Hello\"))\nconsole.log(primeLength(\"abcdcba\"))\nconsole.log(primeLength(\"kittens\"))\nconsole.log(primeLength(\"orange\"))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n      }\n      else {\n        \n        break;\n      }\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add2 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ]) == -1) {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add3 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ])!= -1) {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add4 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ])!= -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add5 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ])!= -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add6 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ]) == -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add7 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ]) == -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add8 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ]) == -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add9 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ])!= -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n\n/*\n  Given a non-empty list of integers lst. add the elements of the list that are not in the list lst\n  \n  Examples:\n      add([1, 2, 3, 4, 5]) ==> 6\n  */\nconst add10 =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n    if (lst.indexOf(lst [ i ]) == -1) {\n      t+=lst [ i ]\n    }\n    else {\n      t+=lst [ i ]\n    }\n    i++;\n  }\n  return t;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  let i = a;\n  while (i <= b) {\n     {\n      if (i == 2 || i == 4 || i == 6 || i == 8) {\n        y.push(i)}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  if (a == b) {\n    return [a];\n  }\n\n  let current = a;\n  let result = [];\n\n  while (current <= b) {\n    result.push(current);\n    current += 2;\n  }\n\n  return result;\n}\n\nmodule.exports = generateIntegers;<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && p [ k ] < p [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n      }\n      if (f1 > f2) {\n        let t = p [ ind]\n        p [ ind ] = p [ k]\n        p [ k ] = t\n        ind++\n      }\n    }\n  }\n  return p\n}\n\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nconsole.log(sortArray(array));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 1;\n      while (i < frq.length) {\n            if (frq [ i ] >= i)\n            ans = i;\n            i++;}\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n      for (const i of lst)\n      {\n          if ( frq [i] >= i )\n          {\n              if ( ans === - 1 || frq [ans] < frq [i] )\n              {\n                  ans = i;\n              }\n          }\n      }\n      return ans;\n};\n\n//console.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (primes.includes(num [ i ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n    if(primes.indexOf(num[i])!= -1) {\n      total += 1;\n    }\n    i++;\n  }\n  return total;\n}\n\nconst hexKeyTest =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n    if(primes.indexOf(num[i])!= -1) {\n      total += 1;\n    }\n    i++;\n  }\n  return total;\n}\n\nmodule.exports = hexKeyTest;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n}\n\n/*\n  Given a string in binary format, your task is to convert it to decimal format.\n\n  Examples:\n  binaryToDecimal(\"db1100db\") # returns 25\n  binaryToDecimal(\"db110000db\") # returns 31\n  */\nconst binaryToDecimal =(binary) => {\n  let binaryArray = new Array(binary.length);\n  for(let i = 0; i < binary.length; i++){\n    binaryArray[i] = binary.charCodeAt(i);\n  }\n  let decimal = 0;\n  let temp = 0;\n  let i = binary.length - 1;\n  while(i >= 0){\n    temp = binaryArray[i];\n    decimal += temp * Math.pow(2,i);\n    i--;\n  }\n  return decimal;\n}\n\n/*\n  You will be given two strings, both in decimal format.\n\n  Each string represents a single number in the decimal format.\n\n  You have to find the minimum of these two numbers.\n\n  Examples:\n  minimum(\"1\", \"2\") # returns 1\n  minimum(\"2\", \"1\") # returns 1\n  minimum(\"5\", \"1\") # returns 1\n  minimum(\"7\", \"1\") # returns 1\n  minimum(\"10\", \"2\") # returns 2\n  minimum(\"11\", \"2\") # returns 2\n  minimum(\"12\", \"2\") # returns 2\n  minimum(\"13\", \"2\") # returns 2\n  minimum(\"15\", \"2\") # returns 2\n  minimum(\"17\", \"2\") # returns 2\n  minimum(\"19\", \"2\") # returns 2\n  minimum(\"21\", \"2\") # returns 2\n  minimum(\"25\", \"2\") # returns 2\n  minimum(\"26\", \"2\") # returns 2\n  minimum(\"28\", \"2\") # returns 2\n  minimum(\"30\", \"2\") # returns 2\n  minimum(\"32\", \"2\") # returns 2\n  minimum(\"33\", \"2\") # returns 2\n  minimum(\"35\", \"2\") # returns 2\n  minimum(\"37\", \"2\") # returns 2\n  minimum(\"39\", \"2\") # returns 2\n  minimum(\"41\", \"2\") # returns 2\n  minimum(\"43\", \"2\") # returns 2\n  minimum(\"45\", \"2\") # returns 2\n  minimum(\"47\", \"2\") # returns 2\n  minimum(\"49\", \"2\") # returns 2\n  minimum(\"51\", \"2\") # returns 2\n  minimum(\"53\", \"2\") # returns 2\n  minimum(\"55\", \"2\") # returns 2\n  minimum(\"57\", \"2\") # returns 2\n  minimum(\"59\", \"2\") # returns 2\n  minimum(\"61\", \"2\") # returns 2\n  minimum(\"63\", \"2\") # returns 2\n  minimum(\"65\", \"2\") # returns 2\n  minimum(\"67\", \"2\") # returns 2\n  minimum(\"69\", \"2\") # returns 2\n  minimum(\"71\", \"2\") # returns 2\n  minimum(\"73\", \"2\") # returns 2\n  minimum(\"75\", \"2\") # returns 2\n  minimum(\"77\", \"2\") # returns 2\n  minimum(\"79\", \"2\") # returns 2\n  minimum(\"81\", \"2\") # returns 2\n  minimum(\"83\", \"2\") # returns 2\n  minimum(\"85\", \"2\") # returns 2\n  minimum(\"87\", \"2\") # returns 2\n  minimum(\"89\", \"2\") # returns 2\n  minimum(\"91\", \"2\") # returns 2\n  minimum(\"93\", \"2\") # returns 2\n  minimum(\"95\", \"2\") # returns 2\n  minimum(\"97\", \"2\") # returns 2\n  minimum(\"99\", \"2\") # returns 2\n  minimum(\"101\", \"2\") # returns 2\n  minimum(\"103\", \"2\") # returns 2\n  minimum(\"105\", \"2\") # returns 2\n  minimum(\"107\", \"2\") # returns 2\n  minimum(\"109\", \"2\") # returns 2\n  minimum(\"111\", \"2\") # returns 2\n  minimum(\"113\", \"2\") # returns 2\n  minimum(\"115\", \"2\") # returns 2\n  minimum(\"117\", \"2\") # returns 2\n  minimum(\"119\", \"2\") # returns 2\n  minimum(\"121\", \"2\") # returns 2\n  minimum(\"123\", \"2\") # returns 2\n  minimum(\"125\", \"2\") # returns 2\n  minimum(\"127\", \"2\") # returns 2\n  minimum(\"129\", \"2\") # returns 2\n  minimum(\"131\", \"2\") # returns 2\n  minimum(\"133\", \"2\") # returns 2\n  minimum(\"135\", \"2\") # returns 2\n  minimum(\"137\", \"2\") # returns 2\n  minimum(\"139\", \"2\") # returns 2\n  minimum(\"141\", \"2\") # returns 2\n  minimum(\"143\", \"2\") # returns 2\n  minimum(\"145\", \"2\") # returns 2\n  minimum(\"147\", \"2\") # returns 2\n  minimum(\"149\", \"2\") # returns 2\n  minimum(\"151\", \"2\") # returns 2\n  minimum(\"153\", \"2\") # returns 2\n  minimum(\"155\", \"2\") # returns 2\n  minimum(\"157\", \"2\") # returns 2\n  minimum(\"159\", \"2\") # returns 2\n  minimum(\"161\", \"2\") # returns 2\n  minimum(\"163\", \"2\") # returns 2\n  minimum(\"165\", \"2\") # returns 2\n  minimum(\"167\", \"2\") # returns 2\n  minimum(\"169\", \"2\") # returns 2\n  minimum(\"171\", \"2\") # returns 2\n  minimum(\"173\", \"2\") # returns 2\n  minimum(\"175\", \"2\") # returns 2\n  minimum(\"177\", \"2\") # returns 2\n  minimum(\"179\", \"2\") # returns 2\n  minimum(\"181\", \"2\") # returns 2\n  minimum(\"183\", \"2\") # returns 2\n  minimum(\"185\", \"2\") #"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n     }\n     i++;\n  }\n  if (a === Infinity) {\n     return null}\n  else {\n     return [a, b]\n  }\n}\n\n/* Create a function that returns the largest and smallest\n  of two numbers.\n  Examples:\n  largestSmallest([1, 4, 3, 2, 6]) == (6, 1)\n  largestSmallest([1, 2, 3]) == (3, 1)\n  largestSmallest([1, 2, 3, 4]) == (4, 1)\n  largestSmallest([1, 2, 3, 4, 5]) == (5, 1)\n  largestSmallest([1, 2, 3, 4, 5, 6]) == (6, 1)\n  */\nconst largestSmallest =(lst) => {\n  let largest = 0\n  let smallest = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] > largest) {\n      largest = lst [ i ]}\n    if (lst [ i ] < smallest) {\n      smallest = lst [ i ]}\n  }\n  return [largest, smallest]\n}\n\n/* Create a function that returns the largest and smallest\n  of two lists.\n  Examples:\n  largestSmallest([1, 4, 3, 2, 6]) == ([6, 1], [1, 4, 3, 2, 6])\n  largestSmallest([1, 2, 3, 4, 5]) == ([5, 1], [1, 2, 3, 4, 5])\n  largestSmallest([1, 2, 3, 4, 5, 6]) == ([6, 1], [1, 2, 3, 4, 5, 6])\n  */\nconst largestSmallestLists =(lst1, lst2) => {\n  let largest = largestSmallest(lst1)\n  let smallest = largestSmallest(lst2)\n  return [largest, smallest]\n}\n\n/* Create a function that returns the largest and smallest\n  of two lists, and a boolean that is true if the first list\n  is strictly smaller than the second, and false if they are\n  strictly greater.\n  Examples:\n  largestSmallest([1, 2, 3, 4, 5, 6], [6, 1, 4, 3, 2, 5]) == (false, false)\n  largestSmallest([1, 2, 3, 4, 5, 6], [5, 1, 2, 3, 4, 6]) == (true, false)\n  largestSmallest([1, 2, 3, 4, 5, 6], [6, 1, 4, 3, 2, 5]) == (false, true)\n  largestSmallest([1, 2, 3, 4, 5, 6], [5, 1, 2, 3, 4, 6]) == (true, true)\n  */\nconst largestSmallestListsStrict =(lst1, lst2) => {\n  let largest = largestSmallest(lst1)\n  let smallest = largestSmallest(lst2)\n  if (largest[0] < smallest[0]) {\n    return [true, false]\n  }\n  if (largest[0] > smallest[0]) {\n    return [false, true]\n  }\n  if (largest[1] < smallest[1]) {\n    return [true, false]\n  }\n  if (largest[1] > smallest[1]) {\n    return [false, true]\n  }\n  return [true, true]\n}\n\n/* Create a function that returns a list of the n largest\n  of two lists.\n  Examples:\n  largest([1, 2, 3, 4, 5, 6], [6, 1, 4, 3, 2, 5]) == [1, 2, 3, 4, 5]\n  largest([1, 2, 3, 4, 5, 6], [5, 1, 2, 3, 4, 6]) == [1, 2, 3, 4, 5]\n  largest([1, 2, 3, 4, 5, 6], [6, 1, 4, 3, 2, 5]) == [1, 2, 3, 4, 5]\n  largest([1, 2, 3, 4, 5, 6], [5, 1, 2, 3, 4, 6]) == [1, 2, 3, 4, 5]\n  */\nconst largest =(lst1, lst2, n) => {\n  let lst = largestSmallestLists(lst1, lst2)\n  let lst2 = largestSmallestListsStrict(lst1, lst2)\n  if (lst[0] === lst2[0]) {\n    return largest([...lst1,...lst2].slice(0, n))\n  }\n  if (lst[0] === false) {\n    return largest([...lst1,...lst2].slice(0, n))\n  }\n  if (lst[0] === true) {\n    return largest([...lst1,...lst2].slice(0, n))\n  }\n}\n\n/* Create a function that returns a list of the n largest\n  of two lists, and a boolean that is true if the first list\n  is strictly smaller than the second, and false if they are\n  strictly greater.\n  Examples:\n  largestStrict([1, 2, 3, 4, 5, 6], [6, 1, 4, 3, 2, 5]) == [1, 2, 3, 4, 5]\n  largestStrict([1, 2, 3, 4, 5,"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 3 == 0 ? three [ index / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  return l.filter((item, index) => index % 3!= 0);\n};\n\nmodule.exports = sortThird;<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n    prod_value*=n;\n  }\n  return [sum_value, prod_value];\n};\n\nconsole.log(sumProduct([3, 6, 5, 3, 8, 5, 6, 3, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t [ i ] != t [ t.length - i - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n  }\n  return (t, (t === s))\n}\n\nconsole.log(reverseDelete('abcdef', 'b'))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    j++;}\n  if (l [ i ] + l [ j ] + l [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n    \n    if (l[i] + l[j] + l[k] === 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}\n\nconst find = (l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n    \n    if (l[i] + l[j] + l[k] === 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}\n\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n    \n    if (l[i] + l[j] + l[k] === 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}\n\nconst find = (l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n    \n    if (l[i] + l[j] + l[k] === 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}\n\nmodule.exports = {\n  triplesSumToZero,\n  find\n}<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map [ x ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const notes = music_string.split(' ');\n  const new_notes = [];\n  let current_note = 0;\n  const length = notes.length;\n\n  for (let i = 0; i < length; i++) {\n    if (notes[i] === 'o') {\n      current_note = current_note + 4;\n    }\n    else if (notes[i] === 'o|') {\n      current_note = current_note + 2;\n    }\n    else if (notes[i] === '.|') {\n      current_note = current_note + 1;\n    }\n    new_notes.push(current_note);\n    current_note = 0;\n  }\n  return new_notes;\n};\n\n// test harness\nconst test = () => {\n  console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n     }\n  }\n  return -1\n}\n\nconsole.log(canArrange([1,2,4,3,5])); //3\nconsole.log(canArrange([1,2,3])); //-1\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ] != q [ j ])\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return false;\n      i++;\n      j--;\n      }\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ]!= q [ j ])\n     \n      break;\n    }\n    {\n      if (q [ i ] > q [ j ])\n      break;\n    }\n    i++;\n    j--;\n  }\n  return i == j;\n}\n\n// var q = [1, 2, 3];\n// var w = 9;\n// console.log(willItFly(q, w));\n// console.log(willItFly([1, 2, 3], 9));\n// console.log(willItFly([1, 2, 3], 7));\n// console.log(willItFly([1, 2, 3, 1], 9));\n// console.log(willItFly([1, 2, 3, 1], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n}\n\n/*\n  decodes given string by cycling groups of three characters.\n  */\nconst decodeCyclic_backward =(s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.max(0, (3 * i + 3) - (s.length - 1)), Math.min((3 * i + 3) + 1, s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_backward function. Returns decoded string.\n  */\nconst decodeCyclic_backward =(s) => {\n  return decodeCyclic_backward(encodeCyclic(s));\n}\n\nexport {encodeCyclic, decodeCyclic, decodeCyclic_backward, encodeCyclic_backward};<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n)).join(\"\");\n}\n\n// \nconst encode = (s) => encodeShift(s);\nconst decode = decodeShift;\n\n// \nconst encode_base64 = (s) => {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  const encoded = \"\";\n\n  for (let i = 0; i < s.length; i += 3) {\n    const b1 = s.charCodeAt(i) & 0xFF;\n    const b2 = s.charCodeAt(i+1) & 0xFF;\n    const b3 = s.charCodeAt(i+2) & 0xFF;\n    const triple = (b1 << 16) | (b2 << 8) | b3;\n    const tripleStr = triple.toString(64);\n    encoded += alphabet.charAt(tripleStr.length);\n  }\n\n  return encoded;\n}\n\n// \nconst decode_base64 = (s) => {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  const decoded = \"\";\n  const pad = \"=\";\n\n  let i = 0;\n  let j = 0;\n  while (s.charAt(i)!== pad) {\n    const charAt = s.charAt(i);\n    const charCode = alphabet.indexOf(charAt);\n    const triple = charCode << 18 | charCode << 12 | charCode << 6 | charCode;\n\n    decoded += String.fromCharCode((triple >> 16) & 0x3F);\n\n    i++;\n    if (i >= s.length) break;\n    if (s.charAt(i) === pad) break;\n    if (s.charAt(i) === pad) break;\n  }\n\n  return decoded;\n}\n\nconst encode_base64 = (s) => {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  const encoded = \"\";\n\n  for (let i = 0; i < s.length; i += 3) {\n    const b1 = s.charCodeAt(i) & 0xFF;\n    const b2 = s.charCodeAt(i+1) & 0xFF;\n    const b3 = s.charCodeAt(i+2) & 0xFF;\n    const triple = (b1 << 16) | (b2 << 8) | b3;\n    const tripleStr = triple.toString(64);\n    encoded += alphabet.charAt(tripleStr.length);\n  }\n\n  return encoded;\n}\n\nconst decode_base64 = (s) => {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  const decoded = \"\";\n  const pad = \"=\";\n\n  let i = 0;\n  let j = 0;\n  while (s.charAt(i)!== pad) {\n    const charAt = s.charAt(i);\n    const charCode = alphabet.indexOf(charAt);\n    const triple = charCode << 18 | charCode << 12 | charCode << 6 | charCode;\n\n    decoded += String.fromCharCode((triple >> 16) & 0x3F);\n\n    i++;\n    if (i >= s.length) break;\n    if (s.charAt(i) === pad) break;\n    if (s.charAt(i) === pad) break;\n  }\n\n  return decoded;\n}\n\nmodule.exports = {\n  encode_base64,\n  decode_base64,\n  encode,\n  decode,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (len == 1 || len == 0) {\n    return 'NO'}\n  let i = 2;\n  while (i * i <= len) {\n     {\n      if (len % i == 0) {\n        i++; return 'NO'}\n      }\n    i++;}\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n  if (len === 0) {\n    return \"NO\"}\n  if (len % 2!== 0) {\n    return \"NO\"}\n  return \"YES\"\n}\n\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nintersection((-1, 1), (0, 4)) => \"NO\"\nintersection((-3, -1), (-5, 5)) => \"YES\"<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n};\n\nmodule.exports = sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    k++;}\n  if (n % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n  if (n % k == 0)\n  return false;\n  k += 1;\n  }\n  return true;\n};\n\n/*Return the smallest prime greater than or equal to the given number.\n  >>> nextPrime(6)\n  13\n  >>> nextPrime(101)\n  137\n  >>> nextPrime(11)\n  29\n  >>> nextPrime(13441)\n  13777\n  >>> nextPrime(61)\n  817\n  >>> nextPrime(4)\n  >>> nextPrime(1)\n  */\nconst nextPrime =(n) => {\n  if (isPrime(n))\n  return n + 1;\n  while (true) {\n    let p = n + 1;\n    if (isPrime(p))\n    return p;\n    n = n + 2;\n  }\n};\n\n/*Return the largest prime number less than or equal to the given number.\n  >>> largestPrime(7)\n  3\n  >>> largestPrime(101)\n  137\n  >>> largestPrime(11)\n  11\n  >>> largestPrime(13441)\n  13777\n  >>> largestPrime(61)\n  61\n  >>> largestPrime(4)\n  >>> largestPrime(1)\n  */\nconst largestPrime =(n) => {\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i))\n    return i;\n    i = i + 1;\n  }\n};\n\n/*Return the smallest number that is prime and greater than or equal to the given number.\n  >>> nextPrime(6)\n  13\n  >>> nextPrime(101)\n  137\n  >>> nextPrime(11)\n  29\n  >>> nextPrime(13441)\n  13777\n  >>> nextPrime(61)\n  817\n  >>> nextPrime(4)\n  >>> nextPrime(1)\n  */\nconst nextPrimeUp =(n) => {\n  let i = largestPrime(n);\n  while (i <= n) {\n    if (isPrime(i))\n    return i;\n    i = i + 1;\n  }\n};\n\n/*Return the largest number that is prime and less than or equal to the given number.\n  >>> largestPrime(7)\n  3\n  >>> largestPrime(101)\n  137\n  >>> largestPrime(11)\n  11\n  >>> largestPrime(13441)\n  13777\n  >>> largestPrime(61)\n  61\n  >>> largestPrime(4)\n  >>> largestPrime(1)\n  */\nconst largestPrimeDown =(n) => {\n  let i = largestPrime(n);\n  while (i >= n) {\n    if (isPrime(i))\n    return i;\n    i = i - 1;\n  }\n};\n\n/*Return the sum of the primes less than or equal to the given number.\n  >>> sumPrime(7)\n  14\n  >>> sumPrime(101)\n  137\n  >>> sumPrime(11)\n  29\n  >>> sumPrime(13441)\n  13777\n  >>> sumPrime(61)\n  61\n  >>> sumPrime(4)\n  >>> sumPrime(1)\n  */\nconst sumPrime =(n) => {\n  let i = largestPrime(n);\n  let sum = 0;\n  while (i <= n) {\n    if (isPrime(i))\n    sum += i;\n    i = i + 1;\n  }\n  return sum;\n};\n\n/*Return the sum of the primes less than or equal to the given number\n  and greater than the given number.\n  >>> sumPrime(7, 10)\n  9\n  >>> sumPrime(101, 1000)\n  4147\n  >>> sumPrime(11, 13441)\n  13777\n  >>> sumPrime(61, 61)\n  61\n  >>> sumPrime(4, 4)\n  >>> sumPrime(1, 1)\n  */\nconst sumPrimeUp =(n, m) => {\n  let i = largestPrime(n);\n  let sum = 0;\n  while (i <= m) {\n    if (isPrime(i))\n    sum += i;\n    i = i + 1;\n  }\n  return sum;\n};\n\n/*Return the sum of the primes less than or equal to the given number\n  and less than or equal to the given number.\n  >>> sumPrime(7, 10)\n  9\n  >>> sumPrime(101, 1000)\n  4147\n  >>> sumPrime(11, 13441)\n  13777\n  >>> sumPrime(61, 61)\n  61\n  >>> sumPrime(4, 4)\n  >>> sumPrime(1, 1)\n  */\nconst sumPrimeDown =(n, m) => {\n  let i = largestPrime(n);\n  let sum = 0;\n  while (i >= m) {\n    if (isPrime(i))\n    sum += i;\n    i = i - 1;\n  }\n  return sum;\n};\n\n/*Return the sum of the numbers in the list.\n  >>> sumList([1, 2, 3, 4])\n  10\n  >>> sumList([1, 2, 3, 4, 5])\n  15\n  >>> sumList([1, 2, 3, 4, 5, 6])\n  21\n  >>> sumList([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  49\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ] != 'a' && t [ i ] [ j ] != 'e' && t [ i ] [ j ] != 'i' && t [ i ] [ j ] != 'o' && t [ i ] [ j ] != 'u' && t [ i ] [ j ] != 'A' &&\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t [ i ] [ j ] != 'U' && t [ i ] [ j ] != 'O' && t [ i ] [ j ] != 'I' && t [ i ] [ j ] != 'E') {\n          l++\n          }\n        }\n      if (l == n) {\n        k.push(t [ i ])}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ]!= 'a' && t [ i ] [ j ]!= 'e' && t [ i ] [ j ]!= 'i' && t [ i ] [ j ]!= 'o' && t [ i ] [ j ]!= 'u' && t [ i ] [ j ]!= 'A' &&\n       \n          t [ i ] [ j ]!= 'E' && t [ i ] [ j ]!= 'I' && t [ i ] [ j ]!= 'O' && t [ i ] [ j ]!= 'U' ) {\n          l++\n          if (l == n) {\n            k.push(t [ i ])\n          }\n        }\n      }\n      i++\n    }\n  }\n  return k\n}<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n  lis.push(i)\n \n  if (lis.length == n)\n  return lis.reduce((acc, curr, idx) => acc + curr, 0)\n \n  else\n  return lis.reduce((acc, curr, idx) => acc + curr, 0)\n}\n \n \n \n// TESTING\n/*\nvar fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n  lis.push(i)\n \n  if (lis.length == n)\n  return lis.reduce((acc, curr, idx) => acc + curr, 0)\n \n  else\n  return lis.reduce((acc, curr, idx) => acc + curr, 0)\n}\n \nfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n \n \n \n// SOLUTION\nvar fruitDistribution = (s, n) => {\n  const lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n  lis.push(i);\n  if (lis.length == n)\n  return lis.reduce((acc, curr, idx) => acc + curr, 0)\n  else\n  return lis.reduce((acc, curr, idx) => acc + curr, 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * h\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n      for (; d >= 10;) {\n          {\n          n+=d % 10;\n          d =(d - d % 10) / 10;\n          }\n        }\n      \n      if (m > n) {\n        p [ j + 1 ] = p [ k ]\n        p [ k ] = y * p [ k ] + u * p [ k + 1 ]\n        }\n      }\n    }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n};\n \n/*\n  Given two points, the function returns the distance between them.\n  >>> distance(1, 2)\n  1\n  */\nconst distance = (x1, y1, x2, y2) => {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n \n/*\n  Given a point and a length, the function returns the angle between the point and the line of that length.\n  >>> angle(1, 2, 1)\n  0\n  >>> angle(1, 2, 2)\n  Math.PI/2\n  */\nconst angle = (x1, y1, x2, y2) => {\n  const d = distance(x1, y1, x2, y2);\n  return Math.atan2(y2 - y1, x2 - x1);\n};\n \n/*\n  Given two points, the function returns the hypotenuse of the triangle, that is the distance between the two points.\n  >>> hypotenuse(1, 2, 3)\n  Math.sqrt(5)\n  >>> hypotenuse(1, 2, 5)\n  Math.sqrt(25)\n  */\nconst hypotenuse = (x1, y1, x2, y2) => {\n  const s = distance(x1, y1, x2, y2);\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) + Math.pow(s, 2));\n};\n \n/*\n  Given two points, the function returns the sine of the angle between them.\n  >>> sine(1, 2, 3)\n  0\n  >>> sine(1, 2, 5)\n  1\n  */\nconst sine = (x1, y1, x2, y2) => {\n  const a = angle(x1, y1, x2, y2);\n  return Math.sin(a);\n};\n \n/*\n  Given two points, the function returns the cosine of the angle between them.\n  >>> cosine(1, 2, 3)\n  1\n  >>> cosine(1, 2, 5)\n  0\n  */\nconst cosine = (x1, y1, x2, y2) => {\n  const a = angle(x1, y1, x2, y2);\n  return Math.cos(a);\n};\n \n/*\n  Given two points, the function returns the tine of the angle between them.\n  >>> tine(1, 2, 3)\n  0\n  >>> tine(1, 2, 5)\n  -1\n  */\nconst tine = (x1, y1, x2, y2) => {\n  const a = angle(x1, y1, x2, y2);\n  return Math.tan(a);\n};\n \n/*\n  Given a point and a length, the function returns the slope of the line.\n  >>> slope(1, 2, 1)\n  Infinity\n  >>> slope(1, 2, 2)\n  1\n  >>> slope(1, 2, 3)\n  0\n  >>> slope(1, 2, 4)\n  -1\n  */\nconst slope = (x1, y1, x2, y2) => {\n  return (y2 - y1) / (x2 - x1);\n};\n \n/*\n  Given a point and a length, the function returns the y-intercept of the line.\n  >>> y_intercept(1, 2, 1)\n  Infinity\n  >>> y_intercept(1, 2, 2)\n  1\n  >>> y_intercept(1, 2, 3)\n  0\n  >>> y_intercept(1, 2, 4)\n  -1\n  */\nconst y_intercept = (x1, y1, x2, y2) => {\n  return y1 - slope(x1, y1, x2, y2) * x1;\n};\n \n/*\n  Given a point and a length, the function returns the x-intercept of the line.\n  >>> x_intercept(1, 2, 1)\n  -Infinity\n  >>> x_intercept(1, 2, 2)\n  1\n  >>> x_intercept(1, 2, 3)\n  0\n  >>> x_intercept(1, 2, 4)\n  Infinity\n  */\nconst x_intercept = (x1, y1, x2, y2) => {\n  return x1 - slope(x1, y1, x2, y2) * y1;\n};\n \n/*\n  Given two points, the function returns the points that are orthogonal to the line between them.\n  >>> orthogonal(1, 2, 3)\n  [3, 4]\n  >>> orthogonal(1, 2, 5)\n  [5, 6]\n  >>> orthogonal(1, 2, 7)\n  [7, 8]\n  >>> orthogonal(1, 2, 9)\n  [9, 10]\n  */\nconst orthogonal = (x1, y1, x2, y2) => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const r = hypotenuse(x1, y1, x2, y2);\n  const s = slope(x1, y1, x2, y2);\n  let y = y_intercept(x1, y1, x2, y2);\n  let x = x_intercept(x1, y1, x2, y2);\n \n  const x_intercept = x_intercept(x1, y1, x2, y2);\n  const y_intercept = y_intercept(x1, y1, x2, y2);\n  const x = x_intercept;\n  const y = y_intercept;\n \n  for (let i = 0; i < 4; i++) {\n    if (distance(x, y, x_intercept(x + dx, y + dy), y_intercept(x + dx, y + dy)) < r) {\n      return ["}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    running_max = Math.max(running_max, n);\n    result.push(running_max);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n    running_max = (running_max > n)? running_max : n;\n    result.push(running_max);\n  }\n  return result;\n}\n\n// rollingMax(numbers)\n// {\n//   return;\n// }\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n    if (b == \")\") {\n        depth -= 1;\n        if (depth == -1)\n          return false;\n    }\n  }\n  return true;\n}\n\n//endregion<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      game [ i ] = - game [ i ];}\n    i++;}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n        game [ i ] = 0;\n      \n    }\n    i++;\n  }\n  return game;\n}\n\n// function for sum of two numbers\nconst add = (a, b) => {\n  return a + b;\n}\n\n// function for sum of numbers, when given a string\nconst addStr = (a, b) => {\n  let sum = a + b;\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst subStr = (a, b) => {\n  let sum = a - b;\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst multStr = (a, b) => {\n  let sum = a * b;\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst divStr = (a, b) => {\n  let sum = a / b;\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst modStr = (a, b) => {\n  let sum = a % b;\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst powStr = (a, b) => {\n  let sum = a ** b;\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst gcdStr = (a, b) => {\n  let sum = gcd(a, b);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst lcmStr = (a, b) => {\n  let sum = lcm(a, b);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst absStr = (a) => {\n  let sum = abs(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst floorStr = (a) => {\n  let sum = floor(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst ceilStr = (a) => {\n  let sum = ceil(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst roundStr = (a) => {\n  let sum = round(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst sqrtStr = (a) => {\n  let sum = sqrt(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst sqrStr = (a) => {\n  let sum = sqr(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst powInt = (a, b) => {\n  let sum = pow(a, b);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst lnStr = (a) => {\n  let sum = ln(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst log10Str = (a) => {\n  let sum = log10(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst expStr = (a) => {\n  let sum = exp(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst factStr = (n) => {\n  let sum = factorial(n);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst lcmInt = (a, b) => {\n  let sum = lcm(a, b);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst gcdInt = (a, b) => {\n  let sum = gcd(a, b);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst floorInt = (a) => {\n  let sum = floor(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst ceilInt = (a) => {\n  let sum = ceil(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst roundInt = (a) => {\n  let sum = round(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst sqrtInt = (a) => {\n  let sum = sqrt(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst sqrInt = (a) => {\n  let sum = sqr(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst powInt = (a, b) => {\n  let sum = pow(a, b);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst lnInt = (a) => {\n  let sum = ln(a);\n  return sum;\n}\n\n// function for sum of numbers, when given a string\nconst log10Int = (a) => {\n  let sum = log10(a);\n"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s*(s - a)*(s - b)*(s - c));\n}\n\nconsole.log(triangleArea(3, 4, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n    {\n      return true;\n    }\n    i = i + 1;\n  }\n  return false;\n}\n\n//Test\n\nconsole.log(pairsSumToZero([1, 3, 5, 0]));\nconsole.log(pairsSumToZero([1, 3, -2, 1]));\nconsole.log(pairsSumToZero([1, 2, 3, 7]));\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7]));\nconsole.log(pairsSumToZero([1]));<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (dup == 3) {\n          i++; return false}\n        }\n      else {\n        pre = lst [ i ]\n        dup = 1\n        }\n      }\n    i++;}\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n        if (dup == 2) { return false}\n      }\n      pre = lst [ i ]\n    }\n  }\n  return true\n}\n\nconsole.log(isSorted([5,4,3,2,1]))\nconsole.log(isSorted([1,2,3,4,5,6,7]))\nconsole.log(isSorted([1,2,3,4,5,6,7,8]))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (arr [ i ] == 0) {\n        i++; return 0}\n      if (arr [ i ] < 0) {\n        n = - n; s-=2 * arr [ i ]}\n      }\n    i++;}\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n      if (arr [ i ] < 0) {\n       n*=-1\n     } else if (arr [ i ] > 0) {\n      n*=1\n     }\n    \n     i++\n  }\n}\nreturn s * n\n}\n\nconsole.log(prodSigns([1,2,2,4]));\nconsole.log(prodSigns([1,0]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t = t * 10\n      }\n    i++;}\n  return t\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds2 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds3 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds4 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds5 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds6 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds7 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds8 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds9 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds10 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds11 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds12 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds13 =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2\n  while (i < n) {\n     {\n        let k = n - i\n        let j = t + 1\n        while (j <= k) {\n          if (j == 1) {\n            return 0\n          }\n          return j\n        }\n        i = i + 1\n     }\n  }\n}\n\nconst startsOneEnds"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t *= n;\n        }\n      }\n    p++;\n    n--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * n;\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n + 1 * n/2 + 1 * n/3 + 2 * n/4 +...\n  Where n > 0\n  */\nconst specialCatalan =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * n + n/2;\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Harmonic Series is defined as:\n  harmonic_series(n) = 1 / (1 - n)^(1/2)\n  Where n > 0\n  */\nconst harmonicSeries =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * (1 - n) / 2;\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Lucas number is defined as:\n  lucas(n) = (2*n + 1)^2 / (4 * n)\n  Where n > 0\n  */\nconst specialLucas =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * (2 * n + 1) / 4;\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Nth Fibonacci Number is defined as:\n  fibonacci(n) = n + fibonacci(n - 1)\n  Where n > 0\n  */\nconst fibonacci =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p + fibonacci(n - 1);\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Nth Square Root of a Number is defined as:\n  square_root(n) = floor(sqrt(n))\n  Where n > 0\n  */\nconst squareRoot =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * n / (2 * y);\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Pth Primorial is defined as:\n  primorial(n) = n * (n + 1) * (n + 2) * (n + 3) *... * 1\n  Where n > 0\n  */\nconst primorial =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * n;\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Pth Factorial is defined as:\n  factorial(n) = n * (n - 1) * (n - 2) *... * 1\n  Where n > 0\n  */\nconst factorial =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * n;\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Pth Catalan Number is defined as:\n  catalan(n) = n * (3*n - 1) * (2*n - 1) / (n + 1)\n  Where n > 0\n  */\nconst catalan =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n      }\n    \n    p = p * (3 * n - 1) / (n + 1);\n    t = t + p;\n    n--;\n  }\n  \n  return t;\n}\n\n/*The Pth Harmonic Series is defined as:\n  harmonic_series(n) = 1 / (1 - n)^(1/2)\n  Where n > 0\n  */\nconst harmonicSeries =(n) => {\n  let p = 1;\n  let t = 1;\n  \n  while (n > 1) {\n    let y"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n        if (depth == 0) {\n          return max_depth;\n        }\n      }\n    }\n    return 0;\n  }\n  return Array.from(paren_string.split(' '))\n   .map(parseParenGroup)\n   .reduce((a, b) => Math.max(a, b));\n}\n\n/*\n  >>> parseNestedParens('()')\n  [1, 0]\n  >>> parseNestedParens('((()()))')\n  [2, 3]\n  >>> parseNestedParens('((()))')\n  [2, 3]\n  >>> parseNestedParens('((()))')\n  [2, 3]\n  >>> parseNestedParens('((()))')\n  [2, 3]\n  >>> parseNestedParens('((()()))')\n  [3, 4]\n  >>> parseNestedParens('()((()))')\n  [3, 4]\n  >>> parseNestedParens('()((())')\n  [3, 4]\n  >>> parseNestedParens('()()')\n  [1, 0]\n  >>> parseNestedParens('()()')\n  [1, 0]\n  >>> parseNestedParens('()()')\n  [1, 0]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('()((())')\n  [1, 1]\n  >>> parseNestedParens('()()')\n  [1, 0]\n  >>> parseNestedParens('()()')\n  [1, 0]\n  >>> parseNestedParens('()()')\n  [1, 0]\n  >>> parseNestedParens('()')\n  [1, 0]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())')\n  [1, 1]\n  >>> parseNestedParens('()())"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        for (let k = j + 1; k < n; k++) {\n          if ((y [ i ] + y [ j ] + y [ k ]) % 3 == 0) {\n            u++}\n          }\n        }\n      j++;}\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n      let sum = y[i] + y[j] + y[k]\n      if (sum % 3 === 0) {\n        u++;\n      }\n    }\n    }\n  }\n  return u;\n}\n\n//const getMaxTriples = (n) => {\n//  const arr = [ ]\n//  for (let i = 1; i <= n; i++) {\n//    arr.push(i * i - i + 1)\n//  }\n//  let u = 0\n//  for (let i = 0; i < n - 2; i++) {\n//    for (let j = i + 1; j < n - 1; j++) {\n//      let sum = arr[i] + arr[j] + arr[k]\n//      if (sum % 3 === 0) {\n//        u++;\n//      }\n//    }\n//  }\n//  return u\n//}\n\n//const getMaxTriples = (n) => {\n//  let arr = [ ]\n//  for (let i = 1; i <= n; i++) {\n//    arr.push(i * i - i + 1)\n//  }\n//  let u = 0\n//  for (let i = 0; i < n - 2; i++) {\n//    let j = i + 1;\n//    while (j < n - 1) {\n//      let sum = arr[i] + arr[j] + arr[k]\n//      if (sum % 3 === 0) {\n//        u++;\n//      }\n//    }\n//  }\n//  return u\n//}\n\nconst getMaxTriples = (n) => {\n  let arr = [ ]\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      let sum = arr[i] + arr[j] + arr[k]\n      if (sum % 3 === 0) {\n        u++;\n      }\n    }\n  }\n  return u\n}\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    arr.push(arr [ 0 ]);\n    arr.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n        if (arr [ j ] > arr [ j - 1 ]) {\n          j++;\n          }\n        }\n       \n      }\n      if (t) {\n        arr.splice(k, 0, arr[i]);\n        k++;\n      }\n    }\n    \n  }\n  \n  return moveOneBall(arr);\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 4, 5, 1, 2, 6]));\nconsole.log(moveOneBall([3, 4, 5, 1, 2, 6, 7]));\nconsole.log(moveOneBall([3, 4, 5, 1, 2, 6, 7, 8]));\nconsole.log(moveOneBall([3, 4, 5, 1, 2, 6, 7, 8, 9]));\nconsole.log(moveOneBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (div) {\n        res+=sym [ i ]\n        div-=1\n        }\n      i-=1\n      }\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n      if (div > 0) {\n        res = sym [ i ] + res\n      }\n      \n      i--\n     }\n  }\n  return res\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return s.slice( - shift) + s.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n  let arr = s.split('');\n  let n = arr.length;\n  let p = n - shift;\n  let t = arr[p];\n  let s = arr.slice(0, p);\n  arr = s.concat(arr.slice(p + 1));\n  arr.splice(0, 0, t);\n  return arr.join('');\n}\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n", "canonical_solution": "# print('@@this is the line to split##')\n              j--; break;\n              }\n            if (p [ k ] [ l ].charCodeAt() < p [ k + 1 ] [ l ].charCodeAt()) {\n              j--; break;\n              }\n            }\n          }\n        if (f == 1) {\n          let tmp = p [ k ]\n          p [ k ] = p [ k + 1 ]\n          p [ k + 1 ] = tmp\n          }\n        }\n      }\n    j--;}\n  return p\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n            }\n          }\n          if (f == 1) {\n            p.splice(k, 2)\n            j--\n          }\n        }\n      }\n    }\n  }\n  p = p.sort((a, b) => a.length - b.length)\n  return p\n}\n\nconsole.log(sortedListSum([ \"aa\", \"a\", \"aaa\" ]))\nconsole.log(sortedListSum([ \"ab\", \"a\", \"aaa\", \"cd\" ]))\n<|endoftext|>"}
