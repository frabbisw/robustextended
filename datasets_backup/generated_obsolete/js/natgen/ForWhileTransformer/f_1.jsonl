{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    {\n    if (depth == 0) return false;\n    depth-=1;\n    }\n  }\n  return (depth == 0)\n};\n\n/*\n  Function: correctBracketing\n  Returns true if the brackets are a valid pairing.\n  This function is used for checking whether the brackets are balanced\n  by the \">>\" function.\n\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<<<>\")\n  false\n  >>> correctBracketing(\"<<<>\")\n  true\n  >>> correctBracketing(\"<<<>\")\n  false\n  */\nconst isValidPairing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    {\n    if (depth == 0) return false;\n    depth-=1;\n    }\n  }\n  return (depth == 0)\n};\n\n/*\n  Function: validBrackets\n  Returns true if the brackets are balanced by the \">>\" function.\n\n  >>> validBrackets(\"<<<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  >>> validBrackets(\"<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  >>> validBrackets(\"<<<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  >>> validBrackets(\"<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  */\nconst isValidBrackets =(brackets) => {\n  return isValidPairing(brackets);\n};\n\n/*\n  Function: validBrackets\n  Returns true if the brackets are balanced by the \">>\" function.\n\n  >>> validBrackets(\"<<<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  >>> validBrackets(\"<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  >>> validBrackets(\"<<<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  >>> validBrackets(\"<>\")\n  true\n  >>> validBrackets(\"<>\")\n  false\n  */\nconst isValidBrackets =(brackets) => {\n  return isValidPairing(brackets);\n};\n\n/*\n  Function: getCorrectBrackets\n  Returns the brackets that are balanced by the \">>\" function.\n\n  >>> getCorrectBrackets(\"<<<>\")\n  \"<>\".\n  >>> getCorrectBrackets(\"<>\")\n  \"<>\".\n  >>> getCorrectBrackets(\"<>\")\n  \"<>\".\n  >>> getCorrectBrackets(\"<<<>\")\n  \"<>\".\n  >>> getCorrectBrackets(\"<>\")\n  \"<>\".\n  >>> getCorrectBrackets(\"<<<>\")\n  \"<>\".\n  */\nconst getCorrectBrackets = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    {\n    if (depth == 0) return b;\n    depth-=1;\n    }\n  }\n  return \"\";\n};\n\n/*\n  Function: getBrackets\n  Returns the brackets that are balanced by the \">>\" function.\n\n  >>> getBrackets(\"<<<>\")\n  \"<<<>\".\n  >>> getBrackets(\"<>\")\n  \"<>\".\n  >>> getBrackets(\"<>\")\n  \"<>\".\n  >>> getBrackets(\"<<<>\")\n  \"<<<>\".\n  >>> getBrackets(\"<>\")\n  \"<>\".\n  >>> getBrackets(\"<<<>\")\n  \"<<<>\".\n  */\nconst getBrackets = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    {\n    if (depth == 0) return b;\n    depth-=1;\n    }\n  }\n  return \"\";\n};\n\n/*\n  Function: getPairing\n  Returns the brackets that are balanced by the \">>\" function.\n\n  >>> getPairing(\"<<<>\")\n  \"<>\".\n  >>> getPairing(\"<>\")\n  \"<>\".\n  >>> getPairing(\"<>\")\n  \"<>\".\n  >>> getPairing(\"<<<>\")\n  \"<>\".\n  >>> getPairing(\"<>\")\n  \"<>\".\n  >>> getPairing(\"<<<>\")\n  \"<>\".\n  */\nconst getPairing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    {\n    if (depth == 1) return b;\n    depth-=1;\n    }\n  }\n  return \"\";\n};\n\n/*\n  Function: getBrackets\n  Returns the brackets that are balanced by the \">>\" function.\n\n  >>> getBrackets(\"<<<>\")\n  \"<>\".\n  >>> getBrackets(\"<>\")\n  \"<>\".\n  >>> getBrackets(\"<>\")\n  \"<>\".\n  >>> getBrackets(\"<<<>\")\n  \"<>\".\n  >>> getBrackets(\"<>\")\n  \"<>\".\n  >>> getBrackets(\"<<<>\")\n  \"<>\".\n  */\nconst getBrackets = (brackets) => {\n  var depth = 0;\n  for (const b of brackets)"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n}\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement =(l) => {\n  return Math.min(... l);\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == ' ' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        k = 0;\n        t+=s [ i ]\n        }\n      }\n    i++;}\n  if (t != '') {\n    p.push(t);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] =='' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n        else {\n          t += s [ i ];\n          k = 0;\n          }\n        }\n      else {\n        t += s [ i ];\n        k = 0;\n        }\n      }\n    i++;\n    }\n  if (k == 1) {\n    p.push(t);\n    }\n  return p;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n/*\n  Write a function that will take an array of strings and return the sum of all the\n  words. For example:\n  wordsSum([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One,two,three,four,five,six\"\n  */\nconst wordsSum =(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s [ i ].toUpperCase ().match(/\\w+/g)[0];\n    }\n  return sum;\n  }\n\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      x = Math.floor(x / base);\n      }\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n      x = x / base;\n    }\n  }\n  return ret;\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\noddLengthArray = [1, 2, 3, 4, 5, 5, 7]\nevenLengthArray = [4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7]\n\n\n/* Assertions\n  Test cases for assert. Should be no need to alter code below this line.\n  Add asserts to test your functions.\n  a = Assertion(myFunction,'some message')\n  a.equal(1, 2, 'another message')\n  a.notEqual(1, 1, 'a different message')\n  a.deepEqual([1, 2, 3], [1, 2, 3], 'a third message')\n  a.notDeepEqual([1, 2, 3], [1, 2, 2], 'a different message')\n  a.ok(i > 3, 'that was ok')\n  a.notOk(i < 3, 'that was not ok')\n  a.strictEqual(1, 1, 'this is a message')\n  a.notStrictEqual(0, -0, 'this is a message')\n*/\n\nassert = {\n  equal: (a, b, msg) => {\n    assertEqual(a, b, msg)\n  },\n  notEqual: (a, b, msg) => {\n    assertNotEqual(a, b, msg)\n  },\n  deepEqual: (a, b, msg) => {\n    assertDeepEqual(a, b, msg)\n  },\n  notDeepEqual: (a, b, msg) => {\n    assertNotDeepEqual(a, b, msg)\n  },\n  ok: (a, msg) => {\n    assertOk(a, msg)\n  },\n  notOk: (a, msg) => {\n    assertNotOk(a, msg)\n  },\n  strictEqual: (a, b, msg) => {\n    assertStrictEqual(a, b, msg)\n  },\n  notStrictEqual: (a, b, msg) => {\n    assertNotStrictEqual(a, b, msg)\n  }\n}\n\n// __________________________________________\n// Uncomment this line to run the tests\n//    test.run(expect);\n// If you are working on your own copy of test.js, uncomment this line\n//    test.run(expect, { verbose: true });\n\n// __________________________________________\n// Uncomment this line to check your code against the current ES6 draft\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with node.js (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with command line (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with browser (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with browser (Chrome)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with browser (Firefox)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with browser (Safari)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with browser (Edge)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with rhino (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with rhino (Rhino)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with phantomjs (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with mocha (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with commonjs (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with commonjs (CommonJS)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with amd (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with amd (AMD)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with grunt (Node.js)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with grunt (Grunt)\n//    test.skip('Passes', () => {});\n\n// __________________________________________\n// Test with grunt (Grunt)\n//    test.skip('Passes', () => {});\n\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length != 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((t [ 0 ] == 1 || t [ 0 ] == 3 || t [ 0 ] == 5 || t [ 0 ] == 7 || t [ 0 ] == 8 || t [ 0 ] == 10 || t [ 0 ] == 12) && t [ 1 ] > 31) {\n    return false}\n  if ((t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) && t [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length!= 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n  let n = new Date()\n  let d = new Date(t [ 0 ], t [ 1 ], t [ 2 ])\n  return n.getTime() == d.getTime()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Below zero, find first and last index in operations\n  \n  >>> belowZero([-2, -3, 4, 1, -5, 6, 7])\n  {first: 3, last: 5}\n  >>> belowZero([-2, -3, 4, 1, -5, 6, 7, -8])\n  {first: 3, last: 5}\n  >>> belowZero([-2, -3, 4, 1, -5, 6, 7, -8, -9])\n  {first: 3, last: 6}\n  \n  \n  \n  >>> belowZero([-2, -3, 4, 1, -5, 6, 7, -8, -9])\n  {first: 3, last: 6}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ num ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n    }\n  }\n  var result = [];\n  for (const num of numbers) {\n    if (dict[ num ]>1) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; !isPalindrome(string.slice(beginning_of_suffix));) {\n    beginning_of_suffix+=1;\n    }\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  for (var i = 0; i < string.length; i++) {\n    var suffix = string.slice(i);\n    if (isPalindrome(suffix)) {\n      beginning_of_suffix = i;\n    }\n  }\n  \n  return string.slice(0, beginning_of_suffix) + string.slice(beginning_of_suffix).split('').reverse().join('');\n}\n\n/* Testing */\nconsole.log(makePalindrome('cata'));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    \n    }\n  if (n > 1)\n  fact.push(n);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n      }\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      N =(N - N % 10) / 10\n      }\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n      N = N / 10\n     }\n  }\n  \n  return t\n}\n\n/*\n  Given a string containing digits, return the total of the digits in the number.\n  \n  Example\n      For input = \"1234\", the output should be \"6\".\n      For input = \"3456\", the output should be \"15\".\n      For input = \"0\", the output should be \"0\".\n  \n  Constraints:\n      1 ≤ string.length ≤ 100.\n  Input Format\n      The first line contains an integer T, number of test cases.\n      The second line contains a string N consisting of digits.\n  Output Format\n      For each test case, output the total sum of digits in N.\n  \n  Variables:\n      @input string\n          Constraints:\n              1 ≤ string.length ≤ 100.\n  \n  */\nconst calc = (input) => {\n  let total = 0\n  \n  for (let i = 0; i < input.length; i++) {\n    total += parseInt(input[i])\n  }\n  \n  return total\n}\n\n/*\n  Given two strings, return their sum.\n  \n  Example\n      For input = \"abc\", the output should be \"ab\".\n      For input = \"aaa\", the output should be \"aaa\".\n      For input = \"abc\", the output should be \"abc\".\n  \n  Constraints:\n      1 ≤ string1.length ≤ string2.length ≤ 100.\n  Input Format\n      The first line contains an integer T, number of test cases.\n      The second line contains two strings, string1 and string2, consisting of lowercase letters.\n  Output Format\n      For each test case, output the sum of the two strings.\n  \n  Variables:\n      @input1 string\n          Constraints:\n              1 ≤ string1.length ≤ string2.length ≤ 100.\n  \n  */\nconst add = (input1, input2) => {\n  let result = ''\n  \n  for (let i = 0; i < input1.length; i++) {\n    result += input1[i]\n  }\n  \n  for (let i = 0; i < input2.length; i++) {\n    result += input2[i]\n  }\n  \n  return result\n}\n\n/*\n  Given a string, find out if it can be partitioned into two non-empty substrings without repeating the char.\n  \n  Example\n      For input = \"abc\", the output should be \"abc\".\n      For input = \"aaab\", the output should be \"aab\".\n      For input = \"aaabc\", the output should be \"aaabc\".\n      For input = \"aaabc\", the output should be \"aaabc\".\n  \n  Constraints:\n      1 ≤ string.length ≤ 100.\n  Input Format\n      The first line contains an integer T, number of test cases.\n      The second line contains a string S, consisting of lowercase letters.\n  Output Format\n      For each test case, output a boolean value. If the string can be partitioned into two non-empty substrings without repeating the char, output \"True\", else output \"False\".\n  \n  Variables:\n      @input string\n          Constraints:\n              1 ≤ string.length ≤ 100.\n  \n  */\nconst partition = (input) => {\n  let result = []\n  let arr = []\n  let i = 0\n  let j = 0\n  \n  while (i < input.length) {\n    arr.push(input[i])\n    i++\n  }\n  \n  while (j < arr.length) {\n    result.push(arr[j])\n    j++\n  }\n  \n  let repeat = true\n  let x = 1\n  \n  for (let i = 0; i < result.length; i++) {\n    for (let j = i + 1; j < result.length; j++) {\n      if (result[i] == result[j]) {\n        repeat = false\n      }\n    }\n  }\n  \n  return repeat\n}\n\n/*\n  Given a string, count how many different permutation of the string can be made.\n  \n  Example\n      For input = \"abc\", the output should be \"abc\".\n      For input = \"aaab\", the output should be \"aab\".\n      For input = \"aaabc\", the output should be \"abac\".\n      For input = \"aaabc\", the output should be \"abac\".\n  \n  Constraints:\n      1 ≤ string.length ≤ 100.\n  Input Format\n      The first line contains an integer T, number of test cases.\n      The second line contains a string S, consisting of lowercase letters.\n  Output Format\n      For each test case, output the number of different permutation of the string.\n  \n  Variables:\n      @input string\n          Constraints:\n              1 ≤ string.length ≤ 100.\n  \n  */\nconst permutation = (input) => {\n  let count = 1\n  let total = 0\n  \n  for (let i = 0; i < input.length; i++) {\n    count *= (input.length - i)\n  }\n  \n  for (let i = 0; i < count; i++) {\n    let permutation = ''\n    let x = i\n    \n    while (x < input.length) {\n      permutation += input[x]\n      x++\n    }\n    \n    total += 1\n  }\n  \n  return total\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  \n  Example\n      For input = \"abc\", the output should be \"3\".\n      For input = \"aaab\", the output should be \"3\".\n  \n  Constraints:\n      1 ≤ string.length ≤ 100.\n  Input Format\n      The first line contains an integer T, number of test"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l [ Math.floor(len / 2) ];\n  else\n  return(l [ len / 2 - 1 ] + l [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n    return l[Math.floor(len / 2)];\n  else\n    return (l[Math.floor(len / 2 - 1)] + l[Math.floor(len / 2)]) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ret =(2 * ret) % p;\n  return ret;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n   if (i % 2 === 0) {\n    ret = (ret * p) % n;\n   }\n   i = i + 1;\n  }\n  return ret;\n};\n\n/* Return the greatest common divisor (GCD) of two integers.\n  >>> gcd(0, 5)\n  5\n  >>> gcd(8, 4)\n  4\n  >>> gcd(9, 5)\n  1\n  >>> gcd(5, 5)\n  5\n  >>> gcd(5, 5)\n  5\n  >>> gcd(9, 5)\n  1\n  */\nconst gcd =(a, b) => {\n  var ret = b;\n  while (a!= 0) {\n    ret = a;\n    a = b % a;\n    b = ret;\n  }\n  return ret;\n};\n\n/* Return the modulo of x and y, that is, x - y * floor(x/y) (mod y).\n  >>> mod(1, 2)\n  1\n  >>> mod(1, 2)\n  1\n  >>> mod(1, 2)\n  1\n  >>> mod(4, 2)\n  0\n  >>> mod(3, 5)\n  3\n  >>> mod(9, 5)\n  1\n  >>> mod(1, -3)\n  4\n  >>> mod(1, -3)\n  4\n  >>> mod(1, -3)\n  4\n  >>> mod(9, -3)\n  -1\n  >>> mod(0, 0)\n  NaN\n  >>> mod(0, -1)\n  NaN\n  */\nconst mod =(x, y) => {\n  return (x - (x / y) * y) % y;\n};\n\n/* Return the largest integer that is less than or equal to x.\n  >>> max(1, 2)\n  2\n  >>> max(2, 1)\n  2\n  >>> max(3, 2)\n  3\n  >>> max(0, 2)\n  0\n  >>> max(2, 0)\n  2\n  >>> max(2, -1)\n  2\n  >>> max(2, -2)\n  -1\n  >>> max(1, 1)\n  1\n  >>> max(1, 1)\n  1\n  >>> max(1, -1)\n  -1\n  >>> max(0, 1)\n  0\n  >>> max(0, -1)\n  -1\n  >>> max(0, 0)\n  0\n  >>> max(0, 0)\n  0\n  >>> max(1, -1)\n  -1\n  */\nconst max =(a, b) => {\n  if (a > b) {\n    return a;\n  }\n  else {\n    return b;\n  }\n};\n\n/* Return the smallest integer that is greater than or equal to x.\n  >>> min(1, 2)\n  1\n  >>> min(2, 1)\n  1\n  >>> min(3, 2)\n  2\n  >>> min(0, 2)\n  2\n  >>> min(2, 0)\n  0\n  >>> min(2, -1)\n  -1\n  >>> min(1, 1)\n  1\n  >>> min(1, -1)\n  -1\n  >>> min(0, 1)\n  1\n  >>> min(0, -1)\n  -1\n  >>> min(0, 0)\n  0\n  >>> min(0, 0)\n  0\n  >>> min(1, -1)\n  -1\n  */\nconst min =(a, b) => {\n  if (a < b) {\n    return a;\n  }\n  else {\n    return b;\n  }\n};\n\n/* Return the floor of x, that is, x - x % y.\n  >>> floor(1, 2)\n  1\n  >>> floor(2, 1)\n  2\n  >>> floor(3, 2)\n  2\n  >>> floor(0, 2)\n  0\n  >>> floor(2, 0)\n  2\n  >>> floor(2, -1)\n  -1\n  >>> floor(1, 1)\n  1\n  >>> floor(1, -1)\n  -1\n  >>> floor(0, 1)\n  0\n  >>> floor(0, -1)\n  -1\n  >>> floor(0, 0)\n  0\n  >>> floor(0, 0)\n  0\n  */\nconst floor =(x, y) => {\n  return x - (x % y);\n};\n\n/* Return the ceiling of x, that is, x + x % y.\n  >>> ceil(1, 2)\n  2\n  >>> ceil(2, 1)\n  3\n  >>> ceil(3, 2)\n  3\n  >>> ceil(0, 2)\n  2\n  >>> ceil(2, 0)\n  2\n  >>> ceil(2, -1)\n  -1\n  >>> ceil(1, 1)\n  2\n  >>> ceil(1, -1)\n  -1\n  >>> ceil(0, 1)\n  1\n  >>> ceil(0, -1)\n  -1\n  >>> ceil(0, 0)\n  0\n  >>> ceil(0, 0)\n  0\n  */\nconst ceil =(x, y) => {\n  return x + (x % y);\n};\n\nmodule.exports = {\n  gcd,\n  mod,\n  max,\n  min,\n  floor,\n  ceil\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n", "canonical_solution": "# print('@@this is the line to split##')\n                  else {\n                        o++}\n                  num =(num - num % 10) / 10\n                  }\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n                  num = num / 2\n             }\n      }\n      return (e, o)\n}\n\n//console.log(evenOddCount(123))\n//console.log(evenOddCount(-12))\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n    begin = center;\n    else\n    end = center;\n    }\n  return begin;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) == 0) {\n      return center;\n    } else {\n      if (poly(xs, begin) * poly(xs, center) < 0) {\n        end = center;\n      } else {\n        begin = center;\n      }\n    }\n  }\n  return begin;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x;\n  }, 0);\n}\n\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly12 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly13 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly14 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly15 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly16 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly17 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\nconst poly18 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n    }\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n    {\n      result.push(string.slice(i));\n    }\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSubstrings =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n    {\n      result.push(string.slice(i));\n    }\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Return list of all substring that contain a char from the input string\n  >>> allSubstrings('abc')\n  ['ab', 'ac', 'bc']\n  */\nconst allSubstringsContainingChar =(string, char) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n    {\n      if (string[i] === char) {\n        result.push(string.slice(i));\n      }\n    }\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Return list of all substrings that contain a char from the input string\n  >>> allSubstringsContainingChar('abc', 'b')\n  ['ab', 'ac']\n  */\nconst allSubstringsContainingChar =(string, char) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n    {\n      if (string[i] === char) {\n        result.push(string.slice(i));\n      }\n    }\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Return list of all substrings that do not contain a char from the input string\n  >>> allSubstringsNotContainingChar('abc', 'b')\n  ['ac', 'bc']\n  */\nconst allSubstringsNotContainingChar =(string, char) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n    {\n      if (string[i]!== char) {\n        result.push(string.slice(i));\n      }\n    }\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Return list of all substrings that do not contain a char from the input string\n  >>> allSubstringsNotContainingChar('abc', 'b')\n  ['ac', 'bc']\n  */\nconst allSubstringsNotContainingChar =(string, char) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n    {\n      if (string[i]!== char) {\n        result.push(string.slice(i));\n      }\n    }\n    i++;\n  }\n  return result;\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allSubstrings,\n  allSubstringsContainingChar,\n  allSubstringsNotContainingChar\n};<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n  return p\n}\n\nconsole.log(getOddCollatz(5))\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n}\n\n\nconsole.log(carRaceCollision(3));\nconsole.log(carRaceCollision(4));\nconsole.log(carRaceCollision(5));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n", "canonical_solution": "# print('@@this is the line to split##')\n                    }\n                }\n            j--;}\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n                }\n                j--\n            }\n        }\n    }\n    return t.sort((a, b) => {\n        return a[0] - b[0]\n    }).reverse()\n}\n\nconst getRow2 =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n                }\n                j--\n            }\n        }\n    }\n    return t\n}\n\nconst getRow3 =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n                }\n                j--\n            }\n        }\n    }\n    return t.sort((a, b) => {\n        return a[1] - b[1]\n    }).reverse()\n}\n\n\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1))\nconsole.log(getRow([], 1))\nconsole.log(getRow([[], [1], [1, 2, 3]], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n    }\n    i++;\n    }\n  return p;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(n + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n  let a = (n + m) % 2\n  if (a) {\n    return k - 1\n  } else {\n    return k\n  }\n}\n\nmodule.exports = {\n  roundedAvg\n}<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(d).sort(function(a, b) {\n    return - d [ a ] + d [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = d [ s [ 0 ] ]\n  let l = {\n    }\n  let ss = 0;\n  while (ss < s.length) {\n     {\n      if (d [ s [ ss ] ] == g) {\n        l [ s [ ss ] ] = d [ s [ ss ] ]\n        }\n      }\n    ss++;}\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d}\n\n/*\n  Given a string, return a list of all the permutations of the string.\n  \n  Example:\n  permute('abc') == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permute = (test) => {\n  let t = test.split('')\n  let result = []\n  let d = {\n    }\n  for (m in t) {\n    if (t [ m ] in d) {\n      let d1 = d [ t [ m ] ]\n      let a = t [ m ]\n      let s = [ ]\n      for (l in t) {\n        if (l!= t [ m ]) {\n          s.push(l)\n          }\n        }\n      let l = s.join('')\n      let p = d [ a ]\n      let q = d [ l ]\n      p = p + q\n      result.push(p)\n      d [ a ] = d [ a ] + 1\n      d [ l ] = d [ l ] + 1\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n  return result}\n\n/*\n  Given a string, return the frequency of the most common letter in the string.\n  \n  Example:\n  frequency('ab') == 1\n  frequency('abc') == 2\n  frequency('abcd') == 3\n  frequency('aabc') == 4\n  frequency('aaaa') == 5\n  frequency('aaa') == 6\n  */\nconst frequency = (test) => {\n  let d = {\n    }\n  let t = test.split('')\n  let m = 'a'\n  let f = 1\n  for (l in t) {\n    if (t [ l ] in d) {\n      d [ t [ l ] ]++\n      }\n    else {\n      d [ t [ l ] ] = 1\n      }\n    if (d [ t [ l ] ] > f) {\n      f = d [ t [ l ] ]\n      m = t [ l ]\n      }\n    }\n  return f\n  }\n\n/*\n  Given a string, return the frequency of each letter in the string.\n  \n  Example:\n  frequency('abcd') == {'a': 2, 'b': 1, 'c': 1, 'd': 2}\n  */\nconst letter_frequency = (test) => {\n  let d = {\n    }\n  let t = test.split('')\n  for (l in t) {\n    if (t [ l ] in d) {\n      d [ t [ l ] ]++\n      }\n    else {\n      d [ t [ l ] ] = 1\n      }\n    }\n  return d}\n\n/*\n  Given two strings, return the longest common prefix of the two strings.\n  \n  Example:\n  longest_common_prefix('abc', 'abcd') == 'ab'\n  longest_common_prefix('abcd', 'abc') == 'ab'\n  longest_common_prefix('abcd', 'ab') == 'ab'\n  longest_common_prefix('abcd', 'abcd') == 'abcd'\n  longest_common_prefix('ab', 'abcd') == ''\n  */\nconst longest_common_prefix = (a, b) => {\n  let t = a.split('')\n  let u = b.split('')\n  let i = 0\n  let j = 0\n  while (i < t.length && j < u.length) {\n    if (t [ i ] == u [ j ]) {\n      i++\n      j++\n      }\n    else {\n      break\n      }\n    }\n  return t.slice(0, i)\n  }\n\n/*\n  Given two strings, return the longest common suffix of the two strings.\n  \n  Example:\n  longest_common_suffix('abc', 'abcd') == 'cd'\n  longest_common_suffix('abcd', 'abc') == 'cd'\n  longest_common_suffix('abcd', 'ab') == 'ab'\n  longest_common_suffix('abcd', 'abcd') == 'abcd'\n  longest_common_suffix('ab', 'abcd') == ''\n  */\nconst longest_common_suffix = (a, b) => {\n  let t = a.split('')\n  let u = b.split('')\n  let i = 0\n  let j = 0\n  while (i < t.length && j < u.length) {\n    if (t [ t.length - 1 - i ] == u [ u.length - 1 - j ]) {\n      i++\n      j++\n      }\n    else {\n      break\n      }\n    }\n  return t.slice(t.length - i, t.length)\n  }\n\n/*\n  Given two strings, return the longest common substring of the two strings.\n  \n  Example:\n  longest_common_substring('abc', 'abcd') == 'abc'\n  longest_common_substring('abcd', 'abcd') == 'abcd'\n  longest_common_substring('abcd', 'ab') == 'ab'\n  longest_common_substring('abcd', 'abcd') == 'abcd'\n  longest_common_sub"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n      if (p < 52) {\n        p+=26\n      }\n      t += String.fromCharCode(p);\n      i++\n    }\n  }\n  return t\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('jg') returns 'lm'\n  decrypt('ej') returns 'asdfghjkl'\n  decrypt('gj') returns 'et'\n  decrypt('jk') returns 'ix'\n  */\nconst decrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() - 4\n      if (p > 122) {\n        p-=26}\n     \n      if (p < 52) {\n        p+=26\n      }\n      t += String.fromCharCode(p);\n      i++\n    }\n  }\n  return t\n}\n\n/*Create a function encrypt_to_decrypt that takes a string as an argument and\n  returns a string that is decrypted with the alphabet that is rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt_to_decrypt('jg') returns 'lm'\n  encrypt_to_decrypt('ej') returns 'asdfghjkl'\n  encrypt_to_decrypt('gj') returns 'et'\n  encrypt_to_decrypt('jk') returns 'ix'\n  */\nconst encrypt_to_decrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n      if (p < 52) {\n        p+=26\n      }\n      t += String.fromCharCode(p);\n      i++\n    }\n  }\n  return t\n}\n\n//tests\nconsole.log(encrypt('hi'));\nconsole.log(decrypt('lm'));\nconsole.log(encrypt_to_decrypt('gj'));\nconsole.log(decrypt('gj'));<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((y >= 65 && y <= 90) ||(y >= 97 && y <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n  } else {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) ||\n    (y >= 97 && y <= 122) ||(y >= 97 && y <= 122) ||\n    (y >= 97 && y <= 122) ||(y >= 97 && y <= 122)) {\n      return true}\n  }\n  return false\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with any non-alphabetic characters\n  replaced with spaces.\n  Examples:\n  fixAlphabetChars(\"hello world\") ➞ \"hello world\"\n  fixAlphabetChars(\"hello world\") ➞ \"hello world\"\n  fixAlphabetChars(\"hello world\") ➞ \"hello world\"\n  */\nconst fixAlphabetChars =(txt) => {\n  let x = txt.replace(/[^A-Za-z]+/g, \" \")\n  return x\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with any alphabetical characters\n  replaced with underscores.\n  Examples:\n  fixAlphabetChars(\"hello world\") ➞ \"hello_world\"\n  fixAlphabetChars(\"hello world\") ➞ \"hello_world\"\n  fixAlphabetChars(\"hello world\") ➞ \"hello_world\"\n  */\nconst fixUnderScoreChars =(txt) => {\n  let x = txt.replace(/[A-Za-z]+/g, \"_\")\n  return x\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with any non-alphabetic characters\n  replaced with spaces.\n  Examples:\n  replaceChars(\"hello world\", \"hello\", \"goodbye\") ➞ \"goodbye world\"\n  replaceChars(\"hello world\", \"hello\", \"goodbye\") ➞ \"goodbye world\"\n  replaceChars(\"hello world\", \"hello\", \"goodbye\") ➞ \"goodbye world\"\n  */\nconst replaceChars =(txt, old, newVal) => {\n  return txt.replace(old, newVal)\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with all spaces replaced with\n  newline characters.\n  Examples:\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  */\nconst replaceSpaces =(txt, newLine) => {\n  return txt.replace(/ /g, newLine)\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with any newline characters replaced\n  with spaces.\n  Examples:\n  replaceChars(\"hello\\nworld\", \"\\n\", \" \") ➞ \"hello world\"\n  replaceChars(\"hello\\nworld\", \"\\n\", \" \") ➞ \"hello world\"\n  replaceChars(\"hello\\nworld\", \"\\n\", \" \") ➞ \"hello world\"\n  */\nconst replaceNewLines =(txt, newLine) => {\n  return txt.replace(/\\n/g, newLine)\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with all spaces replaced with\n  newline characters.\n  Examples:\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  */\nconst replaceAllSpaces =(txt, newLine) => {\n  return txt.replace(/\\s+/g, newLine)\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with spaces replaced by\n  newline characters.\n  Examples:\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  replaceChars(\"hello world\", \" \", \"\\n\") ➞ \"hello\\nworld\"\n  */\nconst replaceAllNewLines =(txt, newLine) => {\n  return txt.replace(/\\s+/g, newLine)\n}\n\n/* Create a function that takes a string and returns a\n  copy of the string with any newline characters replaced\n  with spaces.\n  Examples:\n  replaceChars(\"hello\\nworld\", \"\\n\", \" \") ➞ \"hello world\"\n  replaceChars(\"hello\\nworld\", \"\\n\", \" \") ➞ \"hello world\"\n  replaceChars(\"hello\\nworld\", \"\\n\", \" \") ➞ \"hello world\"\n  */\nconst replaceAllNewLinesWithSpaces =(txt, newLine) => {\n  return txt.replace(/\\s+/g, newLine)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n       !(word [ i ] != 'a' && word [ i ] != 'e' && word [ i ] != 'i' && word [ i ] != 'o' && word [ i ] != 'u' && word [ i ] != 'A' &&\n      word [ i ] != 'U' && word [ i ] != 'O' && word [ i ] != 'I' && word [ i ] != 'E')\n       &&\n      (word [ i + 1 ] != 'a' && word [ i + 1 ] != 'e' && word [ i + 1 ] != 'i' && word [ i + 1 ] != 'o' && word [ i + 1 ] != 'u' && word [ i + 1 ] != 'A' &&\n      word [ i + 1 ] != 'U' && word [ i + 1 ] != 'O' && word [ i + 1 ] != 'I' && word [ i + 1 ] != 'E')\n       &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      (word [ i - 1 ] != 'a' && word [ i - 1 ] != 'e' && word [ i - 1 ] != 'i' && word [ i - 1 ] != 'o' && word [ i - 1 ] != 'u' && word [ i - 1 ] != 'A' &&\n      word [ i - 1 ] != 'U' && word [ i - 1 ] != 'O' && word [ i - 1 ] != 'I' && word [ i - 1 ] != 'E')\n      ) {\n        i--; return word [ i ]\n        }\n      }\n    i--;}\n  return ' '}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n      !(word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n      word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n       &&\n      (word [ i + 1 ]!= 'a' && word [ i + 1 ]!= 'e' && word [ i + 1 ]!= 'i' && word [ i + 1 ]!= 'o' && word [ i + 1 ]!= 'u' && word [ i + 1 ]!= 'A' &&\n      word [ i + 1 ]!= 'U' && word [ i + 1 ]!= 'O' && word [ i + 1 ]!= 'I' && word [ i + 1 ]!= 'E')\n       &&\n     \n      (word [ i - 1 ]!= 'a' && word [ i - 1 ]!= 'e' && word [ i - 1 ]!= 'i' && word [ i - 1 ]!= 'o' && word [ i - 1 ]!= 'u' && word [ i - 1 ]!= 'A' &&\n      word [ i - 1 ]!= 'U' && word [ i - 1 ]!= 'O' && word [ i - 1 ]!= 'I' && word [ i - 1 ]!= 'E')\n      ) {\n        return word [ i ];\n      }\n    }\n    i--;\n  }\n  return '';\n}\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n    }\n    i++\n  }\n  return p\n}\n\n// const countUpper =(s) => {\n//   let p = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n//       p++\n//     }\n//   }\n//   return p\n// }\n\n// const countUpper =(s) => {\n//   let p = 0\n//   for (let i = 0; i < s.length; i+=2) {\n//     if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n//       p++\n//     }\n//   }\n//   return p\n// }\n\n\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n  }\n  return p\n}\n\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 1; i < s.length; i+=2) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n  }\n  return p\n}\n\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i+=2) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n  }\n  return p\n}\n\n\n// const countUpper =(s) => {\n//   let p = 0\n//   let i = 0\n//   while (i < s.length) {\n//     if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n//       p++\n//     }\n//     i++\n//   }\n//   return p\n// }\n\nconst countUpper =(s) => {\n  let p = 0\n  let i = 1\n  while (i < s.length) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n    i++\n  }\n  return p\n}\n\nconst countUpper =(s) => {\n  let p = 0\n  let i = 2\n  while (i < s.length) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n    i++\n  }\n  return p\n}\n\n// const countUpper =(s) => {\n//   let p = 0\n//   for (let i = 0; i < s.length; i+=3) {\n//     if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n//       p++\n//     }\n//   }\n//   return p\n// }\n\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i+=3) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n  }\n  return p\n}\n\n// const countUpper =(s) => {\n//   let p = 0\n//   for (let i = 1; i < s.length; i+=3) {\n//     if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n//       p++\n//     }\n//   }\n//   return p\n// }\n\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i+=4) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n  }\n  return p\n}\n\n// const countUpper =(s) => {\n//   let p = 0\n//   for (let i = 1; i < s.length; i+=4) {\n//     if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (s < min) {\n          min = s}\n        }\n      }\n    i++;}\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n        }\n        if (s < min) {\n          min = s;\n        }\n      }\n    }\n    i++;\n  }\n  return min;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n}\n\n/*\n  * Subtract two numbers x and y\n  *\n  * @param x\n  * @param y\n  * @returns\n  * @returns {number}\n  * @example\n  *  >>> subtract(2, 3)\n  *  1\n  * @example\n  *  >>> subtract(5, 7)\n  *  4\n  * @example\n  *  >>> subtract(2, 5)\n  *  3\n  * @example\n  *  >>> subtract(5, 5)\n  *  0\n  *\n  */\nconst subtract =(x, y) => {\n  return x - y;\n}\n\n/*\n  * Divide two numbers x and y\n  *\n  * @param x\n  * @param y\n  * @returns\n  * @returns {number}\n  * @example\n  *  >>> divide(10, 3)\n  *  3\n  * @example\n  *  >>> divide(3, 10)\n  *  3\n  * @example\n  *  >>> divide(5, 5)\n  *  1\n  * @example\n  *  >>> divide(2, 5)\n  *  0\n  *\n  */\nconst divide =(x, y) => {\n  return x / y;\n}\n\n/*\n  * Modulo two numbers x and y\n  *\n  * @param x\n  * @param y\n  * @returns\n  * @returns {number}\n  * @example\n  *  >>> modulo(10, 3)\n  *  1\n  * @example\n  *  >>> modulo(3, 10)\n  *  3\n  * @example\n  *  >>> modulo(5, 5)\n  *  0\n  *\n  */\nconst modulo =(x, y) => {\n  return x % y;\n}\n\n/*\n  * Check if two numbers are equal\n  *\n  * @param x\n  * @param y\n  * @returns\n  * @returns {boolean}\n  * @example\n  *  >>> equals(3, 3)\n  *  true\n  * @example\n  *  >>> equals(3, 4)\n  *  false\n  * @example\n  *  >>> equals(3, 3.5)\n  *  false\n  *\n  */\nconst equals =(x, y) => {\n  return x == y;\n}\n\n/*\n  * Check if two numbers are not equal\n  *\n  * @param x\n  * @param y\n  * @returns\n  * @returns {boolean}\n  * @example\n  *  >>> notEquals(3, 3)\n  *  false\n  * @example\n  *  >>> notEquals(3, 4)\n  *  true\n  * @example\n  *  >>> notEquals(3, 3.5)\n  *  true\n  *\n  */\nconst notEquals =(x, y) => {\n  return x!= y;\n}\n\n/*\n  * Check if a number is a prime number\n  *\n  * @param n\n  * @returns\n  * @returns {boolean}\n  * @example\n  *  >>> isPrime(6)\n  *  true\n  * @example\n  *  >>> isPrime(7)\n  *  false\n  * @example\n  *  >>> isPrime(8)\n  *  false\n  * @example\n  *  >>> isPrime(13)\n  *  true\n  *\n  */\nconst isPrime =(n) => {\n  let prime = true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = false;\n    }\n  }\n  return prime;\n}\n\n/*\n  * Check if a number is a palindrome\n  *\n  * @param n\n  * @returns\n  * @returns {boolean}\n  * @example\n  *  >>> isPalindrome(123)\n  *  true\n  * @example\n  *  >>> isPalindrome(1221)\n  *  true\n  * @example\n  *  >>> isPalindrome(1221)\n  *  false\n  * @example\n  *  >>> isPalindrome(1212)\n  *  true\n  *\n  */\nconst isPalindrome =(n) => {\n  let str = \"\" + n;\n  for (let i = 0; i < str.length / 2; i++) {\n    if (str[i]!== str[str.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  * Return a string representation of the number\n  *\n  * @param n\n  * @returns\n  * @returns {string}\n  * @example\n  *  >>> toString(10)\n  *  '10'\n  * @example\n  *  >>> toString(12)\n  *  '12'\n  * @example\n  *  >>> toString(12.5)\n  *  '12.5'\n  *\n  */\nconst toString =(n) => {\n  return \"\" + n;\n}\n\n/*\n  * Print a formatted string of the number\n  *\n  * @param n\n  * @param d\n  * @returns\n  * @returns {string}\n  * @example\n  *  >>> format(3, 3)\n  *  '3.000'\n  * @example\n  *  >>> format(3, 2)\n  *  '3.00'\n  * @example\n  *  >>> format(12.5, 2)\n  *  '12.50'\n  * @example\n  *  >>> format(12.5, 2, 1)\n  *  '12.5'\n  *\n  */\nconst format =(n, d) => {\n  let output = \"\" + n;\n  if (d > 0) {\n    output += \".\";\n    output += \"000\";\n    output = output.substr(0, d);\n  }\n  return output;\n}\n\nexport"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(x =>(x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(x =>(x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n \n .join('');\n}\n\n/* \n  Flip the string and return the reversed string.\n  \n  >>> flipCase('Hello')\n  'OLLEH'\n  */\nconst reverse =(string) => {\n  return flipCase(string)\n .split('')\n .reverse()\n .join('');\n}\n\n/*\n  Given a string, return a string that has the first letter uppercased.\n  \n  >>> upperCase('hELLO')\n  'HELLO'\n  */\nconst upperCase =(string) => {\n  return flipCase(string)\n .substr(0, 1)\n .toUpperCase()\n .substr(1);\n}\n\n/*\n  Given a string, return a string that has the first letter lowercased.\n  \n  >>> lowerCase('HELLO')\n  'hELLO'\n  */\nconst lowerCase =(string) => {\n  return flipCase(string)\n .substr(0, 1)\n .toLowerCase()\n .substr(1);\n}\n\nmodule.exports = {\n  flipCase,\n  upperCase,\n  lowerCase,\n  reverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - i - 1 ])\n    }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index [ k ] < closing_bracket_index [ i ]) {\n      cnt+=1;\n      i+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n    if (string [closing_bracket_index1 [i]] == ']') {\n      closing_bracket_index.push(closing_bracket_index1 [i])\n      }\n    }\n    \n    for (let i = 0; i < opening_bracket_index.length; i++) {\n      \n      if (string [opening_bracket_index [i]] == '[' && string [closing_bracket_index [i]] == ']') {\n        return true\n        }\n      }\n    return false\n    }\n    \n  }\n    \n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = '' let i = 0;\n  while (i < p.length) {\n     {\n      u+=p [ p.length - i - 1 ]\n      }\n    i++;}\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n    }\n  if (t == 0) {\n      p += s [ i ];\n  }\n  }\n  return p;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n  return false;\n \n  return true;\n};\n\nmodule.exports = {\n  belowThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ] != k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      if (p == 1) {\n        if (k % 2 == 0) {\n          e++}\n        else {\n          o++}\n        }\n      }\n    i++;}\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ]!= k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n        } else p++;\n      }\n      if (p == 2) {\n        e++;\n        i++;\n       \n      }\n    }\n    {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ]!= k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n        } else p++;\n      }\n      if (p == 2) {\n        o++;\n        i++;\n       \n      }\n    }\n    i++;\n  }\n  return (e, o)\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 2 == 0) {\n      e++;\n      i++;\n    }\n    if (i % 2 == 1) {\n      o++;\n      i++;\n    }\n    i++;\n  }\n  return (e, o)\n}\n\nexport {\n  evenOddPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i--;}\n  return i;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(j)) continue;\n      let k = 2;\n      while (k < 101) {\n         {\n          if ( !isPrime(k)) k++; continue;\n          if (i * j * k == a)\n          k++; return true;\n          }\n        k++;}\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n      if (i * j > a) break;\n      if (i * j == a && isPrime(a))\n        return true;\n    }\n  }\n  return false;\n};\n\nisMultiplyPrime(30);\n// true\nisMultiplyPrime(45);\n// false\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s.at( - 1) == 'y' || s.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n};\n\n\nmodule.exports = vowelsCount;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  let i = lo + 1;\n  while (i < hi) {\n     {\n      u.push(y [ i ])\n      }\n    i++;}\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo == - 1) {\n    return (\"\")}\n  if (hi == - 1) {\n    return (\"\")}\n  if (hi - lo == 1) {\n    return (\"\")}\n  for (let i = lo + 1; i < hi; i++) {\n    u [ i ] = planet2}\n  return (u)\n}\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo == - 1) {\n    return (\"\")}\n  if (hi == - 1) {\n    return (\"\")}\n  if (hi - lo == 1) {\n    return (\"\")}\n  for (let i = lo + 1; i < hi; i++) {\n    u [ i ] = planet2}\n  return (u)\n}\n\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo == - 1) {\n    return (\"\")}\n  if (hi == - 1) {\n    return (\"\")}\n  if (hi - lo == 1) {\n    return (\"\")}\n  for (let i = lo + 1; i < hi; i++) {\n    u [ i ] = planet2}\n  return (u)\n}\n\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n  let a_temp = a\n  let b_temp = b\n  let sum = 0\n  let x = a\n  let y = b\n  while (x!== 0) {\n    if (x % 10 > 0) {\n      sum += y\n    }\n    x = x / 10\n    y = y * 10\n  }\n  return sum * b_temp + a_temp\n}\n\n/*Complete the function that returns the sum of the digits in a number.\n  Assume the input is always valid.\n  Examples:\n  sumDigits(18) should return 6.\n  sumDigits(2020) should return 0.\n  sumDigits(1851) should return 1.\n  sumDigits(14) should return 14.\n  sumDigits(8) should return 8.\n  sumDigits(0) should return 0.\n  */\nconst sumDigits = (num) => {\n  let sum = 0\n  while (num) {\n    sum += num % 10\n    num = num / 10\n  }\n  return sum\n}\n\n/*Complete the function that returns the product of the digits in two \n  numbers.\n  Assume the input is always valid.\n  Examples:\n  multiplyDigits(20, 12) should return 36.\n  multiplyDigits(14, 6) should return 42.\n  multiplyDigits(8, 3) should return 24.\n  multiplyDigits(0, 0) should return 0.\n  */\nconst multiplyDigits = (a, b) => {\n  let a_temp = a\n  let b_temp = b\n  let sum = 0\n  while (a_temp) {\n    sum += a_temp % 10\n    a_temp = a_temp / 10\n  }\n  while (b_temp) {\n    sum += b_temp % 10\n    b_temp = b_temp / 10\n  }\n  return sum\n}\n\n/*Complete the function that finds the first appearance of a digit in \n  a number.\n  Assume the input is always valid.\n  Examples:\n  findDigit(9, 14) should return 2.\n  findDigit(9, 19) should return 2.\n  findDigit(9, 90) should return 1.\n  findDigit(9, 98) should return 1.\n  findDigit(9, 99) should return 1.\n  findDigit(9, 999) should return 1.\n  findDigit(9, 9999) should return 1.\n  findDigit(9, 99999) should return 2.\n  findDigit(9, 999999) should return 2.\n  findDigit(9, 99999999) should return 2.\n  findDigit(9, 999999999) should return 2.\n  findDigit(9, 9999999999) should return 2.\n  findDigit(9, 99999999999) should return 2.\n  findDigit(9, 999999999999) should return 2.\n  findDigit(9, 9999999999999) should return 2.\n  findDigit(9, 99999999999999) should return 2.\n  findDigit(9, 999999999999999) should return 2.\n  findDigit(9, 9999999999999999) should return 2.\n  findDigit(9, 99999999999999999) should return 2.\n  */\nconst findDigit = (num, numDigits) => {\n  let sum = 0\n  while (numDigits > sum) {\n    sum += numDigits\n    num -= sum\n  }\n  return sum\n}\n\n/*Complete the function that returns the largest value in a list of \n  numbers.\n  Assume the input is always valid.\n  Examples:\n  maxInList(1, 2, 3, 4, 5) should return 5.\n  maxInList(1, 2, 3, 4, 5, 6) should return 6.\n  maxInList(1, 2, 3, 4, 5, 6, 7) should return 7.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8) should return 8.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9) should return 9.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) should return 10.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) should return 11.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) should return 12.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) should return 13.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) should return 14.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) should return 15.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) should \n  return 16.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) should \n  return 17.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) should \n  return 18.\n  maxInList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n  for(let i=1; i<=a; i++){\n    if(i%Math.pow(a,3) === 0){\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = iscube;<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => value_map [ a ] - value_map [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  \n  const result = numbers.split(' ').map(e => value_map[e]).sort((a, b) => a - b).join(' ');\n  return result;\n}\n\n/*\n  Given a string of words separated by spaces,\n  return the string with spaces replaced with underscores\n  >>> replaceSpaces('one two three')\n  'one_two_three'\n  */\nconst replaceSpaces =(str) => {\n  return str.split(' ').map(e => e.replace(' ', '_')).join(' ');\n}\n\n/*\n  Given a string, return the string with all letters in lowercase\n  >>> toLowercase('THE_END')\n  'the_end'\n  */\nconst toLowercase =(str) => {\n  return str.split('').map(e => e.toLowerCase()).join('');\n}\n\n/*\n  Given a string, return the string with all letters in uppercase\n  >>> toUppercase('THE_END')\n  'the_end'\n  */\nconst toUppercase =(str) => {\n  return str.split('').map(e => e.toUpperCase()).join('');\n}\n\n/*\n  Given a string, return the string with all letters in mixed case\n  >>> toMixedCase('THE_END')\n  'the end'\n  */\nconst toMixedCase =(str) => {\n  return str.split('').map(e => e.toUpperCase()).join('');\n}\n\n/*\n  Given a string, return the string with all spaces replaced with underscores\n  >>> replaceSpaces('one two three')\n  'one_two_three'\n  */\nconst replaceSpacesInStrings =(str) => {\n  return str.split(' ').map(e => e.replace(' ', '_')).join(' ');\n}\n\n/*\n  Given a string, return the string with spaces replaced with underscores and all\n  lowercase\n  >>> replaceSpacesAndLowercase('one two three')\n  'one_two_three'\n  */\nconst replaceSpacesAndLowercase =(str) => {\n  return replaceSpaces(toLowercase(str));\n}\n\n/*\n  Given a string, return the string with spaces replaced with underscores and all\n  uppercase\n  >>> replaceSpacesAndUppercase('one two three')\n  'ONE_TWO_THREE'\n  */\nconst replaceSpacesAndUppercase =(str) => {\n  return replaceSpaces(toUppercase(str));\n}\n\n/*\n  Given a string, return the string with spaces replaced with underscores and all\n  mixed case\n  >>> replaceSpacesAndMixedCase('one two three')\n  'one_two_three'\n  */\nconst replaceSpacesAndMixedCase =(str) => {\n  return replaceSpaces(toMixedCase(str));\n}\n\n/*\n  Given a string, return the string with all non-alpha-numeric characters replaced with underscores\n  >>> replaceNonAlphaNumeric('TheEnd')\n  'the_end'\n  */\nconst replaceNonAlphaNumeric =(str) => {\n  return str.split('').map(e => e.replace(/[^a-zA-Z0-9]/g, '_')).join('');\n}\n\n/*\n  Given a string, return the string with all words separated by underscores\n  >>> replaceAllWords('one two three')\n  'one_two_three'\n  */\nconst replaceAllWords =(str) => {\n  return str.split('').map(e => e.replace(/\\W/g, '_')).join(' ');\n}\n\n/*\n  Given a string, return the string with all non-alpha-numeric characters replaced with underscores\n  >>> replaceAllNonAlphaNumeric('TheEnd')\n  'the_end'\n  */\nconst replaceAllNonAlphaNumeric =(str) => {\n  return replaceNonAlphaNumeric(str);\n}\n\n/*\n  Given a string, return the string with all uppercase words separated by underscores\n  >>> replaceAllUppercaseWords('one two three')\n  'ONE_TWO_THREE'\n  */\nconst replaceAllUppercaseWords =(str) => {\n  return replaceAllWords(toUppercase(str));\n}\n\n/*\n  Given a string, return the string with all lowercase words separated by underscores\n  >>> replaceAllLowercaseWords('one two three')\n  'one_two_three'\n  */\nconst replaceAllLowercaseWords =(str) => {\n  return replaceAllWords(toLowercase(str));\n}\n\n/*\n  Given a string, return the string with all words separated by underscores and all\n  lowercase\n  >>> replaceAllWordsAndLowercase('one two three')\n  'one_two_three'\n  */\nconst replaceAllWordsAndLowercase =(str) => {\n  return replaceAllWords(toLowercase(str));\n}\n\n/*\n  Given a string, return the string with all words separated by underscores and all\n  uppercase\n  >>> replaceAllWordsAndUppercase('one two three')\n  'ONE_TWO_THREE'\n  */\nconst replaceAllWordsAndUppercase =(str) => {\n  return replaceAllWords(toUppercase(str));\n}\n\n/*\n  Given a string, return the string with all words separated by underscores and all\n  mixed case\n  >>> replaceAllWordsAndMixedCase('one two three')\n  'one_two_three'\n  */\nconst replaceAllWordsAndMixedCase =(str) => {\n  return replaceAllWords("}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 2 == 0 ? even [ index / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  var odd = l.filter((item, index) => index % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  return even.concat(odd);\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but reversed.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortOdd =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.reverse();\n\n  var odd = l.filter((item, index) => index % 2 == 1);\n  odd.reverse();\n\n  return even.concat(odd);\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but reversed.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 3, 2, 1]\n  */\nconst sortUnique =(l) => {\n  var lUnique = [];\n  for(var i = 0; i < l.length; i++){\n    if(lUnique.indexOf(l[i]) < 0){\n      lUnique.push(l[i]);\n    }\n  }\n  return lUnique;\n}\n\nconst getSum =(l) =>{\n  var sum = 0;\n  for(var i = 0; i < l.length; i++){\n    sum += l[i];\n  }\n  return sum;\n}\n\nconst getMax =(l) =>{\n  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst getMin =(l) =>{\n  var min = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] < min){\n      min = l[i];\n    }\n  }\n  return min;\n}\n\nconst getAvg =(l) =>{\n  return getSum(l)/l.length;\n}\n\nconst getMedian =(l) =>{\n  var array = sortUnique(l);\n  var middle = array.length / 2;\n  var median = array[middle];\n  return median;\n}\n\nconst getMode =(l) =>{\n  var modes = [];\n  var unique = sortUnique(l);\n  for(var i = 0; i < unique.length; i++){\n    modes.push(unique[i]);\n  }\n  return modes;\n}\n\nconst getFirst =(l) =>{\n  return l[0];\n}\n\nconst getLast =(l) =>{\n  return l[l.length - 1];\n}\n\nconst getUnique =(l) =>{\n  var unique = [];\n  for(var i = 0; i < l.length; i++){\n    if(unique.indexOf(l[i]) < 0){\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n}\n\nconst getTop =(l, n) =>{\n  var top = [];\n  for(var i = 0; i < n; i++){\n    top.push(l[i]);\n  }\n  return top;\n}\n\nconst getBottom =(l, n) =>{\n  var bottom = [];\n  for(var i = 0; i < n; i++){\n    bottom.push(l[i]);\n  }\n  return bottom;\n}\n\nmodule.exports = {\n  sum: getSum,\n  min: getMin,\n  max: getMax,\n  avg: getAvg,\n  median: getMedian,\n  mode: getMode,\n  first: getFirst,\n  last: getLast,\n  unique: getUnique,\n  top: getTop,\n  bottom: getBottom\n};<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n     }\n     \n     i += 2\n  }\n  return t\n}\n\n// console.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      }\n    i++;}\n  return letter_grade\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      i = i + 1\n      }\n  return letter_grade\n}\n\nconst letterGrade = (grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n      {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      i = i + 1\n      }\n  return letter_grade\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; power < x;) {\n    power = power * n;\n    }\n  return(power == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n  while (power <= n) {\n    if (x == n * power)\n    return(true);\n    power *= n;\n  }\n  return(false);\n}\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n\n/*\n  Your task is to write a function that returns true if the given number is a perfect\n  number. For example:\n  isPerfect(3) => true\n  isPerfect(10) => false\n  isPerfect(6) => true\n  isPerfect(1) => false\n  isPerfect(20) => true\n  */\nconst isPerfect =(x) => {\n  if (x % 1 === 0)\n    return(true);\n  else\n    return(false);\n}\n\nconsole.log(isPerfect(3));\nconsole.log(isPerfect(10));\nconsole.log(isPerfect(6));\nconsole.log(isPerfect(1));\nconsole.log(isPerfect(20));\n\n/*\n  Your task is to write a function that returns true if the given number is an abundant number.\n  For example:\n  isAbundant(1) => false\n  isAbundant(2) => true\n  isAbundant(5) => true\n  isAbundant(7) => true\n  isAbundant(20) => false\n  */\nconst isAbundant =(x) => {\n  return(x > 0 && (Math.floor(x) % 1!== 0));\n}\n\nconsole.log(isAbundant(1));\nconsole.log(isAbundant(2));\nconsole.log(isAbundant(5));\nconsole.log(isAbundant(7));\nconsole.log(isAbundant(20));\n\n/*\n  Your task is to write a function that returns true if the given number is a prime number.\n  For example:\n  isPrime(1) => false\n  isPrime(2) => true\n  isPrime(3) => true\n  isPrime(4) => false\n  isPrime(6) => false\n  isPrime(10) => true\n  */\nconst isPrime =(x) => {\n  if (x % 1 === 0)\n    return(false);\n  for (var i = 2; i <= Math.sqrt(x); i++)\n    if (x % i === 0)\n      return(false);\n  return(true);\n}\n\nconsole.log(isPrime(1));\nconsole.log(isPrime(2));\nconsole.log(isPrime(3));\nconsole.log(isPrime(4));\nconsole.log(isPrime(6));\nconsole.log(isPrime(10));\n\n/*\n  Your task is to write a function that returns true if the given number is an abundant number.\n  For example:\n  isAbundant(1) => false\n  isAbundant(2) => true\n  isAbundant(5) => true\n  isAbundant(7) => true\n  isAbundant(20) => true\n  */\nconst isAbundant =(x) => {\n  return(x > 0 && (Math.floor(x) % 1!== 0));\n}\n\nconsole.log(isAbundant(1));\nconsole.log(isAbundant(2));\nconsole.log(isAbundant(5));\nconsole.log(isAbundant(7));\nconsole.log(isAbundant(20));\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n}\n \n// console.log(getPositive([-1, 2, -4, 5, 6]));\n// console.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        y+=lst [ i ]}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        y+=lst [ i ]}\n     }\n     i++;\n  }\n  return y\n}\n\nconst sumSquares2 =(lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        sum+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        sum+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        sum+=lst [ i ]}\n     }\n     i++;\n  }\n  return sum\n}\n\n//console.log(sumSquares([1,2,3]))\n//console.log(sumSquares2([1,2,3]))\n\nconst sumSquares3 =(lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        sum+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        sum+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        sum+=lst [ i ]}\n     }\n     i++;\n  }\n  return sum\n}\n\n//console.log(sumSquares([1,2,3]))\n//console.log(sumSquares2([1,2,3]))\n//console.log(sumSquares3([1,2,3]))\n\nconst sumSquares4 =(lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        sum+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        sum+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        sum+=lst [ i ]}\n     }\n     i++;\n  }\n  return sum\n}\n\n//console.log(sumSquares([1,2,3]))\n//console.log(sumSquares2([1,2,3]))\n//console.log(sumSquares3([1,2,3]))\n//console.log(sumSquares4([1,2,3]))\n\nconst sumSquares5 =(lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        sum+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        sum+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        sum+=lst [ i ]}\n     }\n     i++;\n  }\n  return sum\n}\n\n//console.log(sumSquares([1,2,3]))\n//console.log(sumSquares2([1,2,3]))\n//console.log(sumSquares3([1,2,3]))\n//console.log(sumSquares4([1,2,3]))\n//console.log(sumSquares5([1,2,3]))\n\nconst sumSquares6 =(lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        sum+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        sum+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        sum+=lst [ i ]}\n     }\n     i++;\n  }\n  return sum\n}\n\n//console.log(sumSquares([1,2,3]))\n//console.log(sumSquares2([1,2,3]))\n//console.log(sumSquares3([1,2,3]))\n//console.log(sumSquares4([1,2,3]))\n//console.log(sumSquares5([1,2,3]))\n//console.log(sumSquares6([1,2,3]))\n\n//\n//const sumSquares =(lst) => {\n//  let sum = 0;\n//  let i = 0;\n//  while (i < lst.length) {\n//     {\n//      if (i % 3 == 0) {\n//        sum+=lst [ i ] * lst [ i ]}\n//      else\n//if (i % 4 == 0) {\n//        sum+=lst [ i ] * lst [ i ] * lst [ i ]}\n//     \n//      else {\n//        sum+=lst [ i ]}\n//     }\n//     i++;\n//  }\n//  return sum\n//}\n//\n//console.log(sumSquares([1,2,3]))\n//console.log(sumSquares2([1,2,3]))\n//console.log"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        p.push(p [ i - 2 ] + p [ i - 1 ] + 1 +(i + 1) / 2)\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n      } else {\n        p.push(1 + (i - 1) / 2 + p[i - 2] + p[i - 1])\n      }\n     }\n     i += 1;\n  }\n  return p;\n}\n\nconsole.log(tri(3))<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      results.at( - 3) + results.at( - 4));\n      results.shift();\n      }\n    i++;}\n  return results.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n    results.at( - 3) + results.at( - 4));\n     }\n     i++;\n  }\n  return results.at( - 1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n      if (i == x) return i;\n    }\n  }\n  return -1;\n}\n\nconst isValid =(x, y) => {\n  return (x <= y) && (y % 2 == 0) && (y!= 0);\n}\n\nconst find =(x, y) => {\n  for (let i = x; i < y; i++) {\n    if (isValid(i, y)) return i;\n  }\n  return -1;\n}\n\nconst test =() => {\n  const x = 15;\n  const y = 12;\n  console.log(chooseNum(x, y));\n  console.log(find(x, y));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n      }\n    }\n    i++\n  }\n  return p\n}\n\nconsole.log(doubleTheDifference([9, -2]));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n};\n\n// ############\n// ###### List #########\n// ################\n\n// #################\n// #### Test ###########\n// #################\n\n// #### Test 1 ###\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_1 = (incrList) => {\n    return incrList([1, 2, 3]);\n};\n\n// #### Test 2 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_2 = (incrList) => {\n    return incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n};\n\n// #### Test 3 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_3 = (incrList) => {\n    return incrList([1, 2, 3]);\n};\n\n// #### Test 4 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_4 = (incrList) => {\n    return incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n};\n\n// #### Test 5 ###\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_5 = (incrList) => {\n    return incrList([1, 2, 3]);\n};\n\n// #### Test 6 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_6 = (incrList) => {\n    return incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n};\n\n// #### Test 7 ###\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_7 = (incrList) => {\n    return incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n};\n\n// #### Test 8 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_8 = (incrList) => {\n    return incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n};\n\n// #### Test 9 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst test_9 = (incrList) => {\n    return incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n};\n\n// #### Test 10 ###\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n   if (s[i + 1] === s[i + 2])\n   return false;\n   i++;\n   \n   }\n   return true;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n};\n\n/**\n  * Given a string, return an array of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWords = (str) => {\n  return str.split(/\\W+/);\n};\n\n/**\n  * Given an array of words, return a single string of all the words,\n  * separated by spaces.\n  * @param words\n  * @returns {string}\n  */\nconst getWordString = (words) => {\n  return words.join(' ');\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList = (str) => {\n  return getWords(str);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList2 = (str) => {\n  return str.split(/\\W+/);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList3 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList4 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList5 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList6 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList7 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList8 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList9 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList10 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList11 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList12 = (str) => {\n  return str.split(/(\\W+)/).filter(word => word.length > 0);\n};\n\n/**\n  * Given a string, return a list of all the words in the string.\n  * Words are separated by any non-alphanumeric characters (e.g. spaces, commas, etc.).\n  * @param str\n  * @returns {Array}\n  */\nconst getWordsList13 = (str) => {\n  return str.split("}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return p.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n    p.splice(ind, 1)\n  }\n  return p\n}\n\n/*\n  Given an array arr of strings and a positive integer k, return a sorted list \n  of length k with the maximum k strings in arr.\n\n  Example 1:\n\n      Input: arr = [\"blue\", \"red\", \"red\", \"green\", \"blue\", \"yellow\"], k = 3\n      Output: [\"red\", \"green\", \"yellow\"]\n\n  Example 2:\n\n      Input: arr = [\"blue\", \"red\", \"red\", \"green\", \"blue\", \"yellow\"], k = 2\n      Output: [\"blue\", \"green\"]\n\n  Example 3:\n\n      Input: arr = [\"blue\", \"red\", \"red\", \"green\", \"blue\", \"yellow\"], k = 1\n      Output: [\"red\"]\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n      {\n        if (p [ k ].localeCompare(p [ ind ]) > 0) {\n          ind = k\n          }\n        }\n      k++;}\n   \n    p.splice(ind, 1)\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n};\n \n \n/**\n  Calculate the polynomial coefficients.\n  @param {Array} xs\n  @returns {Array}\n  */\nconst coefficients =(xs) => {\n  return xs.reduce((acc, x, i) => {\n    return acc + x * i;\n  }, 0);\n}\n\n// ---------------------------------------------------------\n \n/**\n  Calculate the polynomial coefficients.\n  @param {Array} xs\n  @returns {Array}\n  */\nconst coefficientsDerivative =(xs) => {\n  return xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0);\n}\n\n// ---------------------------------------------------------\n\n/**\n  Given a set of points and their y-values,\n  return the value of the polynomial which best fits\n  these points.\n  @param {Array} xs\n  @param {Array} ys\n  @returns {Number}\n  */\nconst polyFit =(xs, ys) => {\n  return Math.pow(\n    Math.pow(ys,2) + Math.pow(ys,3) + Math.pow(ys,4) + Math.pow(ys,5) + Math.pow(ys,6)\n , 1/6) - ys;\n}\n\n// ---------------------------------------------------------\n\n/**\n  Given a set of points and their y-values,\n  return the value of the polynomial which best fits\n  these points.\n  @param {Array} xs\n  @param {Array} ys\n  @returns {Number}\n  */\nconst polyFitDerivative =(xs, ys) => {\n  return Math.pow(\n    2 * Math.pow(ys,2) + Math.pow(ys,3) + Math.pow(ys,4) + Math.pow(ys,5) + Math.pow(ys,6)\n , 2/6) - ys;\n}\n\n// ---------------------------------------------------------\n\nconst poly =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * i;\n  }, 0) + 1);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 2);\n}\n\n// ---------------------------------------------------------\n\n// const polyDerivative =(xs) => {\n//   return (xs.reduce((acc, x, i) => {\n//     return acc + x * (i + 1);\n//   }, 0) + 2);\n// }\n\n// ---------------------------------------------------------\n\nconst polyDerivative2 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 3);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative3 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 4);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative4 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 5);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative5 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 6);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative6 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 7);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative7 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 8);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative8 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 9);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative9 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 10);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative10 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 11);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative11 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 12);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative12 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 13);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative13 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc + x * (i + 1);\n  }, 0) + 14);\n}\n\n// ---------------------------------------------------------\n\nconst polyDerivative14 =(xs) => {\n  return (xs.reduce((acc, x, i) => {\n    return acc +"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(text)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  var hash = md5.createHash(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a md5 hash'md5' in 'hex', return the string it represents.\n  If'md5' is an empty string, return null.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst md5ToString =(md5) => {\n  if (md5 == '') {\n    return null}\n  var hash = require('js-md5')\n  return hash.createHash(md5).digest('hex')\n}\n\n/*\n  Given an array 'a' of strings, return a hash of the concatenation of all strings.\n  If 'a' is empty, return null.\n\n  >>> stringArrayToMd5(['a', 'b', 'c']) == 'e8cce6d2a18caa6c7d1e0f3f6e6d9e'\n  */\nconst stringArrayToMd5 =(a) => {\n  if (a.length == 0) {\n    return null}\n  var hash = require('js-md5')\n  return hash.createHash(a.join('|')).digest('hex')\n}\n\n/*\n  Given an array 'a' of strings, return the md5 hash of the concatenation of all strings.\n  If 'a' is empty, return null.\n\n  >>> stringArrayToMd5(['a', 'b', 'c']) == 'e8cce6d2a18caa6c7d1e0f3f6e6d9e'\n  */\nconst stringArrayToMd5InArray =(a) => {\n  if (a.length == 0) {\n    return null}\n  var hash = require('js-md5')\n  return hash.createHash(a.join('|')).digest('hex')\n}\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString,\n  stringArrayToMd5,\n  stringArrayToMd5InArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '}\n    t = t + arr [ i ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n      }\n    }\n  }\n  return arr.join(\" \")\n}\n\nconst shuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    let r = Math.floor(Math.random() * arr [ i ].length);\n    let s = arr [ i ].slice(0, r) + arr [ i ].slice(r + 1, arr [ i ].length)\n    arr [ i ] = s\n  }\n  return arr.join(\" \")\n}\n\nconsole.log(shuffle(\"Hi\"))\nconsole.log(shuffle(\"hello\"))\nconsole.log(shuffle(\"Hello World!!!\"))\nconsole.log(antiShuffle(\"Hello World!!!\"))\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n}\n\n// Function that finds the index of the first element in the list that contains a given string.\nconst findIndex = (strings, string) => {\n  return strings.findIndex(x => x.startsWith(string));\n}\n\n/* Function that finds the index of the first element in the list that contains a given string,\n  and that is within a certain range.\n  >>> findIndexRange(['abc', 'bcd', 'cde', 'array'], 'a', 1, 2)\n  1\n  >>> findIndexRange(['abc', 'bcd', 'cde', 'array'], 'a', 1, 1)\n  -1\n  >>> findIndexRange(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  -1\n  >>> findIndexRange(['abc', 'bcd', 'cde', 'array'], 'a', 1, 0)\n  -1\n  >>> findIndexRange(['abc', 'bcd', 'cde', 'array'], 'a', 2, 4)\n  -1\n  >>> findIndexRange(['abc', 'bcd', 'cde', 'array'], 'a', 3, 4)\n  -1\n  */\nconst findIndexRange = (strings, string, start, end) => {\n  let index = findIndex(strings, string);\n  if (index === -1) {\n    return -1;\n  } else if (index < start || index >= end) {\n    return -1;\n  } else {\n    return index;\n  }\n}\n\n/* Function that gets the last element of the list, if the list is empty, return undefined.\n  >>> getLast(['abc', 'bcd', 'cde', 'array'])\n  'array'\n  >>> getLast([])\n  undefined\n  */\nconst getLast = (strings) => {\n  return strings[strings.length - 1];\n}\n\n/* Function that gets the last element of the list, if the list is empty, return the given default.\n  >>> getLast(['abc', 'bcd', 'cde', 'array'], 'def')\n  'array'\n  >>> getLast([], 'def')\n  'def'\n  */\nconst getLast = (strings, default) => {\n  if (strings.length === 0) {\n    return default;\n  } else {\n    return strings[strings.length - 1];\n  }\n}\n\n/* Function that gets the element at a given index of the list.\n  >>> get(['abc', 'bcd', 'cde', 'array'], 1)\n  'cde'\n  >>> get([], 1)\n  undefined\n  */\nconst get = (strings, index) => {\n  if (index < 0 || index >= strings.length) {\n    return undefined;\n  } else {\n    return strings[index];\n  }\n}\n\n/* Function that gets the element at a given index of the list, and that is within a given range.\n  >>> getRange(['abc', 'bcd', 'cde', 'array'], 1, 2)\n  'bcd'\n  >>> getRange(['abc', 'bcd', 'cde', 'array'], 1, 1)\n  'abc'\n  >>> getRange(['abc', 'bcd', 'cde', 'array'], 0, 2)\n  'abc'\n  >>> getRange(['abc', 'bcd', 'cde', 'array'], 2, 4)\n  'cde'\n  >>> getRange(['abc', 'bcd', 'cde', 'array'], 3, 4)\n  'cde'\n  */\nconst getRange = (strings, start, end) => {\n  if (start < 0 || start >= end) {\n    return undefined;\n  } else {\n    return strings[start];\n  }\n}\n\n/* Function that gets the element at a given index of the list, and that is within a given range,\n  and that is the first in the list.\n  >>> getRangeFirst(['abc', 'bcd', 'cde', 'array'], 1, 2)\n  'abc'\n  >>> getRangeFirst(['abc', 'bcd', 'cde', 'array'], 1, 1)\n  'abc'\n  >>> getRangeFirst(['abc', 'bcd', 'cde', 'array'], 0, 2)\n  'abc'\n  >>> getRangeFirst(['abc', 'bcd', 'cde', 'array'], 2, 4)\n  'cde'\n  >>> getRangeFirst(['abc', 'bcd', 'cde', 'array'], 3, 4)\n  'cde'\n  */\nconst getRangeFirst = (strings, start, end) => {\n  if (start < 0 || start >= end) {\n    return undefined;\n  } else {\n    return strings[start];\n  }\n}\n\n/* Function that gets the element at a given index of the list, and that is within a given range,\n  and that is the last in the list.\n  >>> getRangeLast(['abc', 'bcd', 'cde', 'array'], 1, 2)\n  'bcd'\n  >>> getRangeLast(['abc', 'bcd', 'cde', 'array'], 1, 1)\n  'bcd'\n  >>> getRangeLast(['abc', 'bcd', 'cde', 'array'], 0, 2)\n  'bcd'\n  >>> getRangeLast(['abc', 'bcd', 'cde', 'array'], 2, 4)\n  'cde'\n  >>> getRangeLast(['abc', 'bcd', 'cde', 'array'], 3, 4)\n  'cde'\n  */\nconst getRangeLast = (strings, start, end) => {\n  if (start < 0 || start >= end) {\n    return undefined;\n  } else {\n    return strings[end - 1];\n  }\n}\n\n// Function that gets the element at a given index of the list, and that is within a given range,\n// and that is the first"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    j++;}\n  let smallest = arr [ 0 ]\n  let pt = 1\n  while (pt < arr.length) {\n    if (arr [ pt ] > smallest) {\n      return arr [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n      j++\n     }\n  }\n  if (arr.length === 0) {\n    return null;\n    }\n  if (arr.length === 1) {\n    return arr [ 0 ];\n    }\n  if (arr.length === 2) {\n    return arr [ 1 ];\n    }\n  return arr [ 1 ];\n}\n\nnextSmallest([1, 2, 3, 4, 5])\n// nextSmallest([5, 1, 4, 3, 2])\n// nextSmallest([])\n// nextSmallest([1, 1])\n// nextSmallest([2, 1, 1])\n// nextSmallest([3, 1, 1, 1, 2, 1, 1, 2, 1, 1])\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p != 32 && p < 96) {\n        p+=32}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) {\n        p+=2}\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p!= 32 && p < 96) {\n        p+=32}\n     \n      t += String.fromCharCode(p);\n    }\n    i++\n  }\n  return t.toUpperCase();\n}\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (y < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  let w2 = lst [ 0 ] + lst [ 1 ]\n  let x = 0\n  let v = 1\n  i = 0;\n  while (i < w2.length) {\n     {\n      if (w2 [ i ] == '(') {\n        x++}\n      else {\n        x--}\n      if (x < 0) {\n        v = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (v == 1 && x == 0) {\n    return 'Yes'}\n  }\n  return 'No'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n        j++\n      }\n    }\n    d.push(p)\n  }\n  return d\n}\n\nconsole.log(oddCount(['3',\"11111111\"]))\n\n//Test\n\nfunction oddCount(lst) {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j].charCodeAt() % 2 == 1) {\n          p++}\n       \n        j++\n      }\n    }\n    d.push(p)\n  }\n  return d\n}\n\nconsole.log(oddCount(['3',\"11111111\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (key [ i ].charCodeAt() < 65 || key [ i ].charCodeAt() > 90) {\n          hi = 0}\n        if (key [ i ].charCodeAt() < 97 || key [ i ].charCodeAt() > 122) {\n          lo = 0}\n        }\n      i++;}\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n       if (key.charAt(i) === key.charAt(i).toUpperCase()) {\n         lo = 0\n       }\n       else {\n         lo = 1\n       }\n       }\n       i++\n    }\n    hi = 1\n    i = 0\n    while (i < key.length) {\n      {\n      if (key.charAt(i) === key.charAt(i).toLowerCase()) {\n        hi = 0\n      }\n      else {\n        hi = 1\n      }\n      }\n      i++\n    }\n  }\n  return (c === hi && c === lo)\n}\n\n/**\n  Given an array of strings, return the same array of strings\n  where all strings are in lower case.\n  Examples:\n  lowerCaseWords([\"I\",\"am\", \"sure\", \"you\", \"know\"]) should return [\"i\", \"am\", \"sure\", \"you\", \"know\"].\n  lowerCaseWords([\"I\",\"am\", \"sure\", \"you\", \"know\"]) should return [\"i\", \"am\", \"sure\", \"you\", \"know\"].\n  lowerCaseWords([\"I\",\"am\", \"sure\", \"you\", \"know\"]) should return [\"i\", \"am\", \"sure\", \"you\", \"know\"].\n  lowerCaseWords([\"I\",\"am\", \"sure\", \"you\", \"know\"]) should return [\"i\", \"am\", \"sure\", \"you\", \"know\"].\n  */\nconst lowerCaseWords = (arr) => {\n  let ret = arr.slice()\n  for (let i = 0; i < arr.length; i++) {\n    ret[i] = arr[i].toLowerCase()\n  }\n  return ret\n}\n\n/**\n  Given an array of strings, return the same array of strings\n  where all strings are in upper case.\n  Examples:\n  upperCaseWords([\"i\", \"am\", \"sure\", \"you\", \"know\"]) should return [\"I\", \"AM\", \"SURE\", \"YOU\", \"KNOW\"].\n  upperCaseWords([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return [\"I\", \"AM\", \"SURE\", \"YOU\", \"KNOW\"].\n  upperCaseWords([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return [\"I\", \"AM\", \"SURE\", \"YOU\", \"KNOW\"].\n  upperCaseWords([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return [\"I\", \"AM\", \"SURE\", \"YOU\", \"KNOW\"].\n  */\nconst upperCaseWords = (arr) => {\n  let ret = arr.slice()\n  for (let i = 0; i < arr.length; i++) {\n    ret[i] = arr[i].toUpperCase()\n  }\n  return ret\n}\n\n/**\n  Given a string, return the same string where all characters are in\n  lower case.\n  Examples:\n  lowerCaseAll([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  lowerCaseAll([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  lowerCaseAll([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  lowerCaseAll([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  */\nconst lowerCaseAll = (str) => {\n  return str.toLowerCase()\n}\n\n/**\n  Given a string, return the same string where all characters are in\n  upper case.\n  Examples:\n  upperCaseAll([\"i\", \"am\", \"sure\", \"you\", \"know\"]) should return \"IAMSUREYOUKNOW\".\n  upperCaseAll([\"i\", \"am\", \"sure\", \"you\", \"know\"]) should return \"IAMSUREYOUKNOW\".\n  upperCaseAll([\"i\", \"am\", \"sure\", \"you\", \"know\"]) should return \"IAMSUREYOUKNOW\".\n  upperCaseAll([\"i\", \"am\", \"sure\", \"you\", \"know\"]) should return \"IAMSUREYOUKNOW\".\n  */\nconst upperCaseAll = (str) => {\n  return str.toUpperCase()\n}\n\n/**\n  Given a string, return the same string with all punctuation\n  removed.\n  Examples:\n  removePunctuation([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  removePunctuation([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  removePunctuation([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  removePunctuation([\"I\", \"am\", \"sure\", \"you\", \"know\"]) should return \"iamsureyouknow\".\n  */\nconst removePunctuation = (str) => {\n  let ret = str\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === \" \") {\n      ret = ret.slice(0, i) + ret.slice(i + 1)\n    }\n    if (str.charAt(i) === \",\") {\n      ret = ret.slice(0, i)"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (len % i == 0) {\n          u = 0}\n        }\n      i++;}\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ j ]}\n    else {\n      p = p + ' ' + t [ j ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n      if (t [ j ] [ len - i * i ]!= t [ j ] [ len - i ]) {\n          break;\n      }\n      p += t [ j ][ len - i * i ]\n      u++\n      }\n      i++;\n    }\n  }\n  return p\n}\n\nconsole.log(wordsInSentence('This is a test'))\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n        }\n      else\n      current_string.push(c);\n      }\n    else {\n      current_string.push(c);\n      }\n    }\n  return result;\n  };\n  \n  \n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if ( !Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n  result.push(n);\n  }\n  return result;\n}\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / numbers.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n   return Math.abs(item - mean);\n  }, 0) / numbers.length;\n};\n\n/*\n  Returns the maximum number in a list\n  >>> max([1,2,3,4])\n  4\n  >>> max([])\n  NaN\n  */\nconst max = (list) => {\n  if(Array.isArray(list)) {\n    var max = list[0];\n    for(var i = 0; i < list.length; i++) {\n      if(list[i] > max) {\n        max = list[i];\n      }\n    }\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the minimum number in a list\n  >>> min([1,2,3,4])\n  1\n  >>> min([])\n  NaN\n  */\nconst min = (list) => {\n  if(Array.isArray(list)) {\n    var min = list[0];\n    for(var i = 0; i < list.length; i++) {\n      if(list[i] < min) {\n        min = list[i];\n      }\n    }\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the sum of a list of numbers\n  >>> sum([1,2,3,4])\n  15\n  >>> sum([])\n  NaN\n  */\nconst sum = (list) => {\n  if(Array.isArray(list)) {\n    return list.reduce((prev, item) => {\n      return prev + item;\n    }, 0);\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the variance of a list of numbers\n  >>> var([1,2,3,4])\n  1.6666666666666666666666666666\n  >>> var([])\n  NaN\n  */\nconst variance = (list) => {\n  if(Array.isArray(list)) {\n    return list.reduce((prev, item) => {\n      return prev + Math.pow((item - prev), 2);\n    }, 0) / list.length;\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the standard deviation of a list of numbers\n  >>> std([1,2,3,4])\n  2.236067977527965\n  >>> std([])\n  NaN\n  */\nconst std = (list) => {\n  if(Array.isArray(list)) {\n    return Math.sqrt(variance(list));\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the median of a list of numbers\n  >>> median([1,2,3,4])\n  3\n  >>> median([])\n  NaN\n  */\nconst median = (list) => {\n  if(Array.isArray(list)) {\n    var copy = list.slice(0);\n    copy.sort((a, b) => {\n      return a - b;\n    });\n    var middle = Math.floor(list.length / 2);\n    if(list.length % 2 === 0) {\n      return (list[middle - 1] + list[middle]) / 2;\n    }\n    else {\n      return list[middle];\n    }\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the mode of a list of numbers\n  >>> mode([1,2,3,4])\n  2\n  >>> mode([])\n  NaN\n  */\nconst mode = (list) => {\n  if(Array.isArray(list)) {\n    var copy = list.slice(0);\n    copy.sort((a, b) => {\n      return a - b;\n    });\n    var max = copy[0];\n    var maxCount = 1;\n    for(var i = 1; i < copy.length; i++) {\n      if(copy[i] === max) {\n        maxCount++;\n      }\n      else {\n        max = copy[i];\n        maxCount = 1;\n      }\n    }\n    return max;\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the mean of a list of numbers\n  >>> mean([1,2,3,4])\n  2.25\n  >>> mean([])\n  NaN\n  */\nconst mean = (list) => {\n  if(Array.isArray(list)) {\n    return sum(list) / list.length;\n  }\n  else {\n    return NaN;\n  }\n};\n\n/*\n  Returns the sum of the squares of a list of numbers\n  >>> sumSquares([1,2,3,4])\n  14\n  >>> sumSquares([])\n  NaN\n  */\nconst sumSquares = (list) => {\n  if(Array.isArray(list)) {\n    return list.reduce((prev, item) => {\n      return prev + Math.pow(item, 2);\n    }, 0);\n  }\n  else {\n    return NaN;\n  }\n};\n\nmodule.exports = {\n  mean,\n  median,\n  mode,\n  variance,\n  std,\n  max,\n  min,\n  sum,\n  sumSquares,\n  meanAbsoluteDeviation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    \n    for (; h >= 10;) {\n       {\n        k+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n      }\n    k-=h;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n    while (h > 0) {\n      k = k + 1\n      h = h - Math.pow(10, k)\n    }\n    p = p + k\n  }\n  return p\n}\n\nconst arr = [1, 1, 2, -1, 11, -11, -123]\n\nconsole.log(countNums(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        p++\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n        p++;\n      }\n    }\n    i++;\n  }\n  return p\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n      }\n    }\n    i++;\n  }\n  return times;\n}\n\nconsole.log(howManyTimes('aaa', 'aa'));\nconsole.log(howManyTimes('aaaa', 'aa'));\nconsole.log(howManyTimes('aaaaa', 'aa'));\nconsole.log(howManyTimes('aaaaaa', 'aa'));\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ] != text.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ]!= text.at( - i - 1))\n   \n      return false;\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if ( !Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n  }\n  return strings.length == 1? strings[0] : strings[0].length == maxlen? strings[0] : longest(strings.slice(1));\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest([])\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y >= s) {\n        s = y;\n        u = i;\n        }\n      }\n    i--;}\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n        }\n      if (y > u) {\n        u = y\n        s = extensions [ i ]\n        }\n     }\n     i--;\n  }\n  return class_name + '.' + s\n}\n\nconst isValidExtension = (extension) => {\n  if (extension.length < 2) {\n    return false\n  }\n  if (extension.length > 10) {\n    return false\n  }\n  if (extension.length % 2) {\n    return false\n  }\n  for (let i = 0; i < extension.length; i++) {\n    if (extension [ i ] >= 65 && extension [ i ] <= 90) {\n      return false\n    }\n    if (extension [ i ] >= 97 && extension [ i ] <= 122) {\n      return false\n    }\n  }\n  return true\n}\n\nconst makeRandomString = (length) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n  let random_string = ''\n  for (let i = 0; i < length; i++) {\n    random_string += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return random_string\n}\n\nconst isValidClass = (class_name) => {\n  if (class_name.length < 3) {\n    return false\n  }\n  for (let i = 0; i < class_name.length; i++) {\n    if (class_name [ i ] >= 65 && class_name [ i ] <= 90) {\n      return false\n    }\n    if (class_name [ i ] >= 97 && class_name [ i ] <= 122) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isValidName = (name) => {\n  if (name.length < 3) {\n    return false\n  }\n  for (let i = 0; i < name.length; i++) {\n    if (name [ i ] >= 65 && name [ i ] <= 90) {\n      return false\n    }\n    if (name [ i ] >= 97 && name [ i ] <= 122) {\n      return false\n    }\n  }\n  return true\n}\n\nconst makeClass = (name) => {\n  const random_string = makeRandomString(10)\n  return name + '_' + random_string\n}\n\nconst generateClasses = (class_names, extensions) => {\n  let classes = class_names.split(',')\n  for (let i = 0; i < classes.length; i++) {\n    if (!isValidClass(classes [ i ])) {\n      throw \"Invalid class name\"\n    }\n  }\n  let final_classes = []\n  for (let i = 0; i < classes.length; i++) {\n    final_classes.push(makeClass(classes [ i ]))\n  }\n  return final_classes\n}\n\nconst isValidExtension = (extension) => {\n  if (extension.length < 2) {\n    return false\n  }\n  if (extension.length > 10) {\n    return false\n  }\n  if (extension.length % 2) {\n    return false\n  }\n  for (let i = 0; i < extension.length; i++) {\n    if (extension [ i ] >= 65 && extension [ i ] <= 90) {\n      return false\n    }\n    if (extension [ i ] >= 97 && extension [ i ] <= 122) {\n      return false\n    }\n  }\n  return true\n}\n\nconst generateClasses = (class_names, extensions) => {\n  let classes = class_names.split(',')\n  for (let i = 0; i < classes.length; i++) {\n    if (!isValidExtension(extensions [ i ])) {\n      throw \"Invalid extension\"\n    }\n  }\n  let final_classes = []\n  for (let i = 0; i < classes.length; i++) {\n    final_classes.push(makeClass(classes [ i ]))\n  }\n  return final_classes\n}\n\nconst classExtension = (class_name, extensions) => {\n  return strongestExtension(class_name, extensions)\n}\n\nmodule.exports = {\n  generateClasses,\n  generateClasses,\n  classExtension\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n      else if (arr [ i ] >= 100 && arr [ i ] <= -100) {\n        p+=arr [ i ]}\n     \n      else if (arr [ i ] >= -100 && arr [ i ] <= 100) {\n        p+=arr [ i ]}\n     }\n     {\n      i+=1\n     }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the elements\n  with at most one digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 12 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addDigits = (arr, k) => {\n  let p = 0;\n  let i = 0;\n  while (i < k) {\n    p+=arr [ i ]}\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the elements\n  with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addTwoDigits = (arr, k) => {\n  let p = 0;\n  let i = 0;\n  while (i < k) {\n    if (arr [ i ] < 10 && arr [ i ] > -10) {\n      p+=arr [ i ]}\n    else if (arr [ i ] >= 10 && arr [ i ] <= -10) {\n      p+=arr [ i ]}\n    else if (arr [ i ] >= -10 && arr [ i ] <= 10) {\n      p+=arr [ i ]}\n    i+=1\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the elements\n  with at most one digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 12 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addOneDigit = (arr, k) => {\n  let p = 0;\n  let i = 0;\n  while (i < k) {\n    p+=arr [ i ]}\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the elements\n  with at most one digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 12 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addOneDigit = (arr, k) => {\n  let p = 0;\n  let i = 0;\n  while (i < k) {\n    p+=arr [ i ]}\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the elements\n  with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addTwoDigits = (arr, k) => {\n  let p = 0;\n  let i = 0;\n  while (i < k) {\n    if (arr [ i ] < 10 && arr [ i ] > -10) {\n      p+=arr [ i ]}\n    else if (arr [ i ] >= 10 && arr [ i ] <= -10) {\n      p+=arr [ i ]}\n    else if (arr [ i ] >= -10 && arr [ i ] <= 10) {\n      p+=arr [ i ]}\n    i+=1\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      k++;}\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n    }\n  return arr\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n        } else {\n          break\n        }\n       }\n       k = k + 1\n    }\n    if (k == ind) {\n      break\n    }\n    let temp = arr [ ind ]\n    arr [ ind ] = arr [ k ]\n    arr [ k ] = temp\n  }\n  return arr\n}\n\nconst sortArray2 =(array) => {\n  let arr = array\n  let ind = 0\n  let k = 0\n  let tot = 0\n  while (k < arr.length) {\n    let temp = arr [ k ]\n    arr [ k ] = arr [ ind ]\n    arr [ ind ] = temp\n    k = k + 1\n    ind = (ind + 1) % arr.length\n    tot = tot + temp\n  }\n  return arr\n}\n\n// console.log(sortArray([5,4,3,0,1,2,6]))\n// console.log(sortArray([6,5,4,3,2,1,0]))\n// console.log(sortArray([2,4,3,0,1,5,6]))\n// console.log(sortArray([6,5,4,3,2,1,0]))\n// console.log(sortArray([2,4,3,0,1,5,6,7]))\n// console.log(sortArray([6,5,4,3,2,1,0,7]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12,13]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13,14]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12,13,14]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13,14,15]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12,13,14,15]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13,14,15,16]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12,13,14,15,16]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13,14,15,16,17]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12,13,14,15,16,17]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\n// console.log(sortArray([6,5,4,3,2,1,0,7,8,9,10,11,12,13,14,15,16,17,18,19]))\n// console.log(sortArray([2,4,3,0,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] == ' ') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        c = 0;\n        }\n      else {\n        t+=text [ i ]\n        }\n      }\n    i++;}\n  if (c == 1) {\n    t+='_'}\n  if (c == 2) {\n    t+='__'}\n  if (c > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0\n      }\n      else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all occurrences of all spaces with -\n  \n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  */\nconst fixSpace =(text) => {\n  let t = ''\n  let i = 0\n  while (i < text.length) {\n    if (text [ i ] =='') {\n      t+= '-'\n    }\n    else {\n      t+=text [ i ]\n    }\n    i++\n  }\n  return t\n}\n\nmodule.exports.fixSpaces = fixSpaces\nmodule.exports.fixSpace = fixSpace\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n}\n \nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [ ... l ].sort((a, b) => a - b);\n  var sort2 = [ ... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(l) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [... l ].sort((a, b) => a - b);\n  var sort2 = [... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n  JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst main = () => {\n  console.log(monotonic([1, 2, 4, 20]));\n  console.log(monotonic([1, 20, 4, 10]));\n  console.log(monotonic([4, 1, 0, -10]));\n  \n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n}\n\n/* Converts a number to a string\n  >>> convert(0)\n  '0'\n  >>> convert(1)\n  '1'\n  >>> convert(-1)\n  '-1'\n  >>> convert(3.14)\n  '3.14'\n  >>> convert(Math.PI)\n  '3.141592653589793'\n  */\nconst convert = (number) => {\n  return parseFloat(number).toString();\n}\n\n/* Returns the number of times a given string appears in a given string\n  >>> count('a', 'abacab')\n  2\n  >>> count('a', 'ab')\n  0\n  >>> count('a', '')\n  0\n  */\nconst count = (substring, string) => {\n  let count = 0;\n  let current = 0;\n  while (current < string.length) {\n    if (string.charAt(current) === substring.charAt(0)) {\n      count++;\n      current++;\n      while (current < string.length && string.charAt(current) === substring.charAt(0)) {\n        count++;\n        current++;\n      }\n    }\n    current++;\n  }\n  return count;\n}\n\n/* Counts the number of times a string appears in a given string\n  >>> countString('abacab', 'abacab')\n  2\n  >>> countString('abacab', 'ab')\n  0\n  >>> countString('abacab', '')\n  0\n  */\nconst countString = (substring, string) => {\n  let count = 0;\n  let current = 0;\n  while (current < string.length) {\n    if (string.charAt(current) === substring.charAt(0)) {\n      count++;\n      current++;\n    }\n    current++;\n  }\n  return count;\n}\n\n/* Returns a string of the given number of spaces\n  >>> spaces(1)\n ''\n  >>> spaces(2)\n ' '\n  >>> spaces(3)\n '  '\n  >>> spaces(4)\n '   '\n  >>> spaces(5)\n '    '\n  >>> spaces(6)\n '     '\n  */\nconst spaces = (length) => {\n  return new Array(length).fill(' ');\n}\n\n/* Find the character that appears most in a string\n  >>> char('')\n  ''\n  >>> char('a')\n  'a'\n  >>> char('aa')\n  'a'\n  >>> char('aaa')\n  'a'\n  >>> char('aaaa')\n  'a'\n  >>> char('aaaaa')\n  'a'\n  >>> char('aaaaaa')\n  'a'\n  >>> char('aaaaaaa')\n  'a'\n  >>> char('aaaaaaaa')\n  'a'\n  */\nconst char = (string) => {\n  let counter = 0;\n  let current = 0;\n  while (current < string.length) {\n    counter++;\n    current++;\n    while (current < string.length && string.charAt(current) === string.charAt(current - 1)) {\n      counter++;\n      current++;\n    }\n  }\n  return string.charAt(counter - 1);\n}\n\n/* Returns a string of the given number of characters\n  >>> charString(1)\n ''\n  >>> charString(2)\n ' '\n  >>> charString(3)\n '  '\n  >>> charString(4)\n '   '\n  >>> charString(5)\n '    '\n  >>> charString(6)\n '     '\n  */\nconst charString = (length) => {\n  return new Array(length).fill(' ');\n}\n\n/* Returns the number of times a string appears in a given string\n  >>> contains('a', 'abacab')\n  2\n  >>> contains('a', 'ab')\n  0\n  >>> contains('a', '')\n  0\n  >>> contains('a', 'b')\n  0\n  */\nconst contains = (substring, string) => {\n  let count = 0;\n  let current = 0;\n  while (current < string.length) {\n    if (string.charAt(current) === substring.charAt(0)) {\n      count++;\n      current++;\n      while (current < string.length && string.charAt(current) === substring.charAt(0)) {\n        count++;\n        current++;\n      }\n    }\n    current++;\n  }\n  return count;\n}\n\n/* Returns the index of a character in a string\n  >>> index('a', 'abacab')\n  2\n  >>> index('a', 'ab')\n  0\n  >>> index('a', '')\n  0\n  >>> index('a', 'b')\n  0\n  */\nconst index = (character, string) => {\n  let current = 0;\n  let count = 0;\n  while (current < string.length) {\n    if (string.charAt(current) === character) {\n      count++;\n      current++;\n    }\n    current++;\n  }\n  return count;\n}\n\n/* Finds the index of a character in a string\n  >>> indexString('a', 'abacab')\n  2\n  >>> indexString('a', 'ab')\n  0\n  >>> indexString('a', '')\n  0\n  >>> indexString('a', 'b')\n  0\n  */\nconst indexString = (character, string) => {\n  let current = 0;\n  let count = 0;\n  while (current < string.length) {\n    if (string.charAt(current) === character) {\n      count++;\n      current++;\n    }\n  }\n  return count;\n}\n\n/* Returns a string of the given number of characters\n  >>> charString(1)\n ''\n  >>> charString(2)\n ' '\n  >>> charString(3)\n '  '\n  >>> charString(4)\n '   '\n  >>> charString(5)\n '    '\n  >>> charString(6)\n '     '\n  */\nconst"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let i = 0;\n  while (i < lst2.length) {\n     {\n      if (lst2 [ i ] % 2 == 0) {\n        t++}\n      }\n    i++;}\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2 [ i ] % 2 == 0) {\n      t--}\n    }\n  \n  return (t == 0)? \"YES\" : \"NO\";\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n};\n\n/* Return index of first occurence of character in string\n  >>> strindex('','a')\n  -1\n  >>> strindex('abc','c')\n  2\n  >>> strindex('abc','x')\n  -1\n  */\nconst strindex =(string, char) => {\n  let i = 0;\n  while(string[i]!== char) i++;\n  return i;\n};\n\n/* Return last index of character in string\n  >>> strlastindex('','a')\n  -1\n  >>> strlastindex('abc','c')\n  2\n  >>> strlastindex('abc','x')\n  3\n  */\nconst strlastindex =(string, char) => {\n  let i = strlen(string);\n  while(string[i]!== char) i--;\n  return i;\n};\n\n/* Return string without last occurence of character\n  >>> strlstrip('abc','c')\n  'abc'\n  >>> strlstrip('abc','x')\n  'abc'\n  */\nconst strlstrip =(string, char) => {\n  let i = strlastindex(string, char);\n  return string.substring(0, i);\n};\n\n/* Return string without first occurence of character\n  >>> strrstrip('abc','c')\n  'abc'\n  >>> strrstrip('abc','x')\n  'abc'\n  */\nconst strrstrip =(string, char) => {\n  let i = strindex(string, char);\n  return string.substring(i+1);\n};\n\n/* Return string with first occurence of character removed\n  >>> strstrip('abc','c')\n  'abc'\n  >>> strstrip('abc','x')\n  'abc'\n  */\nconst strstrip =(string, char) => {\n  let i = strindex(string, char);\n  return string.substring(0, i);\n};\n\n/* Return true if string contains character\n  >>> strcontains('','a')\n  false\n  >>> strcontains('abc','c')\n  true\n  >>> strcontains('abc','x')\n  false\n  */\nconst strcontains =(string, char) => {\n  return strindex(string, char)!== -1;\n};\n\n/* Return true if string ends with character\n  >>> strendswith('','a')\n  false\n  >>> strendswith('abc','c')\n  true\n  >>> strendswith('abc','x')\n  false\n  */\nconst strendswith =(string, char) => {\n  return strindex(string, char) === strlen(string) - 1;\n};\n\n/* Return true if string starts with character\n  >>> strstartswith('','a')\n  false\n  >>> strstartswith('abc','c')\n  true\n  >>> strstartswith('abc','x')\n  false\n  */\nconst strstartswith =(string, char) => {\n  return strindex(string, char) === 0;\n};\n\n/* Return true if string contains all characters in second string\n  >>> strcontainsall('','')\n  true\n  >>> strcontainsall('abc','a')\n  true\n  >>> strcontainsall('abc','z')\n  false\n  */\nconst strcontainsall =(string, str) => {\n  for(let i = 0; i < str.length; i++) {\n    if(!strcontains(string, str[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if string contains none of characters in second string\n  >>> strcontainsnone('','')\n  true\n  >>> strcontainsnone('abc','a')\n  false\n  >>> strcontainsnone('abc','z')\n  true\n  */\nconst strcontainsnone =(string, str) => {\n  return!strcontainsall(string, str);\n};\n\n/* Return true if string is equal to second string\n  >>> strequal('','')\n  true\n  >>> strequal('abc','a')\n  false\n  >>> strequal('abc','z')\n  false\n  */\nconst strequal =(string, str) => {\n  return string === str;\n};\n\n/* Return true if string is not equal to second string\n  >>> strentequal('','')\n  false\n  >>> strentequal('abc','a')\n  false\n  >>> strentequal('abc','z')\n  true\n  */\nconst strentequal =(string, str) => {\n  return string!== str;\n};\n\n/* Return true if string contains any of the characters in second string\n  >>> strcontainsany('','')\n  false\n  >>> strcontainsany('abc','a')\n  true\n  >>> strcontainsany('abc','z')\n  true\n  */\nconst strcontainsany =(string, str) => {\n  for(let i = 0; i < str.length; i++) {\n    if(strcontains(string, str[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Return true if string contains none of the characters in second string\n  >>> strcontainsnoneany('','')\n  true\n  >>> strcontainsnoneany('abc','a')\n  false\n  >>> strcontainsnoneany('abc','z')\n  true\n  */\nconst strcontainsnoneany =(string, str) => {\n  return!strcontainsany(string, str);\n};\n\n/* Return true if string contains all of the characters in second string\n  >>> strcontainsallany('','')\n  true\n  >>> strcontainsallany('abc','a')\n  false\n  >>> strcontainsallany('abc','z')\n  true\n  */\nconst strcontainsallany =(string, str) => {\n  for(let i = 0; i < str.length; i++) {\n    if(!strcontains(string, str[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if string contains none of the characters in second string\n  >>> strcontainsnoneany('','')\n  true\n  >>> strcontainsnone"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ] != pat [ j + k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          i++; return true\n          }\n        }\n      }\n    i++;}\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ]!= pat [ j + k ]) {\n            y = 0}\n         \n        }\n        if (y == 1) {\n          return true}\n      }\n      i += l}\n    }\n  }\n  return false\n}\n\n// https://www.hackerrank.com/challenges/dynamic-programming-set-3-string-similarity/problem\nconst strSimilarity = (s1, s2) => {\n  let m = s1.length\n  let n = s2.length\n  let dp = new Array(m + 1)\n  dp[0] = 1\n  let i = 1\n  while (i <= m) {\n    for (let j = 1; j <= n; j++) {\n      dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n    }\n    i++\n  }\n  return dp[m]\n}\n\n// https://www.hackerrank.com/challenges/dynamic-programming-set-3-string-similarity/submissions/\nconst strSimilarityDP = (s1, s2) => {\n  let m = s1.length\n  let n = s2.length\n  let dp = new Array(m + 1)\n  dp[0] = 1\n  let i = 1\n  while (i <= m) {\n    for (let j = 1; j <= n; j++) {\n      dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n    }\n    i++\n  }\n  return dp[m]\n}\n\n// https://www.hackerrank.com/challenges/dynamic-programming-set-3-string-similarity/submissions/\nconst strSimilarityDP2 = (s1, s2) => {\n  let m = s1.length\n  let n = s2.length\n  let dp = new Array(m + 1)\n  dp[0] = 1\n  let i = 1\n  while (i <= m) {\n    for (let j = 1; j <= n; j++) {\n      dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n    }\n    i++\n  }\n  return dp[m]\n}\n\n/*\n\nsolution 1:\n\n  function strSimilarity(s1, s2) {\n    let m = s1.length\n    let n = s2.length\n    let dp = new Array(m + 1)\n    dp[0] = 1\n    let i = 1\n    while (i <= m) {\n      for (let j = 1; j <= n; j++) {\n        dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n      }\n      i++\n    }\n    return dp[m]\n  }\n\n*/\n\n// solution 2:\n\n/*\nsolution 2:\n\n  function strSimilarity(s1, s2) {\n    let m = s1.length\n    let n = s2.length\n    let dp = new Array(m + 1)\n    dp[0] = 1\n    let i = 1\n    while (i <= m) {\n      for (let j = 1; j <= n; j++) {\n        dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n      }\n      i++\n    }\n    return dp[m]\n  }\n\n*/\n\n// solution 3:\n\n/*\nsolution 3:\n\n  function strSimilarity(s1, s2) {\n    let m = s1.length\n    let n = s2.length\n    let dp = new Array(m + 1)\n    dp[0] = 1\n    let i = 1\n    while (i <= m) {\n      for (let j = 1; j <= n; j++) {\n        dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n      }\n      i++\n    }\n    return dp[m]\n  }\n\n*/\n\n// solution 4:\n\n/*\nsolution 4:\n\n  function strSimilarity(s1, s2) {\n    let m = s1.length\n    let n = s2.length\n    let dp = new Array(m + 1)\n    dp[0] = 1\n    let i = 1\n    while (i <= m) {\n      for (let j = 1; j <= n; j++) {\n        dp[i] = Math.min(dp[i - 1], dp[i - 1] + (s2[j - 1] === s1[i - 1]? 1 : 0))\n      }\n      i++\n    }\n    return dp[m]\n  }\n\n*/\n\n// solution 5:\n\n/*\nsolution 5:\n\n  function strSimilarity(s1, s2) {\n    let"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst roundNumber =(number) => {\n  return Math.round(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimals =(number) => {\n  return number.toString().split('.')[0];\n}\n\nexport {\n  truncateInteger,\n  truncateDecimals,\n  truncateNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      n =(n - n % 10) / 10\n      }\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n      }\n      n = n / 10\n      if (n === 0) return p;\n    }\n  }\n}\n\nconst product = (n) => {\n  let p = 1\n  for (let i = 1; i <= n; i++) {\n    p *= digits(i)\n  }\n  return p\n}\n\nconsole.log(product(9))\nconsole.log(product(233))\nconsole.log(product(123456789))\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 0;\n      while (i < txt.length) {\n         {\n          let m = txt [ i ].charCodeAt()\n          if (m >= 97 && m <= 122 && m % 2 == 0) {\n            p++\n            }\n          }\n        i++;}\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n      const len = txt.length\n      const l = (txt.length + 1)\n      let s = \"\"\n      let n = \"\"\n      let o = \"\"\n      for (let i = 0; i < len; i++) {\n        if (txt[i].match(/[a-z]/i)) {\n          n = txt[i]\n        }\n        else if (txt[i].match(/[A-Z]/i)) {\n          o = txt[i]\n        }\n        else if (txt[i].match(/[0-9]/i)) {\n          s = txt[i]\n        }\n        else {\n          n = txt[i]\n          o = txt[i]\n          s = txt[i]\n        }\n        if (n) {\n          if (o && (p % 2)) {\n            return [n,o,s]\n          }\n          else {\n            return [n,s]\n          }\n        }\n        else if (o &&!s) {\n          if (p % 2) {\n            return [o,s]\n          }\n          else {\n            return [o]\n          }\n        }\n        else if (s) {\n          return [s]\n        }\n        p++\n      }\n      return txt\n    }\n  }\n}\n\n/* Given a number, return a string representation of the number in words.\n  Example\n  formatNumber(1) ➞ \"one\"\n  formatNumber(2) ➞ \"two\"\n  formatNumber(3) ➞ \"three\"\n  formatNumber(4) ➞ \"four\"\n  formatNumber(5) ➞ \"five\"\n  formatNumber(7) ➞ \"seven\"\n  formatNumber(11) ➞ \"eleven\"\n  formatNumber(12) ➞ \"twelve\"\n  formatNumber(13) ➞ \"thirteen\"\n  formatNumber(14) ➞ \"fourteen\"\n  formatNumber(15) ➞ \"fifteen\"\n  formatNumber(16) ➞ \"sixteen\"\n  formatNumber(17) ➞ \"seventeen\"\n  formatNumber(18) ➞ \"eighteen\"\n  formatNumber(19) ➞ \"nineteen\"\n  formatNumber(23) ➞ \"twenty-three\"\n  formatNumber(24) ➞ \"twenty-four\"\n  formatNumber(25) ➞ \"twenty-five\"\n  formatNumber(26) ➞ \"twenty-six\"\n  formatNumber(27) ➞ \"twenty-seven\"\n  formatNumber(28) ➞ \"twenty-eight\"\n  formatNumber(29) ➞ \"twenty-nine\"\n  formatNumber(30) ➞ \"thirty\"\n  formatNumber(31) ➞ \"thirty-one\"\n  formatNumber(32) ➞ \"thirty-two\"\n  formatNumber(33) ➞ \"thirty-three\"\n  formatNumber(34) ➞ \"thirty-four\"\n  formatNumber(35) ➞ \"thirty-five\"\n  formatNumber(36) ➞ \"thirty-six\"\n  formatNumber(37) ➞ \"thirty-seven\"\n  formatNumber(38) ➞ \"thirty-eight\"\n  formatNumber(39) ➞ \"thirty-nine\"\n  formatNumber(40) ➞ \"forty\"\n  formatNumber(42) ➞ \"forty-two\"\n  formatNumber(43) ➞ \"forty-three\"\n  formatNumber(44) ➞ \"forty-four\"\n  formatNumber(45) ➞ \"forty-five\"\n  formatNumber(46) ➞ \"forty-six\"\n  formatNumber(47) ➞ \"forty-seven\"\n  formatNumber(48) ➞ \"forty-eight\"\n  formatNumber(49) ➞ \"forty-nine\"\n  formatNumber(50) ➞ \"fifty\"\n  formatNumber(55) ➞ \"fifty-five\"\n  formatNumber(56) ➞ \"fifty-six\"\n  formatNumber(57) ➞ \"fifty-seven\"\n  formatNumber(58) ➞ \"fifty-eight\"\n  formatNumber(59) ➞ \"fifty-nine\"\n  formatNumber(60) ➞ \"sixty\"\n  formatNumber(63) ➞ \"sixty-three\"\n  formatNumber(64) ➞ \"sixty-four\"\n  formatNumber(65) ➞ \"sixty-five\"\n  formatNumber(66) ➞ \"sixty-six\"\n  formatNumber(67) ➞ \"sixty-seven\"\n  formatNumber(68) ➞ \"sixty-eight\"\n  formatNumber(69) ➞ \"sixty-nine\"\n  formatNumber(70) ➞ \"seventy\"\n  formatNumber(77) ➞ \"seventy-seven\"\n  formatNumber(78) ➞ \"seventy-eight\"\n  formatNumber(79) ➞ \"seventy-nine\"\n  formatNumber(80) ➞ \"eighty\"\n  formatNumber(84) ➞ \"eighty-four\"\n  formatNumber(85) ➞ \"eighty-five\"\n  formatNumber(86) ➞ \"eighty-six\"\n  formatNumber("}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  ret.add(e1);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n  if (ret.has(e2)) {\n    ret.add(e1);\n  }\n \n  return new Array(ret.values());\n};\n\n\n/*\n  Returns the number of words in the list.\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [3, 5, 9, 1, 2, 5, 3, 4])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [3, 5, 9, 1, 2, 5, 3, 4])\n  5\n  >>> common([], [3, 5, 9, 1, 2, 5, 3, 4])\n  0\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [])\n  0\n  >>> common([], [])\n  0\n  >>> common([], [1, 3, 6, 2, 4, 8, 5, 9])\n  0\n  >>> common([], [3, 5, 9, 1, 2, 5, 3, 4])\n  0\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [1, 3, 6, 2, 4, 8, 5, 9])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [1, 3, 6, 2, 4, 8, 5, 9, 4])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [1, 3, 6, 2, 4, 8, 5, 9, 1])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9], [1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1], [1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1], [1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1], [1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1], [1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1])\n  10\n  >>> common([1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3, 6, 2, 4, 8, 5, 9, 1, 3"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n  for (var i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans += 1;\n    if (ns[i] % 5 == 0)\n      ans += 1;\n    if (ns[i] % 7 == 0)\n      ans += 1;\n  }\n  return ans;\n};\n\n/*\n\nThis function generates the number of times the digit 7 appears in the \nnumbers less than n which are divisible by 11 or 13.\n\n>>> fizzBuzz(50)\n0\n>>> fizzBuzz(78)\n2\n>>> fizzBuzz(79)\n3\n*/\nconst fizzBuzz2 =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n  for (var i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans += 1;\n    if (ns[i] % 5 == 0)\n      ans += 1;\n    if (ns[i] % 7 == 0)\n      ans += 1;\n  }\n  return ans;\n};\n\nmodule.exports = {\n  fizzBuzz: fizzBuzz,\n  fizzBuzz2: fizzBuzz2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i != j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        let new_distance = Math.abs(a - b);\n        if (new_distance < distance) {\n          distance = new_distance;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;}\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i!= j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n        let delta = Math.abs(a - b);\n        if (delta < distance) {\n          distance = delta;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      }\n    }\n    i++;\n  }\n  return closest_pair;\n};\n\nmodule.exports = findClosestElements;<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1 != 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        else {\n          y = - y; y = y - y % 1}\n        }\n      p+=y * y\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1!= 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n        if (y < 0) {\n          y = y + y % 1 - 1}\n        }\n      }\n      p += y * y\n      i += 1\n    }\n  }\n  return p\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i != j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            }\n          }\n        }\n      j++;}\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i!= j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n          }\n        }\n        j++;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Check if all numbers in given list of numbers are positive\n  >>> hasAllPositive([1, 2, 3, 4])\n  true\n  >>> hasAllPositive([1, 2, 3, -4])\n  false\n  >>> hasAllPositive([1, 2, 3, 0])\n  false\n  >>> hasAllPositive([1, 2, 3, 4, -4])\n  false\n  >>> hasAllPositive([1, 2, 3, 4, -4, 0])\n  false\n  */\nconst hasAllPositive =(numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Returns the largest number in given list of numbers\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4])\n  4\n  >>> largestNumber([1, 2, 3])\n  3\n  >>> largestNumber([1, 2])\n  2\n  >>> largestNumber([1])\n  1\n  */\nconst largestNumber =(numbers) => {\n  let largest = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (largest < numbers[i]) {\n      largest = numbers[i];\n    }\n  }\n  return largest;\n}\n\n/*\n  Returns the smallest number in given list of numbers\n  >>> smallestNumber([1, 2, 3, 4, 5])\n  1\n  >>> smallestNumber([1, 2, 3, 4])\n  1\n  >>> smallestNumber([1, 2, 3])\n  1\n  >>> smallestNumber([1])\n  1\n  */\nconst smallestNumber =(numbers) => {\n  let smallest = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (smallest > numbers[i]) {\n      smallest = numbers[i];\n    }\n  }\n  return smallest;\n}\n\nmodule.exports = {\n  hasCloseElements,\n  largestNumber,\n  hasAllPositive,\n  smallestNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (p == 1) {\n        t.push(i)}\n      }\n    i++;}\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  Find the largest prime number less than n.\n  For example:\n  findLargestPrime(5) => 3\n  findLargestPrime(11) => 7\n  findLargestPrime(0) => 2\n  findLargestPrime(1) => 2\n  findLargestPrime(18) => 7\n  findLargestPrime(10000000000000) => 2147483647\n*/\nconst findLargestPrime = (n) => {\n  let t = 2\n  while (t < n) {\n    if (isPrime(t)) {\n      return t\n    }\n    t++\n  }\n}\n\n/*\n  Check if number n is prime.\n  For example:\n  isPrime(1) => true\n  isPrime(5) => true\n  isPrime(6) => false\n*/\nconst isPrime =(n) => {\n  let i = 2\n  while (i <= n/2) {\n    if (n % i == 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function to find the sum of all multiples of 3 or 5 below 1000.\n  For example:\n  sumOfMultiples(1000) => 3 + 7 + 4 + 5 + 3 + 7 + 8 + 9 + 4 + 9 + 5 + 6 = 58\n*/\nconst sumOfMultiples = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 == 0 || i % 5 == 0) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*\n  Find the difference between the sum of the squares of the first ten natural numbers and the square of the sum.\n  For example:\n  difference(10) => 22 - 32 = -2\n*/\nconst difference = (n) => {\n  let sumOfSquares = 0\n  let squareSum = 0\n  for (let i = 1; i <= n; i++) {\n    sumOfSquares += i * i\n    squareSum += i\n  }\n  return squareSum - sumOfSquares\n}\n\n/*\n  Write a function that returns the largest prime number that is less than a given number n.\n  For example:\n  findLargestPrime(20) => 19\n  findLargestPrime(11) => 7\n  findLargestPrime(0) => 2\n  findLargestPrime(1) => 2\n  findLargestPrime(18) => 7\n  findLargestPrime(10000000000000) => 2147483647\n*/\nconst findLargestPrimeLessThan = (n) => {\n  let i = 2\n  while (i < n) {\n    if (isPrime(i)) {\n      return i\n    }\n    i++\n  }\n}\n\n/*\n  Write a function that returns the sum of all primes that are less than a given number n.\n  For example:\n  sumOfPrimes(20) => 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + 31 + 37 + 41 + 43 + 47 + 53 + 59 + 61 + 67 + 71 + 73 + 79 + 83 + 89 + 97 + 101 + 103 + 107 + 109 + 113 + 127 + 131 + 137 + 139 + 149 + 151 + 157 + 163 + 167 + 173 + 179 + 181 + 191 + 193 + 197 + 199 + 203 + 209 + 227 + 233 + 239 + 241 + 251 + 257 + 263 + 269 + 271 + 277 + 283 + 293 + 307 + 311 + 313 + 317 + 331 + 337 + 347 + 349 + 353 + 359 + 367 + 373 + 379 + 383 + 389 + 397 + 401 + 409 + 419 + 421 + 431 + 433 + 439 + 443 + 449 + 457 + 461 + 463 + 467 + 479 + 487 + 491 + 499 + 503 + 509 + 521 + 523 + 541 + 547 + 557 + 563 + 569 + 571 + 577 + 587 + 593 + 599 + 601 + 607 + 613 + 617 + 619 + 631 + 641 + 643 + 647 + 653 + 659 + 661 + 673 + 677 + 683 + 691 + 701 + 709 + 719 + 727 + 733 + 739 + 743 + 751 + 757 + 761 + 769 + 773 + 787 + 797 + 809 + 811 + 821 + 823 + 827 + 829 + 839 + 853 + 857 + 859 + 863 + 877 + 881 + 883 + 887 + 907 + 911 + 919 + 929 + 937 + 941 + 947 + 953 + 967 + 971 + 977 + 983 + 991 + 997 + 1009 + 1013 + 1019 + 1021 + 1031 + 1033 + 1039 + 1051 + 1061 + 1063 + 1069 + 1087 + 1091 + 1093 + 1097 + 1103 + 1109 + 1117 + 1123 + 1129 + 1131 + 1133 + 1141 + 1147 + 1151 + 1159 + 1163 + 1171 + 1181 + 1187 + 1193 + 1201 + 1213 + 1217 + 1223 + 1229 + 1231 + 1237 + 1249 + 1259 + 1277 + 1279 + 1283 + 1289 + 1291 + 1297 + 1301 + 1303 + 1307"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw ? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      sw = !sw;\n      }\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n      sw =!sw;\n     }\n  }\n\n  return res;\n};\n\n\nconsole.log(strangeSortList([1,2,3,4]));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that takes a number.\n  Returns the sum of all the numbers that are smaller than the given number, or 0 if the number is not a number.\n  Examples\n  smallerThan(4) ➞ 3\n  smallerThan(3) ➞ 0\n  smallerThan(2) ➞ 1\n  smallerThan(1) ➞ 0\n  smallerThan(0) ➞ 0\n  smallerThan(-4) ➞ -3\n  smallerThan(-3) ➞ -4\n  smallerThan(-2) ➞ -1\n  smallerThan(-1) ➞ -2\n  smallerThan(-0) ➞ -1\n  smallerThan(0) ➞ 0\n  */\nconst smallerThan = (number) => {\n  if (number % 1 === 0 && number < 0) {\n    return number * -1\n  } else {\n    return number\n  }\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the product of the two numbers, or 0 if the two numbers are not numbers.\n  Examples\n  product(4, 3) ➞ 12\n  product(3, 2) ➞ 0\n  product(2, 2) ➞ 4\n  product(2, 1) ➞ 0\n  product(1, 1) ➞ 1\n  product(0, 0) ➞ 0\n  product(-4, 3) ➞ 0\n  product(-3, 2) ➞ 0\n  product(-2, 2) ➞ 0\n  product(-2, 1) ➞ 0\n  product(-1, 1) ➞ 0\n  product(-1, 0) ➞ 0\n  */\nconst product = (a, b) => {\n  if (a % 1 === 0 && b % 1 === 0) {\n    return a * b\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the first number if the two numbers are equal.\n  Else, returns the larger number.\n  Examples\n  equals(5, 5) ➞ 5\n  equals(4, 5) ➞ 4\n  equals(6, 5) ➞ 6\n  equals(7, 5) ➞ 7\n  */\nconst equals = (a, b) => {\n  if (a === b) {\n    return a\n  } else {\n    return a > b? a : b\n  }\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the smaller of the two numbers.\n  Examples\n  smaller(5, 4) ➞ 4\n  smaller(6, 5) ➞ 5\n  smaller(5, 6) ➞ 5\n  smaller(7, 5) ➞ 5\n  */\nconst smaller = (a, b) => {\n  return a < b? a : b\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the larger of the two numbers.\n  Examples\n  smaller(5, 4) ➞ 5\n  smaller(6, 5) ➞ 6\n  smaller(5, 6) ➞ 6\n  smaller(7, 5) ➞ 7\n  */\nconst larger = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the sum of the two numbers.\n  Examples\n  sum(5, 4) ➞ 9\n  sum(6, 5) ➞ 11\n  sum(5, 6) ➞ 11\n  sum(7, 5) ➞ 17\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the difference between the two numbers.\n  Examples\n  difference(5, 4) ➞ 1\n  difference(6, 5) ➞ 1\n  difference(5, 6) ➞ 0\n  difference(7, 5) ➞ 3\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the sum of the two numbers.\n  Examples\n  difference(5, 4) ➞ 1\n  difference(6, 5) ➞ 1\n  difference(5, 6) ➞ 0\n  difference(7, 5) ➞ 3\n  */\nconst sumOfDifference = (a, b) => {\n  return a - b\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the average of the two numbers.\n  Examples\n  average(5, 4) ➞ 4\n  average(6, 5) ➞ 5\n  average(5, 6) ➞ 5\n  average(7, 5) ➞ 5\n  */\nconst average = (a, b) => {\n  return (a + b) / 2\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the larger of the two numbers.\n  Examples\n  larger(5, 4) ➞ 5\n  larger(6, 5) ➞ 6\n  larger(5, 6) ➞ 6\n  larger(7, 5) ➞ 7\n  */\nconst largerOf = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Create a function that takes 2 numbers.\n  Returns the smaller of the two numbers.\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(n - 1) + fib(n - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n  return 1;\n  else\n  return fib(n-1) + fib(n-2);\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n  return 1;\n  else\n  return fib(n-1) + fib(n-2);\n}\n\nmodule.exports = {\n  fib\n}<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([ ... new Set(s0) ].sort()) === JSON.stringify([ ... new Set(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([... new Set(s0) ].sort()) === JSON.stringify([... new Set(s1) ].sort());\n \n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          p++}\n        }\n      j++;}\n    if (p > s ||(p == s && words [ i ] < words [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return words [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n        }\n        if (y == 1) {\n          p++}\n        }\n        j++\n      }\n    }\n    if (p > u) {\n      s = i;\n      u = p}\n  }\n  return words [ s]\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n\n/*\n  Write a function that takes a string and returns a new string where the first\n  character of each word is uppercase.\n\n  toUpperCase(\"hello\") === \"HELLO\"\n  toUpperCase(\"hello world\") === \"HELLO WORLD\"\n  toUpperCase(\"hi\") === \"HI\"\n  */\nconst toUpperCase =(s) => {\n  let word = ''\n  let i = 0\n  for (i = 0; i < s.length; i++) {\n    if (i == 0) {\n      word += s[i].toUpperCase()}\n    else {\n      word += s[i].toUpperCase()}\n  }\n  return word\n}\nconsole.log(toUpperCase(\"hello\"));\nconsole.log(toUpperCase(\"hello world\"));\nconsole.log(toUpperCase(\"hi\"));\n\n/*\n  Write a function that takes a string and returns a new string where the last\n  character of each word is uppercase.\n\n  toLowerCase(\"HELLO\") === \"hello\"\n  toLowerCase(\"HELLO WORLD\") === \"hello world\"\n  toLowerCase(\"HI\") === \"hi\"\n  */\nconst toLowerCase =(s) => {\n  let word = ''\n  let i = 0\n  for (i = 0; i < s.length; i++) {\n    if (i == 0) {\n      word += s[i].toLowerCase()}\n    else {\n      word += s[i].toLowerCase()}\n  }\n  return word\n}\nconsole.log(toLowerCase(\"HELLO\"));\nconsole.log(toLowerCase(\"HELLO WORLD\"));\nconsole.log(toLowerCase(\"HI\"));\n\n\n/*\n  Write a function that takes a string and returns a new string where the first\n  and last characters of each word are uppercase.\n\n  toUpperCaseFirst(\"hello\") === \"Hello\"\n  toUpperCaseFirst(\"hello world\") === \"Hello world\"\n  toUpperCaseFirst(\"hi\") === \"Hi\"\n  */\nconst toUpperCaseFirst =(s) => {\n  let word = ''\n  let i = 0\n  for (i = 0; i < s.length; i++) {\n    if (i == 0) {\n      word += s[i].toUpperCase()}\n    else {\n      word += s[i].toUpperCase()}\n  }\n  if (i == 0) {\n    word += s[i].toUpperCase()}\n  else {\n    word += s[i].toUpperCase()}\n  return word\n}\nconsole.log(toUpperCaseFirst(\"hello\"));\nconsole.log(toUpperCaseFirst(\"hello world\"));\nconsole.log(toUpperCaseFirst(\"hi\"));\n\n/*\n  Write a function that takes a string and returns a new string where the first\n  and last characters of each word are lowercase.\n\n  toLowerCaseFirst(\"Hello\") === \"hello\"\n  toLowerCaseFirst(\"Hello world\") === \"hello world\"\n  toLowerCaseFirst(\"Hi\") === \"hi\"\n  */\nconst toLowerCaseFirst =(s) => {\n  let word = ''\n  let i = 0\n  for (i = 0; i < s.length; i++) {\n    if (i == 0) {\n      word += s[i].toLowerCase()}\n    else {\n      word += s[i].toLowerCase()}\n  }\n  if (i == 0) {\n    word += s[i].toLowerCase()}\n  else {\n    word += s[i].toLowerCase()}\n  return word\n}\nconsole.log(toLowerCaseFirst(\"Hello\"));\nconsole.log(toLowerCaseFirst(\"Hello world\"));\nconsole.log(toLowerCaseFirst(\"Hi\"));\n\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n  return lst1;\n  else\n  return lst2;\n};\n\nconst totalMatchTest = [\n  ['hi', 'admin'],\n  ['hI', 'Hi'],\n  ['hi', 'hi', 'admin', 'project'],\n  ['hI', 'hi', 'hi']\n];\n\nconsole.log(totalMatchTest);\nconsole.log(totalMatch(totalMatchTest[0], totalMatchTest[1]));\nconsole.log(totalMatch(totalMatchTest[0], totalMatchTest[2]));\nconsole.log(totalMatch(totalMatchTest[0], totalMatchTest[3]));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ] != arr.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ]!= arr.at( - i - 1))\n   \n      ans ++;\n    i++;\n  }\n  return ans;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var f = [ 0, 1 ];\n  while (true) {\n    f.push(f.at( - 1) + f.at( - 2));\n    if (isPrime(f.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return f.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n  let a = 1, b = 1, c = 1, f = 1, g = 0, n = n;\n  while (n > 0) {\n    f = a + b;\n    if (isPrime(f) && g == 0) {\n      c = b;\n      g = a;\n      }\n    else {\n      a = b;\n      b = c;\n      }\n    n--;\n    }\n  return f;\n}\n\nconsole.log(primeFib(5));<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  let j = 2;\n  while (j < n + 1) {\n    if (n % j == 0 && isPrime(j))\n    largest = Math.max(largest, j);\n    j++;}\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  for (let i = 2; i <= Math.sqrt(n); i++)\n    if (isPrime(i) && n % i == 0)\n      return i;\n  return n;\n}\n\nconst isPrime =(n) => {\n  if (n <= 1)\n    return false;\n  if (n == 2)\n    return true;\n  for (let i = 2; i <= Math.sqrt(n); i++)\n    if (n % i == 0)\n      return false;\n  return true;\n}\n\nconsole.log(largestPrimeFactor(2048));\n\nconst isPrime =(n) => {\n  if (n <= 1)\n    return false;\n  if (n == 2)\n    return true;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i <= sqrtN; i++)\n    if (n % i == 0)\n      return false;\n  return true;\n}\n\nconsole.log(largestPrimeFactor(13195));\n\nconst isPrime =(n) => {\n  if (n <= 1)\n    return false;\n  if (n == 2)\n    return true;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i <= sqrtN; i++)\n    if (n % i == 0)\n      return false;\n  return true;\n}\n\nconsole.log(largestPrimeFactor(2048));\n\nconst isPrime =(n) => {\n  if (n <= 1)\n    return false;\n  if (n == 2)\n    return true;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i <= sqrtN; i++)\n    if (n % i == 0)\n      return false;\n  return true;\n}\n\nconsole.log(largestPrimeFactor(13195));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      f *= i;\n      if (i % 2 == 0) {\n        k.push(f)}\n      else {\n        k.push(p)}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n    }\n    k.push(p);\n    i++;\n  }\n  return k;\n}\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n  }\n  return ''\n}\n\nconsole.log(stringXor('010', '110'))<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return numbers.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n  var range = max_number - min_number;\n  var scaled_numbers = [];\n\n  for (var i = 0; i < numbers.length; i++) {\n    scaled_numbers.push(numbers[i] - min_number) / range;\n  }\n\n  return scaled_numbers;\n}\n\n\n/* Given a list of numbers, returns the median of that list\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (numbers) => {\n  if (numbers.length === 0) {\n    return undefined;\n  }\n  if (numbers.length === 1) {\n    return numbers[0];\n  }\n  var half = Math.floor(numbers.length / 2);\n  var first = numbers[half - 1];\n  var second = numbers[half];\n\n  if (first < second) {\n    return first;\n  } else {\n    return second;\n  }\n}\n\n/* Given a list of numbers, returns the mode of that list\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return undefined;\n  }\n  var counts = {};\n  var max_count = 0;\n\n  for (var i = 0; i < numbers.length; i++) {\n    var number = numbers[i];\n    if (counts.hasOwnProperty(number)) {\n      counts[number]++;\n    } else {\n      counts[number] = 1;\n    }\n\n    if (max_count < counts[number]) {\n      max_count = counts[number];\n    }\n  }\n\n  var max_index = undefined;\n  for (var i = 0; i < counts.length; i++) {\n    if (counts[i] === max_count) {\n      max_index = i;\n      break;\n    }\n  }\n\n  return numbers[max_index];\n}\n\n/* Given a list of numbers, returns the mean of that list\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  */\nconst mean = (numbers) => {\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\n\n/* Given a list of numbers, returns the standard deviation of that list\n  >>> deviation([1, 2, 3, 4, 5])\n  1.0\n  */\nconst deviation = (numbers) => {\n  var mean = mean(numbers);\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(sum / numbers.length);\n}\n\n/* Given a list of numbers, returns the median deviation of that list\n  >>> medianDeviation([1, 2, 3, 4, 5])\n  1.0\n  */\nconst medianDeviation = (numbers) => {\n  var median = median(numbers);\n  var deviation = deviation(numbers);\n  return median + deviation / 2;\n}\n\n/* Given a list of numbers, returns the range of that list\n  >>> range([1, 2, 3, 4, 5])\n  2.0\n  */\nconst range = (numbers) => {\n  return Math.max(... numbers) - Math.min(... numbers);\n}\n\n/* Given a list of numbers, returns the mode deviation of that list\n  >>> modeDeviation([1, 2, 3, 4, 5])\n  0.0\n  */\nconst modeDeviation = (numbers) => {\n  var mode = mode(numbers);\n  var deviation = deviation(numbers);\n  return mode + deviation / 2;\n}\n\n/* Given a list of numbers, returns the variance of that list\n  >>> variance([1, 2, 3, 4, 5])\n  2.5\n  */\nconst variance = (numbers) => {\n  var mean = mean(numbers);\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2);\n  }\n  return sum / (numbers.length - 1);\n}\n\n/* Given a list of numbers, returns the skewness of that list\n  >>> skewness([1, 2, 3, 4, 5])\n  0.0\n  */\nconst skewness = (numbers) => {\n  var variance = variance(numbers);\n  var mean = mean(numbers);\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 3);\n  }\n  return sum / (variance * (numbers.length - 1));\n}\n\n/* Given a list of numbers, returns the kurtosis of that list\n  >>> kurtosis([1, 2, 3, 4, 5])\n  3.0\n  */\nconst kurtosis = (numbers) => {\n  var mean = mean(numbers);\n  var variance = variance(numbers);\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 4);\n  }\n  return sum / (variance * (numbers.length - 1));\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  median,\n  mean,\n  mode,\n  medianDeviation,\n  modeDeviation,\n  range,\n  variance,\n  skewness,\n  kurtosis\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( / . /)\n  if (t.length != 2) {\n    return 'No'}\n  if (t [ 1 ] != 'txt' && t [ 1 ] != 'dll' && t [ 1 ] != 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  let i = 1;\n  while (i < t [ 0 ].length) {\n     {\n      if (t [ 0 ] [ i ].charCodeAt() >= 48 && t [ 0 ] [ i ].charCodeAt() <= 57) {\n        y++}\n      if (y > 3) {\n        i++; return 'No'}\n      }\n    i++;}\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  let b = t [ 1 ][ 0 ].charCodeAt()\n  if (( b >= 97 && b <= 122) || (b >= 65 && b <= 90) || (b >= 48 && b <= 57)) {\n    return 'No'}\n  return 'Yes'\n}\n\n/*Create a function which takes two strings representing two files' names, and returns\n  'Yes' if the two files' names are the same, and 'No' otherwise.\n  A two file's name is considered to be the same if and only if all the following conditions \n  are met:\n  - The two files' names are equal according to String.equal().\n  - The two files' names are the same according to fileNameCheck().\n  Examples:\n  fileNamesEqual(\"example.txt\", \"example.txt\") # => 'Yes'\n  fileNamesEqual(\"example.txt\", \"example.txt\") # => 'No'\n  fileNamesEqual(\"example.txt\", \"example.txt\") # => 'No'\n  fileNamesEqual(\"example.txt\", \"example.dll\") # => 'No'\n  fileNamesEqual(\"example.txt\", \"example.exe\") # => 'No'\n  fileNamesEqual(\"example.txt\", \"example.txt.exe\") # => 'No'\n  fileNamesEqual(\"example.txt\", \"example.txt.dll\") # => 'No'\n  fileNamesEqual(\"example.txt\", \"example.txt.txt\") # => 'No'\n  */\nconst fileNamesEqual =(file_name1, file_name2) => {\n  return (file_name1 === file_name2) && fileNameCheck(file_name1) === 'Yes' && fileNameCheck(file_name2) === 'Yes'\n}\n\n/* Create a function which takes a string representing a directory path, and returns\n  'Yes' if the path is a valid directory, and 'No' otherwise.\n  A path is considered to be valid if and only if:\n  - The path contains exactly one dot '.'\n  - The path starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n  - All the sub-directories and files in the path are valid.\n  - The path ends with a slash '/'\n  Examples:\n  pathIsValid(\"a/b/c/d\") # => 'Yes'\n  pathIsValid(\"a/b/c/d/e/f\") # => 'No'\n  pathIsValid(\"a/b/c/d/\") # => 'No'\n  pathIsValid(\"a/b/c/\") # => 'No'\n  pathIsValid(\"a/b/c\") # => 'No'\n  pathIsValid(\"a/b/c/d\") # => 'No'\n  */\nconst pathIsValid =(path) => {\n  let t = path.split( / /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ][ 0 ].charCodeAt()\n  if (!((a >= 97 && a <= 122) || (a >= 65 && a <= 90))) {\n    return 'No'}\n  let b = t [ 1 ][ 0 ].charCodeAt()\n  if (b!= '/') {\n    return 'No'}\n  let file_names = t [ 1 ][ 1 ].split( / /)\n  let count = 0\n  for (let i = 0; i < file_names.length; i++) {\n    if (fileNameCheck(file_names [ i ]) === 'Yes') {\n      count++\n    }\n  }\n  return (count === file_names.length)? 'Yes' : 'No'\n}\n\n/* Create a function which takes a string representing a directory path, and returns\n  'Yes' if the path is a valid directory, and 'No' otherwise.\n  A path is considered to be valid if and only if:\n  - The path contains exactly one dot '.'\n  - The path starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n  - All the sub-directories and files in the path are valid.\n  - The path ends with a slash '/'\n  Examples:\n  pathIsValid(\"a/b/c/d\") # => 'Yes'\n  pathIsValid(\"a/b/c/d/e/f\") # => 'No'\n  pathIsValid(\"a/b/c/d/\") # => 'No'\n  pathIsValid(\"a/b/c/\") # => 'No'\n  pathIsValid(\"a/b/c\") # => 'No'\n  pathIsValid(\"a/b/c/d\") # => 'No'\n  */\nconst pathIsValid =(path) => {\n  let t = path.split( / /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ][ 0 ].charCodeAt()\n  if"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(ord_char > 64 && ord_char < 91 ? ord_char : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n            if (ord_char < 48 || ord_char > 57) return prev;\n            else return prev + char;\n        }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n//# sourceMappingURL=filterBySubstring.js.map<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), arr.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n  var result = [ ];\n  var min = evens[0];\n  var min_index = 0;\n  for (var i = 0; i < evens.length; i++) {\n    if (min > evens[i]) {\n      min = evens[i];\n      min_index = i;\n    }\n  }\n  result.push([min, min_index]);\n  return result;\n};\n\nconsole.log(pluck([4,2,3]));\nconsole.log(pluck([1,2,3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '+') {\n        operand [ i ]+=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '-') {\n        operand [ i ]-=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    }\n  return operand;\n};\n\nconst doSolve =(array, operator, operand) => {\n  let i = 0\n  let j = 0\n  let result = []\n  for (i = 0; i < array.length; i++) {\n    while (j < operator.length) {\n      if (operator[j] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n          }\n        operand.splice(i + 1, 1);\n        operator.splice(j, 1);\n        j--;\n        result = result.concat(operand);\n        break;\n        }\n      j++;}\n    }\n  }\n  return result;\n};\n\nconst solve = (array, operator, operand) => {\n  let i = 0\n  let j = 0\n  let result = []\n  for (i = 0; i < array.length; i++) {\n    while (j < operator.length) {\n      if (operator[j] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n          }\n        operand.splice(i + 1, 1);\n        operator.splice(j, 1);\n        j--;\n        result = result.concat(operand);\n        break;\n        }\n      j++;}\n    }\n  }\n  return result;\n};\n\nconst main = (array, operator, operand) => {\n  let result = []\n  let i = 0\n  for (i = 0; i < array.length; i++) {\n    result = result.concat(doSolve(array, operator, operand));\n    }\n  return result;\n}\n\nconsole.log(main(['2', '3', '4', '5'], ['+', '*', '-'], ['2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ remaining + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n  } else {\n    return [ number, remaining ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                     the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ number + need, remaining - need ]\n   \n  } else {\n    return [ number, remaining ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                     the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ number + need, remaining - need ]\n   \n  } else {\n    return [ number, remaining ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                     the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat4 =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ number + need, remaining - need ]\n   \n  } else {\n    return [ number, remaining ]\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return y}\n      }\n    i++;}\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n      let z = xOrY(len, x, y)\n      if (z == n) {\n        return x}\n      if (z == x) {\n        return y}\n      if (z == y) {\n        return x}\n     }\n     i++}\n}\n\nconsole.log(xOrY(20, 7, 34))\nconsole.log(xOrY(15, 8, 5))\nconsole.log(xOrY(20, 7, 34))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (t != 0) {\n    k+=t % 10\n    t =(t - t % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n  }\n  return t}\n\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n\n//https://www.hackerrank.com/challenges/sieve-of-eratosthenes/problem\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  let j = 0;\n  while (j < p.length) {\n     {\n      t.push(l [ p [ j ] - 1 ])\n      }\n    j++;}\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      p.splice(j, 1, p[ind])\n      }\n    }\n  let len = p.length\n  let newArr = []\n  for (let i = 0; i < len; i++) {\n    newArr.push(p [ i ])\n    }\n  return newArr\n  }\n\nconst main = () => {\n  let arr = [1, 2, 1, 4, 5, 8, 2, 3]\n  console.log(byLength(arr))\n  }\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    value+=t}\n  return value\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n  return value\n}\n\n//console.log(closestInteger(\"14.5\"))\nconsole.log(closestInteger(\"-14.5\"))\nconsole.log(closestInteger(\"-15\"))\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b == 'string') {\n    bb = Number(b.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return b}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (typeof aa =='string' || typeof bb =='string') {\n    if (aa < bb) {\n      return a\n    } else {\n      return b\n    }\n  }\n  \n  return (aa > bb)? a : b\n}\n\n/*\n  Create a function that takes two strings representing\n  real numbers, and returns the larger string.\n  Return null if the values are equal.\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a =='string') {\n    a = Number(a.replace(',', '.'))}\n  if (typeof b =='string') {\n    b = Number(b.replace(',', '.'))}\n  \n  return (a > b)? a : b\n}\n\nconst compareThree = (a, b, c) => {\n  if (typeof a =='string') {\n    a = Number(a.replace(',', '.'))}\n  if (typeof b =='string') {\n    b = Number(b.replace(',', '.'))}\n  if (typeof c =='string') {\n    c = Number(c.replace(',', '.'))}\n  \n  return (a > b)? (a > c)? a : c : (b > c)? b : c\n}\n\nconst compareFour = (a, b, c, d) => {\n  if (typeof a =='string') {\n    a = Number(a.replace(',', '.'))}\n  if (typeof b =='string') {\n    b = Number(b.replace(',', '.'))}\n  if (typeof c =='string') {\n    c = Number(c.replace(',', '.'))}\n  if (typeof d =='string') {\n    d = Number(d.replace(',', '.'))}\n  \n  return (a > b)? (a > c)? a > d? a : d : (c > d)? c > d? c : d : d\n}\n\nconst compareFive = (a, b, c, d, e) => {\n  if (typeof a =='string') {\n    a = Number(a.replace(',', '.'))}\n  if (typeof b =='string') {\n    b = Number(b.replace(',', '.'))}\n  if (typeof c =='string') {\n    c = Number(c.replace(',', '.'))}\n  if (typeof d =='string') {\n    d = Number(d.replace(',', '.'))}\n  if (typeof e =='string') {\n    e = Number(e.replace(',', '.'))}\n  \n  return (a > b)? (a > c)? a > d? a > e? a : e : (c > d)? c > d? c > e? c : e : e : e : d\n}\n\nconst compareSix = (a, b, c, d, e, f) => {\n  if (typeof a =='string') {\n    a = Number(a.replace(',', '.'))}\n  if (typeof b =='string') {\n    b = Number(b.replace(',', '.'))}\n  if (typeof c =='string') {\n    c = Number(c.replace(',', '.'))}\n  if (typeof d =='string') {\n    d = Number(d.replace(',', '.'))}\n  if (typeof e =='string') {\n    e = Number(e.replace(',', '.'))}\n  if (typeof f =='string') {\n    f = Number(f.replace(',', '.'))}\n  \n  return (a > b)? (a > c)? a > d? a > e? a > f? a : f : e > f? e > f? e : f : f : d > f? d > f? d : f : f : f : c > f? c > f? c : f : f : f : b > f? b > f? b : f : f : f\n}\n\nconst compareSeven = (a, b, c, d, e, f, g) => {\n  if (typeof a =='string') {\n    a = Number(a.replace(',', '.'))}\n  if (typeof b =='string') {\n    b = Number(b.replace(',', '.'))}\n  if (typeof c =='string') {\n    c = Number(c.replace(',', '.'))}\n  if (typeof d =='string') {\n    d = Number(d.replace(',', '.'))}\n  if (typeof e =='string') {\n    e = Number(e.replace(',', '.'))}\n  if (typeof f =='string') {\n    f = Number(f.replace(',', '.'))}\n  if (typeof g =='string') {\n    g = Number(g.replace(',', '.'))}\n  \n  return (a > b)? (a > c)? a > d? a > e? a > f? a > g? a : g : f > g? f > g? f : g : g : e > f? e > f? e : f : f : f : c > f? c > f? c : f : f : f : b > f? b > f? b : f : f : f : f"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid [ m - 1 ] [ n ] < min) {\n    min = grid [ m - 1 ] [ n ]}\n  if (n > 0 && grid [ m ] [ n - 1 ] < min) {\n    min = grid [ m ] [ n - 1 ]}\n  if (m < grid.length - 1 && grid [ m + 1 ] [ n ] < min) {\n    min = grid [ m + 1 ] [ n ]}\n  if (n < grid.length - 1 && grid [ m ] [ n + 1 ] < min) {\n    min = grid [ m ] [ n + 1 ]}\n  let p = [ ]\n  let i = 0;\n  while (i < k) {\n     {\n      if (i % 2 == 0) {\n        p.push(1)}\n      else {\n        p.push(min)}\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  let p = [ grid [ m ] [ n ] ]\n  let m = m + 1\n  while (m < grid.length && n < grid.length) {\n    if (grid [ m ] [ n ] == 1) {\n      p.push(grid [ m ] [ n ])\n      m = m + 1\n    } else if (grid [ m ] [ n ] < p[p.length - 1]) {\n      p.push(grid [ m ] [ n ])\n      n = n + 1\n    } else {\n      break\n    }\n  }\n\n  return p\n};\n\nconsole.log(minPath([ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]], 3));\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = Number(a [ 1 ]) * Number(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n  let i = 1\n  let res = \"\"\n  while (a [ i ])!= \"\" && b [ i ])!= \"\" && a [ i ]!== b [ i ] ) {\n    m = m + ( Number(a [ i ]) * Number(b [ i ]) )\n    i = i + 1\n  }\n\n  if ( m % 1 == 0 ) {\n    return true\n  }\n  return false\n}\n\nconst test = [\"1/5\", \"5/1\", \"1/6\", \"2/1\", \"7/10\", \"10/2\"]\nconst result = [\n  true,\n  false,\n  false,\n  false,\n  false,\n  true\n]\n\nconsole.log(\"Test: \", test)\nconsole.log(\"Result: \", result)\n\n// TEST 1\nconsole.log(\"Test 1: \", simplify(test[0], test[1]))\nconsole.log(\"Test 1: \", simplify(test[1], test[2]))\nconsole.log(\"Test 1: \", simplify(test[2], test[3]))\nconsole.log(\"Test 1: \", simplify(test[3], test[4]))\n\n// TEST 2\nconsole.log(\"Test 2: \", simplify(test[5], test[6]))\nconsole.log(\"Test 2: \", simplify(test[6], test[7]))\nconsole.log(\"Test 2: \", simplify(test[7], test[8]))\nconsole.log(\"Test 2: \", simplify(test[8], test[9]))\n\n// TEST 3\nconsole.log(\"Test 3: \", simplify(test[10], test[11]))\nconsole.log(\"Test 3: \", simplify(test[11], test[12]))\nconsole.log(\"Test 3: \", simplify(test[12], test[13]))\nconsole.log(\"Test 3: \", simplify(test[13], test[14]))\n\n// TEST 4\nconsole.log(\"Test 4: \", simplify(test[15], test[16]))\nconsole.log(\"Test 4: \", simplify(test[16], test[17]))\nconsole.log(\"Test 4: \", simplify(test[17], test[18]))\nconsole.log(\"Test 4: \", simplify(test[18], test[19]))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n      }\n    }\n    i++\n  }\n  return p\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] == ' ') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] == ' ' && S [ i + 2 ] == 'I' && S [ i + 3 ] == ' ') {\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          t++\n          }\n        }\n      }\n    i++;}\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n         \n          t = t + 1\n        }\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n          t = t + 1\n        }\n      }\n    }\n    i = i + 1\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  isPalindrome is a function that takes string and returns true if string is palindrome.\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abcdef')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let reversed = removeVowels(text)\n  return reversed === text\n}\n\n/*\n  isPalindrome is a function that takes string and returns true if string is palindrome.\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abcdef')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome2 =(text) => {\n  return text === reverse(text)\n}\n\n/*\n  reverse is a function that takes string and returns reversed string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse =(text) => {\n  return text.split(\"\").reverse().join(\"\")\n}\n\n/*\n  reverse is a function that takes string and returns reversed string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse2 =(text) => {\n  return text.split(\"\").reverse().join(\"\")\n}\n\n/*\n  printAllPalindromes is a function that takes list of palindromes and print them in console.\n  >>> printAllPalindromes(['abcd', 'cba', 'fedcba'])\n  abcd, cba, fedcba\n  */\nconst printAllPalindromes =(list) => {\n  list.forEach(s => console.log(s))\n}\n\n/*\n  printAllPalindromes is a function that takes list of palindromes and print them in console.\n  >>> printAllPalindromes(['abcd', 'cba', 'fedcba'])\n  abcd, cba, fedcba\n  */\nconst printAllPalindromes2 =(list) => {\n  list.forEach(s => console.log(reverse2(s)))\n}\n\n/*\n  main function that will be called when program starts.\n  >>> main('abc')\n  'bcdf'\n  >>> main('abc')\n  'bcdf'\n  >>> main('abcdef')\n  'fedcba'\n  >>> main('abcd')\n  'abcd'\n  */\nconst main =(text) => {\n  console.log(removeVowels(text))\n}\n\n/*\n  main function that will be called when program starts.\n  >>> main('abc')\n  'bcdf'\n  >>> main('abc')\n  'bcdf'\n  >>> main('abcdef')\n  'fedcba'\n  >>> main('abcd')\n  'abcd'\n  */\nconst main2 =(text) => {\n  console.log(reverse2(removeVowels(text)))\n}\n\n/*\n  main function that will be called when program starts.\n  >>> main('abc')\n  'bcdf'\n  >>> main('abc')\n  'bcdf'\n  >>> main('abcdef')\n  'fedcba'\n  >>> main('abcd')\n  'abcd'\n  */\nconst main3 =(text) => {\n  printAllPalindromes(removeVowels(text).split(\"\"))\n}\n\n/*\n  main function that will be called when program starts.\n  >>> main('abc')\n  'bcdf'\n  >>> main('abc')\n  'bcdf'\n  >>> main('abcdef')\n  'fedcba'\n  >>> main('abcd')\n  'abcd'\n  */\nconst main4 =(text) => {\n  printAllPalindromes2(removeVowels(text).split(\"\"))\n}\n\n/*\n  main function that will be called when program starts.\n  >>> main('abc')\n  'bcdf'\n  >>> main('abc')\n  'bcdf'\n  >>> main('abcdef')\n  'fedcba'\n  >>> main('abcd')\n  'abcd'\n  */\nconst main5 =(text) => {\n  main3(removeVowels(text))\n}\n\nmain5('abcdef')\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [ ... Array(n).keys(), n ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n}\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseStringSequence =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> reverseStringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequence =(n) => {\n  return [... Array(n).keys().reverse().reverse(), n ].join(' ')\n}\n\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> reverseReverseStringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromStart =(n) => {\n  return [... Array(n).keys().reverse().reverse(), n ].join(' ')\n}\n\nconst reverseStringSequenceFromStart =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n}\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequenceFromStart(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequenceFromStart =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart2 =(n) => {\n  return [... Array(n).keys().reverse().reverse(), n ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequenceFromStart(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequenceFromStart3 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequenceFromStart(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequenceFromStart4 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequenceFromStart(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequenceFromStart5 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart6 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n\nconst reverseReverseStringSequenceFromStart7 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart8 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequenceFromStart(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequenceFromStart9 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n\n/* Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n  >>> stringSequenceFromStart(5)\n  '5 4 3 2 1 0'\n  */\nconst reverseReverseStringSequenceFromStart10 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart11 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n\nconst reverseReverseStringSequenceFromStart12 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart13 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart14 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart15 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart16 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart17 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart18 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart19 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart20 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart21 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart22 =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\nconst reverseReverseStringSequenceFromStart23 =(n) => {\n  return [... Array("}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b != 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      b = temp % b;\n      }\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n      b = temp;\n     }\n  }\n  \n  return a;\n};\n\n/**\n * Return the number of unique paths through a 2D grid\n * @param grid\n */\nconst numPaths =(grid) => {\n  \n  const numRows = grid.length;\n  const numCols = grid[0].length;\n  \n  const[row, col] = [0, 0];\n  const[rowLength, colLength] = [1, 1];\n  \n  const[row1, col1] = [0, 0];\n  const[row2, col2] = [numRows - 1, numCols - 1];\n  \n  for (let row = 0; row < numRows; row++) {\n    for (let col = 0; col < numCols; col++) {\n      \n      const value = grid[row][col];\n      \n      if (value === 0) {\n        continue;\n      }\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const rowLength = Math.min(row1 - row, row2 - row);\n      const colLength = Math.min(col1 - col, col2 - col);\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n      const[row2, col2] = [row, col];\n      \n      const[row1, col1] = [row, col];\n"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (m > 0) {\n        m-=capacity;\n        p++;\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n      if (m < capacity) {\n        p++}\n    }\n    i++\n  }\n  return p\n}\n\nconst solve =(grid, bucket_capacity) => {\n  return maxFill(grid, bucket_capacity)\n}\n\nconsole.log(solve([[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return false}\n      }\n    i++;}\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n     if (string[i] == string[0]) {\n      return false}\n     }\n     if (i * i > len) {\n       break}\n     i++\n  }\n  return true\n}\n\n//Write a function that takes a string and returns the string reversed.\nconst reverse = (string) => {\n  return string.split(\"\").reverse().join(\"\")\n}\n\n//Write a function that takes a string and returns the string reversed.\nconst isPalindrome =(string) => {\n  let reversed = reverse(string)\n  return string == reversed\n}\n\n//Write a function that takes a string and returns the string reversed.\nconst getNthCharacter = (string, n) => {\n  let len = string.length\n  let start = len - n - 1\n  return string[start]\n}\n\n//Write a function that takes a string and returns the string reversed.\nconst getNthWord = (string, n) => {\n  let len = string.length\n  let start = len - n - 1\n  return string[start]\n}\n\n//Write a function that takes a string and returns the length of the\n//string.\nconst length = (string) => {\n  return string.length\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'a' appears in the string.\nconst countA = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'e' appears in the string.\nconst countE = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'e') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'o' appears in the string.\nconst countO = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'o') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 't' appears in the string.\nconst countT = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 't') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'u' appears in the string.\nconst countU = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'u') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'i' appears in the string.\nconst countI = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'i') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'l' appears in the string.\nconst countL = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'l') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character's' appears in the string.\nconst countS = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] =='s') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'h' appears in the string.\nconst countH = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'h') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'r' appears in the string.\nconst countR = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'r') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'n' appears in the string.\nconst countN = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'n') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'c' appears in the string.\nconst countC = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'c') {\n      result++\n    }\n  }\n  return result\n}\n\n//Write a function that takes a string and returns the number of times\n//the character 'p' appears in the string.\n"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n      }\n      i+=1;\n     }\n  }\n  return t\n};\n\nexport default add;<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  let i = a;\n  while (i <= b) {\n     {\n      if (i == 2 || i == 4 || i == 6 || i == 8) {\n        y.push(i)}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && p [ k ] < p [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n      }\n      if (f1 > f2) {\n        let tmp = p [ k ]\n        p [ k ] = p [ ind ]\n        p [ ind ] = tmp\n        ind++}\n    }\n  }\n  return p\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 1;\n      while (i < frq.length) {\n            if (frq [ i ] >= i)\n            ans = i;\n            i++;}\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n      for (let i = 1; i <= Math.max(... lst); i++) {\n         if (frq[i] > frq[ans])\n            ans = i;\n      }\n      return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (primes.includes(num [ i ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n};\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n      i++\n    }\n  }\n  if (a === Infinity) {\n    return (null, null)\n  } else if (b === - Infinity) {\n    return (null, a)\n  } else {\n    return (a, b)\n  }\n}\n\nconst test = largestSmallestIntegers([2, 4, 1, 3, 5, 7])\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n  return 1;\n  if (n >= 3)\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 3 == 0 ? three [ index / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 3!= 0);\n  sorted.sort((a, b) =>(a - b));\n \n  return [...sorted,...three];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth =(l) => {\n  var five = l.filter((item, index) => index % 5 == 0);\n  five.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 5!= 0);\n  sorted.sort((a, b) =>(a - b));\n \n  return [...sorted,...five];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 7, while its values at the indicies that are divisible by 7 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeven =(l) => {\n  var seven = l.filter((item, index) => index % 7 == 0);\n  seven.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 7!= 0);\n  sorted.sort((a, b) =>(a - b));\n \n  return [...sorted,...seven];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 11, while its values at the indicies that are divisible by 11 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleven =(l) => {\n  var eleven = l.filter((item, index) => index % 11 == 0);\n  eleven.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 11!= 0);\n  sorted.sort((a, b) =>(a - b));\n \n  return [...sorted,...eleven];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 13, while its values at the indicies that are divisible by 13 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirteen =(l) => {\n  var thirteen = l.filter((item, index) => index % 13 == 0);\n  thirteen.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 13!= 0);\n  sorted.sort((a, b) =>(a - b));\n \n  return [...sorted,...thirteen];\n};\n\nmodule.exports = {\n  sortSecond,\n  sortThird,\n  sortFifth,\n  sortSeven,\n  sortEleven,\n  sortThirteen\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n    prod_value*=n;\n  }\n  return [sum_value, prod_value];\n}\n\nconsole.log(sumProduct([1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t [ i ] != t [ t.length - i - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n  }\n  return [t, s.length == t.length]\n}\n\nexport default reverseDelete<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    j++;}\n  if (l [ i ] + l [ j ] + l [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n    if (l[i] + l[j] + l[k] == 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}\n\n/*\n  triplesSumToZero2 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero2([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero2([1, 3, -2, 1])\n  false\n  >>> triplesSumToZero2([1, 2, 3, 7])\n  true\n  >>> triplesSumToZero2([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero2([1])\n  false\n  */\nconst triplesSumToZero2 =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n    if (l[i] + l[j] + l[k] == 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}\n\nmodule.exports = {\n  triplesSumToZero,\n  triplesSumToZero2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map [ x ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  let notes = [];\n  let current_note = 'o';\n  let current_time = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    if (current_note === 'o') {\n      if (music_string[i] === 'o') {\n        current_time += 4;\n      } else {\n        current_time += 2;\n      }\n      if (music_string[i] === 'o') {\n        current_time += 4;\n      } else {\n        current_time += 2;\n      }\n    } else {\n      if (music_string[i] === 'o') {\n        current_time += 4;\n      } else {\n        current_time += 1;\n      }\n    }\n    notes.push(current_time);\n    current_time = 0;\n    current_note = music_string[i];\n  }\n  return notes;\n};\n\n/* Input to this function is a list of integers representing beats.\n  Your task is to return list of integers representing the musical notes that each beat lasts in the same order.\n  Each note lasts 4 beats.\n  >>> parseMusic([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 =(beat_list) => {\n  let notes = [];\n  let current_beat = 0;\n  for (let i = 0; i < beat_list.length; i++) {\n    if (current_beat === 0) {\n      current_beat = beat_list[i];\n      notes.push(current_beat);\n      current_beat = 0;\n    } else {\n      if (current_beat < beat_list[i]) {\n        current_beat = beat_list[i];\n        notes.push(current_beat);\n        current_beat = 0;\n      }\n    }\n  }\n  return notes;\n};\n\nconst parseMusic3 =(music_string) => {\n  let beats = [];\n  let current_beat = 0;\n  let current_beat_list = [];\n  for (let i = 0; i < music_string.length; i++) {\n    if (current_beat === 0) {\n      current_beat = parseInt(music_string[i]);\n      beats.push(current_beat);\n      current_beat = 0;\n    } else {\n      if (current_beat < parseInt(music_string[i])) {\n        current_beat = parseInt(music_string[i]);\n        beats.push(current_beat);\n        current_beat = 0;\n      }\n    }\n  }\n  return beats;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n     }\n  }\n  return - 1\n}\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ] != q [ j ])\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return false;\n      i++;\n      j--;\n      }\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ]!= q [ j ])\n     \n      return false;\n     }\n   \n   \n     i++;\n   \n     j--;\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_backward = (s) => {\n  return encodeCyclic(encodeCyclic(s).split('').reverse().join(''));\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  decodeCyclic_backward\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\nconst getShift = (x) => {\n  if (x >= \"a\".charCodeAt(0) && x <= \"z\".charCodeAt(0)) {\n    return encodeShift(x);\n  } else {\n    return decodeShift(x);\n  }\n}\n\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\nconst encode_shift_to_str = (x) => {\n  return encodeShift(x);\n}\n\nconst decode_str_to_shift = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_to_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_shift_to_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_to_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_shift_to_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift_to_str_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_str_to_shift_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_str_to_shift_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_str_to_shift_str_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str_str_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_str_to_shift_str_str_str_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str_str_str_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str_str_str_str_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str_str_str_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_str_to_shift_str_str_str_str_str_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str_str_str_str_str_str = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_str_to_shift_str_str_str_str_str_str_str_str_str_str_str = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_str_to_shift_str_str_str_str_str_str_str_str_str_str_str = (x) => {\n  return decodeShift(x);\n}\n\nconst encode_str"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (len == 1 || len == 0) {\n    return 'NO'}\n  let i = 2;\n  while (i * i <= len) {\n     {\n      if (len % i == 0) {\n        i++; return 'NO'}\n      }\n    i++;}\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n  if (len === 1) {\n    return 'YES'\n  }\n  if (isPrime(len)) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i < num; i += 1) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n};\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    k++;}\n  if (n % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n   if (n % k == 0) {\n    return false;\n   }\n   k++;\n  }\n  return true;\n};\n\n/* Return the sum of the digits of a given number.\n  >>> sumDigits(3)\n  3\n  >>> sumDigits(9)\n  9\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(1)\n  1\n  */\nconst sumDigits = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/* Return the sum of the digits of a given number.\n  >>> sumDigits(3)\n  3\n  >>> sumDigits(9)\n  9\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(1)\n  1\n  */\nconst sumDigits2 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/* Return true if a number is divisible by a given number.\n  >>> isDivisibleBy(3, 3)\n  true\n  >>> isDivisibleBy(1, 3)\n  false\n  >>> isDivisibleBy(1, 1)\n  true\n  >>> isDivisibleBy(1, 2)\n  true\n  >>> isDivisibleBy(1, 4)\n  false\n  >>> isDivisibleBy(3, 5)\n  false\n  >>> isDivisibleBy(2, 3)\n  false\n  >>> isDivisibleBy(7, 3)\n  true\n  >>> isDivisibleBy(7, 6)\n  true\n  >>> isDivisibleBy(7, 7)\n  true\n  >>> isDivisibleBy(9, 9)\n  true\n  >>> isDivisibleBy(9, 7)\n  false\n  >>> isDivisibleBy(8, 9)\n  true\n  >>> isDivisibleBy(8, 7)\n  false\n  >>> isDivisibleBy(9, 6)\n  true\n  >>> isDivisibleBy(7, 6)\n  false\n  >>> isDivisibleBy(7, 2)\n  false\n  */\nconst isDivisibleBy =(n, d) => {\n  return (n % d) == 0;\n};\n\n/* Return the highest prime number that is less than a given number.\n  >>> nextPrime(4)\n  5\n  >>> nextPrime(6)\n  7\n  >>> nextPrime(8)\n  11\n  >>> nextPrime(10)\n  13\n  >>> nextPrime(12)\n  17\n  >>> nextPrime(14)\n  19\n  >>> nextPrime(20)\n  23\n  >>> nextPrime(22)\n  29\n  >>> nextPrime(30)\n  31\n  >>> nextPrime(32)\n  33\n  >>> nextPrime(35)\n  37\n  >>> nextPrime(37)\n  41\n  >>> nextPrime(40)\n  43\n  >>> nextPrime(42)\n  47\n  >>> nextPrime(43)\n  49\n  >>> nextPrime(45)\n  53\n  >>> nextPrime(46)\n  57\n  >>> nextPrime(47)\n  61\n  >>> nextPrime(48)\n  63\n  >>> nextPrime(49)\n  67\n  >>> nextPrime(50)\n  71\n  >>> nextPrime(51)\n  73\n  >>> nextPrime(52)\n  77\n  >>> nextPrime(53)\n  81\n  >>> nextPrime(54)\n  83\n  >>> nextPrime(55)\n  87\n  >>> nextPrime(56)\n  89\n  >>> nextPrime(57)\n  91\n  >>> nextPrime(58)\n  97\n  >>> nextPrime(59)\n  99\n  >>> nextPrime(60)\n  103\n  >>> nextPrime(61)\n  107\n  >>> nextPrime(62)\n  109\n  >>> nextPrime(63)\n  113\n  >>> nextPrime(64)\n  117\n  >>> nextPrime(65)\n  121\n  >>> nextPrime(66)\n  127\n  >>> nextPrime(67)\n  131\n  >>> nextPrime(68)\n  137\n  >>> nextPrime(69)\n  139\n  >>> nextPrime(70)\n  143\n  >>> nextPrime(71)\n  147\n  >>> nextPrime(72)\n  151\n  >>> nextPrime(73)\n  157\n  >>> nextPrime(74)\n  159\n  >>> nextPrime(75)\n  163\n  >>> nextPrime(76)\n  167\n  >>> nextPrime(77)\n  173\n  >>> nextPrime(78)\n  179\n  >>> nextPrime(79)\n  181\n  >>> nextPrime(80)\n  187\n  >>> nextPrime(81)\n  191\n  >>> nextPrime(82)\n  193\n  >>> nextPrime(83)\n  197\n  >>> nextPrime(84)\n  199\n  >>> nextPrime(85)\n  203\n  >>> nextPrime(86)\n  211\n  >>> nextPrime(87)\n  217\n  >>> nextPrime(88)\n  223\n  >>> nextPrime(89)\n  227\n  >>> nextPrime(90)\n  229\n  >>> nextPrime(91)\n  233\n  >>> nextPrime(92)\n  239\n  >>> nextPrime(93)\n  241\n  >>> nextPrime(94)\n  251\n  >>> nextPrime(95)\n  257\n  >>> nextPrime(96)\n  263\n  >>> nextPrime(97)\n  269\n  >>> nextPrime(98)\n  271\n  >>> nextPrime(99)\n  277\n  >>> nextPrime(100)\n  281\n  >>> nextPrime(101)\n  283\n  >>> nextPrime(102)\n  287\n  >>> nextPrime(103)"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ] != 'a' && t [ i ] [ j ] != 'e' && t [ i ] [ j ] != 'i' && t [ i ] [ j ] != 'o' && t [ i ] [ j ] != 'u' && t [ i ] [ j ] != 'A' &&\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t [ i ] [ j ] != 'U' && t [ i ] [ j ] != 'O' && t [ i ] [ j ] != 'I' && t [ i ] [ j ] != 'E') {\n          l++\n          }\n        }\n      if (l == n) {\n        k.push(t [ i ])}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ]!= 'a' && t [ i ] [ j ]!= 'e' && t [ i ] [ j ]!= 'i' && t [ i ] [ j ]!= 'o' && t [ i ] [ j ]!= 'u' && t [ i ] [ j ]!= 'A' &&\n       \n        \n        t [ i ] [ j ]!= 'E' && t [ i ] [ j ]!= 'I' && t [ i ] [ j ]!= 'O' && t [ i ] [ j ]!= 'U') {\n          l += 1;\n        }\n      }\n      if (l == n) {\n        k.push(t [ i ])\n      }\n    }\n    i += 1;\n  }\n  return k;\n}\n\nmodule.exports = selectWords;<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n  lis.push(i);\n  return lis.reduce((acc, x, index) => {\n    acc += Math.abs(index - n) * x;\n    return acc;\n  }, 0);\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution2 =(s, n) => {\n  let sum = 0;\n  for (let i of s.split(\" \"))\n  sum += Number(i);\n  return sum - n;\n}\n\nconst fruitDistribution3 =(s, n) => {\n  let sum = 0;\n  for (let i of s.split(\" \"))\n  sum += Number(i);\n  return sum - n;\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution4 =(s, n) => {\n  let sum = 0;\n  for (let i of s.split(\" \"))\n  sum += Number(i);\n  return sum - n;\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution5 =(s, n) => {\n  let sum = 0;\n  for (let i of s.split(\" \"))\n  sum += Number(i);\n  return sum - n;\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution6 =(s, n) => {\n  let sum = 0;\n  for (let i of s.split(\" \"))\n  sum += Number(i);\n  return sum - n;\n}\n\nconst fruitDistribution7 =(s, n) => {\n  let sum = 0;\n  for (let i of s.split(\" \"))\n  sum += Number(i);\n  return sum - n;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * h\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n        for (; d >= 10;) {\n          {\n          n+=d % 10;\n          d =(d - d % 10) / 10;\n          }\n        }\n        \n        if (m > n) {\n          p [ k ] = y * p [ k ] + u * p [ k + 1 ]\n          p [ k + 1 ] = n * p [ k ] + m * p [ k + 1 ]\n          break\n        }\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n};\n\nconst print = (data) => {\n  const { area } = data;\n  return `Area of triangle is: ${area}`;\n};\n\nconst triangle = (a, h) => {\n  return a * h / 2.0;\n};\n\nexport { triangleArea, triangle, print };\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    running_max = Math.max(running_max, n);\n    result.push(running_max);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n      if (n > running_max) {\n      running_max = n;\n      result.push(running_max);\n      }\n    }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4,"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n    if (b == \")\")\n    depth-=1;\n  }\n  return depth == 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      game [ i ] = - game [ i ];}\n    i++;}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n      i++\n     }\n    \n  }\n  return game\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n      return true;\n    i++;\n  }\n  return false;\n}\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (dup == 3) {\n          i++; return false}\n        }\n      else {\n        pre = lst [ i ]\n        dup = 1\n        }\n      }\n    i++;}\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n      }\n      pre = lst [ i ]\n    }\n  }\n  return true\n}\n\n\n\n/* Given a sorted list, return the index of the first element in the\n  list that is equal to the index of the last element. If the list\n  has no elements equal to the index of the last element, return\n  the length of the list.\n  \n  Examples\n  indexOfLast(5) ➞ 3\n  indexOfLast(3) ➞ 3\n  indexOfLast(7) ➞ 0\n  indexOfLast(7, 2) ➞ 2\n  indexOfLast(7, 1, 2) ➞ 1\n  */\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst isSorted = (lst) => {\n  if (lst.length == 0) {\n    return true}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] < lst [ i - 1 ]) {\n      return false}\n    i++\n  }\n  return true\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i ] == last) {\n      return index}\n    index++\n    i++\n  }\n  return lst.length\n}\n\nconst indexOfLast = (lst, last, index = 0) => {\n  if (lst.length == 0) {\n    return last}\n  let i"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (arr [ i ] == 0) {\n        i++; return 0}\n      if (arr [ i ] < 0) {\n        n = - n; s-=2 * arr [ i ]}\n      }\n    i++;}\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n      if (arr [ i ] > 0) {\n        n = n * 1\n      }\n      else if (arr [ i ] < 0) {\n        n = n * -1\n      }\n      else if (arr [ i ] == 0) {\n        n = n * 0\n      }\n    }\n    i++\n  }\n  return s * n\n}\n\nmodule.exports = prodSigns;<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t = t * 10\n      }\n    i++;}\n  return t\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst startsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst endsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start and end with 1.\n  */\nconst startsAndEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst startsOneEndsOne =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t = t * (i + 1)\n     }\n     i = i + 2\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t *= n;\n        }\n      }\n    p++;\n    n--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        p *= t;\n       }\n       {\n        t *= n - 1;\n       }\n    }\n    {\n      n--;\n    }\n  }\n  {\n    return p;\n  }\n};\n\n/*\n  This is a very simple implementation of the factorial\n  function. We are using the fact that the special\n  factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n\n  We are going to calculate the factorial of a given\n  number using the \"binary\" algorithm.\n\n  First, we will calculate the first factorial:\n  1! = 1, which is the factorial of 1.\n  Then we will calculate the factorial of the second number\n  using the previous result:\n  2! = 2, which is the factorial of 2.\n\n ...\n\n  Then we will calculate the factorial of the n-th number:\n  n! = n * (n-1) * (n-2) *... * 1 = n * (n-1) * (n-2) *... * 1!\n\n  This algorithm is called \"binary\" because it calculates\n  the factorial of a given number using only two\n  computations.\n\n  For example:\n  >>> binaryFactorial(4)\n  24\n*/\nconst binaryFactorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * binaryFactorial(n - 1);\n};\n\nconsole.log(specialFactorial(100));\nconsole.log(binaryFactorial(100));\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n    }\n    return max_depth;\n  }\n  const parse_groups = paren_string.split(/\\s/);\n  return parse_groups.map(parseParenGroup);\n}\n\n/*\n  Takes a string representing a list of integers.\n  Returns the list of the largest sequence of integers that sum to the input.\n\n  >>> largestSumList('3,2,4,5')\n  [5, 7]\n  >>> largestSumList('10,12,20')\n  [30]\n  >>> largestSumList('-3,-2,-4,-5')\n  [0]\n  >>> largestSumList('0,0,0,0')\n  []\n  */\nconst largestSumList =(input) => {\n  const parseInput = (input) => {\n    const parsed = parseInt(input);\n    return parsed;\n  }\n  const max_list = [];\n  const list_length = parseInt(input.length);\n  for (let i = 0; i <= list_length - 1; i++) {\n    let sum = 0;\n    for (let j = i; j <= list_length - 1; j++) {\n      sum += parseInput(input.substring(i, j + 1));\n    }\n    max_list.push(sum);\n  }\n  return max_list;\n}\n\n/*\n  Given a string representing a number, return the string in lowest to highest order.\n\n  >>> lowestToHighestOrder('12')\n  '12'\n  >>> lowestToHighestOrder('1234')\n  '134'\n  >>> lowestToHighestOrder('1234')\n  '1234'\n  >>> lowestToHighestOrder('-1234')\n  '-1234'\n  >>> lowestToHighestOrder('0')\n  '0'\n  >>> lowestToHighestOrder('-0')\n  '-0'\n  */\nconst lowestToHighestOrder = (input) => {\n  return (input.split(' ').sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0;\n  }));\n}\n\n/*\n  Given a string representing a number, return the string in highest to lowest order.\n\n  >>> highestToLowestOrder('12')\n  '12'\n  >>> highestToLowestOrder('1234')\n  '3412'\n  >>> highestToLowestOrder('1234')\n  '1234'\n  >>> highestToLowestOrder('-1234')\n  '-1234'\n  >>> highestToLowestOrder('0')\n  '0'\n  >>> highestToLowestOrder('-0')\n  '-0'\n  */\nconst highestToLowestOrder = (input) => {\n  return (input.split(' ').sort((a, b) => {\n    return a > b? -1 : a < b? 1 : 0;\n  }));\n}\n\n/*\n  Given a string representing a number, return the string in lowest to highest order.\n  The input string can have spaces.\n\n  >>> highestToLowestOrder('12 34')\n  '12 34'\n  >>> highestToLowestOrder('12 34 5')\n  '5 34 12'\n  >>> highestToLowestOrder('12 34 5 6')\n  '6 34 5 12'\n  >>> highestToLowestOrder('-12 34')\n  '-12 34'\n  >>> highestToLowestOrder('0')\n  '0'\n  >>> highestToLowestOrder('-0')\n  '-0'\n  */\nconst highestToLowestOrderWithSpaces = (input) => {\n  const array = input.split(' ');\n  return array.sort((a, b) => {\n    return a > b? -1 : a < b? 1 : 0;\n  });\n}\n\n/*\n  Given a string representing a number, return the string in highest to lowest order.\n  The input string can have spaces.\n  The input string can have an integer represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the highest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> highestToLowestOrderNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  >>> highestToLowestOrderNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  >>> highestToLowestOrderNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  >>> highestToLowestOrderNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst highestToLowestOrderNestedParens =(paren_string) => {\n  const parseNestedParens =(paren_string) => {\n    let depth = 0, max_depth = 0;\n    for (const c of paren_string) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n    }\n    return max_depth;\n  }\n  const parse_groups = paren_string.split(/\\s/);\n  return parse_groups.map(parseNestedParens);\n}\n\n/*\n  Given a string representing a number, return the string in lowest to highest order.\n  The input string can have spaces.\n  The input string can have an integer represented multiple groups for nested parentheses separated by spaces.\n"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        for (let k = j + 1; k < n; k++) {\n          if ((y [ i ] + y [ j ] + y [ k ]) % 3 == 0) {\n            u++}\n          }\n        }\n      j++;}\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n       let k = j + 1;\n       while (k < n) {\n         let x = y[i] + y[j] + y[k]\n         if (x % 3 === 0) {\n            u++\n            }\n         k++\n         }\n       }\n       j++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  Given a string S, return a string that contains all the characters of S except for the last 3.\n    If the number of characters to remove is more than the length of S, return an empty string.\n\n  Example :\n      Input: S = \"abcd\"\n      Output: \"acd\"\n*/\nconst removeLast3 =(S) => {\n  let last = S.length - 3\n  if (last < 0) {\n    return \"\"\n  }\n  return S.slice(0, last)\n}\n\n/*\n  Given an integer n, return the number of ways to partition n into different parts.\n    Note: 1 ≤ n ≤ 99.\n*/\nconst numWays =(n) => {\n  let f = 0\n  for (let i = 1; i <= n; i++) {\n    f = f + Math.pow(i, n)\n  }\n  return f\n}\n\n/*\n  Given a positive integer n, return the sum of all the numbers which are the sum of consecutive squares.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumSquares =(n) => {\n  let sum = 0\n  let i = 1\n  while (i <= n) {\n    sum = sum + i * i\n    i++\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the sum of all the numbers which are the sum of consecutive cubes.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumCubes =(n) => {\n  let sum = 0\n  let i = 1\n  while (i <= n) {\n    sum = sum + i * i * i\n    i++\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the sum of all the numbers which are the sum of consecutive fourth powers.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumFourthPowers =(n) => {\n  let sum = 0\n  let i = 1\n  while (i <= n) {\n    sum = sum + i * i * i * i\n    i++\n  }\n  return sum\n}\n\n/*\n  Given an array arr of length n, return the sum of the numbers in the array that are also the sum of consecutive fifth powers.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumFifthPowers =(arr) => {\n  let sum = 0\n  for (let i = 1; i <= arr.length; i++) {\n    let j = i + 1\n    while (j <= arr.length) {\n      sum = sum + arr[i] * arr[j] * arr[j] * arr[j]\n      j++\n    }\n  }\n  return sum\n}\n\n/*\n  Given an array arr of length n, return the sum of the numbers in the array that are also the sum of consecutive sixth powers.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumSixthPowers =(arr) => {\n  let sum = 0\n  for (let i = 1; i <= arr.length; i++) {\n    let j = i + 1\n    while (j <= arr.length) {\n      sum = sum + arr[i] * arr[j] * arr[j] * arr[j] * arr[j]\n      j++\n    }\n  }\n  return sum\n}\n\n/*\n  Given an array arr of length n, return the sum of the numbers in the array that are also the sum of consecutive seventh powers.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumSeventhPowers =(arr) => {\n  let sum = 0\n  for (let i = 1; i <= arr.length; i++) {\n    let j = i + 1\n    while (j <= arr.length) {\n      sum = sum + arr[i] * arr[j] * arr[j] * arr[j] * arr[j] * arr[j]\n      j++\n    }\n  }\n  return sum\n}\n\n/*\n  Given an array arr of length n, return the sum of the numbers in the array that are also the sum of consecutive eighth powers.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumEighthPowers =(arr) => {\n  let sum = 0\n  for (let i = 1; i <= arr.length; i++) {\n    let j = i + 1\n    while (j <= arr.length) {\n      sum = sum + arr[i] * arr[j] * arr[j] * arr[j] * arr[j] * arr[j] * arr[j]\n      j++\n    }\n  }\n  return sum\n}\n\n/*\n  Given an array arr of length n, return the sum of the numbers in the array that are also the sum of consecutive ninth powers.\n    Note: 1 ≤ n ≤ 1,000,000,000.\n*/\nconst sumNinthPowers ="}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    arr.push(arr [ 0 ]);\n    arr.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n        }\n      }\n    if (t == 1) {\n      arr [ k++ ] = arr [ i ];\n    }\n  }\n  return k == len\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (div) {\n        res+=sym [ i ]\n        div-=1\n        }\n      i-=1\n      }\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n      if (div) {\n        res += sym [ i ]\n        res += intToMiniRoman (div)\n        i--\n      }\n    }\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in upper case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'I', 'IV', 'V', 'IX', 'X', 'XC', 'C', 'CD', 'D', 'CM', 'M' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n      if (div) {\n        res += sym [ i ]\n        res += intToRoman (div)\n        i--\n      }\n    }\n  }\n  return res.toUpperCase()\n}\n\n// Test Cases\n\ndescribe('#intToMiniRoman()', () => {\n  it('should return xix for 19', () => {\n    expect(intToMiniRoman(19)).toEqual('xix')\n  })\n  it('should return clii for 152', () => {\n    expect(intToMiniRoman(152)).toEqual('clii')\n  })\n  it('should return cdxxvi for 426', () => {\n    expect(intToMiniRoman(426)).toEqual('cdxxvi')\n  })\n})\n\ndescribe('#intToRoman()', () => {\n  it('should return XIX for 19', () => {\n    expect(intToRoman(19)).toEqual('XIX')\n  })\n  it('should return CLII for 152', () => {\n    expect(intToRoman(152)).toEqual('CLII')\n  })\n  it('should return CDXXVI for 426', () => {\n    expect(intToRoman(426)).toEqual('CDXXVI')\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return s.slice( - shift) + s.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n  return s.split('').reverse().join('') + s.split('').reverse().join('');\n}\n\n/*\n  Count the number of 1's in the binary representation of a number.\n  >>> binaryCount(0)\n  0\n  >>> binaryCount(1)\n  1\n  >>> binaryCount(5)\n  2\n  >>> binaryCount(8)\n  3\n  */\nconst binaryCount =(x) => {\n  let s = x.toString(2), i = 0, l = s.length;\n  for (i = 0; i < l; i++) {\n    if (s[i] === '1') {\n      return i + 1;\n    }\n  }\n  return i;\n}\n\n/*\n  Find the number of trailing zeros in the binary representation of a number.\n  >>> trailingZeros(0)\n  0\n  >>> trailingZeros(1)\n  1\n  >>> trailingZeros(5)\n  1\n  >>> trailingZeros(8)\n  0\n  */\nconst trailingZeros =(x) => {\n  let s = x.toString(2), i = 0, l = s.length, z = 0;\n  for (i = l - 1; i >= 0; i--) {\n    if (s[i] === '0') {\n      z++;\n    } else {\n      return z;\n    }\n  }\n  return z;\n}\n\n/*\n  Find the number of leading zeros in the binary representation of a number.\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(1)\n  0\n  >>> leadingZeros(5)\n  1\n  >>> leadingZeros(8)\n  3\n  */\nconst leadingZeros =(x) => {\n  let s = x.toString(2), i = 0, l = s.length, z = 0;\n  for (i = 0; i < l; i++) {\n    if (s[i] === '1') {\n      z++;\n    } else {\n      return z;\n    }\n  }\n  return z;\n}\n\n/*\n  Given a number, return the number of 1's in the binary representation.\n  >>> countBits(0)\n  0\n  >>> countBits(1)\n  1\n  >>> countBits(5)\n  2\n  >>> countBits(8)\n  3\n  */\nconst countBits =(x) => {\n  let s = x.toString(2), i = 0, l = s.length, c = 0;\n  for (i = 0; i < l; i++) {\n    if (s[i] === '1') {\n      c++;\n    }\n  }\n  return c;\n}\n\n/*\n  Given a number, return the number of trailing zeros in the binary representation.\n  >>> countTrailingZeros(0)\n  0\n  >>> countTrailingZeros(1)\n  1\n  >>> countTrailingZeros(5)\n  1\n  >>> countTrailingZeros(8)\n  0\n  */\nconst countTrailingZeros =(x) => {\n  let s = x.toString(2), i = 0, l = s.length, c = 0;\n  for (i = l - 1; i >= 0; i--) {\n    if (s[i] === '0') {\n      c++;\n    } else {\n      return c;\n    }\n  }\n  return c;\n}\n\n/*\n  Given a number, return the number of leading zeros in the binary representation.\n  >>> countLeadingZeros(0)\n  0\n  >>> countLeadingZeros(1)\n  0\n  >>> countLeadingZeros(5)\n  1\n  >>> countLeadingZeros(8)\n  3\n  */\nconst countLeadingZeros =(x) => {\n  let s = x.toString(2), i = 0, l = s.length, c = 0;\n  for (i = 0; i < l; i++) {\n    if (s[i] === '1') {\n      c++;\n    } else {\n      return c;\n    }\n  }\n  return c;\n}\n\nmodule.exports = {\n  circularShift,\n  binaryCount,\n  trailingZeros,\n  leadingZeros,\n  countBits,\n  countTrailingZeros,\n  countLeadingZeros\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n", "canonical_solution": "# print('@@this is the line to split##')\n              j--; break;\n              }\n            if (p [ k ] [ l ].charCodeAt() < p [ k + 1 ] [ l ].charCodeAt()) {\n              j--; break;\n              }\n            }\n          }\n        if (f == 1) {\n          let tmp = p [ k ]\n          p [ k ] = p [ k + 1 ]\n          p [ k + 1 ] = tmp\n          }\n        }\n      }\n    j--;}\n  return p\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n            }\n          }\n        }\n        if (f) {\n          let r = p [ k + 1 ].length\n          let s = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            let t = p [ k ] [ l ].charCodeAt()\n            p [ k ] [ l ] = p [ k + 1 ] [ l ]\n            p [ k + 1 ] [ l ] = t}\n        }\n      }\n    }\n    j--;\n  }\n  return p\n};\n\nlet list_sort = (lst) => {\n  let p = sortedListSum(lst)\n  let j = p.length - 2;\n  while (j >= 0) {\n    let f = 0\n    for (let i = 0; i <= j; i++) {\n      if (p [ i ].length > p [ i + 1 ].length) {\n        f = 1\n      }\n    }\n    if (f) {\n      let r = p [ j + 1 ].length\n      let s = p [ j ].length\n      for (let i = 0; i < r; i++) {\n        let t = p [ j ] [ i ].charCodeAt()\n        p [ j ] [ i ] = p [ j + 1 ] [ i ]\n        p [ j + 1 ] [ i ] = t\n      }\n    }\n    j--;\n  }\n  return p\n};\n\nlist_sort([\"aa\", \"a\", \"aaa\"])\n// => [\"aa\"]\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// => [\"ab\", \"cd\"]\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"dd\"])\n// => [\"ab\", \"cd\", \"dd\"]\nlist_sort([\"ab\", \"a\", \"aa\", \"c\", \"d\", \"dd\"])\n// => [\"ab\", \"c\", \"d\", \"dd\"]\nlist_sort([\"ab\", \"a\", \"aa\", \"c\", \"d\", \"dd\", \"e\", \"ee\", \"f\"])\n// => [\"ab\", \"c\", \"d\", \"e\", \"f\", \"ee\", \"dd\", \"dd\"]\n<|endoftext|>"}
