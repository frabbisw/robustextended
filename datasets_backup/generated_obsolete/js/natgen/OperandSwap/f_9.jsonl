{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (\"<\" == b)\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (\"<\" == b)\n    depth+=1;\n    else\n   \n    if (\">\" == b)\n    depth-=1;\n    if (depth < 0)\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n}\n\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement =(l) => {\n  return Math.min(... l);\n \n}\n\n/*\n  Return the product of all elements in the list.\n  >>> product([1, 2, 3, 4])\n  24\n  >>> product([1, 2, 3, 4, 5, 6])\n  720\n  >>> product([])\n  1\n  */\nconst product =(l) => {\n  let product = 1\n  for (let i = 1; i < l.length; i++) {\n    product = product * l[i-1];\n  }\n  return product;\n}\n\n/*\n  Return the sum of all elements in the list.\n  >>> sum([1, 2, 3, 4])\n  9\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([])\n  0\n  */\nconst sum =(l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n}\n\n/*\n  Return the difference between the largest and the smallest elements in the list.\n  >>> difference([1, 2, 3, 4])\n  3\n  >>> difference([1, 2, 3, 4, 5, 6])\n  -1\n  >>> difference([])\n  0\n  */\nconst difference =(l) => {\n  return maxElement(l) - minElement(l);\n}\n\n/*\n  Return the quotient of the largest and the smallest elements in the list.\n  >>> quotient([1, 2, 3, 4])\n  2\n  >>> quotient([1, 2, 3, 4, 5, 6])\n  -2\n  >>> quotient([])\n  0\n  */\nconst quotient =(l) => {\n  return (maxElement(l) - minElement(l)) / 2;\n}\n\n/*\n  Return the average of all elements in the list.\n  >>> average([1, 2, 3, 4])\n  2.5\n  >>> average([1, 2, 3, 4, 5, 6])\n  3.5\n  >>> average([])\n  0\n  */\nconst average =(l) => {\n  return sum(l) / l.length;\n}\n\n/*\n  Return the standard deviation of all elements in the list.\n  >>> variance([1, 2, 3, 4])\n  1\n  >>> variance([1, 2, 3, 4, 5, 6])\n  2.5\n  >>> variance([])\n  0\n  */\nconst variance =(l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return Math.sqrt(sum / l.length);\n}\n\n/*\n  Return the number of elements in the list that are greater than the specified element.\n  >>> frequency([1, 2, 3, 4], 3)\n  2\n  >>> frequency([1, 2, 3, 4, 5, 6], 5)\n  1\n  >>> frequency([], 3)\n  0\n  */\nconst frequency =(l, element) => {\n  let frequency = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > element) {\n      frequency++;\n    }\n  }\n  return frequency;\n}\n\n/*\n  Return the number of elements in the list that are less than the specified element.\n  >>> count([1, 2, 3, 4], 3)\n  1\n  >>> count([1, 2, 3, 4, 5, 6], 5)\n  2\n  >>> count([], 3)\n  0\n  */\nconst count =(l, element) => {\n  let count = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < element) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Return the list of elements that are greater than the specified element.\n  >>> greater([1, 2, 3, 4], 3)\n  [4]\n  >>> greater([1, 2, 3, 4, 5, 6], 5)\n  [6]\n  >>> greater([], 3)\n  []\n  */\nconst greater =(l, element) => {\n  let greater = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > element) {\n      greater.push(l[i])\n    }\n  }\n  return greater;\n}\n\n/*\n  Return the list of elements that are less than the specified element.\n  >>> less([1, 2, 3, 4], 3)\n  [1, 2]\n  >>> less([1, 2, 3, 4, 5, 6], 5)\n  [1, 2, 3, 4]\n  >>> less([], 3)\n  []\n  */\nconst less =(l, element) => {\n  let less = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < element) {\n      less.push(l[i])\n    }\n  }\n  return less;\n}\n\n/*\n  Return the list of elements that are equal to the specified element.\n  >>> equal([1, 2, 3, 4], 3)\n  [3]\n  >>> equal([1, 2, 3, 4, 5, 6], 5)\n  [5]\n  >>> equal([], 3)\n  []\n  */\nconst equal =(l, element) => {\n  let equal = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == element) {\n      equal.push(l[i])\n    }\n  }\n  return equal"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] == ' ' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      k = 0;\n      t+=s [ i ]\n      }\n    }\n  if ('' != t) {\n    p.push(t);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] =='' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n        }\n     \n      else if (k == 1) {\n        p.push(t);\n        k = 0;\n        t = '';\n        }\n      }\n    else {\n      t = t + s [ i ];\n      }\n    }\n    if (k == 1) {\n      p.push(t);\n      }\n  return p;\n}\n\nconsole.log(wordsString(\"Hi, my name is John\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  while (0 < x) {\n    ret =(x % base).toString() + ret;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    x = Math.floor(x / base);\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  while (0 < x) {\n    ret =(x % base).toString() + ret;\n   \n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n/*\n  Prints out the characters of a string from left to right, starting with the least significant digit.\n  >>> printReverse(\"Hello\")\n  oell\n  >>> printReverse(\"123\")\n  321\n  >>> printReverse(\"1a\")\n  a1\n  >>> printReverse(\"\")\n  \"\"\"\n  \n  return reverse(x.split(\"\"));\n\n/*\n  Prints out the characters of a string from right to left, starting with the most significant digit.\n  >>> printReverse(\"Hello\")\n  loell\n  >>> printReverse(\"123\")\n  321\n  >>> printReverse(\"1a\")\n  a1\n  >>> printReverse(\"\")\n  \"\"\"\n  \n  return reverse(x.split(\"\"));\n\n/*\n  Finds the smallest number that is evenly divisible by the given number.\n  >>> findSmallestNumber(100, 3)\n  33\n  >>> findSmallestNumber(99, 3)\n  999\n  >>> findSmallestNumber(8, 2)\n  1\n  >>> findSmallestNumber(15, 3)\n  3\n  >>> findSmallestNumber(1, 2)\n  1\n  >>> findSmallestNumber(20, 3)\n  15\n  >>> findSmallestNumber(10, 3)\n  3\n  >>> findSmallestNumber(10, 1)\n  10\n  >>> findSmallestNumber(10, 5)\n  10\n  >>> findSmallestNumber(2, 3)\n  1\n  >>> findSmallestNumber(2, 2)\n  1\n  >>> findSmallestNumber(2, 1)\n  2\n  >>> findSmallestNumber(2, 0)\n  1\n  >>> findSmallestNumber(2, -1)\n  2\n  >>> findSmallestNumber(2, -2)\n  2\n  >>> findSmallestNumber(2, -3)\n  1\n  >>> findSmallestNumber(2, -4)\n  2\n  >>> findSmallestNumber(2, -5)\n  2\n  >>> findSmallestNumber(2, -6)\n  2\n  >>> findSmallestNumber(2, -7)\n  2\n  >>> findSmallestNumber(2, -8)\n  2\n  >>> findSmallestNumber(2, -9)\n  2\n  >>> findSmallestNumber(2, -10)\n  1\n  >>> findSmallestNumber(2, -11)\n  2\n  >>> findSmallestNumber(2, -12)\n  2\n  >>> findSmallestNumber(2, -13)\n  2\n  >>> findSmallestNumber(2, -14)\n  2\n  >>> findSmallestNumber(2, -15)\n  2\n  >>> findSmallestNumber(2, -16)\n  2\n  >>> findSmallestNumber(2, -17)\n  2\n  >>> findSmallestNumber(2, -18)\n  2\n  >>> findSmallestNumber(2, -19)\n  2\n  >>> findSmallestNumber(2, -20)\n  1\n  >>> findSmallestNumber(2, -21)\n  2\n  >>> findSmallestNumber(2, -22)\n  2\n  >>> findSmallestNumber(2, -23)\n  2\n  >>> findSmallestNumber(2, -24)\n  2\n  >>> findSmallestNumber(2, -25)\n  2\n  >>> findSmallestNumber(2, -26)\n  2\n  >>> findSmallestNumber(2, -27)\n  2\n  >>> findSmallestNumber(2, -28)\n  2\n  >>> findSmallestNumber(2, -29)\n  2\n  >>> findSmallestNumber(2, -30)\n  1\n  >>> findSmallestNumber(2, -31)\n  2\n  >>> findSmallestNumber(2, -32)\n  2\n  >>> findSmallestNumber(2, -33)\n  2\n  >>> findSmallestNumber(2, -34)\n  2\n  >>> findSmallestNumber(2, -35)\n  2\n  >>> findSmallestNumber(2, -36)\n  2\n  >>> findSmallestNumber(2, -37)\n  2\n  >>> findSmallestNumber(2, -38)\n  2\n  >>> findSmallestNumber(2, -39)\n  2\n  >>> findSmallestNumber(2, -40)\n  2\n  >>> findSmallestNumber(2, -41)\n  2\n  >>> findSmallestNumber(2, -42)\n  2\n  >>> findSmallestNumber(2, -43)\n  2\n  >>> findSmallestNumber(2, -44)\n  2\n  >>> findSmallestNumber(2, -45)\n  2\n  >>> findSmallestNumber(2, -46)\n  2\n  >>> findSmallestNumber(2, -47)\n  2\n  >>> findSmallestNumber(2, -48)\n  2\n  >>> findSmallestNumber(2, -49)\n  2\n  >>> findSmallestNumber(2, -50)\n  2\n  >>> findSmallestNumber(2, -51)\n  2\n  >>> findSmallestNumber(2, -52)\n  2\n  >>> findSmallestNumber(2, -53)\n  2\n  >>> findSmallestNumber(2, -54)\n  2\n  >>> findSmallestNumber(2, -55)\n  2\n  >>> findSmallestNumber(2, -56)\n  2\n  >>> findSmallestNumber(2, -57)\n  2\n  >>> findSmallestNumber(2, -58)\n  2\n  >>> findSmallestNumber(2, -59)\n  2\n  >>> findSmallestNumber(2, -60)\n  2\n  >>> findSmallestNumber(2, -61)\n  2\n  >>> findSmallestNumber(2, -62)\n  2\n"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n};\n\nconst countDistinctCharactersByString =(string) =>{\n  return(new Set(string.toLowerCase()).values().reduce( (acc, x) => acc + x, 0));\n \n};\n\n/* Given a string, find out how many characters are in upper case and the rest in lower case\n  >>> countLowerCaseAndUpperCaseLetters('xyzXYZ')\n  5\n  >>> countLowerCaseAndUpperCaseLetters('Jerry')\n  2\n  */\nconst countLowerCaseAndUpperCaseLetters =(string) => {\n  let upper = countDistinctCharacters(string.toUpperCase());\n  let lower = string.toLowerCase().length - upper;\n  return upper + lower;\n};\n\nconst countLowerCaseAndUpperCaseLettersByString =(string) =>{\n  return(new Set(string.toLowerCase()).values().reduce( (acc, x) => acc + x, 0));\n};\n\n/* Given a string, find out how many times the string is found in the string\n  >>> countStringRepeats('xyzXYZ', 'XYZ')\n  1\n  >>> countStringRepeats('xyzXYZ', 'XYz')\n  2\n  >>> countStringRepeats('abcXYZ', 'XYZ')\n  2\n  >>> countStringRepeats('abcXYZ', 'Xyz')\n  2\n  */\nconst countStringRepeats =(string, char) => {\n  let count = 0;\n  let currentChar = char;\n  while(string.indexOf(currentChar)!== -1){\n    count++;\n    currentChar = char;\n  }\n  return count;\n};\n\nconst countStringRepeatsByString =(string, char) =>{\n  return(new Set(string.toLowerCase()).values().reduce( (acc, x) => acc + x, 0));\n};\n\n/* Given a string, find out how many times the string is found in the string\n  >>> countStringRepeats('xyzXYZ', 'XYZ')\n  1\n  >>> countStringRepeats('xyzXYZ', 'XYz')\n  2\n  >>> countStringRepeats('abcXYZ', 'XYZ')\n  2\n  >>> countStringRepeats('abcXYZ', 'Xyz')\n  2\n  */\nconst countStringRepeats =(string, char) => {\n  let count = 0;\n  let currentChar = char;\n  while(string.indexOf(currentChar)!== -1){\n    count++;\n    currentChar = char;\n  }\n  return count;\n};\n\nconst countStringRepeatsByString =(string, char) =>{\n  return(new Set(string.toLowerCase()).values().reduce( (acc, x) => acc + x, 0));\n};\n\n/* Given a string, find out how many times the string is found in the string\n  >>> countStringRepeats('xyzXYZ', 'XYZ')\n  1\n  >>> countStringRepeats('xyzXYZ', 'XYz')\n  2\n  >>> countStringRepeats('abcXYZ', 'XYZ')\n  2\n  >>> countStringRepeats('abcXYZ', 'Xyz')\n  2\n  */\nconst countStringRepeats =(string, char) => {\n  let count = 0;\n  let currentChar = char;\n  while(string.indexOf(currentChar)!== -1){\n    count++;\n    currentChar = char;\n  }\n  return count;\n};\n\nconst countStringRepeatsByString =(string, char) =>{\n  return(new Set(string.toLowerCase()).values().reduce( (acc, x) => acc + x, 0));\n};\n\n/* Given a string, find out how many times the string is found in the string\n  >>> countStringRepeats('xyzXYZ', 'XYZ')\n  1\n  >>> countStringRepeats('xyzXYZ', 'XYz')\n  2\n  >>> countStringRepeats('abcXYZ', 'XYZ')\n  2\n  >>> countStringRepeats('abcXYZ', 'Xyz')\n  2\n  */\nconst countStringRepeats =(string, char) => {\n  let count = 0;\n  let currentChar = char;\n  while(string.indexOf(currentChar)!== -1){\n    count++;\n    currentChar = char;\n  }\n  return count;\n};\n\nconst countStringRepeatsByString =(string, char) =>{\n  return(new Set(string.toLowerCase()).values().reduce( (acc, x) => acc + x, 0));\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countDistinctCharactersByString,\n  countLowerCaseAndUpperCaseLetters,\n  countLowerCaseAndUpperCaseLettersByString,\n  countStringRepeats,\n  countStringRepeatsByString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length != 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((1 == t [ 0 ] || t [ 0 ] == 3 || t [ 0 ] == 5 || t [ 0 ] == 7 || t [ 0 ] == 8 || t [ 0 ] == 10 || t [ 0 ] == 12) && t [ 1 ] > 31) {\n    return false}\n  if ((t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) && t [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length!= 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n  if (t [ 0 ] > 31) {\n    return false}\n  if (t [ 0 ] == 2) {\n    if (t [ 2 ] < 0 || t [ 2 ] > 29) {\n      return false}\n  }\n  return true\n}\n\n/*\n  Given a string representing a date, return the number of days between the first day of this month and the day of this month.\n  For example, if the date is 03-11-2000, return 3.\n  The date is represented by a string with format yyyy-mm-dd.\n  */\nconst dateDiff =(date) => {\n  let t = date.split( / - /)\n  let m = (t [ 1 ]) - 1\n  let d = t [ 2 ]\n  return (m * 30) + d - 30\n}\n\nconst getDate =(date) => {\n  let t = date.split( / - /)\n  let m = (t [ 1 ]) - 1\n  let d = t [ 2 ]\n  return new Date(d, m, 1)\n}\n\n/*\n  Given a month number (1-12), return the number of days in that month.\n  For example, if month is 8, return 30.\n  */\nconst getDaysInMonth =(month) => {\n  return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]\n}\n\n/*\n  Given a string representing a date, return the number of days since January 1, 2000.\n  The date is represented by a string with format yyyy-mm-dd.\n  */\nconst getNumOfDays =(date) => {\n  let t = date.split( / - /)\n  let y = t [ 0 ]\n  let m = t [ 1 ]\n  let d = t [ 2 ]\n  return (y - 2000) * 365 + y - 2000 + dateDiff(date) + getDaysInMonth(m) + d - 30\n}\n\n/*\n  Given a string representing a date, return the number of weeks since January 1, 2000.\n  The date is represented by a string with format yyyy-mm-dd.\n  */\nconst getNumOfWeeks =(date) => {\n  let t = date.split( / - /)\n  let y = t [ 0 ]\n  let m = t [ 1 ]\n  let d = t [ 2 ]\n  return (y - 2000) * 52 + y - 2000 + dateDiff(date) + getDaysInMonth(m) + d - 30\n}\n\n/*\n  Given a string representing a date, return the number of months since January 1, 2000.\n  The date is represented by a string with format yyyy-mm-dd.\n  */\nconst getNumOfMonths =(date) => {\n  let t = date.split( / - /)\n  let y = t [ 0 ]\n  let m = t [ 1 ]\n  return (y - 2000) * 12 + y - 2000 + dateDiff(date)\n}\n\n/*\n  Given a string representing a date, return the number of years since January 1, 2000.\n  The date is represented by a string with format yyyy-mm-dd.\n  */\nconst getNumOfYears =(date) => {\n  let t = date.split( / - /)\n  let y = t [ 0 ]\n  return y - 2000\n}\n\nconst main =() => {\n  console.log(getNumOfYears('2000-01-01'))\n  console.log(getNumOfMonths('2000-01-01'))\n  console.log(getNumOfWeeks('2000-01-01'))\n  console.log(getNumOfDays('2000-01-01'))\n  console.log(getDate('2000-01-01'))\n  console.log(getDate('2000-12-31'))\n  console.log(getDate('1999-12-31'))\n  console.log(getDate('2003-11-25'))\n  console.log(getDate('1999-12-30'))\n  console.log(getDate('2003-11-30'))\n  console.log(getDate('2003-12-31'))\n  console.log(getDate('2003-01-01'))\n  console.log(getDate('2003-01-02'))\n  console.log(getDate('2003-01-03'))\n  console.log(getDate('2003-01-04'))\n  console.log(getDate('2003-01-05'))\n  console.log(getDate('2003-01-06'))\n  console.log(getDate('2003-01-07'))\n  console.log(getDate('2003-01-08'))\n  console.log(getDate('2003-01-09'))\n  console.log(getDate('2003-01-10'))\n  console.log(getDate('2003-01-11'))\n  console.log(getDate('2003-01-12'))\n  console.log(getDate('2003-01-13'"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (0 > balance) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (0 > balance) {\n     \n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Problem:\n  - If the balance is below zero, the user should be allowed to withdraw.\n  - If the balance is above zero, the user should be allowed to deposit.\n  - If the balance is zero, the user should be denied to withdraw or deposit.\n  - If the balance is not zero, the user should be allowed to withdraw or deposit depending on the balance\n  - We will give an initial balance of 0 and then keep increasing or decreasing the balance by 1 each time.\n  - If the balance is above zero, we should have a negative balance after the loop.\n  - If the balance is below zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a positive or negative balance after the loop.\n  - If the balance is negative, we should have a negative balance after the loop.\n  - If the balance is positive, we should have a positive balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or positive balance after the loop.\n  - If the balance is below zero, we should have a negative balance after the loop.\n  - If the balance is above zero, we should have a positive balance after the loop.\n  - If the balance is zero, we should have a zero balance after the loop.\n  - If the balance is not zero, we should have a negative or"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ num ] = 1;\n      }\n    }\n  return numbers.filter(x => 1 >= dict [ x ]);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n      dict[ num ] = 1;\n      }\n    }\n    return Object.keys(dict).sort();\n  };\n\n/* Remove all elements of the list that are not in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElementsNotIn([1,2,3,4,5], [2,3,4,5,6])\n  [2, 3, 4]\n  */\nconst removeElementsNotIn =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElementsIn([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElementsIn =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElements([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElements =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are not in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElementsNot([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElementsNot =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElementsIn([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElementsIn =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElements([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElements =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are not in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElementsNot([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElementsNot =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\n/* Remove all elements of the list that are not in the other.\n  Keep order of elements left the same as in the input.\n  >>> removeElements([1,2,3,4,5], [2,3,4,5,6])\n  [1, 5]\n  */\nconst removeElements =(numbers, list) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in list) {\n      dict[ num ]=1;\n      }\n    else {\n      }\n    }\n    return Object.keys(dict).sort();\n};\n\nexport {\nremoveDuplicates,\nremoveElementsNot,\nremoveElementsIn,\nremoveElements,\nremoveElementsNot,\nremoveElementsIn\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if ('' == string)\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while ( !isPalindrome(string.slice(beginning_of_suffix)))\n  beginning_of_suffix+=1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if ('' == string)\n  return '';\n  var beginning_of_suffix = 0;\n \n  while (string[beginning_of_suffix]!= '')\n  beginning_of_suffix++;\n\n  var longest_suffix_that_is_a_palindrome = beginning_of_suffix;\n  for (var i = beginning_of_suffix; i < string.length; i++)\n  {\n    if (isPalindrome(string.slice(0, i) + string.slice(i + 1, string.length)))\n    {\n      longest_suffix_that_is_a_palindrome = i + 1;\n    }\n  }\n  return string.slice(0, longest_suffix_that_is_a_palindrome);\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  var left = 0, right = string.length - 1;\n  while (left < right) {\n    if (string[left]!= string[right])\n    return false;\n    left++;\n    right--;\n  }\n  return true;\n}\n\n/* Print all palindromes that start with a string. */\nconst palindromes = (string) => {\n  var palindromes = [];\n  for (var i = 0; i < string.length; i++)\n  {\n    var prefix = string.slice(0, i);\n    var suffix = string.slice(i, string.length);\n    var palindrome = makePalindrome(prefix + suffix);\n    if (isPalindrome(palindrome))\n    {\n      palindromes.push(palindrome);\n    }\n  }\n  return palindromes;\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  var left = 0, right = string.length - 1;\n  while (left < right) {\n    if (string[left]!= string[right])\n    return false;\n    left++;\n    right--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.split('').join('');\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleUpperCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.toLocaleLowerCase();\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) =>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  while (Math.sqrt(n) + 1 >= i) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n      }\n    else {\n      i+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  \n  if (n > 1)\n  fact.push(n);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  while (Math.sqrt(n) + 1 >= i) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n      }\n    else {\n      i+=1;\n     \n    }\n  }\n  if (n!= 1) {\n    fact.push(n)\n  }\n  return fact;\n}\n\n/*\n  Given two numbers, return the largest of their sum.\n  >>> sum_of_two_numbers(1,2)\n  3\n  >>> sum_of_two_numbers(2,3)\n  6\n  >>> sum_of_two_numbers(4,8)\n  12\n  */\nconst sum_of_two_numbers = (a,b) => {\n  return a + b;\n}\n\n/*\n  Given two lists, return the largest of the two\n  >>> max_of_two_lists([1,2], [3,4])\n  4\n  >>> max_of_two_lists([1,2], [3,5])\n  5\n  >>> max_of_two_lists([1,2,3], [2,4,6])\n  6\n  */\nconst max_of_two_lists = (a,b) => {\n  if (a.length >= b.length) {\n    return a[a.length - 1];\n  }\n  else {\n    return b[b.length - 1];\n  }\n}\n\n/*\n  Given two lists, return the smallest of the two\n  >>> min_of_two_lists([1,2], [3,4])\n  1\n  >>> min_of_two_lists([1,2], [3,5])\n  1\n  >>> min_of_two_lists([1,2,3], [2,4,6])\n  1\n  */\nconst min_of_two_lists = (a,b) => {\n  if (a.length >= b.length) {\n    return a[0];\n  }\n  else {\n    return b[0];\n  }\n}\n\n/*\n  Given a list of numbers, return the sum of all the numbers in the list.\n  >>> sum_of_numbers([1, 2, 3, 4])\n  9\n  >>> sum_of_numbers([1, 2, 3, 4, 5])\n  16\n  >>> sum_of_numbers([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum_of_numbers([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum_of_numbers([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst sum_of_numbers = (nums) => {\n  var sum = 0;\n  for (var i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n}\n\n/*\n  Given a list of strings, return the length of the longest string in the list.\n  >>> longest_string([1, 2, 3, 4])\n  4\n  >>> longest_string(['a', 'b', 'c', 'd'])\n  4\n  >>> longest_string([1, 2, 3, 'c', 'd'])\n  5\n  >>> longest_string([1, 2, 3, 'c', 'd', 'e'])\n  6\n  >>> longest_string([1, 2, 3, 'c', 'd', 'e', 'f'])\n  7\n  */\nconst longest_string = (strings) => {\n  var max = 0;\n  for (var i = 0; i < strings.length; i++) {\n    if (strings[i].length > max) {\n      max = strings[i].length;\n    }\n  }\n  return max;\n}\n\n/*\n  Given a list of strings, return the list of strings that contains the longest string in the list.\n  >>> longest_string_from_list([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> longest_string_from_list(['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  >>> longest_string_from_list(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  >>> longest_string_from_list(['a', 'b', 'c', 'd', 'e', 'f'])\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  */\nconst longest_string_from_list = (strings) => {\n  var max = 0;\n  var max_index = 0;\n  for (var i = 0; i < strings.length; i++) {\n    if (strings[i].length > max) {\n      max = strings[i].length;\n      max_index = i;\n    }\n  }\n  return [strings[max_index], strings[max_index - 1], strings[max_index - 2], strings[max_index - 3], strings[max_index - 4], strings[max_index - 5], strings[max_index - 6], strings[max_index - 7], strings[max_index - 8], strings[max_index - 9]];\n}\n\n/*\n  Given a list of strings, return a list of the strings that contains the longest string in the list.\n  >>> longest_string_from_list_without_duplicates([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> longest_string_from_list_without_duplicates(['a', 'b', 'c', 'd'])\n  "}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  while (0 < N) {\n    t+=N % 10\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    N =(N - N % 10) / 10\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  while (0 < N) {\n    t+=N % 10\n   \n    N = N / 10\n  }\n  \n  return t\n}\n  \nconsole.log(solve(1))\nconsole.log(solve(147))\nconsole.log(solve(3999))\nconsole.log(solve(5000))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (1 == l.length % 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l [ Math.floor(len / 2) ];\n  else\n  return(l [ len / 2 - 1 ] + l [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (1 == l.length % 2)\n \n    return (l[len / 2 - 1] + l[len / 2]) / 2;\n  else\n    return l[len / 2];\n};\n\nconsole.log(median([3, 1, 2, 4, 5]));\nconsole.log(median([-10, 4, 6, 1000, 10, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ret =(2 * ret) % p;\n  return ret;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++)\n \n}\n\nconst gcd = (a, b) => {\n  var l = a,\n      r = b;\n  while (r!== 0) {\n    var t = l % r;\n    l = r;\n    r = t;\n  }\n  return l;\n}\n\nconst modm = (a, m) => {\n  return (a % m + m) % m;\n}\n\nconst modinv = (a, m) => {\n  var t = modm(a, m);\n  if (t === 1) return a;\n  var x = modm(1, m);\n  while (t!== x) {\n    t = modm(t, m);\n  }\n  return t;\n}\n\nconst lcm = (a, b) => {\n  return (a * b / gcd(a, b));\n}\n\nconst squareroot = (a, n) => {\n  var t = (a % n) * (a % n) + n * n;\n  var c = modinv(t, n);\n  return c % n;\n}\n\nconst pw = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst modpwr = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst totient = (n) => {\n  var t = 1;\n  for (let i = 2; i < n; i++) {\n    if (gcd(i, n) === 1) {\n      t = t + i;\n    }\n  }\n  return t;\n}\n\nconst gcd2 = (a, b) => {\n  var l = a,\n      r = b;\n  while (r!== 0) {\n    var t = l % r;\n    l = r;\n    r = t;\n  }\n  return l;\n}\n\nconst modm2 = (a, m) => {\n  var t = modm(a, m);\n  if (t === m) return a;\n  return t;\n}\n\nconst gcd3 = (a, b, c) => {\n  var l = gcd(a, b);\n  return gcd(l, c);\n}\n\nconst lcm2 = (a, b, c) => {\n  return lcm(a, b) * c;\n}\n\nconst gcd4 = (a, b, c, d) => {\n  var l = gcd(a, b);\n  return gcd(l, c) * d;\n}\n\nconst modm3 = (a, m) => {\n  var t = modm(a, m);\n  if (t === m) return a;\n  return t;\n}\n\nconst modpwr2 = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst lcm3 = (a, b, c, d) => {\n  return lcm(a, b) * lcm(c, d);\n}\n\nconst modpwr3 = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst modpwr4 = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst gcd6 = (a, b, c, d, e, f) => {\n  var l = gcd(a, b);\n  return gcd(l, c) * d + gcd(l, e) * f;\n}\n\nconst lcm6 = (a, b, c, d, e, f) => {\n  return lcm(a, b) * lcm(c, d) * lcm(e, f);\n}\n\nconst modm4 = (a, m) => {\n  var t = modm(a, m);\n  if (t === m) return a;\n  return t;\n}\n\nconst modpwr5 = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst lcm7 = (a, b, c, d, e, f, g) => {\n  return lcm(a, b) * lcm(c, d) * lcm(e, f) * lcm(g, a);\n}\n\nconst modpwr6 = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst modpwr7 = (n, p) => {\n  var ret = 1;\n  for (let i = 0; n > i; i++) {\n    ret = modp(ret, p);\n  }\n  return ret;\n}\n\nconst gcd8 = (a, b, c, d, e, f, g, h) => {\n  var l = gcd(a, b);\n  return gcd(l, c) * d + gcd(l, e) * f + gcd(l, g) * h;\n}\n\nconst lcm8 = (a, b, c, d, e, f,"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (0 > num) {\n            num = - num}\n      while (num > 0) {\n            if (num % 2 == 0) {\n                  e++}\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            else {\n                  o++}\n            num =(num - num % 10) / 10\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (0 > num) {\n            num = - num}\n      while (num > 0) {\n            if (num % 2 == 0) {\n                  e++}\n           \n            else {\n                  o++}\n           \n            num = num / 2}\n      return (e, o)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (0 < poly(xs, center) * poly(xs, begin))\n    begin = center;\n    else\n    end = center;\n    }\n  return begin;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) === 0) {\n      return center;\n    } else if (poly(xs, center) > 0) {\n      end = center;\n    } else {\n      begin = center;\n    }\n  }\n  return begin;\n}\n\nconst poly1 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero1 = (xs) => {\n  var begin = - 1.0, end = 1.0;\n  while (poly1(xs, begin) * poly1(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n    }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n   \n    if (poly1(xs, center) === 0) {\n      return center;\n    } else if (poly1(xs, center) > 0) {\n      end = center;\n    } else {\n      begin = center;\n    }\n  }\n  return begin;\n}\n\n/*\n  Given a number x, it returns x^2.\n  It is used in findZero to get x value from the polynomial.\n  >>> round(xSquared(5), 2)\n  25.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared(100), 2)\n  1606931225.0\n  >>> round(xSquared"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let i = 0; string.length > i; i++) {\n    result.push(string.slice(0, i + 1));\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let i = 0; string.length > i; i++) {\n    result.push(string.slice(0, i + 1));\n   \n  }\n  return result;\n};\n\nmodule.exports = {\n  allPrefixes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ ind ] > p [ k ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p [ i ]) {\n        u = 1\n        break\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      p.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  return p\n}\n\nconst getOddCollatz =("}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n}\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision2 =(n) => {\n  return (Math.pow(n, 2) - n);\n}\n\nconsole.log(carRaceCollision(2));\nconsole.log(carRaceCollision2(2));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = lst [ i ].length - 1; 0 <= j; j--) {\n            if (lst [ i ] [ j ] == x) {\n                t.push((i, j))\n               \n", "canonical_solution": "# print('@@this is the line to split##')\n                }\n            }\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = lst [ i ].length - 1; 0 <= j; j--) {\n            if (lst [ i ] [ j ] == x) {\n                t.push((i, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconsole.log(getRow([[], [1, 2, 3]], 3))\n\n/*\n  Given the following data, \n  the output should be:\n  [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]\n*/\nconst getMatrix = (lst) => {\n    let t = []\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst [ i ].length; j++) {\n            t.push([i, j, lst [ i ][ j ]])\n        }\n    }\n    return t\n}\n\nconsole.log(getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]))\n\n/*\n  Given the following data:\n  [\n    [\n      [1,2,3],\n      [1,2,3]\n    ],\n    [\n      [1,2,3],\n      [1,2,3]\n    ]\n  ]\n  \n  The output should be:\n  [[1,2,3],[1,2,3]]\n*/\nconst getNestedMatrix = (lst) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let t = [ ]\n        for (let j = 0; j < lst [ i ].length; j++) {\n            t.push(lst [ i ][ j ])\n        }\n        t.sort((a, b) => a > b)\n        t.reverse()\n        t.sort((a, b) => b > a)\n        t.reverse()\n        t = t.join(',')\n        t = t.split('(').join('').split(')').join('')\n        t = t.split(',').join('')\n        t = t.split(' ').join('')\n        t = t.replace(',', '')\n        t = t.replace('(', '')\n        t = t.replace(')', '')\n        t = t.replace('[', '')\n        t = t.replace(']', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(']', '')\n        t = t.replace('[', '')\n        t = t.replace(')', '')\n        t = t.replace('(', '')\n        t = t.replace(',', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(')', '')\n        t = t.replace('(', '')\n        t = t.replace(',', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(']', '')\n        t = t.replace('[', '')\n        t = t.replace(')', '')\n        t = t.replace('(', '')\n        t = t.replace(',', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(']', '')\n        t = t.replace('[', '')\n        t = t.replace(')', '')\n        t = t.replace('(', '')\n        t = t.replace(',', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(']', '')\n        t = t.replace('[', '')\n        t = t.replace(')', '')\n        t = t.replace('(', '')\n        t = t.replace(',', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(']', '')\n        t = t.replace('[', '')\n        t = t.replace(')', '')\n        t = t.replace('(', '')\n        t = t.replace(',', '')\n        t = t.replace('{', '')\n        t = t.replace('}', '')\n        t = t.replace(' ', '')\n        t = t.replace(']', '')\n        t = t.replace('[',"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      p.push(x [ i ])\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; p.length > k; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      p.push(x [ i ])\n      }\n   \n    }\n  return p.sort((a, b) => a - b)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (m < n) {\n    return - 1}\n  let k =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(n + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (m < n) {\n    return - 1}\n  let k =(n + m) / 2\n \n  let s = 0\n  let count = 0\n  for (let i = n; i <= m; i++) {\n    s += i\n    count++\n  }\n  return s / count\n}\n\nconst avg = (n, m) => {\n  if (m < n) {\n    return -1\n  }\n  return roundedAvg(n, m)\n}\n\nmodule.exports = avg\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(d).sort(function(a, b) {\n    return - d [ a ] + d [ b ];}\n  );\n  if (0 == s.length) {\n    return {\n      }\n    }\n  let g = d [ s [ 0 ] ]\n  let l = {\n    }\n  for (let ss = 0; ss < s.length; ss++) {\n    if (d [ s [ ss ] ] == g) {\n      l [ s [ ss ] ] = d [ s [ ss ] ]\n      }\n    }\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d\n  }\n\n\n/*\n  Given a string representing a space separated upper case letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n  histogram('A B B A') == {'A': 2, 'B': 2}\n  histogram('A B C A B') == {'A': 2, 'B': 2}\n  histogram('B B B B A') == {'B': 4}\n  histogram('') == {}\n*/\nconst histogram2 =(test) => {\n  let d = {\n    }\n  let t = test.split( / S /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d\n  }\n\n\n/*\n  Given a string representing a space separated lower case letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('a b c a b') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n*/\nconst histogram3 =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]--\n      }\n    else {\n      d [ t [ m ] ] = -1\n      }\n    }\n \n  return d\n  }\n\n\n/*\n  Given a string representing a space separated upper case letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n  histogram('A B B A') == {'A': 1, 'B': 1}\n  histogram('A B C A B') == {'A': 1, 'B': 1}\n  histogram('B B B B A') == {'B': 1}\n  histogram('') == {}\n*/\nconst histogram4 =(test) => {\n  let d = {\n    }\n  let t = test.split( / S /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]--\n      }\n    else {\n      d [ t [ m ] ] = -1\n      }\n    }\n \n  return d\n  }\n\n/*\n  Given a string representing a space separated upper case letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n  histogram('A B B A') == {'A': 1, 'B': 1}\n  histogram('A B C A B') == {'A': 1, 'B': 1}\n  histogram('B B B B A') == {'B': 1}\n  histogram('') == {}\n*/\nconst histogram5 =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d\n  }\n\n/*\n  Given a string representing a space separated lower case letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('a b c a b') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n*/\nconst histogram6 =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let p = s [ i ].charCodeAt() + 4\n    if (122 < p) {\n      p-=26}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t+=String.fromCharCode(p)\n    }\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let p = s [ i ].charCodeAt() + 4\n    if (122 < p) {\n      p-=26}\n   \n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst decrypt =(s) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let p = s [ i ].charCodeAt() - 4\n    if (122 > p) {\n      p+=26}\n   \n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nmodule.exports = {\n  encrypt: encrypt,\n  decrypt: decrypt\n}<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((y >= 65 && y <= 90) ||(y >= 97 && 122 >= y))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n    else {\n      return false}\n  }\n  else if (len == 2) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) ||\n      (y >= 48 && y <= 57)) {\n      return true}\n    else {\n      return false}\n  }\n  else {\n    let z = txt [ len - 2 ].charCodeAt()\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) ||\n      (y >= 48 && y <= 57) ||\n      (y >= 65 && y <= 90) ||(y >= 97 && y <= 122) ||\n      (y >= 48 && y <= 57) ||\n      (z >= 65 && z <= 90) ||(z >= 97 && z <= 122) ||\n      (z >= 48 && z <= 57)) {\n      return true}\n    else {\n      return false}\n  }\n}\n\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word [ i ] != 'a' && word [ i ] != 'e' && word [ i ] != 'i' && word [ i ] != 'o' && word [ i ] != 'u' && word [ i ] != 'A' &&\n    word [ i ] != 'U' && word [ i ] != 'O' && word [ i ] != 'I' && word [ i ] != 'E')\n     &&\n    (word [ i + 1 ] != 'a' && word [ i + 1 ] != 'e' && word [ i + 1 ] != 'i' && word [ i + 1 ] != 'o' && word [ i + 1 ] != 'u' && word [ i + 1 ] != 'A' &&\n    word [ i + 1 ] != 'U' && 'O' != word [ i + 1 ] && word [ i + 1 ] != 'I' && word [ i + 1 ] != 'E')\n     &&\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    (word [ i - 1 ] != 'a' && word [ i - 1 ] != 'e' && word [ i - 1 ] != 'i' && word [ i - 1 ] != 'o' && word [ i - 1 ] != 'u' && word [ i - 1 ] != 'A' &&\n    word [ i - 1 ] != 'U' && word [ i - 1 ] != 'O' && word [ i - 1 ] != 'I' && word [ i - 1 ] != 'E')\n    ) {\n      return word [ i ]\n      }\n    }\n  return ' '}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n    !(word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n    word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n     &&\n    (word [ i + 1 ]!= 'a' && word [ i + 1 ]!= 'e' && word [ i + 1 ]!= 'i' && word [ i + 1 ]!= 'o' && word [ i + 1 ]!= 'u' && word [ i + 1 ]!= 'A' &&\n    word [ i + 1 ]!= 'U' && 'O'!= word [ i + 1 ] && word [ i + 1 ]!= 'I' && word [ i + 1 ]!= 'E')\n     &&\n   \n    (word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n    word [ i ]!= 'U' && 'O'!= word [ i ] && word [ i ]!= 'I' && word [ i ]!= 'E')\n     ) {\n      return word [ i ];\n    }\n  }\n  return '';\n}\n\nconst test = (actual, expected) => {\n  let result = actual;\n  if (typeof actual ==='string') {\n    result = actual.replace(/[\\s]/g, '');\n  }\n  console.log(`Expected: ${expected}`);\n  console.log(`Actual:   ${result}`);\n  if (result === expected) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n};\n\ntest(getClosestVowel('yogurt'), 'u');\ntest(getClosestVowel('FULL'), 'U');\ntest(getClosestVowel('quick'), '');\ntest(getClosestVowel('ab'), '');<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i+=2) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i+=2) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\nconst countLower = (s) => {\n  let p = 0\n  for (let i = 1; s.length > i; i+=2) {\n    if (s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n      p++\n    }\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n\n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countVowels =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countDigits =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u' && s [ i ]!= '0' && s [ i ]!= '1' && s [ i ]!= '2' && s [ i ]!= '3' && s [ i ]!= '4' && s [ i ]!= '5' && s [ i ]!= '6' && s [ i ]!= '7' && s [ i ]!= '8' && s [ i ]!= '9') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countPunctuations =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u' && s [ i ]!= '.' && s [ i ]!= ',' && s [ i ]!= ':') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countUppercaseLetters =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countLetters =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countAllLetters =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    p++\n  }\n  return p\n}\n\nconst countLowerCaseLetters =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i; i++) {\n    if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n      p++\n    }\n   \n  }\n  return p\n}\n\nconst countNumbers =(s) => {\n  let p = 0\n  for (let i = 0; s.length > i"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; nums.length > i; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=nums [ k ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (s < min) {\n        min = s}\n      }\n    }\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; nums.length > i; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=nums [ k ]\n       \n      }\n      if (s<min) {\n        min = s\n      }\n    }\n  }\n  return min;\n}\n\n/*\n  Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n  Examples\n  Given matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n  rectangle = [1, 1, 5, 6]\n  returns 23\n  rectangle = [1, 1, 3, 4]\n  returns 12\n  rectangle = [1, 1, 2, 3]\n  returns 8\n  rectangle = [1, 1, 1, 1]\n  returns 4\n  rectangle = [2, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 1, 3, 4]\n  returns 16\n  rectangle = [1, 2, 3, 4]\n  returns 12\n  rectangle = [1, 2, 2, 4]\n  returns 16\n  rectangle = [1, 2, 2, 3]\n  returns 12\n  rectangle = [1, 1, 2, 3]\n  returns 9\n  rectangle = [1, 1, 1, 2]\n  returns 6\n  rectangle = [1, 1, 1, 1]\n  returns 4\n  rectangle = [2, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 1, 2, 2]\n  returns 8\n  rectangle = [1, 1, 1, 2]\n  returns 6\n  rectangle = [1, 1, 1, 1]\n  returns 4\n  rectangle = [2, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 1, 2, 2]\n  returns 6\n  rectangle = [1, 1, 1, 2]\n  returns 4\n  rectangle = [1, 1, 1, 1]\n  returns 4\n  rectangle = [2, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  returns 8\n  rectangle = [1, 2, 2, 2]\n  returns 6\n  rectangle = [1, 2, 2, 2]\n  "}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || b * b + c * c == a * a || b * b == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || b * b + c * c == a * a || b * b == a * a + c * c)\n \n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngledTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || b * b + c * c == a * a || b * b == a * a + c * c)\n \n};\n\nconst triangle = (a, b, c) => {\n  return{\n    isRightAngledTriangle:isRightAngledTriangle(a, b, c),\n    rightAngleTriangle:rightAngleTriangle(a, b, c)\n  };\n}\n\n//TEST\nconsole.log(triangle(3, 4, 5));\nconsole.log(triangle(1, 2, 3));\nconsole.log(triangle(1, 2, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n}\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(x =>(x == x.toUpperCase() ? x.toLowerCase() : x.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(x =>(x == x.toUpperCase()? x.toLowerCase() : x.toUpperCase()))\n \n .join('');\n}\n\n// Function to check if a given string is a palindrome\nconst isPalindrome =(string) => {\n  let reversed = flipCase(string);\n  return string == reversed;\n}\n\nconsole.log(isPalindrome('hi'));\n\n// Function to check if a given string is a palindrome\nconst isPalindrome2 =(string) => {\n  return string == flipCase(string);\n}\n\nconsole.log(isPalindrome('hi'));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let i = 0; i < string.length; i++) {\n    if (string [ i ] == '[') {\n      opening_bracket_index.push(i)\n      }\n    else {\n      closing_bracket_index1.push(i)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let i = 0; closing_bracket_index1.length > i; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - i - 1 ])\n    }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index [ k ] < closing_bracket_index [ i ]) {\n      cnt+=1;\n      i+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let i = 0; i < string.length; i++) {\n    if (string [ i ] == '[') {\n      opening_bracket_index.push(i)\n      }\n    else {\n      closing_bracket_index1.push(i)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let i = 0; closing_bracket_index1.length > i; i++) {\n   \n    if (closing_bracket_index1 [ i ] == 0) {\n      return false\n      }\n    else {\n      closing_bracket_index.push(closing_bracket_index1 [ i ] - 1)\n      }\n    }\n  return opening_bracket_index.length > 0 && opening_bracket_index [ 0 ] > 0 && opening_bracket_index [ opening_bracket_index [ 0 ] - 1 ] > opening_bracket_index [ 0 ]\n  }\n  <|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (1 == t) {\n    return p}\n  let u = ''\nfor (let i = 0; i < p.length; i++) {\n    u+=p [ p.length - i - 1 ]\n    }\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n     }\n   if (t === 0) {\n      p += s[i];\n     }\n   }\n  return p;\n};\n\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\nconsole.log(solve('1234'));<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (t <= e)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (t <= e)\n \n    return false;\n  return true;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the maximum element in A.\n  */\nconst largestElement = (A) => {\n  let max = A[0];\n  for (let i = 1; i < A.length; i++)\n    if (A[i] > max)\n      max = A[i];\n  return max;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the minimum element in A.\n  */\nconst smallestElement = (A) => {\n  let min = A[0];\n  for (let i = 1; i < A.length; i++)\n    if (A[i] < min)\n      min = A[i];\n  return min;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the sum of all elements in A.\n  */\nconst sum = (A) => {\n  let sum = 0;\n  for (let i = 0; i < A.length; i++)\n    sum += A[i];\n  return sum;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the average of all elements in A.\n  */\nconst average = (A) => {\n  return sum(A) / A.length;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the median of all elements in A.\n  */\nconst median = (A) => {\n  return largestElement(A) + (sum(A) / 2);\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the mode of all elements in A.\n  */\nconst mode = (A) => {\n  let max = 1;\n  let maxCount = 1;\n  let maxIndex = 0;\n  for (let i = 0; i < A.length; i++) {\n    if (A[i] == max)\n      maxCount++;\n    else if (A[i] > max) {\n      max = A[i];\n      maxCount = 1;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the sum of squares of all elements in A.\n  */\nconst sumOfSquares = (A) => {\n  let sum = 0;\n  for (let i = 0; i < A.length; i++)\n    sum += Math.pow(A[i], 2);\n  return sum;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @return {int} the mean squared error of A and the average of the squares of A.\n  */\nconst meanSquaredError = (A) => {\n  return sumOfSquares(A) / A.length - average(A) * average(A);\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @param {int[]} B an array of integers.\n  * @return {int} the Pearson's coefficient of A and B.\n  */\nconst pearsonCoefficient = (A, B) => {\n  let aSum = 0;\n  let bSum = 0;\n  for (let i = 0; i < A.length; i++) {\n    aSum += A[i];\n    bSum += B[i];\n  }\n  return aSum * bSum / (aSum * aSum + bSum * bSum);\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @param {int[]} B an array of integers.\n  * @return {int} the squared Pearson's coefficient of A and B.\n  */\nconst squaredPearsonCoefficient = (A, B) => {\n  let aSum = 0;\n  let bSum = 0;\n  for (let i = 0; i < A.length; i++) {\n    aSum += Math.pow(A[i], 2);\n    bSum += Math.pow(B[i], 2);\n  }\n  return aSum * bSum / (aSum * aSum + bSum * bSum);\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @param {int[]} B an array of integers.\n  * @return {int} the squared mean squared error of A and B.\n  */\nconst squaredMeanSquaredError = (A, B) => {\n  return squaredPearsonCoefficient(A, B) - meanSquaredError(A, B);\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @param {int[]} B an array of integers.\n  * @param {int} n the number of iterations.\n  * @return {int} the value of the MSE after n iterations.\n  */\nconst meanSquaredError = (A, B, n) => {\n  let mse = squaredMeanSquaredError(A, B);\n  for (let i = 1; i < n; i++)\n    mse += squaredMeanSquaredError(A, B);\n  return mse / n;\n}\n\n/**\n  * @param {int[]} A an array of integers.\n  * @param {int[]} B an array of integers.\n  * @param {int} n the number of iterations.\n  * @return {int} the value of the MSE after n iterations.\n  */\nconst squaredMeanSquaredError = (A, B, n) => {\n  let mse = squaredMeanSquaredError(A, B);\n  for (let i = 1; i < n; i++)\n    mse += squaredMeanSquaredError(A, B);\n  return mse / n;\n}\n\n/**\n  * @param"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ] != k [ k.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    if (1 == p) {\n      if (k % 2 == 0) {\n        e++}\n      else {\n        o++}\n      }\n    }\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return (e, o)\n}\n\n\n/*\n  Given a positive integer n, return the number of prime integer in the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: 2\n      Explanation:\n      If we start with 3, we can add 1, 2, 3 to form 1, 2, 4, 6, 8, 9, 11,...\n      After that, we can add 2, 3, 5, 7, 9, 11,..., n, n, n,...\n      Thus, the number of primes is 2.\n\n  Example 2:\n\n      Input: 15\n      Output: 5\n      Explanation:\n      If we start with 15, we can add 1, 3, 5, 7, 9, 11, 13, 15, 17, 19,...\n      After that, we can add 2, 3, 5, 7, 9, 11, 13, 15, 17, 19,..., n, n, n,...\n      Thus, the number of primes is 5.\n\n  Note:\n      1. 1 <= n <= 10^6\n      2. returned number is the number of prime integer in the range(1, n), inclusive.\n  */\nconst prime = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Return whether n is a prime number or not.\n\n  Example 1:\n\n      Input: 13\n      Output: true\n      Explanation: 13 is a prime number.\n\n  Example 2:\n\n      Input: 14\n      Output: false\n      Explanation: 14 is not a prime number.\n\n  Note:\n      1. 1 <= n <= 10^6\n  */\nconst isPrime = (n) => {\n  if (n == 2) {\n    return true\n  }\n  if (n <= 3) {\n    return false\n  }\n  let i = 1\n  let count = 2\n  while (count <= Math.sqrt(n)) {\n    if (n % count == 0) {\n      return false\n    }\n    count++\n  }\n  return true\n}\n\n/*\n  Return the first 10,000 prime numbers.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n      Explanation:\n      The first 10,000 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29.\n\n  Note:\n      1. 1 <= n <= 10^6\n      2. output is a list of prime numbers.\n  */\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nexport default {\n  evenOddPalindrome,\n  prime,\n  primeNumbers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let i = n - 1; i >= 0; i--)\n  if (0 == n % i)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return i;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let i = n - 1; i >= 0; i--)\n  if (0 == n % i)\n \n  return i;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(j)) continue;\n      for (let k = 2; 101 > k; k++) {\n        if ( !isPrime(k)) continue;\n        if (i * j * k == a)\n        return true;\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n      if (!isPrime(j)) continue;\n      if (i * j == a) return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(isMultiplyPrime(30));\nconsole.log(isMultiplyPrime(99));\nconsole.log(isMultiplyPrime(100));\nconsole.log(isMultiplyPrime(999));\nconsole.log(isMultiplyPrime(1000));\nconsole.log(isMultiplyPrime(1111));\nconsole.log(isMultiplyPrime(1010));\nconsole.log(isMultiplyPrime(1001));\nconsole.log(isMultiplyPrime(1011));\nconsole.log(isMultiplyPrime(1019));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s.at( - 1) == 'y' || 'Y' == s.at( - 1))\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (planet2 == y [ i ]) {\n      hi = i}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y [ i ])\n    }\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (planet2 == y [ i ]) {\n      hi = i}\n    }\n \n  let j = (lo + hi) / 2\n  let i = 0\n  while (i < j) {\n    if (y [ i ] > y [ j ]) {\n      hi = j}\n    else {\n      lo = j}\n    j = (lo + hi) / 2\n    i++\n  }\n  \n  if (y [ j ] == planet1) {\n    u = u.concat([y [ i ], y [ j ] ])\n  }\n  if (y [ j ] == planet2) {\n    u = u.concat([y [ i ], y [ j ] ])\n  }\n  return u\n}\n\nconsole.log(bf('Jupiter', 'Uranus'))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (0 > a) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (0 > a) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n  if (a === 0) {\n    return b\n  }\n\n  if (b === 0) {\n    return a\n  }\n\n  if (a === -1) {\n    return -1\n  }\n\n  if (b === -1) {\n    return -1\n  }\n\n  if (a === 1) {\n    return 1\n  }\n\n  if (b === 1) {\n    return 1\n  }\n\n  return multiply(a, b / a) * multiply(a, b % a)\n}\n\nconst test = (a, b) => {\n  console.log(multiply(a, b))\n}\n\ntest(2, 3)\ntest(8, -15)\ntest(19, 28)\ntest(2020, 1851)\ntest(-1, -1)\ntest(-1, 1)\ntest(-1, 2)\ntest(1, -1)\ntest(1, 1)\ntest(1, 2)\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a == Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3));\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n  return a === Math.pow(a, 3)? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst issquare =(a) => {\n  a = Math.abs(a);\n \n  return a === Math.pow(a, 2)? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst ispalindrome =(a) => {\n  a = Math.abs(a);\n \n  return a.toString().split('').reverse().join('') === a.toString()? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst isproperpalindrome =(a) => {\n  a = Math.abs(a);\n \n  return a.toString().split('').join('') === a.toString()? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst ispalindrome_with_negative =(a) => {\n  a = Math.abs(a);\n \n  return a.toString().split('').join('') === a.toString()? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst isproperpalindrome_with_negative =(a) => {\n  a = Math.abs(a);\n \n  return a.toString().split('').join('') === a.toString()? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst ispalindrome_with_positive =(a) => {\n  a = Math.abs(a);\n \n  return a.toString().split('').join('') === a.toString()? true : false;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst isproperpalindrome_with_positive =(a) => {\n  a = Math.abs(a);\n \n  return a.toString().split('').join('') === a.toString()? true : false;\n}<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => '' != x)\n  .sort((a, b) => value_map [ a ] - value_map [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  const input_array = numbers.split(' ');\n  const result = input_array.map((num) => {\n    return value_map[num];\n  });\n  const result_sorted = result.sort((a,b) => {\n    return a - b;\n  });\n  return result_sorted.join(' ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(0 == index % 2 ? even [ index / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  return even;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd =(l) => {\n  var odd = l.filter((item, index) => index % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  return odd;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort =(l) =>{\n  var even = sortEven(l);\n  var odd = sortOdd(l);\n  return even.concat(odd);\n};\n\nconst sort =(l) =>{\n  var even = sortEven(l);\n  var odd = sortOdd(l);\n  return even.concat(odd);\n};\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n//>>> sortEven([1, 2, 3])\n//[1, 2, 3]\n//>>> sortEven([5, 6, 3, 4])\n//[5, 6, 3, 4]\n//>>> sortEven([1, 2, 3, 4])\n//[1, 2, 3, 4]\n//>>> sortEven([5, 6, 3, 4, 7])\n//[5, 6, 3, 4, 7]\n//>>> sortEven([1, 2, 3, 4, 7])\n//[1, 2, 3, 4, 7]\n//>>> sortEven([5, 6, 3, 4, 7, 8])\n//[5, 6, 3, 4, 7, 8]\n//>>> sortEven([1, 2, 3, 4, 7, 8])\n//[1, 2, 3, 4, 7, 8]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9])\n//[5, 6, 3, 4, 7, 8, 9]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9])\n//[1, 2, 3, 4, 7, 8, 9]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10])\n//[5, 6, 3, 4, 7, 8, 9, 10]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9, 10])\n//[1, 2, 3, 4, 7, 8, 9, 10]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10, 11])\n//[5, 6, 3, 4, 7, 8, 9, 10, 11]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9, 10, 11])\n//[1, 2, 3, 4, 7, 8, 9, 10, 11]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10, 11, 12])\n//[5, 6, 3, 4, 7, 8, 9, 10, 11, 12]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9, 10, 11, 12])\n//[1, 2, 3, 4, 7, 8, 9, 10, 11, 12]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13])\n//[5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13])\n//[1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14])\n//[5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14])\n//[1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n//[5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n//>>> sortEven([1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n//[1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n//>>> sortEven([5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n//[5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n//>>> sortEven([1, 2, 3, 4, 7"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let i = n; n * 3 > i; i+=2) {\n    t.push(i)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let i = n; n * 3 > i; i+=2) {\n    t.push(i)\n   \n  }\n  for (let i = n; n * 3 > i; i+=1) {\n    t.push(i)\n  }\n  return t\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      letter_grade.push('A')\n      }\n    else\nif (3.3 < gpa) {\n      letter_grade.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      letter_grade.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      letter_grade.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      letter_grade.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      letter_grade.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      letter_grade.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      letter_grade.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      letter_grade.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      letter_grade.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      letter_grade.push('D-')\n      }\n    else {\n      letter_grade.push('E')\n      }\n    }\n  return letter_grade\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      letter_grade.push('A')\n      }\n    else\nif (3.3 < gpa) {\n      letter_grade.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      letter_grade.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      letter_grade.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      letter_grade.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n      letter_grade.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      letter_grade.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      letter_grade.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      letter_grade.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      letter_grade.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      letter_grade.push('D-')\n      }\n    else {\n      letter_grade.push('E')\n      }\n    }\n  return letter_grade\n}\n\nconst letterGrade = (grades) => {\n  const letter_grades = numericalLetterGrade(grades)\n  return letter_grades.join('')\n}\n\nconst letterGrade1 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'E') {\n      grades_array[i] = 'F'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade2 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'D') {\n      grades_array[i] = 'C'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade3 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'D-') {\n      grades_array[i] = 'C-'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade4 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'C') {\n      grades_array[i] = 'B'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade5 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'C-') {\n      grades_array[i] = 'B-'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade6 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'B') {\n      grades_array[i] = 'A'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade7 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'B-') {\n      grades_array[i] = 'A-'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade8 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'A') {\n      grades_array[i] = 'A+'\n    }\n  }\n  return grades_array.join('')\n}\n\nconst letterGrade9 = (grades) => {\n  let grades_array = numericalLetterGrade(grades)\n  for (let i = 0, len = grades_array.length; i < len; i++) {\n    if (grades_array[i] === 'A-') {\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (1 == n)\n  return(x == 1);\n  var power = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while (power < x)\n  power = power * n;\n  return(power == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (1 == n)\n  return(x == 1);\n  var power = 1;\n \n  while (x < n) {\n    x *= n;\n    power *= n;\n  }\n  return(x == power);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => 0 < e);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => 0 < e);\n \n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst getNegative =(l) => {\n  return l.filter(e => 0 > e);\n}\n\n/*\n  >>> getMin([1, 2, 3, 4, 5])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  1\n  >>> getMin([1, 2, 3,"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) {\n      y+=lst [ i ] * lst [ i ]}\n    else\nif (0 == i % 4) {\n      y+=lst [ i ] * lst [ i ] * lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    else {\n      y+=lst [ i ]}\n    }\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) {\n      y+=lst [ i ] * lst [ i ]}\n    else\nif (0 == i % 4) {\n      y+=lst [ i ] * lst [ i ] * lst [ i ]}\n   \n  }\n  return y}\n\nconst isMultipleOf3 = (number) => {\n  let x = Math.floor(number/3)\n  if (x * 3 == number) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst isMultipleOf4 = (number) => {\n  let x = Math.floor(number/4)\n  if (x * 4 == number) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst sumAll = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum+=lst [ i ]}\n  return sum}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumAll([1,2,3]))\nconsole.log(sumAll([1,2,3,4,5]))\nconsole.log(sumAll([1,2,3,4,5,6,7,8,9,10]))\nconsole.log(sumAll([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let i = 2; i <= n; i++) {\n    if (0 == i % 2) {\n      p.push(1 + i / 2)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      p.push(p [ i - 2 ] + p [ i - 1 ] + 1 +(i + 1) / 2)\n      }\n    }\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let i = 2; i <= n; i++) {\n    if (0 == i % 2) {\n      p.push(1 + i / 2)\n     \n    } else {\n      p.push(p[i - 1] + p[i - 2] + 1)\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (4 > n)\n  return results [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at( - 1) + results.at( - 2) +\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    results.at( - 3) + results.at( - 4));\n    results.shift();\n    }\n  return results.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (4 > n)\n  return results [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at( - 1) + results.at( - 2) +\n   \n  results.at( - 3) + results.at( - 4));\n  }\n  return results[n];\n}\n\n/*\n  Problem 5: \n  The Fibonacci sequence is defined by the recurrence relation:\n  Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.\n  Hence the first 12 terms will be:\n  F1 = 1\n  F2 = 1\n  F3 = 2\n  F4 = 3\n  F5 = 5\n  F6 = 8\n  F7 = 13\n  F8 = 21\n  F9 = 34\n  F10 = 55\n  F11 = 89\n  F12 = 144\n  Write a program that prints the first 12 terms of the Fibonacci sequence.\n  */\nconst fibonacci = (n) => {\n  var results = [ 0, 1, 1 ];\n  if (2 > n)\n  return results[n];\n  for (let i = 2; i < n + 1; i++) {\n    results.push(results.at( - 1) + results.at( - 2));\n  }\n  return results[n];\n}\n\n/*\n  Problem 6: \n  Take the number 192 and multiply it by each of 1, 2, and 3.\n  What is the sum of all the numbers produced?\n  */\nconst product = (n) => {\n  var results = [];\n  for (let i = 1; i <= n; i++) {\n    results.push(i * 2);\n    results.push(i * 3);\n  }\n  return results;\n}\n\n/*\n  Problem 7: \n  What is the largest prime factor of the number 600851475143?\n  */\nconst largestPrimeFactor = (n) => {\n  var results = [];\n  for (let i = 2; i <= n; i++) {\n    if (600851475143 % i === 0)\n    results.push(i);\n  }\n  return results[0];\n}\n\n/*\n  Problem 8: \n  What is the largest composite number that is also prime?\n  */\nconst largestPrimeComposite = (n) => {\n  var results = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0 && isPrime(n / i))\n    results.push(n);\n  }\n  return results[0];\n}\n\n/*\n  Problem 9: \n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n  */\nconst smallestPositive = (n) => {\n  var results = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0 && i > 0)\n    results.push(i);\n    }\n  }\n  return results[0];\n}\n\n/*\n  Problem 10: \n  What is the smallest positive number that is not evenly divisible by any of the numbers from 1 to 20?\n  */\nconst smallestPositiveNot = (n) => {\n  var results = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j!== 0 && i > 0)\n    results.push(i);\n    }\n  }\n  return results[0];\n}\n\n/*\n  Problem 11: \n  What is the smallest positive number that is a perfect power?\n  */\nconst smallestPerfectPower = (n) => {\n  var results = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPower(i))\n    results.push(i);\n  }\n  return results[0];\n}\n\n/*\n  Problem 12: \n  What is the largest prime factor of the number 1407367852694?\n  */\nconst largestPrimeFactor2 = (n) => {\n  var results = [];\n  for (let i = 2; i <= n; i++) {\n    if (1407367852694 % i === 0)\n    results.push(i);\n  }\n  return results[0];\n}\n\n/*\n  Problem 13: \n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n  */\nconst smallestPositive2 = (n) => {\n  var results = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j === 0 && i > 0)\n    results.push(i);\n    }\n  }\n  return results[0];\n}\n\n/*\n  Problem 14: \n  What is the smallest positive number that is not evenly divisible by any of the numbers from 1 to 20?\n  */\nconst smallestPositiveNot2 = (n) => {\n  var results = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i % j!== 0 && i > 0)\n    results.push(i);\n    }\n  }\n  return results[0];\n}\n\n/*\n  Problem 15: \n  What is the smallest positive number that is a perfect power?\n  */\nconst smallestPerfectPower2 = (n) => {\n  var"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let i = y; x <= i; i--) {\n    if (i % 2 == 0) {\n      return i}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let i = y; x <= i; i--) {\n    if (i % 2 == 0) {\n      return i}\n   \n  }\n  return -1\n}\n\nconst choose =(x, y) => {\n  let ret = chooseNum(x, y)\n  return ret === -1? -1 : ret\n}\n\nconst check =(x, y) => {\n  if (choose(x, y)!== -1) {\n    console.log(\"OK\")\n  }\n}\n\ncheck(2, 5)\ncheck(5, 10)\ncheck(10, 15)\ncheck(11, 13)\ncheck(13, 14)\ncheck(15, 16)\ncheck(16, 17)\ncheck(17, 18)\ncheck(18, 19)\ncheck(19, 20)\ncheck(20, 21)\ncheck(21, 22)\ncheck(22, 23)\ncheck(23, 24)\ncheck(24, 25)\ncheck(25, 26)\ncheck(26, 27)\ncheck(27, 28)\ncheck(28, 29)\ncheck(29, 30)\ncheck(30, 31)\ncheck(31, 32)\ncheck(32, 33)\ncheck(33, 34)\ncheck(34, 35)\ncheck(35, 36)\ncheck(36, 37)\ncheck(37, 38)\ncheck(38, 39)\ncheck(39, 40)\ncheck(40, 41)\ncheck(41, 42)\ncheck(42, 43)\ncheck(43, 44)\ncheck(44, 45)\ncheck(45, 46)\ncheck(46, 47)\ncheck(47, 48)\ncheck(48, 49)\ncheck(49, 50)\ncheck(50, 51)\ncheck(51, 52)\ncheck(52, 53)\ncheck(53, 54)\ncheck(54, 55)\ncheck(55, 56)\ncheck(56, 57)\ncheck(57, 58)\ncheck(58, 59)\ncheck(59, 60)\ncheck(60, 61)\ncheck(61, 62)\ncheck(62, 63)\ncheck(63, 64)\ncheck(64, 65)\ncheck(65, 66)\ncheck(66, 67)\ncheck(67, 68)\ncheck(68, 69)\ncheck(69, 70)\ncheck(70, 71)\ncheck(71, 72)\ncheck(72, 73)\ncheck(73, 74)\ncheck(74, 75)\ncheck(75, 76)\ncheck(76, 77)\ncheck(77, 78)\ncheck(78, 79)\ncheck(79, 80)\ncheck(80, 81)\ncheck(81, 82)\ncheck(82, 83)\ncheck(83, 84)\ncheck(84, 85)\ncheck(85, 86)\ncheck(86, 87)\ncheck(87, 88)\ncheck(88, 89)\ncheck(89, 90)\ncheck(90, 91)\ncheck(91, 92)\ncheck(92, 93)\ncheck(93, 94)\ncheck(94, 95)\ncheck(95, 96)\ncheck(96, 97)\ncheck(97, 98)\ncheck(98, 99)\ncheck(99, 100)\ncheck(100, 101)\ncheck(101, 102)\ncheck(102, 103)\ncheck(103, 104)\ncheck(104, 105)\ncheck(105, 106)\ncheck(106, 107)\ncheck(107, 108)\ncheck(108, 109)\ncheck(109, 110)\ncheck(110, 111)\ncheck(111, 112)\ncheck(112, 113)\ncheck(113, 114)\ncheck(114, 115)\ncheck(115, 116)\ncheck(116, 117)\ncheck(117, 118)\ncheck(118, 119)\ncheck(119, 120)\ncheck(120, 121)\ncheck(121, 122)\ncheck(122, 123)\ncheck(123, 124)\ncheck(124, 125)\ncheck(125, 126)\ncheck(126, 127)\ncheck(127, 128)\ncheck(128, 129)\ncheck(129, 130)\ncheck(130, 131)\ncheck(131, 132)\ncheck(132, 133)\ncheck(133, 134)\ncheck(134, 135)\ncheck(135, 136)\ncheck(136, 137)\ncheck(137, 138)\ncheck(138, 139)\ncheck(139, 140)\ncheck(140, 141)\ncheck(141, 142)\ncheck(142, 143)\ncheck(143, 144)\ncheck(144, 145)\ncheck(145, 146)\ncheck(146, 147)\ncheck(147, 148)\ncheck(148, 149)\ncheck(149, 150)\ncheck(150, 151)\ncheck(151, 152)\ncheck(152, 153)\ncheck(153, 154)\ncheck(154, 155)\ncheck(155, 156)\ncheck(156, 157)\ncheck(157, 158)\ncheck(158, 159)\ncheck(159, 160)\ncheck(160, 161)\ncheck(161, 162)\ncheck(162, 163)\ncheck(163, 164)\ncheck(164, 165)\ncheck(165, 166)\ncheck(166, 167)\ncheck(167, 168)\ncheck(168, 169)\ncheck(169, 170)\ncheck(170, 171)\ncheck(171, 172)\ncheck(172, 173)\ncheck(173, 174)\ncheck(174, 175)\ncheck(175, 176)\ncheck(176, 177)\ncheck(177, 178)\ncheck(178, 179)\ncheck(179, 180)\ncheck(180, 181)\ncheck(181, 182)\ncheck(182, 183)\ncheck(183, 184)\ncheck(184, 185)\ncheck(185, 186)\ncheck(186, 187)\ncheck(187, 188)\ncheck(188, 189)\ncheck(189, 190)\ncheck(190, 191)\ncheck(191, 192)\ncheck(192, 193)\ncheck(193, 194)\ncheck(194, 195)\ncheck(195, 196)\ncheck(196, 197)\ncheck(197, 198"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] % 2 == 1 && 0 < lst [ i ]) {\n      p+=lst [ i ] * lst [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] % 2 == 1 && 0 < lst [ i ]) {\n      p+=lst [ i ] * lst [ i ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n};\n \n \n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList2 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList3 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList4 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList5 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList6 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList7 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList8 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList9 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList10 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList11 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList12 =(l) => {\n  return l.map(e => e - 1);\n \n};\n \n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i = 0; s.length - 2 > i; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i = 0; s.length - 2 > i; i++)\n \n  for (let j = i + 1; s.length - i - 2 > j; j++)\n \n  for (let k = j + 1; s.length - j - i - 2 > k; k++)\n \n  return s.charAt(0) + s.charAt(1) + s.charAt(2) === s.charAt(i) + s.charAt(i + 1) + s.charAt(i + 2)\n \n  + s.charAt(j) + s.charAt(j + 1) + s.charAt(j + 2) === s.charAt(i + j) + s.charAt(i + j + 1) + s.charAt(i + j + 2)\n \n  + s.charAt(k) + s.charAt(k + 1) + s.charAt(k + 2) === s.charAt(i + j + k) + s.charAt(i + j + k + 1) + s.charAt(i + j + k + 2);\n}\n\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i = 0; s.length - 2 > i; i++)\n \n  for (let j = i + 1; s.length - i - 2 > j; j++)\n \n  for (let k = j + 1; s.length - j - i - 2 > k; k++)\n \n  return s.charAt(0) + s.charAt(1) + s.charAt(2) === s.charAt(i) + s.charAt(i + 1) + s.charAt(i + 2)\n \n  + s.charAt(j) + s.charAt(j + 1) + s.charAt(j + 2) === s.charAt(i + j) + s.charAt(i + j + 1) + s.charAt(i + j + 2)\n \n  + s.charAt(k) + s.charAt(k + 1) + s.charAt(k + 2) === s.charAt(i + j + k) + s.charAt(i + j + k + 1) + s.charAt(i + j + k + 2);\n}\n\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i = 0; s.length - 2 > i; i++)\n \n  for (let j = i + 1; s.length - i - 2 > j; j++)\n \n  for (let k = j + 1; s.length - j - i - 2 > k; k++)\n \n  return s.charAt(0) + s.charAt(1) + s.charAt(2) === s.charAt(i) + s.charAt(i + 1) + s.charAt(i + 2)\n \n  + s.charAt(j) + s.charAt(j + 1) + s.charAt(j + 2) === s.charAt(i + j) + s.charAt(i + j + 1) + s.charAt(i + j + 2)\n \n  + s.charAt(k) + s.charAt(k + 1) + s.charAt(k + 2) === s.charAt(i + j + k) + s.charAt(i + j + k + 1) + s.charAt(i + j + k + 2);\n}\n\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i = 0; s.length - 2 > i; i++)\n \n  for (let j = i + 1; s.length - i - 2 > j; j++)\n \n  for (let k = j + 1; s.length - j - i - 2 > k; k++)\n \n  return s.charAt(0) + s.charAt(1) + s.charAt(2) === s.charAt(i) + s.charAt(i + 1) + s.charAt(i + 2)\n \n  + s.charAt(j) + s.charAt(j + 1) + s.charAt(j + 2) === s.charAt(i + j) + s.charAt(i + j + 1) + s.charAt(i + j + 2)\n \n  + s.charAt(k) + s.charAt(k + 1) + s.charAt(k + 2) === s.charAt(i + j + k) + s.charAt(i + j + k + 1) + s.charAt(i + j + k + 2);\n}\n\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i = 0; s.length - 2 > i; i++)\n \n  for (let j = i + 1; s.length - i - 2 > j; j++)\n \n  for (let k = j + 1; s.length - j - i - 2 > k; k++)\n \n  return s.charAt(0) + s.charAt(1) + s.charAt(2) === s.charAt(i) + s.charAt(i + 1) + s.charAt(i + 2)\n \n  + s.charAt(j) + s.charAt(j + 1) + s.charAt(j + 2) === s.charAt(i + j) + s.charAt(i + j + 1) + s.charAt(i + j + 2)\n \n  + s.charAt(k) + s.charAt(k + 1) + s.charAt(k + 2) === s.charAt"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n}\n\n/* Filter given list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filterDicts =(values) => {\n  return values.filter(x => typeof x === 'object');\n \n}\n\n/* Filter given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists =(values) => {\n  return values.filter(x => typeof x === 'object' && Array.isArray(x));\n \n}\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers =(values) => {\n  return values.filter(x => typeof x === 'number');\n \n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans =(values) => {\n  return values.filter(x => typeof x === 'boolean');\n \n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n}\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers =(values) => {\n  return values.filter(x => typeof x === 'number');\n \n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans =(values) => {\n  return values.filter(x => typeof x === 'boolean');\n \n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n}\n\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers =(values) => {\n  return values.filter(x => typeof x === 'number');\n \n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans =(values) => {\n  return values.filter(x => typeof x === 'boolean');\n \n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  if (0 == k) {\n    return [ ]}\n  return p.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n   \n    p [ ind ] = p [ j ]\n    }\n  return p.slice(0, k)\n}\n\nconsole.log(maximum([-3, -4, 5], 3))\nconsole.log(maximum([4, -4, 4], 2))\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n}\n \n/*\n  Function for adding a number to a polynomial.\n  x, xs represent coefficients of a polynomial.\n  Return sum of x and xs.\n  >>> add([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [3, 2, 10, 34, 105]\n  >>> add([1, 2, 3], [2, 6])\n  [3, 8]\n  */\nconst add =(x, xs) => {\n  return xs.reduce((a, b) => a + b, x);\n}\n \n/*\n  Function for subtracting a number from a polynomial.\n  x, xs represent coefficients of a polynomial.\n  Return difference between x and xs.\n  >>> subtract([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [3, 0, 10, 0]\n  >>> subtract([1, 2, 3], [2, 6])\n  [-1, -4]\n  */\nconst subtract =(x, xs) => {\n  return xs.reduce((a, b) => a - b, x);\n}\n \n/*\n  Function for multiplying a polynomial with a number.\n  x, xs represent coefficients of a polynomial.\n  Return product of x and xs.\n  >>> multiply([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [12, 20, 40, 80]\n  >>> multiply([1, 2, 3], [2, 6])\n  [6, 12]\n  */\nconst multiply =(x, xs) => {\n  return xs.reduce((a, b) => a * b, x);\n}\n \n/*\n  Function for calculating sum of powers.\n  x, xs represent coefficients of a polynomial.\n  Return sum of powers.\n  >>> powerSum([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [12, 20, 40, 80]\n  >>> powerSum([1, 2, 3], [2, 6])\n  [6, 12]\n  */\nconst powerSum =(x, xs) => {\n  return xs.reduce((a, b) => a + b, 0);\n}\n \n/*\n  Function for calculating sum of powers.\n  x, xs represent coefficients of a polynomial.\n  Return sum of powers.\n  >>> powerSum([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [12, 20, 40, 80]\n  >>> powerSum([1, 2, 3], [2, 6])\n  [6, 12]\n  */\nconst powerDifference =(x, xs) => {\n  return subtract(powerSum(x, xs), x);\n}\n \n/*\n  Function for calculating difference of powers.\n  x, xs represent coefficients of a polynomial.\n  Return difference of powers.\n  >>> powerDifference([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [4, 12, 32, 64]\n  >>> powerDifference([1, 2, 3], [2, 6])\n  [-2, -6]\n  */\nconst powerDifference =(x, xs) => {\n  return subtract(powerSum(x, xs), x);\n}\n \n/*\n  Function for calculating difference of powers.\n  x, xs represent coefficients of a polynomial.\n  Return difference of powers.\n  >>> powerDifference([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [4, 12, 32, 64]\n  >>> powerDifference([1, 2, 3], [2, 6])\n  [-2, -6]\n  */\nconst powerSumDifference =(x, xs) => {\n  return subtract(powerDifference(x, xs), x);\n}\n \n/*\n  Function for calculating difference of powers.\n  x, xs represent coefficients of a polynomial.\n  Return difference of powers.\n  >>> powerSumDifference([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [4, 12, 32, 64]\n  >>> powerSumDifference([1, 2, 3], [2, 6])\n  [-2, -6]\n  */\nconst powerSumProduct =(x, xs) => {\n  return multiply(powerSum(x, xs), x);\n}\n \n/*\n  Function for calculating difference of powers.\n  x, xs represent coefficients of a polynomial.\n  Return difference of powers.\n  >>> powerSumDifference([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [4, 12, 32, 64]\n  >>> powerSumDifference([1, 2, 3], [2, 6])\n  [-2, -6]\n  */\nconst powerSumPower =(x, xs) => {\n  return multiply(powerSum(x, xs), x);\n}\n \n/*\n  Function for calculating difference of powers.\n  x, xs represent coefficients of a polynomial.\n  Return difference of powers.\n  >>> powerSumPower([3, 1, 2, 4, 5], [1, 4, 12, 20])\n  [4, 12, 32, 64]\n  >>> powerSumPower([1, 2, 3], [2, 6])\n  [-2, -6]\n  */\nconst powerSumPowerDifference =(x, xs) => {\n  return subtract(powerSumProduct(x, xs), x);\n}\n \n/*\n  Function for calculating difference of powers.\n  x, xs represent coefficients of a polynomial.\n  Return difference of powers.\n  >>> powerSumPowerDifference([3, 1, 2, 4, 5], [1, 4, 12, 20])"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if ('' == text) {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(text)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if ('' == text) {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5(text).toUpperCase()\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString =(md5) => {\n  return (md5)? md5.toUpperCase() : null\n}\n\n/**\n  Given an integer 'num', return its md5 hash equivalent string.\n  If 'num' is less than zero, return null.\n\n  >>> stringToMd5(1) == 'b7cad83e1c907c17a8d8b60bddc3e7f1'\n  */\nconst intToMd5 =(num) => {\n  return (num < 0)? null : stringToMd5(num.toString())\n}\n\n/**\n  Given an integer 'num', return its md5 hash equivalent string.\n  If 'num' is less than zero, return null.\n\n  >>> stringToMd5(1) == 'b7cad83e1c907c17a8d8b60bddc3e7f1'\n  */\nconst intToString =(num) => {\n  return (num < 0)? null : num.toString()\n}\n\n/**\n  Given an integer 'num', return its md5 hash equivalent string.\n  If 'num' is less than zero, return null.\n\n  >>> stringToMd5(1) == 'b7cad83e1c907c17a8d8b60bddc3e7f1'\n  */\nconst stringToInt =(str) => {\n  return (str)? parseInt(str) : null\n}\n\n/**\n  Given an integer 'num', return its md5 hash equivalent string.\n  If 'num' is less than zero, return null.\n\n  >>> stringToMd5(1) == 'b7cad83e1c907c17a8d8b60bddc3e7f1'\n  */\nconst stringToString =(str) => {\n  return (str)? str : null\n}\n\n/**\n  Given an integer 'num', return its md5 hash equivalent string.\n  If 'num' is less than zero, return null.\n\n  >>> stringToMd5(1) == 'b7cad83e1c907c17a8d8b60bddc3e7f1'\n  */\nconst stringToDate =(str) => {\n  return (str)? new Date(str) : null\n}\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString,\n  intToMd5,\n  intToString,\n  stringToInt,\n  stringToString,\n  stringToDate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ i ].length; k++) {\n        if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let i = 0; i < arr.length; i++) {\n    if (0 < i) {\n      t = t + ' '}\n    t = t + arr [ i ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ i ].length; k++) {\n        if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n      }\n    }\n  }\n  return arr.join(' ')\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello'))\nconsole.log(antiShuffle('Hi'))\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* \n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr [ k ] < arr [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let smallest = arr [ 0 ]\n  let pt = 1\n  while (pt < arr.length) {\n    if (smallest < arr [ pt ]) {\n      return arr [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr [ k ] < arr [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n   \n  }\n  return arr [ 1 ]\n}\n\nnextSmallest([1, 2, 3, 4, 5]) == 2\nnextSmallest([5, 1, 4, 3, 2]) == 2\nnextSmallest([]) == null\nnextSmallest([1, 1]) == null\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let p = message [ i ].charCodeAt()\n    if (p > 96) {\n      p-=32}\n    else\nif (p != 32 && p < 96) {\n      p+=32}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || 73 == p || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) {\n      p+=2}\n    t+=String.fromCharCode(p)\n    }\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let p = message [ i ].charCodeAt()\n    if (p > 96) {\n      p-=32}\n    else\nif (p!= 32 && p < 96) {\n      p+=32}\n   \n    t += String.fromCharCode(p)\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (0 > y) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (y < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (0 > y) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == ')') {\n      y--}\n    else {\n      y++}\n    if (0 < y) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'}\n\nlet t = matchParens([])\n\nconsole.log(t)\n\n/*\nInput: [')', '(']\nOutput: 'No'\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (1 == lst [ i ] [ j ].charCodeAt() % 2) {\n        p++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (1 == lst [ i ] [ j ].charCodeAt() % 2) {\n        p++}\n     \n    }\n    d.push(p)\n  }\n  return d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (key [ i ].charCodeAt() < 65 || key [ i ].charCodeAt() > 90) {\n        hi = 0}\n      if (97 > key [ i ].charCodeAt() || key [ i ].charCodeAt() > 122) {\n        lo = 0}\n      }\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n     \n      if (key.charAt(i)!== key.charAt(i).toLowerCase()) {\n        lo = 0\n        break\n      }\n      if (key.charAt(i)!== key.charAt(i).toUpperCase()) {\n        hi = 0\n        break\n      }\n    }\n    if (lo === 0) {\n      lo = 1\n    }\n    if (hi === 0) {\n      hi = 1\n    }\n    if (lo === 0 && hi === 0) {\n      return false\n    }\n  }\n  return c === dict.length\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstr = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str)!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toLowerCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\nconst checkStringSubstrCase2 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toUpperCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase2 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toUpperCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase3 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toLowerCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase4 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toUpperCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase5 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toLowerCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase6 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toUpperCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase7 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toLowerCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\nconst checkStringSubstrCase8 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toUpperCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase9 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toLowerCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase10 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toUpperCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string and a dictionary, return true if the string is a substring of the dictionary,\n// else return false.\nconst checkStringSubstrCase11 = (str, dict) => {\n  for (let key in dict) {\n    if (key.indexOf(str.toLowerCase())!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n// Given a string"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (0 == len % i) {\n        u = 0}\n      }\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ j ]}\n    else {\n      p = p + ' ' + t [ j ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n      if (t[ j ].indexOf(t[ j ].charAt( len - i ) )!== -1) {\n        p += t[ j ].charAt( len - i )\n        u = i\n        break\n      }\n    }\n    if (u > 1) {\n      p +='' + t[ j ].charAt( len - u )\n    }\n  }\n  return p\n}\n\n// TESTS\n[\n  [\"This is a test\", \"is\"],\n  [\"lets go for swimming\", \"go for\"]\n].forEach(t => {\n  console.log(t[0], wordsInSentence(t[0]))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(c);\n      if (0 == current_depth) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n      }\n      else {\n        current_string.push(c);\n      }\n    }\n    else {\n      if (current_depth == 0) {\n        current_string.push(c);\n      }\n      else {\n        current_string.push(c);\n      }\n    }\n  }\n  \n  return result;\n}\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst removeDupes =(string) => {\n  var result = [];\n  var i = 0;\n  while (i < string.length) {\n    if (result.indexOf(string.charAt(i)) == -1) {\n      result.push(string.charAt(i));\n      i++;\n    }\n    else {\n      i++;\n    }\n  }\n  return result;\n}\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst getParenthesisGroups =(string) => {\n  var result = [];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n      }\n      else {\n        current_string.push(c);\n      }\n    }\n    else {\n      if (current_depth == 0) {\n        current_string.push(c);\n      }\n      else {\n        current_string.push(c);\n      }\n    }\n  }\n  \n  return result;\n}\n\nmodule.exports = {\n  separateParenGroups,\n  removeDupes,\n  getParenthesisGroups\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if ( !Array.isArray(numbers) || 0 == numbers.length)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || 0 == numbers.length)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n  }\n  return result;\n}\n\n/*\n  Return a new list that is the result of intersperring the lists in\n  `numbers' and `delimiters' with a delimiter 'delimiter'\n  >>> intersperse([1, 2, 3], [4, 5],'')\n  [1 4 2 4 5 3]\n  >>> intersperse([1, 2, 3], [4, 5], [6, 7])\n  [1 4 2 4 5 6 7 3]\n  >>> intersperse([1, 2, 3], [4, 5], [6, 7, 8])\n  [1 4 2 4 5 6 7 8 3]\n  */\nconst intersperseWith =(numbers, delimiters, delimiter) => {\n  const delimiters = delimiters.concat([delimiter]);\n  const delimiterLength = delimiters.length;\n  const result = intersperse(numbers, delimiter);\n  return result;\n}\n\n/*\n  Return a new list that is the result of intersperring the lists in\n  `numbers' and `delimiters' with a delimiter 'delimiter'\n  >>> intersperse([1, 2, 3], [4, 5],'')\n  [1 4 2 4 5 3]\n  >>> intersperse([1, 2, 3], [4, 5], [6, 7])\n  [1 4 2 4 5 6 7 3]\n  >>> intersperse([1, 2, 3], [4, 5], [6, 7, 8])\n  [1 4 2 4 5 6 7 8 3]\n  */\nconst intersperseWithEvery =(numbers, delimiters) => {\n  const delimiters = delimiters.concat([numbers[0]]);\n  const delimiterLength = delimiters.length;\n  const result = intersperseWith(numbers, delimiters, numbers[0]);\n  return result;\n}\n\n/*\n  Return a new list that is the result of intersperring the lists in\n  `numbers' and `delimiters' with a delimiter 'delimiter'\n  >>> intersperse([1, 2, 3], [4, 5],'')\n  [1 4 2 4 5 3]\n  >>> intersperse([1, 2, 3], [4, 5], [6, 7])\n  [1 4 2 4 5 6 7 3]\n  >>> intersperse([1, 2, 3], [4, 5], [6, 7, 8])\n  [1 4 2 4 5 6 7 8 3]\n  */\nconst intersperseWithEveryEvery =(numbers, delimiters) => {\n  const delimiters = delimiters.concat([numbers[0]]);\n  const delimiterLength = delimiters.length;\n  const result = intersperseWithEvery(numbers, delimiters);\n  return result;\n}\n\nmodule.exports = {\n  intersperse: intersperse,\n  intersperseWith: intersperseWith,\n  intersperseWithEvery: intersperseWithEvery,\n  intersperseWithEveryEvery: intersperseWithEveryEvery\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / numbers.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n  }, 0);\n};\n\n/*\n  Return the sum of all the numbers in the list\n  >>> sum([1, 2, 3, 4])\n  10\n  */\nconst sum =(numbers) => {\n  return numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n};\n\n/*\n  Return the mean of all the numbers in the list\n  >>> mean([1, 2, 3, 4])\n  2.5\n  */\nconst mean =(numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/*\n  Return the median of all the numbers in the list\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (numbers) => {\n  if (numbers.length % 2) {\n    return (numbers[Math.floor(numbers.length / 2)] + numbers[Math.ceil(numbers.length / 2)]) / 2;\n  } else {\n    return (numbers[Math.floor(numbers.length / 2)] + numbers[Math.ceil(numbers.length / 2) - 1]) / 2;\n  }\n};\n\n/*\n  Return the variance of all the numbers in the list\n  >>> variance([1, 2, 3, 4, 5])\n  1.25\n  */\nconst variance = (numbers) => {\n  var mean = mean(numbers);\n  return sum(numbers.map(x => Math.pow(x - mean, 2))) / numbers.length;\n};\n\n/*\n  Return the standard deviation of all the numbers in the list\n  >>> stdev([1, 2, 3, 4, 5])\n  2.0\n  */\nconst stdev = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  Return the skewness of all the numbers in the list\n  >>> skewness([1, 2, 3, 4, 5])\n  0.0\n  */\nconst skewness = (numbers) => {\n  var variance = variance(numbers);\n  var mean = mean(numbers);\n  var avgDeviation = meanAbsoluteDeviation(numbers);\n  return Math.pow(avgDeviation / stdev(numbers), 3);\n};\n\n/*\n  Return the kurtosis of all the numbers in the list\n  >>> kurtosis([1, 2, 3, 4, 5])\n  1.8\n  */\nconst kurtosis = (numbers) => {\n  var variance = variance(numbers);\n  var mean = mean(numbers);\n  var avgDeviation = meanAbsoluteDeviation(numbers);\n  var skewness = skewness(numbers);\n  return (4 * variance + skewness) / (variance * Math.pow(mean, 4));\n};\n\n/*\n  Print all of the statistics on the list\n  >>> printStatistics([1, 2, 3, 4, 5])\n  mean: 2.5\n  median: 3.0\n  stdev: 1.41421\n  skewness: 0.0\n  kurtosis: 1.8\n  >>> printStatistics([-1, -2, -3, -4, -5])\n  mean: -2.5\n  median: -3.0\n  stdev: 1.41421\n  skewness: 0.0\n  kurtosis: 1.8\n  */\nconst printStatistics = (numbers) => {\n  var mean = mean(numbers);\n  var median = median(numbers);\n  var stdev = stdev(numbers);\n  var skewness = skewness(numbers);\n  var kurtosis = kurtosis(numbers);\n  console.log(\"mean: \" + mean);\n  console.log(\"median: \" + median);\n  console.log(\"stdev: \" + stdev);\n  console.log(\"skewness: \" + skewness);\n  console.log(\"kurtosis: \" + kurtosis);\n};\n\n/*\n  Run a few examples\n  >>> printStatistics([1, 2, 3, 4, 5])\n  mean: 2.5\n  median: 3.0\n  stdev: 1.41421\n  skewness: 0.0\n  kurtosis: 1.8\n  >>> printStatistics([-1, -2, -3, -4, -5])\n  mean: -2.5\n  median: -3.0\n  stdev: 1.41421\n  skewness: 0.0\n  kurtosis: 1.8\n  */\nexports.printStatistics = printStatistics;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; arr.length > i; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (h >= 10) {\n      k+=h % 10;\n      h =(h - h % 10) / 10;\n      }\n    k-=h;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; arr.length > i; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n    while (h > 0) {\n      k++;\n      h = h / 10;\n      }\n    if (p > 0 && p - k < 0) {\n      return 0\n      }\n    p += k\n  }\n  return p\n}\n\nexport default countNums\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (10 > nums [ i ]) {\n      continue}\n    let y = nums [ i ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      p++\n      }\n    }\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (10 > nums [ i ]) {\n      continue}\n    let y = nums [ i ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n      p++\n    }\n  }\n  return p\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (substring == string.slice(i, i + substring.length)) {\n      times+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (substring == string.slice(i, i + substring.length)) {\n      times+=1;\n     \n    }\n  }\n  return times;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let i = 0; text.length > i; i++)\n  if (text [ i ] != text.at( - i - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let i = 0; text.length > i; i++)\n  if (text [ i ]!= text.at( - i - 1))\n \n return false;\n}\n\nconsole.log(isPalindrome('abbcd'));\nconsole.log(isPalindrome('abba'));\nconsole.log(isPalindrome('aaaa'));\nconsole.log(isPalindrome('aa'));\nconsole.log(isPalindrome('bac'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if ( !Array.isArray(strings) || 0 == strings.length)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if (!Array.isArray(strings) || 0 == strings.length)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n  }\n  \n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions [ i ].length; j++) {\n      let k = extensions [ i ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (97 <= k && k <= 122) {\n        y-=1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (y >= s) {\n      s = y;\n      u = i;\n      }\n    }\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions [ i ].length; j++) {\n      let k = extensions [ i ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (97 <= k && k <= 122) {\n        y-=1}\n     \n      if (y > s) {\n        s = y\n        u = i\n      }\n    }\n  }\n  return class_name + \".\" + extensions [ u ]\n}<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let i = 0; k > i; i++) {\n    if (arr [ i ] < 100 && arr [ i ] > - 100) {\n      p+=arr [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let i = 0; k > i; i++) {\n    if (arr [ i ] < 100 && arr [ i ] > - 100) {\n      p+=arr [ i ]}\n   \n    else {\n      p+=Math.pow(10, k - i - 1);\n      p+=arr [ i ]}\n  }\n  return p\n}\n\nconst test = [\n  [\n    [1,3,4,7,9],\n    4\n  ],\n  [\n    [1,2,3,4,5,6,7,8,9],\n    5\n  ],\n  [\n    [111,21,3,4000,5,6,7,8,9],\n    4\n  ],\n  [\n    [111,21,3,4000,5,6,7,8,9],\n    9\n  ]\n]\n\ntest.forEach(x => {\n  console.log('addElements(arr,'+ x[1] + ') ='+ addElements(x[0], x[1]))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr [ ind ] > arr [ k ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n        ind = k\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n    }\n  return arr\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr [ ind ] > arr [ k ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n        ind = k\n       \n      }\n    }\n    if (ind!= j) {\n      let temp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = temp\n    }\n  }\n  return arr\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == ' ') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        t+='_'}\n      if (c == 2) {\n        t+='__'}\n      if (c > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      c = 0;\n      }\n    else {\n      t+=text [ i ]\n      }\n    }\n  if (c == 1) {\n    t+='_'}\n  if (2 == c) {\n    t+='__'}\n  if (c > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        t+='_'}\n      if (c == 2) {\n        t+='__'}\n      if (c > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      c = 0\n    }\n    else {\n      t+=text [ i ]\n      c=0\n    }\n    \n  }\n  return t\n}\n\n/*\n  Given a string text, replace all non-alphanumeric characters with \n  dashes\n  \n  fixDashes(\"Hello World\") == \"hello-world\"\n  fixDashes(\"hello world\") == \"hello-world\"\n  fixDashes(\"hello.world\") == \"hello.world\"\n  fixDashes(\"hello$world\") == \"hello-world\"\n  fixDashes(\"hello*world\") == \"hello-world\"\n  fixDashes(\"hello_world\") == \"hello-world\"\n  */\nconst fixDashes =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (isAlpha(text [ i ]) || isDigit(text [ i ]) || text [ i ] =='') {\n      t+=text [ i ]\n      c=0\n    }\n    else {\n      c++\n      t+='-'\n      if (c > 3) {\n        c = 0\n      }\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all non-alphanumeric characters with \n  dashes\n  \n  fixDashes(\"Hello World\") == \"hello-world\"\n  fixDashes(\"hello world\") == \"hello-world\"\n  fixDashes(\"hello.world\") == \"hello.world\"\n  fixDashes(\"hello$world\") == \"hello-world\"\n  fixDashes(\"hello*world\") == \"hello-world\"\n  fixDashes(\"hello_world\") == \"hello_world\"\n  */\nconst fixSlashes =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (isAlpha(text [ i ]) || isDigit(text [ i ]) || text [ i ] =='') {\n      t+=text [ i ]\n      c=0\n    }\n    else {\n      c++\n      t+='_'\n      if (c > 3) {\n        c = 0\n      }\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all non-alphanumeric characters with \n  dashes\n  \n  fixDashes(\"Hello World\") == \"hello-world\"\n  fixDashes(\"hello world\") == \"hello-world\"\n  fixDashes(\"hello.world\") == \"hello.world\"\n  fixDashes(\"hello$world\") == \"hello-world\"\n  fixDashes(\"hello*world\") == \"hello-world\"\n  fixDashes(\"hello_world\") == \"hello_world\"\n  */\nconst fixUnderlines =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (isAlpha(text [ i ]) || isDigit(text [ i ]) || text [ i ] =='') {\n      t+=text [ i ]\n      c=0\n    }\n    else {\n      c++\n      t+='_'\n      if (c > 3) {\n        c = 0\n      }\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all non-alphanumeric characters with \n  dashes\n  \n  fixDashes(\"Hello World\") == \"hello-world\"\n  fixDashes(\"hello world\") == \"hello-world\"\n  fixDashes(\"hello.world\") == \"hello.world\"\n  fixDashes(\"hello$world\") == \"hello-world\"\n  fixDashes(\"hello*world\") == \"hello-world\"\n  fixDashes(\"hello_world\") == \"hello_world\"\n  */\nconst fixMixed =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (isAlpha(text [ i ]) || isDigit(text [ i ]) || text [ i ] =='') {\n      t+=text [ i ]\n      c=0\n    }\n    else {\n      c++\n      t+='_'\n      if (c > 3) {\n        c = 0\n      }\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all non-alphanumeric characters with \n  dashes\n  \n  fixDashes(\"Hello World\") == \"hello-world\"\n  fixDashes(\"hello world\") == \"hello-world\"\n  fixDashes(\"hello.world\") == \"hello.world\"\n  fixDashes(\"hello$world\") == \"hello-world\"\n  fixDashes(\"hello*world\") == \"hello-world\"\n  fixDashes(\"hello_world\") == \"hello_world\"\n  */\nconst fixMixed2 =(text) => {\n  let t = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (isAlpha(text [ i ]) || isDigit(text [ i ]) || text [ i ] =='') {\n      t+=text [ i ]\n      c=0\n    }\n    else {\n      c++\n      t+='_'\n      if (c > 3) {\n        c = 0\n      }\n    }\n  }\n  return t\n}\n\n/*\n  "}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n};\n\nconst find = (l, el) => {\n  return l.find(x => x === el);\n};\n\nconst findIndex = (l, el) => {\n  return l.findIndex(x => x === el);\n};\n\nconst first = (l) => {\n  return l[0];\n};\n\nconst second = (l) => {\n  return l[1];\n};\n\nconst last = (l) => {\n  return l[l.length - 1];\n};\n\nconst reverse = (l) => {\n  return l.reverse();\n};\n\nconst map = (l, f) => {\n  return l.map(f);\n};\n\nconst filter = (l, f) => {\n  return l.filter(f);\n};\n\nconst zip = (l, r) => {\n  return l.zip(r);\n};\n\nconst zipWith = (l, r, f) => {\n  return l.zipWith(r, f);\n};\n\nconst zipAll = (l, r) => {\n  return l.zipAll(r);\n};\n\nconst take = (l, n) => {\n  return l.slice(0, n);\n};\n\nconst drop = (l, n) => {\n  return l.slice(n);\n};\n\nconst first2 = (l) => {\n  return l.slice(0, 2);\n};\n\nconst last2 = (l) => {\n  return l.slice(l.length - 2);\n};\n\nconst second2 = (l) => {\n  return l.slice(1, l.length - 1);\n};\n\nconst last3 = (l) => {\n  return l.slice(l.length - 3);\n};\n\nconst third = (l) => {\n  return l.slice(2);\n};\n\nconst secondLast = (l) => {\n  return l.slice(l.length - 2);\n};\n\nconst last3 = (l) => {\n  return l.slice(l.length - 3);\n};\n\nconst thirdLast = (l) => {\n  return l.slice(l.length - 4);\n};\n\nconst slice = (l, i, j) => {\n  return l.slice(i, j);\n};\n\nconst sliceIn = (l, i, j) => {\n  return l.slice(i, j);\n};\n\nconst sliceTo = (l, j, k) => {\n  return l.slice(j, k);\n};\n\nconst sliceToLast = (l, j, k) => {\n  return l.slice(j, k);\n};\n\nconst mapFirst = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapFirst2 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast2 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapSecond = (l, f) => {\n  return l.map(f);\n};\n\nconst mapSecondLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapThird = (l, f) => {\n  return l.map(f);\n};\n\nconst mapThirdLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapFirst3 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast3 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapFourth = (l, f) => {\n  return l.map(f);\n};\n\nconst mapFourthLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapFifth = (l, f) => {\n  return l.map(f);\n};\n\nconst mapFifthLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapSixth = (l, f) => {\n  return l.map(f);\n};\n\nconst mapSixthLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapSeventh = (l, f) => {\n  return l.map(f);\n};\n\nconst mapSeventhLast = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast4 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast5 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast6 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast7 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast8 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast9 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast10 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast11 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast12 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast13 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast14 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast15 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast16 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast17 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast18 = (l, f) => {\n  return l.map(f);\n};\n\nconst mapLast"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [ ... l ].sort((a, b) => a - b);\n  var sort2 = [ ... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n  JSON.stringify(sort2) ===\n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(l))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [... l ].sort((a, b) => a - b);\n  var sort2 = [... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n  JSON.stringify(sort2) ===\n  JSON.stringify(l)) return true;\n  else return false;\n};\n\n/*\n  *  Given a list of values, return the median value.\n  *  >>> median([1, 3, 4, 6, 8, 9])\n  *  4\n  *  >>> median([4, 5, 6, 7])\n  *  4.5\n  */\nconst median = (l) => {\n  var array = [... l ];\n  if (array.length % 2 === 0) {\n    return (array[(array.length - 1) / 2] + array[(array.length - 1) / 2 + 1]) / 2;\n  } else {\n    return array[(array.length - 1) / 2];\n  }\n};\n\n/*\n  *  Given a list of values, return the mode value.\n  *  >>> mode([1, 3, 4, 6, 8, 9])\n  *  4\n  *  >>> mode([4, 5, 6, 7])\n  *  4\n  */\nconst mode = (l) => {\n  var sort = [... l ].sort((a, b) => a - b);\n  var sort2 = [... l ].sort((a, b) => b - a);\n  var sort3 = [... l ].sort((a, b) => b - a);\n  var max = Math.max(sort[0], sort2[0], sort3[0]);\n  var min = Math.min(sort[1], sort2[1], sort3[1]);\n  if (max === sort[0]) return sort[0];\n  if (max === sort2[0]) return sort2[0];\n  if (max === sort3[0]) return sort3[0];\n  return min;\n};\n\n/*\n  *  Given a list of values, return the sum of the values.\n  *  >>> sum([1, 3, 4, 6, 8, 9])\n  *  15\n  *  >>> sum([4, 5, 6, 7])\n  *  15\n  */\nconst sum = (l) => {\n  return l.reduce((acc, v) => acc + v, 0);\n};\n\n/*\n  *  Given a list of values, return the sum of the values.\n  *  >>> count([1, 3, 4, 6, 8, 9])\n  *  5\n  *  >>> count([4, 5, 6, 7])\n  *  5\n  */\nconst count = (l) => {\n  return l.reduce((acc, v) => acc + 1, 0);\n};\n\n/*\n  *  Given a list of values, return the sum of the values.\n  *  >>> mean([1, 3, 4, 6, 8, 9])\n  *  4.5\n  *  >>> mean([4, 5, 6, 7])\n  *  4.5\n  */\nconst mean = (l) => {\n  return sum(l) / count(l);\n};\n\n/*\n  *  Given a list of values, return the sum of the values.\n  *  >>> variance([1, 3, 4, 6, 8, 9])\n  *  6.25\n  *  >>> variance([4, 5, 6, 7])\n  *  0.0\n  */\nconst variance = (l) => {\n  var sum = sum(l);\n  var mean = mean(l);\n  return sum / (l.length - 1);\n};\n\n/*\n  *  Given a list of values, return the mean of the values.\n  *  >>> stdev([1, 3, 4, 6, 8, 9])\n  *  2.084962500721118\n  *  >>> stdev([4, 5, 6, 7])\n  *  0.0\n  */\nconst stdev = (l) => {\n  var mean = mean(l);\n  var sum = sum(l);\n  return Math.sqrt(variance(l));\n};\n\n/*\n  *  Given a list of values, return the mean of the values.\n  *  >>> mode([1, 3, 4, 6, 8, 9])\n  *  4\n  *  >>> mode([4, 5, 6, 7])\n  *  4\n  */\nconst mode2 = (l) => {\n  var mode = mode(l);\n  var count = count(l);\n  var min = l.indexOf(mode);\n  if (min!== -1) return l[min];\n  else return mode;\n};\n\nmodule.exports = {\n  mode2,\n  mean,\n  median,\n  mode,\n  variance,\n  stdev,\n  sum,\n  count,\n  monotonic,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n};\n\n/* Concatenate list of lists of strings into a single list of strings\n  >>> concatenate([['a', 'b', 'c'], ['d', 'e', 'f']])\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  */\nconst concatenate2 =(lists) => {\n  return lists.map(strings => concatenate(strings))\n};\n\n/* Concatenate list of lists of lists of strings into a single list of strings\n  >>> concatenate2([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n  */\nconst concatenate3 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n/* Concatenate list of lists of lists of lists of strings into a single list of strings\n  >>> concatenate3([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n  */\nconst concatenate4 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n\n/* Concatenate list of lists of lists of lists of lists of strings into a single list of strings\n  >>> concatenate4([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n  */\nconst concatenate5 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n\n/* Concatenate list of lists of lists of lists of lists of strings into a single list of strings\n  >>> concatenate5([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o']\n  */\nconst concatenate6 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n\n/* Concatenate list of lists of lists of lists of lists of strings into a single list of strings\n  >>> concatenate6([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o']\n  */\nconst concatenate7 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n\n/* Concatenate list of lists of lists of lists of lists of lists of strings into a single list of strings\n  >>> concatenate7([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x']\n  */\nconst concatenate8 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n\n/* Concatenate list of lists of lists of lists of lists of lists of strings into a single list of strings\n  >>> concatenate8([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x']\n  */\nconst concatenate9 =(lists) => {\n  return lists.reduce((acc, next) => concatenate(next) + acc, '')\n};\n\n\n/* Concatenate list of lists of lists of lists of lists of lists of strings into a single list of strings\n  >>> concatenate9([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x']])\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; lst1.length > i; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2 [ i ] % 2 == 0) {\n      t++}\n    }\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; lst1.length > i; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n  if (t == k) return 'YES'\n  else return 'NO'\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n}\n \n/* Trim spaces from both ends of given string\n  >>> trim('   abc ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (string) => {\n    return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n/* Convert given string to an array of strings, split at whitespace\n  >>> to_array('   abc ')\n  ['abc']\n  >>> to_array('abc')\n  ['abc']\n  */\nconst to_array = (string) => {\n    return string.split(/\\s+/);\n}\n\n/* Convert given string to a boolean value\n  >>> to_boolean('true')\n  true\n  >>> to_boolean('false')\n  false\n  */\nconst to_boolean = (string) => {\n    return (string == 'true');\n}\n\n/* Convert given string to an integer\n  >>> to_integer('2.0')\n  2\n  >>> to_integer('1.0')\n  1\n  >>> to_integer('2')\n  2\n  >>> to_integer('0')\n  0\n  */\nconst to_integer = (string) => {\n    return parseInt(string);\n}\n\n/* Convert given string to a float\n  >>> to_float('2.0')\n  2.0\n  >>> to_float('1.0')\n  1.0\n  >>> to_float('2')\n  2.0\n  >>> to_float('0')\n  0.0\n  */\nconst to_float = (string) => {\n    return parseFloat(string);\n}\n\n/* Convert given string to a function\n  >>> to_function('foo')\n  function foo(){}\n  */\nconst to_function = (string) => {\n    return eval(string);\n}\n\n/* Convert given string to a date\n  >>> to_date('2014-02-15')\n  1420080315000\n  >>> to_date('2015-02-15')\n  14299480315000\n  >>> to_date('2014-02-15 23:23')\n  14200803152300\n  */\nconst to_date = (string) => {\n    let year, month, day, hour, minute, second;\n    if (string.indexOf('-') === -1) {\n        [year, month, day] = to_array(string);\n    } else if (string.indexOf('-') === 0) {\n        [year, month] = to_array(string.substring(1));\n        day = 0;\n    } else if (string.indexOf('-') === 1) {\n        [year, month, day] = to_array(string.substring(0, string.indexOf('-')));\n    } else if (string.indexOf('-') === 2) {\n        [year, month, day] = to_array(string.substring(0, string.indexOf('-')));\n        [hour, minute, second] = to_array(string.substring(string.indexOf('-') + 1));\n    } else if (string.indexOf('-') === 3) {\n        [year, month, day] = to_array(string.substring(0, string.indexOf('-')));\n        [hour, minute] = to_array(string.substring(string.indexOf('-') + 1));\n        second = 0;\n    } else if (string.indexOf('-') === 4) {\n        [year, month, day] = to_array(string.substring(0, string.indexOf('-')));\n        [hour, minute, second] = to_array(string.substring(string.indexOf('-') + 1));\n    } else if (string.indexOf('-') === 5) {\n        [year, month, day, hour] = to_array(string.substring(0, string.indexOf('-')));\n        minute = 0;\n        second = 0;\n    } else if (string.indexOf('-') === 6) {\n        [year, month, day, hour, minute] = to_array(string.substring(0, string.indexOf('-')));\n        second = 0;\n    } else if (string.indexOf('-') === 7) {\n        [year, month, day, hour, minute, second] = to_array(string.substring(0, string.indexOf('-')));\n    }\n    return new Date(year, month - 1, day, hour, minute, second, 0);\n}\n\n/* Convert given string to an object\n  >>> to_object('{\"foo\": 2.0}')\n  { foo: 2.0 }\n  >>> to_object('{\"foo\": 2}')\n  { foo: 2 }\n  >>> to_object('{\"foo\": 2.0}')\n  { foo: 2.0 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2.0}')\n  { foo: 2.0, bar: 2.0 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2}')\n  { foo: 2.0, bar: 2 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2.0}')\n  { foo: 2.0, bar: 2.0 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2.0, \"baz\": 2.0}')\n  { foo: 2.0, bar: 2.0, baz: 2.0 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2.0, \"baz\": 2}')\n  { foo: 2.0, bar: 2.0, baz: 2 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2.0, \"baz\": 2.0, \"qux\": 2.0}')\n  { foo: 2.0, bar: 2.0, baz: 2.0, qux: 2.0 }\n  >>> to_object('{\"foo\": 2.0, \"bar\": 2.0, \"baz\": 2.0, \"qux\": 2}')\n  { foo: 2.0, bar: 2."}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a [ i + k ] != pat [ j + k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (1 == y) {\n        return true\n        }\n      }\n    }\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a [ i + k ]!= pat [ j + k ]) {\n          y = 0}\n       \n      }\n      if (y) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  Given two strings, write a function to determine if one is a permutation of the other.\n*/\nconst permutationCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < l; j++) {\n      if (a [ i ]!= pat [ j ]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst isPalindrome = (num) => {\n  return num === parseInt(num.toString().split('').reverse().join(''), 10);\n}\n\nconst isPalindromeCheck = (a) => {\n  let l = a.length\n  for (let i = 0; i < l / 2; i++) {\n    if (a [ i ]!== a [ l - 1 - i ]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPalindromeCheck2 = (a) => {\n  let i = a.length - 1\n  let j = 0\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j++\n  }\n  return true\n}\n\nconst isPalindromeCheck3 = (a) => {\n  let i = a.length - 1\n  let j = a.length - 1\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck4 = (a) => {\n  let i = 0\n  let j = a.length - 1\n  while (i < j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck5 = (a) => {\n  let i = 0\n  let j = a.length - 1\n  while (i < j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck6 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = 0\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j++\n  }\n  return true\n}\n\nconst isPalindromeCheck7 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 1\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck8 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 1\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck9 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 2\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck10 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 2\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck11 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 2\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck12 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 1\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck13 = (a) => {\n  let l = a.length\n  let i = l - 1\n  let j = l - 2\n  while (i >= j) {\n    if (a [ i ]!== a [ j ]) {\n      return false\n    }\n    i--\n    j--\n  }\n  return true\n}\n\nconst isPalindromeCheck14 = (a) => {"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  2\n  */\nconst truncateInteger =(number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the remainder of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateRemainder =(number) => {\n  return number % 1.0;\n}\n\nmodule.exports = {\n  truncateInteger,\n  truncateRemainder,\n  truncateNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    n =(n - n % 10) / 10\n    }\n  if (0 == k) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n    } else {\n      k *= y;\n    }\n    n = Math.floor(n / 10);\n  }\n  if (k == 0) {\n    return p;\n  }\n  return 0;\n}\n\nconst add =(a, b) => {\n  return (a + b) % 10;\n}\n\nconst multiply =(a, b) => {\n  return ((a * b) % 10)\n}\n\nconst isPrime =(n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst findPrime =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2;\n  }\n  return p;\n}\n\nconst findPair =(n) => {\n  let d = digits(n)\n  if (d == 0) {\n    return n\n  }\n  if (d > 5) {\n    return findPrime(n)\n  }\n  let p = n\n  while (d!= 0) {\n    let k = (p % 10) + (n % 10)\n    p = p + n\n    n = k\n    d = digits(p)\n  }\n  return p;\n}\n\nconst test =(n) => {\n  let p = findPair(n)\n  if (p == n) {\n    console.log(\"Prime pair:\", n);\n  } else {\n    console.log(\"Not prime pair:\", n);\n  }\n}\n\nconst findPrimePair =(n) => {\n  let p = findPair(n)\n  if (p == n) {\n    console.log(\"Prime pair:\", n);\n  } else {\n    console.log(\"Not prime pair:\", n);\n  }\n}\n\nconst testPrimePair =(n) => {\n  let p = findPrimePair(n)\n  if (p == n) {\n    console.log(\"Prime pair:\", n);\n  } else {\n    console.log(\"Not prime pair:\", n);\n  }\n}\n\nconst isPrime =(n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst testPrime =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  console.log(\"Prime:\", p);\n}\n\nconst testPrime2 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime3 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime4 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime5 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime6 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime7 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime8 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n\nconst testPrime9 =(n) => {\n  let p = n\n  while (!isPrime(p)) {\n    p = p + 2\n  }\n  let r = (n + p) % 10\n  if (r == 0) {\n    console.log(\"Prime:\", n);\n  } else {\n    console.log(\"Not prime:\", n);\n  }\n}\n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (1 < t.length) {\n      return t\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt [ i ].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n          }\n        }\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (1 < t.length) {\n      return t\n      }\n    else {\n      let p = 0\n     \n      let s = txt.split( /\\s/ )\n      if (s.length > 1) {\n        return s\n        }\n      else {\n        let o = txt.split( /\\s/ )\n        if (o.length > 1) {\n          return o\n          }\n        else {\n          let a = txt.split( /\\s/ )\n          if (a.length > 1) {\n            return a\n            }\n          else {\n            let l = txt.split( /\\s/ )\n            if (l.length > 1) {\n              return l\n              }\n            else {\n              let s = txt.split( /\\s/ )\n              if (s.length > 1) {\n                return s\n                }\n              else {\n                let c = txt.split( /\\s/ )\n                if (c.length > 1) {\n                  return c\n                  }\n                else {\n                  let d = txt.split( /\\s/ )\n                  if (d.length > 1) {\n                    return d\n                    }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// ------------------------------------\n// String Functions\n// ------------------------------------\n\n/* Given a string, return the index of the first appearance of the target substring, or -1 if the target is not a substring of the source\n  Examples\n  indexOf(\"abracadabra\", \"abra\") ➞ 7\n  indexOf(\"abracadabra\", \"bcad\") ➞ -1\n  indexOf(\"abracadabra\", \"ab\") ➞ 0\n  indexOf(\"abracadabra\", \"z\") ➞ -1\n  indexOf(\"abracadabra\", \"\") ➞ 0\n  indexOf(\"abracadabra\", \"aaa\") ➞ -1\n  */\nconst indexOf = (txt, sub) => {\n  let i = 0\n  let s = 0\n  let l = txt.length\n  while (s <= l) {\n    if (txt.substr(s, sub.length) == sub) {\n      return s\n      }\n    else {\n      s += 1\n      }\n    }\n  return -1\n}\n\n/* Given a string, return the index of the last appearance of the target substring, or -1 if the target is not a substring of the source\n  Examples\n  lastIndexOf(\"abracadabra\", \"abra\") ➞ 7\n  lastIndexOf(\"abracadabra\", \"bcad\") ➞ 8\n  lastIndexOf(\"abracadabra\", \"ab\") ➞ 8\n  lastIndexOf(\"abracadabra\", \"z\") ➞ -1\n  lastIndexOf(\"abracadabra\", \"\") ➞ 7\n  lastIndexOf(\"abracadabra\", \"aaa\") ➞ -1\n  */\nconst lastIndexOf = (txt, sub) => {\n  let i = txt.length\n  let s = txt.length\n  let l = txt.length\n  while (s >= 0) {\n    if (txt.substr(s, sub.length) == sub) {\n      return s\n      }\n    else {\n      s -= 1\n      }\n    }\n  return -1\n}\n\n/* Given a string, return the index of the first appearance of the target substring, or -1 if the target is not a substring of the source\n  Examples\n  reverse(\"abracadabra\") ➞ \"dabracadabra\"\n  reverse(\"abracadabra\") ➞ \"rabracadabra\"\n  reverse(\"abracadabra\") ➞ \"racadabraab\"\n  */\nconst reverse = (txt) => {\n  return txt.split('').reverse().join('')\n}\n\n/* Given a string, return the index of the last appearance of the target substring, or -1 if the target is not a substring of the source\n  Examples\n  reverse(\"abracadabra\") ➞ \"dabracadabra\"\n  reverse(\"abracadabra\") ➞ \"rabracadabra\"\n  reverse(\"abracadabra\") ➞ \"racadabraab\"\n  */\nconst reverseR = (txt) => {\n  return txt.split('').reverse().join('')\n}\n\n/* Given a string, return the number of characters in the string\n  Examples\n  length(\"abracadabra\") ➞ 13\n  length(\"abracadabra\") ➞ 13\n  */\nconst length = (txt) => {\n  return txt.length\n}\n\n/* Given a string, return a string that contains all the vowels of the source string\n  Examples\n  vowels(\"abracadabra\") ➞ \"abracadabra\"\n  */\nconst vowels = (txt) => {\n  return txt.replace(/[aeiou]/g, '')\n}\n\n/* Given a string, return a string that contains all the consonants of the source string\n  Examples\n  consonants(\"abracadabra\") ➞ \"abracadabra\"\n  */\nconst consonants = (txt) => {\n  return txt.replace(/[bcdfghjklmnpqrstvwxyz]/g, '')\n}\n\n/* Given a string, return a string that contains all the vowels and consonants of the source string\n  Examples\n  "}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e2 == e1)\n  ret.add(e1);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n    if (e1 === e2) {\n      ret.add(e1);\n    }\n  return new Set(Array.from(ret));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let i = 0; i < n; i++)\n  if (i % 11 == 0 || 0 == i % 13)\n  ns.push(i);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let i = 0; i < n; i++)\n  if (i % 11 == 0 || 0 == i % 13)\n  ns.push(i);\n \n  for (let i = 0; i < ns.length; i++)\n  console.log(ns[i]);\n \n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (j != i) {\n    let a = numbers [ i ], b = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - b);\n      closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let new_distance = Math.abs(a - b);\n      if (new_distance < distance) {\n        distance = new_distance;\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      }\n    }\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (j!= i) {\n    let a = numbers [ i ], b = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - b);\n      closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n      }\n    else {\n     \n      distance = Math.abs(a - b);\n      if (distance < distance) {\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      }\n    }\n  return closest_pair;\n  };\n\n/*\n  Given a list of numbers (of length at least two) select and return two that are the farthest from each other\n  and return them in order (larger number, smaller number).\n  >>> findFarthestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (5.0, 4.0)\n  >>> findFarthestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (5.0, 4.0)\n  */\nconst findFarthestElements = (numbers) => {\n  var farthest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (j!= i) {\n    let a = numbers [ i ], b = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - b);\n      farthest_pair = [ Math.max(a, b), Math.min(a, b) ];\n      }\n    else {\n      distance = Math.abs(a - b);\n      if (distance > distance) {\n        farthest_pair = [ Math.max(a, b), Math.min(a, b) ];\n        }\n      }\n    }\n  return farthest_pair;\n  };\n\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst [ i ]\n    if (0 != y % 1) {\n      if (y > 0) {\n        y = y - y % 1 + 1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        y = - y; y = y - y % 1}\n      }\n    p+=y * y\n    }\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst [ i ]\n    if (0!= y % 1) {\n      if (y > 0) {\n        y = y - y % 1 + 1}\n     \n      if (y < 0) {\n        y = y - y % 1 - 1\n      }\n    }\n    p += Math.pow(y, 2)\n  }\n  return p\n}\n\n// Test cases\n[\n  [ [1, 2, 3], 14 ],\n  [ [1, 4, 9], 98 ],\n  [ [1, 3, 5, 7], 84 ],\n  [ [1.4, 4.2, 0], 29 ],\n  [ [-2.4, 1, 1], 6 ]\n].forEach(([ lst, expected ]) => {\n  console.log(\"Sum of squares of %j is %j\", lst, sumSquares(lst))\n  console.log(\"Sum of squares of %j is %j\", lst, sumSquares(lst))\n})<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; numbers.length > j; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; numbers.length > j; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Get the list of the numbers that are closest to each other.\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 3.0, 2.0])\n  [1.0, 2.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0])\n  [1.0, 2.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [1.0, 2.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 2.0])\n  [2.0, 3.0]\n  */\nconst getClosestElements = (numbers, elements) => {\n  let closestElements = [];\n  for (let i = 0; i < elements.length; i++) {\n    let distance = Infinity;\n    for (let j = 0; j < elements.length; j++) {\n      let distance = Math.abs(numbers [ i ] - elements [ j ]);\n      if (distance < distance) {\n        distance = distance;\n      }\n    }\n    if (distance < Infinity) {\n      closestElements.push(elements [ i ]);\n    }\n  }\n  return closestElements;\n}\n\n/*\n  Get the list of the numbers that are closest to each other and the list of the\n  other numbers.\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 3.0, 2.0])\n  [1.0, 2.0, 3.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 2.0])\n  [2.0, 3.0, 4.0, 5.0]\n  */\nconst getClosestElementsWithOthers = (numbers, elements) => {\n  let closestElements = [];\n  for (let i = 0; i < elements.length; i++) {\n    let distance = Infinity;\n    let closestNumber = numbers [ i ];\n    for (let j = 0; j < elements.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers [ i ] - elements [ j ]);\n        if (distance < distance) {\n          distance = distance;\n        }\n      }\n    }\n    if (distance < Infinity) {\n      closestElements.push([closestNumber, elements [ i ]]);\n    }\n  }\n  return closestElements;\n}\n\n/*\n  Get the list of the numbers that are closest to each other and the list of the\n  other numbers.\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 3.0, 2.0])\n  [1.0, 2.0, 3.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> getClosestElements([1.0, 2.0, 3.0], [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 2.0])\n  [2.0, 3.0, 4.0, 5.0]\n  */\nconst getClosestElementsWithOthersWithThreshold = (numbers, elements, threshold) => {\n  let closestElements = [];\n  for (let i = 0; i < elements.length; i++) {\n    let distance = Infinity;\n    let closestNumber = numbers [ i ];\n    for (let j = 0; j < elements.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers [ i ] - elements [ j ]);\n        if (distance < distance) {\n          distance = distance;\n        }\n      }\n    }\n    if (distance < threshold) {\n      closestElements.push([closestNumber, elements [ i ]]);\n    }\n  }\n  return closestElements;\n}\n\nexport {\n  getClosestElements,\n  getClosestElementsWithOthers,\n  getClosestElementsWithOthersWithThreshold,\n  hasCloseElements,\n  getClosestElementsWithOthersWithThreshold\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) {\n        p = 0; break}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (1 == p) {\n      t.push(i)}\n    }\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p) t.push(i)\n  }\n  return t;\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(... lst) : Math.max(... lst));\n    lst.splice(lst.indexOf(res.at( - 1)), 1);\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    sw = !sw;\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(... lst) : Math.max(... lst));\n    lst.splice(lst.indexOf(res.at( - 1)), 1);\n   \n    sw =!sw;\n  }\n  return res;\n}\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(strangeSortList(array));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (0 === x % 1 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (0 === x % 1 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst anyInt =(x, y, z) => {\n  if (0 === x % 1 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (0 == n)\n  return 0;\n  if (n == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(n - 1) + fib(n - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (0 == n)\n  return 0;\n  if (n == 1)\n \n  return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n// console.log(fib5(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n// console.log(fib5(10));\n// console.log(fib6(10));\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n// console.log(fib5(10));\n// console.log(fib6(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n// console.log(fib5(10));\n// console.log(fib6(10));\n// console.log(fib7(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n// console.log(fib5(10));\n// console.log(fib6(10));\n// console.log(fib7(10));\n// console.log(fib8(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 =(n) => {\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n// console.log(fib(10));\n// console.log(fib2(10));\n// console.log(fib3(10));\n// console.log(fib4(10));\n// console.log(fib5(10));\n// console.log(fib6(10));\n// console.log(fib7(10));\n// console.log(fib8(10));\n// console.log(fib9(10));\n\n/* Return n-th Fibonacci number\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([ ... new Set(s1) ].sort()) === JSON.stringify([ ... new Set(s0) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([... new Set(s1) ].sort()) === JSON.stringify([... new Set(s0) ].sort());\n \n}\n\nconst parse = (s) => {\n  return JSON.parse(s);\n}\n\nconst main = (s0, s1) => {\n  const s0 = parse(s0);\n  const s1 = parse(s1);\n  const l1 = s0.length;\n  const l2 = s1.length;\n  const i = 0;\n  const j = 0;\n  const t = 0;\n  const f = 0;\n  while (i < l1 && j < l2) {\n    if (s0[i] == s1[j]) {\n      t++;\n    } else {\n      f++;\n    }\n    i++;\n    j++;\n  }\n  if (i == l1 && j == l2) {\n    return true;\n  } else if (i == l1) {\n    return false;\n  } else if (j == l2) {\n    return false;\n  }\n  return t > f;\n}\n\nexport default main;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (0 == words.length) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words [ i ] [ j ] == words [ i ] [ k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        p++}\n      }\n    if (p > s ||(p == s && words [ i ] < words [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return words [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (0 == words.length) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words [ i ] [ j ] == words [ i ] [ k ]) {\n          y = 0}\n       \n        }\n        if (y == 1) {\n          p++\n        }\n      }\n    }\n    if (p > u) {\n      u = p\n      s = i}\n  }\n  return words [ s ]}\n\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l2 >= l1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l2 >= l1)\n \n  return lst1;\n}\n\nconsole.log(totalMatch([], []));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n  if (arr.at( - i - 1) != arr [ i ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n  if (arr.at( - i - 1)!= arr [ i ])\n \n      ans += 1\n  return ans\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (0 == p % k)\n      return false;\n      }\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var f = [ 0, 1 ];\n  while (true) {\n    f.push(f.at( - 1) + f.at( - 2));\n    if (isPrime(f.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return f.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (0 == p % k)\n      return false;\n      }\n    return true;\n    }\n \n  var fib = function(n) {\n    var first = 1;\n    var second = 1;\n    for (var i = 0; i < n; i++) {\n      var new_number = first + second;\n      first = second;\n      second = new_number;\n      }\n    return second;\n    }\n \n  return fib(n);\n  }\n \n  // Prints the n-th Fibonacci number and its prime status.\n  console.log(primeFib(n));<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  for (let j = 2; n + 1 > j; j++)\n  if (n % j == 0 && isPrime(j))\n  largest = Math.max(largest, j);\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  var i = 2;\n  while (isPrime(i) && i < n)\n  i++;\n  return i;\n};\n\nconsole.log(largestPrimeFactor(13195));\nconsole.log(largestPrimeFactor(2048));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(8 <= n && n % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(8 <= n && n % 2 == 0)\n \n};\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let i = 1; n >= i; i++) {\n    p+=i;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) {\n      k.push(f)}\n    else {\n      k.push(p)}\n    }\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let i = 1; n >= i; i++) {\n    p+=i;\n   \n    if (i%2 ===0) {\n      k.push(f);\n      f = f * i;\n    } else {\n      k.push(p);\n    }\n  }\n  return k;\n}\n\nconst k = f(5);\n\nconsole.log(k);<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (j == i)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (j == i)\n    return '0';\n    else\n   \n   if (i == 1)\n    return '0';\n    else\n      return '1';\n  }\n  var aa = a.split('');\n  var bb = b.split('');\n  var result = '';\n  for (var i = 0; i < aa.length; i++)\n  {\n    if (aa[i] == '1' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '1' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else if (aa[i] == '0' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '0' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else\n    {\n      result += '0';\n    }\n  }\n  return result;\n}\n\n/*\n  Given two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('01010101', '01101101')\n  '10110110'\n  */\nconst stringXor2 =(a, b) => {\n  var aa = a.split('');\n  var bb = b.split('');\n  var result = '';\n  for (var i = 0; i < aa.length; i++)\n  {\n    if (aa[i] == '1' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '1' && bb[i] == '0')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '0' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '0' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else\n    {\n      result += '0';\n    }\n  }\n  return result;\n}\n\n/*\n  Given two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('01010101', '01101101')\n  '10110110'\n  */\nconst stringXor3 =(a, b) => {\n  var aa = a.split('');\n  var bb = b.split('');\n  var result = '';\n  for (var i = 0; i < aa.length; i++)\n  {\n    if (aa[i] == '1' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '1' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else if (aa[i] == '0' && bb[i] == '1')\n    {\n      result += '0';\n    }\n    else if (aa[i] == '0' && bb[i] == '0')\n    {\n      result += '1';\n    }\n    else\n    {\n      result += '0';\n    }\n  }\n  return result;\n}\n\n/*\n  Given two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('01010101', '01101101')\n  '10110110'\n  */\nconst stringXor4 =(a, b) => {\n  var aa = a.split('');\n  var bb = b.split('');\n  var result = '';\n  for (var i = 0; i < aa.length; i++)\n  {\n    if (aa[i] == '1' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '1' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else if (aa[i] == '0' && bb[i] == '1')\n    {\n      result += '0';\n    }\n    else if (aa[i] == '0' && bb[i] == '0')\n    {\n      result += '1';\n    }\n    else\n    {\n      result += '0';\n    }\n  }\n  return result;\n}\n\n\n/*\n  Given two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('01010101', '01101101')\n  '10110110'\n  */\nconst stringXor5 =(a, b) => {\n  var aa = a.split('');\n  var bb = b.split('');\n  var result = '';\n  for (var i = 0; i < aa.length; i++)\n  {\n    if (aa[i] == '1' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '1' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else if (aa[i] == '0' && bb[i] == '1')\n    {\n      result += '1';\n    }\n    else if (aa[i] == '0' && bb[i] == '0')\n    {\n      result += '0';\n    }\n    else\n    {\n      result += '0';\n    "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return numbers.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n  return [\n    (min_number - 0.0) / (max_number - min_number),\n    (max_number - min_number) / (max_number - 0.0)\n  ];\n}\n\n/* Given a list of numbers (of at least two elements), find the min, max, and sum\n  >>> findMinMaxAndSum([1, 2, 3, 4, 5])\n  [1, 5, 10]\n  */\nconst findMinMaxAndSum =(numbers) => {\n  var min = Math.min(... numbers);\n  var max = Math.max(... numbers);\n  var sum = 0;\n  for(var i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [min, max, sum];\n}\n\n/* Given a list of numbers, determine if it has a unique largest element\n  >>> isUnique([1, 2, 3, 4, 5])\n  true\n  >>> isUnique([1, 2, 3, 4, 5, 6])\n  false\n  */\nconst isUnique =(numbers) => {\n  return numbers.every(\n    (number) => numbers.indexOf(number) === numbers.lastIndexOf(number));\n}\n\n/* Given a list of numbers, determine if it has a unique largest element\n  >>> hasDuplicates([1, 2, 3, 4, 5])\n  true\n  >>> hasDuplicates([1, 2, 3, 4, 5, 6])\n  false\n  */\nconst hasDuplicates =(numbers) => {\n  var duplicates = [];\n  for(var i = 0; i < numbers.length; i++) {\n    if(numbers.indexOf(numbers[i])!== -1) {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return duplicates.length > 1;\n}\n\n/* Given a list of numbers, determine if it is sorted\n  >>> isSorted([1, 2, 3, 4, 5])\n  true\n  >>> isSorted([4, 3, 2, 1, 5, 6])\n  false\n  */\nconst isSorted =(numbers) => {\n  var sorted = true;\n  for(var i = 0; i < numbers.length - 1; i++) {\n    if(numbers[i] > numbers[i + 1]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n}\n\n/* Given a list of numbers, determine if it is sorted in increasing order\n  >>> isIncreasing([1, 2, 3, 4, 5])\n  true\n  >>> isIncreasing([5, 4, 3, 2, 1])\n  false\n  */\nconst isIncreasing =(numbers) => {\n  var sorted = true;\n  for(var i = 1; i < numbers.length; i++) {\n    if(numbers[i - 1] > numbers[i]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n}\n\n/* Given a list of numbers, determine if it is sorted in decreasing order\n  >>> isDecreasing([1, 2, 3, 4, 5])\n  true\n  >>> isDecreasing([1, 5, 3, 2, 4])\n  false\n  */\nconst isDecreasing =(numbers) => {\n  var sorted = true;\n  for(var i = 1; i < numbers.length; i++) {\n    if(numbers[i - 1] > numbers[i]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n}\n\n/* Given a list of numbers, determine if it is sorted\n  >>> hasDuplicates([1, 2, 3, 4, 5])\n  true\n  >>> hasDuplicates([4, 3, 2, 1, 5, 6])\n  false\n  */\nconst hasDuplicates =(numbers) => {\n  var duplicates = [];\n  for(var i = 0; i < numbers.length; i++) {\n    if(numbers.indexOf(numbers[i])!== -1) {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return duplicates.length > 1;\n}\n\n/* Given a list of numbers, determine if it is sorted in increasing order\n  >>> hasDuplicates([1, 2, 3, 4, 5])\n  true\n  >>> hasDuplicates([4, 3, 2, 1, 5, 6])\n  false\n  */\nconst hasDuplicates =(numbers) => {\n  var sorted = true;\n  for(var i = 1; i < numbers.length; i++) {\n    if(numbers[i - 1] > numbers[i]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n}\n\n/* Given a list of numbers, determine if it is sorted in decreasing order\n  >>> hasDuplicates([1, 2, 3, 4, 5])\n  true\n  >>> hasDuplicates([1, 5, 3, 2, 4])\n  false\n  */\nconst hasDuplicates =(numbers) => {\n  var sorted = true;\n  for(var i = 1; i < numbers.length; i++) {\n    if(numbers[i - 1] > numbers[i]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n}\n\n/* Given a list of numbers, determine if it has any duplicates\n  >>> hasDuplicates([1, 2, 3, 4, 5])\n  true\n  >>> hasDuplicates([4, 3, 2, 1, 5, 6])\n  false\n  */\nconst hasDuplicates =(numbers) => {\n  var duplicates = [];\n  for(var i = 0; i < numbers.length; i++) {\n    if(numbers.indexOf(numbers[i])!== -1) {\n      dupl"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( / . /)\n  if (t.length != 2) {\n    return 'No'}\n  if (t [ 1 ] != 'txt' && t [ 1 ] != 'dll' && t [ 1 ] != 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && 90 >= a) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t [ 0 ].length; i++) {\n    if (t [ 0 ] [ i ].charCodeAt() >= 48 && t [ 0 ] [ i ].charCodeAt() <= 57) {\n      y++}\n    if (y > 3) {\n      return 'No'}\n    }\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && 90 >= a) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  let b = t [ 0 ] [ t [ 0 ].length - 1 ].charCodeAt()\n  if (!((b >= 97 && b <= 122) || (b >= 65 && 90 >= b))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n\n/*\nGiven a string, find the number of characters used in the string, and return the \nsum of the characters. For example:\n\nstrLen(\"Hello\") => 5\nstrLen(\"abracadabra\") => 15\nstrLen(\"\") => 0\nstrLen(null) => 0\nstrLen(\"abc\") => 3\nstrLen(\"abracadabra\") => 15\n\n*/\nconst strLen =(str) => {\n  if (str === null) {\n    return 0}\n  return str.length}\n\n/*\nGiven a string, find the length of the longest substring that contains all the \ncharacters in the string, and return the length of the longest substring. For \nexample:\n\nstrLen(\"Hello\") => 5\nstrLen(\"abc\") => 3\nstrLen(\"abracadabra\") => 15\n\n*/\nconst longestSubstring =(str) => {\n  let longest = 0\n  for (let i = 0; i < str.length; i++) {\n    let l = 0\n    for (let j = i; j < str.length; j++) {\n      if (str.charAt(i) == str.charAt(j)) {\n        l++}\n      else {\n        break}\n    }\n    if (l > longest) {\n      longest = l}\n  }\n  return longest}\n\n/*\nGiven a string, find the longest substring without repeating characters. For \nexample:\n\nstrLen(\"abcabc\") => 3\nstrLen(\"bbbbb\") => 1\nstrLen(\"\") => 0\nstrLen(null) => 0\n\n*/\nconst longestSubstringWithoutRepeating =(str) => {\n  let longest = 0\n  let l = 0\n  let counter = 0\n  let max = 0\n  for (let i = 0; i < str.length; i++) {\n    counter++\n    l = 0\n    for (let j = i; j < str.length; j++) {\n      if (str.charAt(i) == str.charAt(j)) {\n        l++}\n      else {\n        break}\n    }\n    if (l > max) {\n      max = l}\n  }\n  return max}\n\n/*\nGiven a string, find the number of times that the string contains 'a' and \n'b' in the same order, and return the number of times that the string contains \n'a' and 'b' in the same order. For example:\n\nstrLen(\"abra\") => 2\nstrLen(\"bab\") => 2\nstrLen(\"abbc\") => 1\n\n*/\nconst longestSubstringWithAAndB =(str) => {\n  let max = 0\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) == 'a' && str.charAt(i + 1) == 'b') {\n      count++\n      if (count > max) {\n        max = count}\n      }\n  }\n  return max}\n\n/*\nGiven a string, return the number of times that the string contains at least \ntwo consecutive occurrences of the same character, and at least one occurrence \nof every two characters. For example:\n\nstrLen(\"aaab\") => 3\nstrLen(\"abba\") => 2\nstrLen(\"ab\") => 1\n\n*/\nconst consecutiveSubstringCount =(str) => {\n  let count = 0\n  let max = 0\n  for (let i = 0; i < str.length; i++) {\n    let counter = 1\n    for (let j = i + 1; j < str.length; j++) {\n      if (str.charAt(i) == str.charAt(j)) {\n        counter++\n        if (counter > max) {\n          max = counter}\n        }\n      }\n    }\n  }\n  return max}\n\n/*\nGiven a string, return the number of times that the string contains at least \ntwo consecutive occurrences of the same character, and at least one occurrence \nof every two characters. For example:\n\nstrLen(\"aaab\") => 3\nstrLen(\"abba\") => 2\nstrLen(\"ab\") => 1\n\n*/\nconst longestSubstringWithTwoConsecutiveOccurrences =(str) => {\n  let max = 0\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    let counter = 1\n    for (let j = i + 1; j < str.length; j++) {\n      if (str.charAt(i) == str.charAt(j)) {\n        counter++\n        if (counter > max) {\n          max = counter}\n        }\n      "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(64 < ord_char && ord_char < 91 ? ord_char : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n            if(ord_char > 57 && ord_char < 65) {\n                prev = prev + char;\n            }\n            \n            return prev;\n         }, 0);\n}\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => - 1 != x.indexOf(substring));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => - 1!= x.indexOf(substring));\n \n};\n\nconst isString = x => typeof x ==='string';\n\nconst removeQuotes = x => x.replace(/^['\"]|['\"]$/g, '');\n\nconst getFirstAndLast = x => x.slice(0,1) + x.slice(-1);\n\nconst flatten = x => x.reduce((acc, x) => acc.concat(x), []);\n\nconst getListOfWords = x => x.split(' ');\n\nconst isListOfWords = x => typeof x === 'object' && x.length > 0;\n\nconst containsAny = x => {\n  return x.every(y => y.length > 0);\n};\n\nconst splitBy = x => x.split('');\n\nconst trim = x => x.replace(/^\\s+|\\s+$/g, '');\n\nconst removeAllSpaces = x => x.replace(/\\s+/g, '');\n\nconst getCommonWords = x => x.split(' ').filter(x => x.length > 0);\n\nconst isCommonWord = x => getCommonWords(x).length > 0;\n\nconst removeCommonWords = x => x.split(' ').filter(x =>!isCommonWord(x));\n\nconst getAllWords = x => x.split(' ');\n\nconst isAllWords = x => typeof x === 'object' && x.length > 0;\n\nconst containsAll = x => {\n  return x.every(y => isAllWords(y));\n};\n\nconst isAllUnique = x => x.every(x => x.length === 1);\n\nconst removeDuplicates = x => x.filter(y => y!== x[y]);\n\nconst getAllUnique = x => x.filter(y => y.length === 1);\n\nconst removeWordsWithLengthLessThan = x => x.filter(y => y.length > 0);\n\nconst removeWordsWithLengthGreaterThan = x => x.filter(y => y.length < 1);\n\nconst getFirstAndLast = x => x.slice(0,1) + x.slice(-1);\n\nconst getFirstTwo = x => x.slice(0,2);\n\nconst getLastTwo = x => x.slice(-2);\n\nconst getMiddleTwo = x => x.slice(1, 3);\n\nconst getMiddleThree = x => x.slice(1, 4);\n\nconst isNumeric = x => typeof x === 'number';\n\nconst removeNumbers = x => x.replace(/\\d/g, '');\n\nconst removeNonAlphabet = x => x.replace(/[^a-zA-Z]/g, '');\n\nconst getAllAlphabet = x => x.replace(/[^a-zA-Z]/g, '').split('');\n\nconst isAlphabet = x => getAllAlphabet(x).length > 0;\n\nconst containsAllAlphabet = x => getAllAlphabet(x).every(y => isAlphabet(y));\n\nconst isAlphanumeric = x => getAllAlphabet(x).every(y => isNumeric(y));\n\nconst isUniqueAlphanumeric = x => getAllAlphabet(x).every(y => y.length === 1 && isNumeric(y));\n\nconst containsAllAlphanumeric = x => getAllAlphabet(x).every(y => isAlphanumeric(y));\n\nconst containsAllUniqueAlphanumeric = x => getAllAlphabet(x).every(y => y.length === 1 && isAlphanumeric(y) &&!isUniqueAlphanumeric(y));\n\nconst containsAllUniqueNumeric = x => x.every(y => isNumeric(y) &&!isUniqueAlphanumeric(y));\n\nconst removeWordsWithLengthLessThan = x => x.filter(y => y.length > 0);\n\nconst removeWordsWithLengthGreaterThan = x => x.filter(y => y.length < 1);\n\nconst containsAnyAlphabet = x => x.split('').every(y => isAlphabet(y));\n\nconst isUniqueAlphabet = x => x.split('').every(y => y.length === 1);\n\nconst removeAllLetters = x => x.replace(/[a-zA-Z]/g, '');\n\nconst removeAllCapitalLetters = x => x.replace(/[A-Z]/g, '');\n\nconst removeAllSmallLetters = x => x.replace(/[a-z]/g, '');\n\nconst removeAllSpaces = x => x.replace(/\\s+/g, '');\n\nconst removeAllSpacesAndNumbers = x => x.replace(/\\s+|\\d+/g, '');\n\nconst removeAllNonAlphabet = x => x.replace(/[^a-zA-Z]/g, '');\n\nconst removeAllCapitalLettersAndNumbers = x => x.replace(/[A-Z]|\\d+/g, '');\n\nconst removeAllSmallLettersAndNumbers = x => x.replace(/[a-z]|\\d+/g, '');\n\nconst containsAllAlphabet = x => x.split('').every(y => isAlphabet(y));\n\nconst containsAllCapitalLetters = x => x.split('').every(y => isCapitalLetter(y));\n\nconst containsAllSmallLetters = x => x.split('').every(y => isSmallLetter(y));\n\nconst containsAllNonAlphabet = x => x.split('').every(y =>!isAlphabet(y));\n\nconst containsAllCapitalLettersAndNumbers = x => x.split('').every(y => isCapitalLetter(y) || isNumber(y));\n\nconst containsAllSmallLettersAndNumbers = x => x.split('').every(y => isSmallLetter(y) || isNumber(y));\n\nconst containsAllNonAlphabetAndCapitalLetters = x => x.split('').every(y =>!isAlphabet(y) &&!isCapitalLetter(y));\n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => 0 == x % 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), arr.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => 0 == x % 2);\n \n  if (evens.length == 0) {\n    return [ arr[0], arr[0] ];\n  }\n\n  var min = evens[0];\n  var minIndex = evens[0];\n  for (var i = 1; i < evens.length; i++) {\n    if (min > evens[i]) {\n      min = evens[i];\n      minIndex = evens[i];\n    }\n  }\n  return [ min, minIndex ];\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the largest even value.\n  If multiple nodes with the same largest even value are found return the node that has largest index.\n\n  The plucked node should be returned in a list, [ largest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 2]\n      Explanation: 3 has the largest even value, and 3 has the largest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 2]\n      Explanation: 3 has the largest even value, and 3 has the largest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [4, 3]\n      Explanation: 4 has the largest even value, and 4 has the largest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckMax =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => 0 == x % 2);\n\n  if (evens.length == 0) {\n    return [ arr[0], arr[0] ];\n  }\n\n  var max = evens[0];\n  var maxIndex = evens[0];\n  for (var i = 1; i < evens.length; i++) {\n    if (max < evens[i]) {\n      max = evens[i];\n      maxIndex = evens[i];\n    }\n  }\n  return [ max, maxIndex ];\n};\n\nvar arr = [ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator [ i ] == '**') {\n        let u = operand [ i ]\n        while (operand [ i + 1 ] > 1) {\n          operand [ i + 1 ]--;\n          operand [ i ] *= u;\n          }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if ('*' == operator [ i ]) {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '+') {\n        operand [ i ]+=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '-') {\n        operand [ i ]-=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator [ i ] == '**') {\n        let u = operand [ i ]\n        while (operand [ i + 1 ] > 1) {\n          operand [ i + 1 ]--;\n          operand [ i ] *= u;\n          }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if ('*' == operator [ i ]) {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else {\n        if ('+' == operator [ i ]) {\n          operand [ i ] += operand [ i + 1 ]\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          break;\n          }\n        else {\n          if ('-' == operator [ i ]) {\n            operand [ i ] -= operand [ i + 1 ]\n            operand.splice(i + 1, 1)\n            operator.splice(i, 1)\n            y = 1;\n            break;\n            }\n          else {\n            if ('*' == operator [ i ]) {\n              operand [ i ] *= operand [ i + 1 ]\n              operand.splice(i + 1, 1)\n              operator.splice(i, 1)\n              y = 1;\n              break;\n              }\n            else {\n              throw Error('Invalid operator');\n            }\n          }\n        }\n      }\n    }\n  }\n  return operand.join('')\n}\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (remaining >= need) {\n    return [ need + number, remaining - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ remaining + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (remaining >= need) {\n    return [ need + number, remaining - need ]\n   \n  }\n  return [ number, remaining ]\n}\n\nconst solve = (number, need, remaining) => {\n  let left = eat(number, need, remaining)\n  let right = eat(number, need, remaining)\n  return [ left[0] + right[0], left[1] + right[1] ]\n}\n\nconst main = () => {\n  const input = [\n    { number: 5, need: 6, remaining: 10 },\n    { number: 4, need: 8, remaining: 9 },\n    { number: 1, need: 10, remaining: 10 },\n    { number: 2, need: 11, remaining: 5 }\n  ]\n\n  input.forEach( (obj) => {\n    console.log(`eating ${obj.number} for ${obj.need} remaining`)\n    console.log(`remaining ${obj.remaining}`)\n    console.log(`got ${solve(obj.number, obj.need, obj.remaining)}`)\n  })\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (1 == len || len == 0) {\n    return y}\n  for (let i = 2; i * i <= len; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (len % i == 0) {\n      return y}\n    }\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (1 == len || len == 0) {\n    return y}\n  for (let i = 2; i * i <= len; i++) {\n   \n    if (len % i === 0) {\n      return x}\n  }\n  return y}\n\n\nxOrY(10, 10, 10)\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && t < lst [ i ]) {\n      t = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (t != 0) {\n    k+=t % 10\n    t =(t - t % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && t < lst [ i ]) {\n      t = lst [ i ]}\n   \n  }\n  return t}\n  \n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  for (let j = 0; p.length > j; j++) {\n    t.push(l [ p [ j ] - 1 ])\n    }\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n    }\n  }\n  return p\n  }\n\nconst byNumber = (arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n    }\n  }\n  return p\n}\n\nconst byName = (arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ].toLowerCase() > p [ ind ].toLowerCase()) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n    }\n  }\n  return p\n}\n\nconst reverse = (arr) => {\n  let tmp = [ ]\n  for (let i = arr.length - 1; i >= 0; i--) {\n    tmp.push(arr[ i ])\n  }\n  return tmp\n}\n\nconst replace = (arr, name) => {\n  let tmp = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    tmp.push(name)\n  }\n  return tmp\n}\n\nconst sortByLength = (arr) => {\n  let tmp = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    tmp.push(arr[ i ])\n  }\n  let p = reverse(byLength(tmp))\n  for (let i = 0; i < p.length; i++) {\n    tmp.push(p[ i ])\n  }\n  return tmp\n}\n\nconst sortByNumber = (arr) => {\n  let tmp = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    tmp.push(arr[ i ])\n  }\n  let p = reverse(byNumber(tmp))\n  for (let i = 0; i < p.length; i++) {\n    tmp.push(p[ i ])\n  }\n  return tmp\n}\n\nconst sortByName = (arr) => {\n  let tmp = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    tmp.push(arr[ i ])\n  }\n  let p = reverse(byName(tmp))\n  for (let i = 0; i < p.length; i++) {\n    tmp.push(p[ i ])\n  }\n  return tmp\n}\n\nconst sort = (arr) => {\n  let tmp = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    tmp.push(arr[ i ])\n  }\n  let p = reverse(sortByLength(tmp))\n  for (let i = 0; i < p.length; i++) {\n    tmp.push(p[ i ])\n  }\n  return tmp\n}\n\nconst main = () => {\n  let arr = [\n    2,\n    1,\n    1,\n    4,\n    5,\n    8,\n    2,\n    3\n  ]\n  let p = sort(arr)\n  for (let i = 0; i < p.length; i++) {\n    p[ i ]\n  }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (0.5 > t && t > - 0.5) {\n    value-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    value+=t}\n  return value\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (0.5 > t && t > - 0.5) {\n    value-=t}\n \n  return Math.floor(value)\n}\n\nexport default closestInteger<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if ('string' == typeof b) {\n    bb = Number(b.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return b}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if ('string' == typeof b) {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return aa\n  }\n  else {\n    return bb\n  }\n}\n\n\n/*\n  Create a function that takes an array of strings, and returns the larger\n  string in the array. Return null if there are no strings.\n  Note: If a string is represented as an array, the strings might be comma\n  separated\n  */\nconst compareTwo = (a, b) => {\n  let aa = a.join(',')\n  let bb = b.join(',')\n  if (aa > bb) {\n    return aa\n  }\n  else {\n    return bb\n  }\n}\n\n\n/*\n  Create a function that takes two arrays of strings, and returns the largest\n  string in the first array that is not in the second. Return null if there\n  are no strings.\n  Note: If a string is represented as an array, the strings might be comma\n  separated\n  */\nconst compareThree = (a, b) => {\n  let aa = a.join(',')\n  let bb = b.join(',')\n  for (let i = 0; i < bb.length; i++) {\n    if (aa.indexOf(bb[i]) == -1) {\n      return bb[i]\n    }\n  }\n  return null\n}\n\n\n\n/*\n  Create a function that takes two arrays of strings, and returns the smallest\n  string in the first array that is not in the second. Return null if there\n  are no strings.\n  Note: If a string is represented as an array, the strings might be comma\n  separated\n  */\nconst compareFour = (a, b) => {\n  let aa = a.join(',')\n  let bb = b.join(',')\n  for (let i = 0; i < aa.length; i++) {\n    if (bb.indexOf(aa[i]) == -1) {\n      return aa[i]\n    }\n  }\n  return null\n}\n\n\n/*\n  Create a function that takes an array of strings, and returns the largest\n  string in the array. Return null if there are no strings.\n  Note: If a string is represented as an array, the strings might be comma\n  separated\n  */\nconst compareFive = (a, b) => {\n  let aa = a.join(',')\n  let bb = b.join(',')\n  let result = compareOne(aa, bb)\n  if (null == result) {\n    return compareTwo(aa, bb)\n  }\n  else {\n    return result\n  }\n}\n\nmodule.exports = {\n  compareOne,\n  compareTwo,\n  compareThree,\n  compareFour,\n  compareFive\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid [ m - 1 ] [ n ] < min) {\n    min = grid [ m - 1 ] [ n ]}\n  if (0 < n && grid [ m ] [ n - 1 ] < min) {\n    min = grid [ m ] [ n - 1 ]}\n  if (m < grid.length - 1 && grid [ m + 1 ] [ n ] < min) {\n    min = grid [ m + 1 ] [ n ]}\n  if (n < grid.length - 1 && grid [ m ] [ n + 1 ] < min) {\n    min = grid [ m ] [ n + 1 ]}\n  let p = [ ]\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) {\n      p.push(1)}\n    else {\n      p.push(min)}\n    }\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  //console.log(m, n);\n\n  let a = grid [ m ] [ n ]\n  let b = grid [ m + 1 ] [ n ]\n  let c = grid [ m ] [ n + 1 ]\n  let d = grid [ m + 1 ] [ n + 1 ]\n\n  if (a < b) {\n    return [a]\n  } else if (c < d) {\n    return [d]\n  } else {\n    let l = [d]\n    while (l.length < k) {\n      l.push(b)\n      b = c\n      c = a\n      a = grid [ m ] [ n ]\n      d = grid [ m + 1 ] [ n + 1 ]\n      if (a < b) {\n        return [d]\n      } else if (c < d) {\n        return [d]\n      } else {\n        l.push(b)\n        b = c\n        c = a\n        a = grid [ m ] [ n ]\n        d = grid [ m + 1 ] [ n + 1 ]\n      }\n    }\n    return l\n  }\n}\n\nconsole.log(minPath([ [1,2,3], [4,5,6], [7,8,9]], 3));\nconsole.log(minPath([ [5,9,3], [4,1,6], [7,8,2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = Number(a [ 1 ]) * Number(b [ 1 ])\n  return 0\n  == m % r}\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n  if (m % 1 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  You are given an expression, and you need to simplify it to a whole number.\n  The expression can have the following format:\n  (x/y) + (z/t), where x, y, z, and t are positive integers, and x, y, z, and t do not have zero as denominator.\n  Input Format\n  The first line contains a single integer, T, denoting the number of testcases.\n  T subsequent lines contain two strings, each of which contains two positive integers, x and y, separated by a space.\n  Output Format\n  For each testcase, output a single line containing the result of your function.\n  The result should be true or false, and can be represented in any format, but it should be in a single line.\n  Sample Input\n  1\n  1 2\n  2 3\n  2 5\n  4 3\n  4 5\n  4 7\n  Sample Output\n  true\n  false\n  false\n  false\n*/\n\nconst isWhole = (x, y) => {\n  let a = x.split( / / /)\n  let b = y.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n  return m % 1 === 0\n}\n\nconst main = () => {\n  let t = +process.argv[2]\n  let x = +process.argv[3]\n  let y = +process.argv[4]\n  let z = +process.argv[5]\n  let txt = +process.argv[6]\n\n  let n = (x / y) + (z / t)\n\n  for (let i = 1; i <= t; i++) {\n    let res = simplify(txt, n)\n    if (res) {\n      console.log(`true`)\n    } else {\n      console.log(`false`)\n    }\n  }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i+=2) {\n    if (1 == lst [ i ] % 2) {\n      p+=lst [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i+=2) {\n    if (1 == lst [ i ] % 2) {\n      p+=lst [ i ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] == ' ') {\n    t = 1}\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] == ' ' && S [ i + 2 ] == 'I' && ' ' == S [ i + 3 ]) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t++\n        }\n      }\n    }\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n       \n      }\n    }\n  }\n  return t\n}\n\nconst isBored2 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored3 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored4 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored5 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored6 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored7 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored8 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored9 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored10 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored11 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' &&'' == S [ i + 3 ]) {\n        t = 1\n      }\n    }\n  }\n  return t\n}\n\nconst isBored12 =(S) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n      if (S [ i + 1 ] == '"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n}\n\nconst isUppercase = (text) => {\n  return text.toUpperCase() === text\n}\n\nconst capitalize = (text) => {\n  return text.toUpperCase()\n}\n\nconst removeUppercase = (text) => {\n  return text.toLowerCase()\n}\n\nconst isLowercase = (text) => {\n  return text.toLowerCase() === text\n}\n\nconst addVowels = (text) => {\n  return text.replace(/[aeiou]/g, s => {\n    switch(s) {\n      case \"a\":\n        return \"A\"\n      case \"e\":\n        return \"E\"\n      case \"i\":\n        return \"I\"\n      case \"o\":\n        return \"O\"\n      case \"u\":\n        return \"U\"\n      default:\n        return \"\"\n    }\n  })\n}\n\nconst addUppercase = (text) => {\n  return text.replace(/[a-z]/g, s => {\n    return s.toUpperCase()\n  })\n}\n\nconst addLowercase = (text) => {\n  return text.replace(/[A-Z]/g, s => {\n    return s.toLowerCase()\n  })\n}\n\nconst isValid = (text) => {\n  return text.length >= 3 && text.length <= 15\n}\n\nexport default {\n  removeVowels,\n  isUppercase,\n  capitalize,\n  removeUppercase,\n  isLowercase,\n  addVowels,\n  addUppercase,\n  addLowercase,\n  isValid\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [ ... Array(n).keys(), n ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n}\n\n/*\n  Returns a string containing the numbers from 0 upto n inclusive,\n  with the digits in reverse order.\n  >>> stringSequenceReverse(0)\n  '0'\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].join(' ')\n}\n\n/*\n  Return a string containing a space-delimited list of all numbers from 0 upto n inclusive.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceList =(n) => {\n  return [... Array(n).keys(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing the numbers from 0 upto n inclusive,\n  with the digits in reverse order, with the numbers in the list separated by spaces.\n  >>> stringSequenceListReverse(0)\n  '0'\n  >>> stringSequenceListReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceListReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive,\n  with the digits in reverse order.\n  >>> stringSequenceListReverse(0)\n  '0'\n  >>> stringSequenceListReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Return a string containing a space-delimited list of all numbers from 0 upto n inclusive.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceList =(n) => {\n  return [... Array(n).keys(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing the numbers from 0 upto n inclusive,\n  with the digits in reverse order, with the numbers in the list separated by spaces.\n  >>> stringSequenceListReverse(0)\n  '0'\n  >>> stringSequenceListReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceListReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive,\n  with the digits in reverse order.\n  >>> stringSequenceListReverse(0)\n  '0'\n  >>> stringSequenceListReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceList =(n) => {\n  return [... Array(n).keys(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive,\n  with the digits in reverse order.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceList =(n) => {\n  return [... Array(n).keys(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive,\n  with the digits in reverse order.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceList =(n) => {\n  return [... Array(n).keys(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive,\n  with the digits in reverse order.\n  >>> stringSequenceList(0)\n  '0'\n  >>> stringSequenceList(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse =(n) => {\n  return [... Array(n).keys().reverse(), n ].map(Number).join(' ')\n}\n\n/*\n  Returns a string containing a space-delimited list of all numbers from 0 upto n inclusive.\n  >>> stringSequenceList(0)"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  while (0 != b) {\n    let temp = a;\n    a = b;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    b = temp % b;\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  while (0!= b) {\n    let temp = a;\n    a = b;\n   \n    b = temp % b;\n  }\n  return a;\n};\n\n// returns the number of common factors between two integers\nconst commonDivisors =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\nconst commonDivisors2 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst commonDivisors3 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b);\n};\n\nconst findCommonDivisors =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst findCommonDivisors2 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b);\n};\n\nconst findCommonDivisors3 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst findCommonDivisors4 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b);\n};\n\nconst findCommonDivisors5 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst findCommonDivisors6 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst findCommonDivisors7 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b);\n};\n\nconst findCommonDivisors8 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst findCommonDivisors9 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nconst findCommonDivisors10 =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a) / greatestCommonDivisor(a, b) /"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let i = 0; grid.length > i; i++) {\n    let m = 0\n    for (let j = 0; j < grid [ i ].length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m++}\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (m > 0) {\n      m-=capacity;\n      p++;\n      }\n    }\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let i = 0; grid.length > i; i++) {\n    let m = 0\n    for (let j = 0; j < grid [ i ].length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m++}\n      }\n   \n    p += m * (Math.ceil(grid.length / i) - 1)\n  }\n\n  return p / (grid.length * capacity)\n}\n\nconst test = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; grid.length > i; i++) {\n    let m = 0\n    for (let j = 0; j < grid [ i ].length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m++}\n      }\n\n    p += m * (Math.ceil(grid.length / i) - 1)\n  }\n\n  return p / (grid.length * capacity)\n}\n\nconst grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\nlet p = maxFill(grid, 1)\nconsole.log(p)\n\nlet p2 = test(grid, 1)\nconsole.log(p2)<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || 0 == len) {\n    return false}\n  for (let i = 2; i * i <= len; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (len % i == 0) {\n      return false}\n    }\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || 0 == len) {\n    return false}\n  for (let i = 2; i * i <= len; i++) {\n   \n    if (0 == len % i) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i = 1; lst.length > i; i+=2) {\n    if (lst [ i ] % 2 == 0) {\n      t+=lst [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i = 1; lst.length > i; i+=2) {\n    if (lst [ i ] % 2 == 0) {\n      t+=lst [ i ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (b < a) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) {\n      y.push(i)}\n    }\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (b < a) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let n = b - a;\n  let result = [];\n  \n  for (let i = 0; i < n; i++) {\n    result.push(a + i);\n    }\n  \n  return result;\n  }\n\nconst generateEvenIntegers = generateIntegers(2, 8)\n\nconsole.log(generateEvenIntegers)\n\n/*\n  Write a function that takes a string as input and returns a string of the\n  length of the input string, with every character in uppercase.\n\n  For example:\n  upperCase(\"A string of any length\") => \"A STRING OF ANY LENGTH\"\n  upperCase(\"\") => \"\"\n  */\nconst upperCase = (str) => {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += str.charAt(i).toUpperCase();\n    }\n  return result;\n  }\n\nconsole.log(upperCase(\"A string of any length\"));\n\n/*\n  Given a string, write a function that returns the string with all the\n  characters in lowercase.\n\n  For example:\n  lowerCase(\"A string of any length\") => \"a string of any length\"\n  lowerCase(\"\") => \"\"\n  */\nconst lowerCase = (str) => {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += str.charAt(i).toLowerCase();\n    }\n  return result;\n  }\n\nconsole.log(lowerCase(\"A string of any length\"));\n\n/*\n  Write a function that returns true if the string is an abc string, false\n  otherwise.\n\n  For example:\n  isAbc(\"abc\") => true\n  isAbc(\"def\") => false\n  isAbc(\"\") => false\n  isAbc(null) => false\n  isAbc(undefined) => false\n  isAbc(\" \") => false\n  */\nconst isAbc = (str) => {\n  return str === \"abc\" || str === \"def\" || str === \"\" || str === null || str === undefined;\n  }\n\nconsole.log(isAbc(\"abc\"));\n\n/*\n  Write a function that takes an array of strings and returns the array with\n  all the elements in lowercase.\n\n  For example:\n  lowerCaseAll(\"A string of any length\", \"A string of any length\") => [\"a string of any length\", \"a string of any length\"]\n  lowerCaseAll(\"\", \"\") => [\"\", \"\"]\n  lowerCaseAll(\"\", null) => [\"\", \"\"]\n  lowerCaseAll(\"\", undefined) => [\"\", \"\"]\n  lowerCaseAll(null, \"\") => [\"\", \"\"]\n  lowerCaseAll(undefined, \"\") => [\"\", \"\"]\n  lowerCaseAll(null, null) => [\"\", \"\"]\n  lowerCaseAll(undefined, undefined) => [\"\", \"\"]\n  lowerCaseAll(null, undefined) => [\"\", \"\"]\n  lowerCaseAll(undefined, null) => [\"\", \"\"]\n  lowerCaseAll(\" \", \" \") => [\" \", \" \"]\n  */\nconst lowerCaseAll = (arr1, arr2) => {\n  if (arr1 === undefined) {\n    return arr2;\n    }\n  if (arr2 === undefined) {\n    return arr1;\n    }\n  if (arr1 === null) {\n    return arr2;\n    }\n  if (arr2 === null) {\n    return arr1;\n    }\n  if (arr1 === undefined) {\n    return arr2;\n    }\n  if (arr2 === undefined) {\n    return arr1;\n    }\n  \n  return arr1.map(x => x.toLowerCase())\n .concat(arr2.map(x => x.toLowerCase()))\n  }\n\nconsole.log(lowerCaseAll(\"A string of any length\", \"A string of any length\"));\n\n/*\n  Write a function that takes two arrays of strings and returns an array of\n  strings, with all the elements in the first array followed by all the\n  elements in the second array.\n\n  For example:\n  concatAll([\"A string of any length\", \"A string of any length\"], [\"A string of any length\", \"A string of any length\"]) => [\"A string of any length\", \"A string of any length\", \"A string of any length\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", \"A string of any length\"]) => [\"A string of any length\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", null]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", undefined]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", null]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", undefined]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", null]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", undefined]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", null]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", undefined]) => [\"A string of any length\", \"\", \"A string of any length\"]\n  concatAll([\"\", \"A string of any length\"], [\"\", null]) => [\"A string"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if ('1' == w2 [ u ]) {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && p [ k ] < p [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if ('1' == w2 [ u ]) {\n          f2++}\n       \n        }\n      if (f1 > f2) {\n        p [ k ] = p [ ind ]\n        ind = k\n      }\n      }\n    p [ j ] = p [ ind ]\n  }\n  return p\n}\n\n// Test Code\n\n// Test 1\n\n// var p = sortArray([1, 5, 2, 3, 4])\n// console.log(p)\n// // [1, 2, 3, 4, 5]\n//\n// // Test 2\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 3\n\n// var p = sortArray([1, 0, 2, 3, 4])\n// console.log(p)\n// // [1, 0, 2, 3, 4]\n//\n// // Test 4\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 5\n\n// var p = sortArray([-1, 0, 1])\n// console.log(p)\n// // [-1, 0, 1]\n//\n// // Test 6\n\n// var p = sortArray([-1, 0, 1])\n// console.log(p)\n// // [-1, 0, 1]\n//\n// // Test 7\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 8\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 9\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 10\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 11\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 12\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 13\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 14\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 15\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 16\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 17\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 18\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 19\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 20\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -4, -3, -2]\n//\n// // Test 21\n\n// var p = sortArray([-2, -3, -4, -5, -6])\n// console.log(p)\n// // [-6, -5, -"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 1; frq.length > i; i++)\n      if (frq [ i ] >= i)\n      ans = i;\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n      for (const i of lst)\n      {\n          if (frq [ i ]> frq [ ans ])\n          {\n              ans = i;\n          }\n      }\n      return ans;\n};\n\n// console.log(search([4, 1, 2, 2, 3, 1])) // 2\n// console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) // 3\n// console.log(search([5, 5, 4, 4, 4])) // -1\n\n// console.log(search([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let i = 0; num.length > i; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (primes.includes(num [ i ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let i = 0; num.length > i; i++)\n \n  if (primes.indexOf(num[i]) > -1) {\n    total++;\n  }\n  return total;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n};\n\n/*\n  * You are given a number in binary format.\n  * Convert it to decimal format.\n  * The function should return a number in decimal format.\n  * The number should be less than 100\n  */\nconst binaryToDecimal =(binary) => {\n  return binary.slice(1, binary.length -1);\n\n};\n\n// export our functions\nexport {\n  binaryToDecimal,\n  decimalToBinary\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] > 0 && lst [ i ] < a) {\n      a = lst [ i ]}\n    if (lst [ i ] < 0 && lst [ i ] > b) {\n      b = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  if (Infinity == a) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] > 0 && lst [ i ] < a) {\n      a = lst [ i ]}\n    if (lst [ i ] < 0 && lst [ i ] > b) {\n      b = lst [ i ]}\n   \n  }\n  if (a > b) {\n    return [null, a]\n  }\n  if (b < a) {\n    return [a, null]\n  }\n  return [null, null]\n}\n\n/*\n  Return a function that returns the sum of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  sumOfList([1, 2, 3]) == 6\n  sumOfList([]) == 0\n  */\nconst sumOfList =(lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst [ i ]\n  }\n  return sum\n}\n\n/*\n  Return a function that returns the largest element in a list.\n  If the list is empty, return 0.\n  Examples:\n  largestElement([1, 2, 3]) == 3\n  largestElement([]) == 0\n  */\nconst largestElement =(lst) => {\n  let largest = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] > largest) {\n      largest = lst [ i ]}\n  }\n  return largest\n}\n\n/*\n  Return a function that returns the smallest element in a list.\n  If the list is empty, return 0.\n  Examples:\n  smallestElement([1, 2, 3]) == 1\n  smallestElement([]) == 0\n  */\nconst smallestElement =(lst) => {\n  let smallest = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] < smallest) {\n      smallest = lst [ i ]}\n  }\n  return smallest\n}\n\n/*\n  Return a function that returns the sum of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  sumOfList([1, 2, 3]) == 6\n  sumOfList([]) == 0\n  */\nconst sumOfList =(lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst [ i ]\n  }\n  return sum\n}\n\n/*\n  Return a function that returns the average of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  averageOfList([1, 2, 3]) == 2\n  averageOfList([]) == 0\n  */\nconst averageOfList =(lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst [ i ]\n  }\n  return sum / lst.length\n}\n\n/*\n  Return a function that returns the maximum of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  maximumOfList([1, 2, 3]) == 3\n  maximumOfList([]) == 0\n  */\nconst maximumOfList =(lst) => {\n  let largest = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] > largest) {\n      largest = lst [ i ]}\n  }\n  return largest\n}\n\n/*\n  Return a function that returns the minimum of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  minimumOfList([1, 2, 3]) == 1\n  minimumOfList([]) == 0\n  */\nconst minimumOfList =(lst) => {\n  let smallest = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] < smallest) {\n      smallest = lst [ i ]}\n  }\n  return smallest\n}\n\n/*\n  Return a function that returns the product of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  productOfList([1, 2, 3]) == 6\n  productOfList([]) == 0\n  */\nconst productOfList =(lst) => {\n  let product = 1\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst [ i ]\n  }\n  return product\n}\n\n/*\n  Return a function that returns the median of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  medianOfList([1, 2, 3]) == 2\n  medianOfList([]) == 0\n  */\nconst medianOfList =(lst) => {\n  let mid = lst.length / 2\n  if (lst.length % 2 === 0) {\n    return (lst [ mid - 1 ] + lst [ mid ]) / 2\n  }\n  return lst [ mid ]\n}\n\n/*\n  Return a function that returns the mode of all elements in a list.\n  If the list is empty, return 0.\n  Examples:\n  modeOfList([1, 2, 3]) == 3\n  modeOfList([]) == 0\n  */\nconst modeOfList =(lst) => {\n  let modes = []\n  for (let i = 0; i < lst.length; i++) {\n    modes [ modes.length ] = lst [ i ]\n  }\n  return modes [ modes.length - 1 ]\n}\n\n/*\n  Return a function that returns the range of all elements in"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (2 == n)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (2 == n)\n \n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(6));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => 0 == index % 3);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 3 == 0 ? three [ index / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => 0 == index % 3);\n  three.sort((a, b) =>(a - b));\n \n  var divThree = l.filter((item, index) => index % 3);\n  var divThreeLength = divThree.length;\n  var lastDivThreeItem = divThree[divThreeLength - 1];\n  var lastDivThreeIndex = l.indexOf(lastDivThreeItem);\n  var newList = [...l];\n  newList.splice(lastDivThreeIndex, 0,...three);\n  return newList;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n    prod_value*=n;\n  }\n  return [sum_value, prod_value];\n}\n\n/*\n  *  Given a list of tuples, return a list of all the tuples whose sum is 0.\n  *  For a given list of tuples, return a list of all the tuples whose sum is 0.\n  *  Empty list should be equal to an empty list.\n  *  >>> tupleOfZeroSum([(1, 2), (3, 4), (5, 6)])\n  *  [([1, 3, 5], [2, 4, 6]), ([1, 3, 5], [2, 4, 6])]\n  *  >>> tupleOfZeroSum([([1, 2], [3, 4]), ([1, 2], [3, 4])])\n  *  []\n  */\nconst tupleOfZeroSum =(tuples, int) => {\n  var result = [];\n  for (const [tuple, index] of tuples) {\n    var [sum, prod] = sumProduct(tuple);\n    if (sum == 0) {\n      result.push([tuple, index]);\n    }\n  }\n  return result;\n}\n\n/*\n  *  Given a list of tuples, return a list of all the tuples whose sum is 0.\n  *  For a given list of tuples, return a list of all the tuples whose sum is 0.\n  *  Empty list should be equal to an empty list.\n  *  >>> tupleOfZeroSum([(1, 2), (3, 4), (5, 6)])\n  *  [([1, 3, 5], [2, 4, 6]), ([1, 3, 5], [2, 4, 6])]\n  *  >>> tupleOfZeroSum([([1, 2], [3, 4]), ([1, 2], [3, 4])])\n  *  []\n  */\nconst tupleOfZeroSum2 =(tuples, int) => {\n  var result = [];\n  for (const [tuple, index] of tuples) {\n    var [sum, prod] = sumProduct(tuple);\n    if (sum == 0) {\n      result.push([tuple, index]);\n    }\n  }\n  return result;\n}\n\n/*\n  *  Given a list of lists, return a list of all the lists whose sum is 0.\n  *  For a given list of lists, return a list of all the lists whose sum is 0.\n  *  Empty list should be equal to an empty list.\n  *  >>> listOfZeroSum([[1, 2], [3, 4], [5, 6]])\n  *  [[[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [2, 4, 6]]]\n  *  >>> listOfZeroSum([[[1, 2], [3, 4]], [[1, 2], [3, 4]]])\n  *  []\n  */\nconst listOfZeroSum =(lists, int) => {\n  var result = [];\n  for (const [list, index] of lists) {\n    var [sum, prod] = sumProduct(list);\n    if (sum == 0) {\n      result.push([list, index]);\n    }\n  }\n  return result;\n}\n\n/*\n  *  Given a list of lists, return a list of all the lists whose sum is 0.\n  *  For a given list of lists, return a list of all the lists whose sum is 0.\n  *  Empty list should be equal to an empty list.\n  *  >>> listOfZeroSum([[1, 2], [3, 4], [5, 6]])\n  *  [[[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [2, 4, 6]]]\n  *  >>> listOfZeroSum([[[1, 2], [3, 4]], [[1, 2], [3, 4]]])\n  *  []\n  */\nconst listOfZeroSum2 =(lists, int) => {\n  var result = [];\n  for (const [list, index] of lists) {\n    var [sum, prod] = sumProduct(list);\n    if (sum == 0) {\n      result.push([list, index]);\n    }\n  }\n  return result;\n}\n\n/*\n  *  Given a list of tuples, return a list of all the tuples whose sum is 0.\n  *  For a given list of tuples, return a list of all the tuples whose sum is 0.\n  *  Empty list should be equal to an empty list.\n  *  >>> tupleOfZeroSum([(1, 2), (3, 4), (5, 6)])\n  *  [([1, 3, 5], [2, 4, 6]), ([1, 3, 5], [2, 4, 6])]\n  *  >>> tupleOfZeroSum([([1, 2], [3, 4]), ([1, 2], [3, 4])])\n  *  []\n  */\nconst tupleOfZeroSum3 =(tuples, int) => {\n  var result = [];\n  for (const [tuple, index] of tuples) {\n    var [sum, prod] = sumProduct(tuple);\n    if (sum == 0) {\n      result.push([tuple, index]);\n    }\n  }\n  return result;\n}\n\n/*\n  *  Given a list of tuples, return a list of all the tuples whose sum is 0.\n  *  For a given list of tuples, return a list of all the tuples whose sum is 0.\n  *  Empty list should be equal to an empty list.\n  *  >>> tupleOfZeroSum([(1, 2), (3, 4), (5, 6)])\n  *  [([1, 3, 5], [2, 4, 6]), ([1, 3, 5], [2, 4, 6])]\n  *  >>> tupleOfZeroSum([([1, 2"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; c.length > j; j++) {\n      if (s [ i ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t [ i ] != t [ t.length - i - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; c.length > j; j++) {\n      if (s [ i ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n  }\nreturn (t, s.length === t.length)\n};\n\nmodule.exports = reverseDelete<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  for (let k = j + 1; l.length > k; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (l [ i ] + l [ j ] + l [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  for (let k = j + 1; l.length > k; k++)\n \n  if (l[i] + l[j] + l[k] === 0) return true;\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => '' != x).map(x => note_map [ x ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const music_array = music_string.split('');\n  let total_beats = 0;\n  let current_beat = 0;\n  let current_beat_length = 0;\n  const beat_length_array = [];\n  const output = [];\n\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o' || music_array[i] === 'o|' || music_array[i] === '.|') {\n      total_beats += note_map[music_array[i]];\n      current_beat++;\n      current_beat_length = note_map[music_array[i]];\n    } else if (music_array[i] === '.') {\n      current_beat++;\n      current_beat_length = 1;\n    } else {\n      current_beat++;\n      current_beat_length = 1;\n    }\n\n    beat_length_array.push(current_beat_length);\n  }\n\n  return beat_length_array;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const music_array = music_string.split('');\n  let total_beats = 0;\n  let current_beat = 0;\n  let current_beat_length = 0;\n  const beat_length_array = [];\n  const output = [];\n\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o' || music_array[i] === 'o|' || music_array[i] === '.|') {\n      total_beats += note_map[music_array[i]];\n      current_beat++;\n      current_beat_length = note_map[music_array[i]];\n    } else if (music_array[i] === '.') {\n      current_beat++;\n      current_beat_length = 1;\n    } else {\n      current_beat++;\n      current_beat_length = 1;\n    }\n\n    beat_length_array.push(current_beat_length);\n  }\n\n  return beat_length_array;\n};\n\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const music_array = music_string.split('');\n  let total_beats = 0;\n  let current_beat = 0;\n  let current_beat_length = 0;\n  const beat_length_array = [];\n  const output = [];\n\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o' || music_array[i] === 'o|' || music_array[i] === '.|') {\n      total_beats += note_map[music_array[i]];\n      current_beat++;\n      current_beat_length = note_map[music_array[i]];\n    } else if (music_array[i] === '.') {\n      current_beat++;\n      current_beat_length = 1;\n    } else {\n      current_beat++;\n      current_beat_length = 1;\n    }\n\n    beat_length_array.push(current_beat_length);\n  }\n\n  return beat_length_array;\n};\n\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const music_array = music_string.split('');\n  let total_beats"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let i = arr.length - 1; 0 < i; i--) {\n    if (arr [ i ] < arr [ i - 1 ]) {\n      return i}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let i = arr.length - 1; 0 < i; i--) {\n    if (arr [ i ] < arr [ i - 1 ]) {\n      return i}\n   \n  }\n  return - 1}\n\n\n\n/*\n  Given a sorted array and a target value, determine if there is a value in\n  the array that is smaller than the target.\n\n  Examples:\n  canFindSmallerThan(arr, 5) = true\n  canFindSmallerThan(arr, 3) = false\n  canFindSmallerThan(arr, 2) = true\n  canFindSmallerThan(arr, 1) = false\n  canFindSmallerThan(arr, 0) = true\n  canFindSmallerThan(arr, -1) = false\n  */\nconst canFindSmallerThan =(arr, target) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < target) {\n      return true}\n   \n  }\n  return false}\n\n/*\n  Given a sorted array and a target value, determine if there is a value in\n  the array that is greater than the target.\n\n  Examples:\n  canFindGreaterThan(arr, 5) = false\n  canFindGreaterThan(arr, 3) = true\n  canFindGreaterThan(arr, 2) = true\n  canFindGreaterThan(arr, 1) = true\n  canFindGreaterThan(arr, 0) = true\n  canFindGreaterThan(arr, -1) = false\n  */\nconst canFindGreaterThan =(arr, target) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > target) {\n      return true}\n   \n  }\n  return false}\n\n\n\n\n/*\n  Given an array and a target value, determine if there is a value in the\n  array that is smaller than or equal to the target.\n\n  Examples:\n  canFindSmallerThanOrEqualTo(arr, 5) = true\n  canFindSmallerThanOrEqualTo(arr, 3) = true\n  canFindSmallerThanOrEqualTo(arr, 2) = true\n  canFindSmallerThanOrEqualTo(arr, 1) = true\n  canFindSmallerThanOrEqualTo(arr, 0) = false\n  canFindSmallerThanOrEqualTo(arr, -1) = false\n  */\nconst canFindSmallerThanOrEqualTo =(arr, target) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= target) {\n      return true}\n   \n  }\n  return false}\n\n\n\n/*\n  Given an array and a target value, determine if there is a value in the\n  array that is greater than or equal to the target.\n\n  Examples:\n  canFindGreaterThanOrEqualTo(arr, 5) = true\n  canFindGreaterThanOrEqualTo(arr, 3) = true\n  canFindGreaterThanOrEqualTo(arr, 2) = true\n  canFindGreaterThanOrEqualTo(arr, 1) = true\n  canFindGreaterThanOrEqualTo(arr, 0) = false\n  canFindGreaterThanOrEqualTo(arr, -1) = false\n  */\nconst canFindGreaterThanOrEqualTo =(arr, target) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] >= target) {\n      return true}\n   \n  }\n  return false}\n\n\n\n/*\n  Given a sorted array and a target value, determine if there is a value in\n  the array that is equal to the target.\n\n  Examples:\n  canFindEqualTo(arr, 5) = true\n  canFindEqualTo(arr, 3) = false\n  canFindEqualTo(arr, 2) = true\n  canFindEqualTo(arr, 1) = true\n  canFindEqualTo(arr, 0) = true\n  canFindEqualTo(arr, -1) = false\n  */\nconst canFindEqualTo =(arr, target) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == target) {\n      return true}\n   \n  }\n  return false}\n\n\n\n/*\n  Given an array and a target value, determine if there is a value in the\n  array that is smaller than or equal to the target.\n\n  Examples:\n  canFindSmallerThanOrEqualTo(arr, 5) = true\n  canFindSmallerThanOrEqualTo(arr, 3) = true\n  canFindSmallerThanOrEqualTo(arr, 2) = true\n  canFindSmallerThanOrEqualTo(arr, 1) = true\n  canFindSmallerThanOrEqualTo(arr, 0) = false\n  canFindSmallerThanOrEqualTo(arr, -1) = false\n  */\nconst canFindSmallerThanOrEqualTo =(arr, target) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= target) {\n      return true}\n   \n  }\n  return false}\n\n\n\n/*\n  Given an array and a target value, determine if there is a value in the\n  array that is greater than or equal to the target.\n\n  Examples:\n  canFindGreaterThanOrEqualTo(arr, 5) = true\n  canFindGreaterThanOrEqualTo(arr, 3) = true\n  canFindGreaterThanOrEqualTo(arr, 2) = true\n  canFindGreaterThanOrEqualTo(arr, 1) = true\n  canFindGreaterTh"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q [ j ] != q [ i ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false;\n    i++;\n    j--;\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q [ j ]!= q [ i ])\n   \n    break;\n    j--;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n}\n\n/*\n  encodes a string by using an algorithm that is more difficult to reverse.\n  */\nconst encodeSudoku = (s) => {\n  var i, j, index;\n  const groups = [];\n  for (j = 0; j < 9; j++) {\n    groups.push([]);\n    for (i = 0; i < 9; i++) {\n      index = 9 * j + i;\n      if (s.charAt(index)!= '.') {\n        groups[j].push(s.charAt(index));\n      }\n    }\n  }\n  return groups.join('');\n}\n\n/*\n  decodes a string by using an algorithm that is more difficult to reverse.\n  */\nconst decodeSudoku = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < 9; i++) {\n    groups.push([]);\n    for (let j = 0; j < 9; j++) {\n      groups[i].push(s.charAt(9 * j + i));\n    }\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode = (s) => {\n  let result = encodeCyclic(s);\n  result = decodeCyclic(result);\n  result = decodeSudoku(result);\n  return result;\n}\n\nconst decode_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_string = (s) => {\n  let result = encodeCyclic(s);\n  console.log(`encoded: ${result}`);\n  return result;\n}\n\nconst decode_hex = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_hex = (s) => {\n  let result = encodeCyclic(s);\n  console.log(`encoded: ${result}`);\n  return result;\n}\n\nconst decode_string_hex = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_string_hex = (s) => {\n  let result = encodeCyclic(s);\n  console.log(`encoded: ${result}`);\n  return result;\n}\n\nconst decode_hex_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_hex_string = (s) => {\n  let result = encodeCyclic(s);\n  console.log(`encoded: ${result}`);\n  return result;\n}\n\nconst encode_string_decode_hex = (s) => {\n  let result = encodeCyclic(s);\n  result = decode(result);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_hex_decode_string = (s) => {\n  let result = encodeCyclic(s);\n  result = decode(result);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_string_decode_hex_string = (s) => {\n  let result = encodeCyclic(s);\n  result = decode(result);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst decode_hex_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_hex_string = (s) => {\n  let result = encodeCyclic(s);\n  console.log(`encoded: ${result}`);\n  return result;\n}\n\nconst decode_hex_decode_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst decode_hex_decode_hex_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_hex_decode_decode_hex_string = (s) => {\n  let result = encodeCyclic(s);\n  result = decode(result);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst decode_decode_decode_hex_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst decode_decode_decode_decode_hex_string = (s) => {\n  let result = decode(s);\n  console.log(`decoded: ${result}`);\n  return result;\n}\n\nconst encode_decode_decode_decode_hex_string = (s) => {\n  let result = decode(s);\n  console"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nexport default {\n  encode_shift,\n  decode_shift,\n  decode\n}<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (len == 1 || len == 0) {\n    return 'NO'}\n  for (let i = 2; len >= i * i; i++) {\n    if (len % i == 0) {\n      return 'NO'}\n    }\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n  return (len + 1) % 2 === 0? \"YES\" : \"NO\"\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n};\n\n/*\n  sumEvens is a function that sums all even numbers.\n  >>> sumEvens([1, 2, 3, 4, 5, 6, 7, 8])\n  26\n  >>> sumEvens([2, 4, 6, 8])\n  30\n  >>> sumEvens([7, 9])\n  0\n  */\nconst sumEvens = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  sumOdds is a function that sums all odd numbers.\n  >>> sumOdds([1, 2, 3, 4, 5, 6, 7, 8])\n  22\n  >>> sumOdds([2, 4, 6, 8])\n  10\n  >>> sumOdds([7, 9])\n  0\n  */\nconst sumOdds = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  sumPrimes is a function that sums all prime numbers.\n  >>> sumPrimes([1, 2, 3, 4, 5, 6, 7, 8])\n  27\n  >>> sumPrimes([2, 4, 6, 8])\n  8\n  >>> sumPrimes([7, 9])\n  0\n  */\nconst sumPrimes = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  sumPrimes2 is a function that sums all prime numbers.\n  >>> sumPrimes2([1, 2, 3, 4, 5, 6, 7, 8])\n  32\n  >>> sumPrimes2([2, 4, 6, 8])\n  16\n  >>> sumPrimes2([7, 9])\n  0\n  */\nconst sumPrimes2 = (nums) => {\n  let sum = 0;\n  for (let i = 2; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  sumNthToNth is a function that sums the numbers from 1 to n.\n  >>> sumNthToNth(20, 3)\n  24\n  >>> sumNthToNth(20, 4)\n  24\n  >>> sumNthToNth(20, 5)\n  40\n  >>> sumNthToNth(20, 6)\n  48\n  >>> sumNthToNth(20, 7)\n  56\n  >>> sumNthToNth(20, 8)\n  64\n  >>> sumNthToNth(20, 9)\n  72\n  >>> sumNthToNth(20, 10)\n  80\n  >>> sumNthToNth(20, 11)\n  88\n  >>> sumNthToNth(20, 12)\n  96\n  >>> sumNthToNth(20, 13)\n  104\n  >>> sumNthToNth(20, 14)\n  112\n  >>> sumNthToNth(20, 15)\n  120\n  >>> sumNthToNth(20, 16)\n  128\n  >>> sumNthToNth(20, 17)\n  136\n  >>> sumNthToNth(20, 18)\n  144\n  >>> sumNthToNth(20, 19)\n  152\n  >>> sumNthToNth(20, 20)\n  160\n  >>> sumNthToNth(20, 21)\n  168\n  >>> sumNthToNth(20, 22)\n  176\n  >>> sumNthToNth(20, 23)\n  184\n  >>> sumNthToNth(20, 24)\n  192\n  >>> sumNthToNth(20, 25)\n  200\n  >>> sumNthToNth(20, 26)\n  208\n  >>> sumNthToNth(20, 27)\n  216\n  >>> sumNthToNth(20, 28)\n  224\n  >>> sumNthToNth(20, 29)\n  232\n  >>> sumNthToNth(20, 30)\n  240\n  */\nconst sumNthToNth = (n, m) => {\n  return (n + m - 1) * (n - 1) / 2;\n};\n\nmodule.exports = {\n  sumToN,\n  sumEvens,\n  sumOdds,\n  sumPrimes,\n  sumPrimes2,\n  sumNthToNth\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (2 > n)\n  return false;\n  for (let k = 2; k < n - 1; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (n % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (2 > n)\n  return false;\n  for (let k = 2; k < n - 1; k++)\n \n  if (0 == n % k)\n   return false;\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t [ i ].length; j++) {\n      if ('a' != t [ i ] [ j ] && t [ i ] [ j ] != 'e' && t [ i ] [ j ] != 'i' && t [ i ] [ j ] != 'o' && t [ i ] [ j ] != 'u' && t [ i ] [ j ] != 'A' &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t [ i ] [ j ] != 'U' && t [ i ] [ j ] != 'O' && t [ i ] [ j ] != 'I' && t [ i ] [ j ] != 'E') {\n        l++\n        }\n      }\n    if (l == n) {\n      k.push(t [ i ])}\n    }\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t [ i ].length; j++) {\n      if ('a'!= t [ i ] [ j ] && t [ i ] [ j ]!= 'e' && t [ i ] [ j ]!= 'i' && t [ i ] [ j ]!= 'o' && t [ i ] [ j ]!= 'u' && t [ i ] [ j ]!= 'A' &&\n     \n        t [ i ] [ j ]!= 'E' && t [ i ] [ j ]!= 'I' && t [ i ] [ j ]!= 'O' && t [ i ] [ j ]!= 'U' && t [ i ] [ j ]!= 'h' && t [ i ] [ j ]!= 'k' && t [ i ] [ j ]!= 'l' && t [ i ] [ j ]!='m' && t [ i ] [ j ]!= 'n' && t [ i ] [ j ]!= 'p' && t [ i ] [ j ]!= 'r' && t [ i ] [ j ]!='s' && t [ i ] [ j ]!= 't' && t [ i ] [ j ]!= 'w' && t [ i ] [ j ]!= 'y') {\n        l++}\n    }\n    if (l == n) {\n      k.push(t [ i ])}\n  }\n  return k}\n\nconst selectWords = (s, n) => {\n  let t = s.split( /s/);\n  let k = [ ];\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t [ i ].length; j++) {\n      if (t [ i ] [ j ]!= 'e' && t [ i ] [ j ]!= 'i' && t [ i ] [ j ]!= 'o' && t [ i ] [ j ]!= 'u' && t [ i ] [ j ]!= 'A' && t [ i ] [ j ]!= 'E' && t [ i ] [ j ]!= 'I' && t [ i ] [ j ]!= 'O' && t [ i ] [ j ]!= 'U' && t [ i ] [ j ]!= 'h' && t [ i ] [ j ]!= 'k' && t [ i ] [ j ]!= 'l' && t [ i ] [ j ]!='m' && t [ i ] [ j ]!= 'n' && t [ i ] [ j ]!= 'p' && t [ i ] [ j ]!= 'r' && t [ i ] [ j ]!='s' && t [ i ] [ j ]!= 't' && t [ i ] [ j ]!= 'w' && t [ i ] [ j ]!= 'y') {\n        l++}\n    }\n    if (l == n) {\n      k.push(t [ i ])}\n  }\n  return k}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n    lis.push(i);\n\n  return lis.reduce((acc, i) => acc + i, 0) - n;\n}\n\nfruitDistribution(\"5 apples and 6 oranges\", 19)\n\nfruitDistribution(\"0 apples and 1 oranges\", 3)\n\nfruitDistribution(\"2 apples and 3 oranges\", 100)\n\nfruitDistribution(\"100 apples and 1 oranges\", 120)<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (10 <= h) {\n        m+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * h\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (10 <= h) {\n        m+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n     \n      while (10 <= d) {\n        n+=d % 10;\n        d = (d - d % 10) / 10;\n        }\n      if (m < n) {\n        p [ k ] = (y * p [ k ]) + (u * p [ k + 1 ])\n        p [ k + 1 ] = (y * p [ k + 1 ]) + (u * p [ k ])\n        }\n      }\n    }\n  return p\n  }\n\n/*\n  Write a function which checks if the given string contains any digits.\n  Note: the function should return true if the string contains digits,\n  otherwise return false.\n\n  >>> containsDigits('abc')\n  >>> containsDigits('abc1')\n  >>> containsDigits('abcd')\n  >>> containsDigits('abcd1')\n  >>> containsDigits('abcd12')\n  >>> containsDigits('abcd12a')\n  */\nconst containsDigits =(str) => {\n  let l = str.length\n  for (let i = 0; i < l; i++) {\n    if (str[i] < '0' || str[i] > '9') {\n      return false\n      }\n    }\n  return true\n  }\n\n/*\n  Write a function which converts a number from base 10 to base b.\n\n  >>> baseConvert(0,10)\n  >>> baseConvert(11,10)\n  >>> baseConvert(101,2)\n  >>> baseConvert(10,2)\n  >>> baseConvert(12,2)\n  >>> baseConvert(12,16)\n  */\nconst baseConvert =(num, base) => {\n  let nums = new Array(base)\n  for (let i = 0; i < base; i++) {\n    nums[i] = 0\n    }\n  for (let i = 0; i < num; i++) {\n    nums[num % base] += 1\n    num = Math.floor(num / base)\n    }\n  return nums\n  }\n\n/*\n  Write a function which converts a number from base b to base 10.\n\n  >>> baseConvert(0,10)\n  >>> baseConvert(11,10)\n  >>> baseConvert(101,2)\n  >>> baseConvert(10,2)\n  >>> baseConvert(12,2)\n  >>> baseConvert(12,16)\n  */\nconst baseConvertBack =(num, base) => {\n  let nums = new Array(base)\n  for (let i = 0; i < base; i++) {\n    nums[i] = 0\n    }\n  for (let i = 0; i < num; i++) {\n    nums[num % base] += 1\n    num = Math.floor(num / base)\n    }\n  return nums\n  }\n\n/*\n  Write a function which returns the first missing positive number\n  in the given range.\n\n  >>> firstMissing(1,10)\n  >>> firstMissing(1,5)\n  >>> firstMissing(10,1)\n  >>> firstMissing(100,101)\n  >>> firstMissing(100,200)\n  >>> firstMissing(101,200)\n  */\nconst firstMissing =(a, b) => {\n  let m = a\n  for (let i = a; i <= b; i++) {\n    if (i in [a,b] || i in [m,b]) {\n      continue\n      }\n    else {\n      m = i + 1\n      }\n    }\n  return m\n  }\n\n/*\n  Write a function which returns the nth digit of the given integer.\n  \n  >>> getDigit(11,2)\n  >>> getDigit(100,10)\n  >>> getDigit(1,10)\n  >>> getDigit(0,10)\n  >>> getDigit(100,1)\n  >>> getDigit(11,10)\n  >>> getDigit(11,0)\n  >>> getDigit(1,1)\n  >>> getDigit(1,0)\n  >>> getDigit(1,10)\n  >>> getDigit(0,0)\n  */\nconst getDigit =(num, n) => {\n  let nums = new Array(10)\n  for (let i = 0; i < 10; i++) {\n    nums[i] = 0\n    }\n  for (let i = 0; i < n; i++) {\n    nums[num % 10] += 1\n    num = Math.floor(num / 10)\n    }\n  return nums[n]\n  }\n\n/*\n  Write a function which returns the index of the first appearance of the given digit\n  in the given string.\n\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123456789')\n  >>> findIndex(10, '123"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 =(a, h) => {\n  return a * h / 2;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 =(a, h) => {\n  return a * h / 3;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 =(a, h) => {\n  return a * h / 4;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 =(a, h) => {\n  return a * h / 5;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 =(a, h) => {\n  return a * h / 6;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 =(a, h) => {\n  return a * h / 7;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 =(a, h) => {\n  return a * h / 8;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 =(a, h) => {\n  return a * h / 9;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 =(a, h) => {\n  return a * h / 10;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 =(a, h) => {\n  return a * h / 11;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 =(a, h) => {\n  return a * h / 12;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 =(a, h) => {\n  return a * h / 13;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 =(a, h) => {\n  return a * h / 14;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 =(a, h) => {\n  return a * h / 15;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 =(a, h) => {\n  return a * h / 16;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 =(a, h) => {\n  return a * h / 17;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 =(a, h) => {\n  return a * h / 18;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 =(a, h) => {\n  return a * h / 19;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 =(a, h) => {\n  return a * h / 20;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 =(a, h) => {\n  return a * h / 21;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 =(a, h) => {\n  return a * h / 22;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 =(a, h) => {\n  return a * h / 23;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 =(a, h) => {\n  return a * h / 24;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 =(a, h) => {\n  return a * h / 25;\n \n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangle"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (undefined == running_max)\n    running_max = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    running_max = Math.max(running_max, n);\n    result.push(running_max);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (undefined == running_max)\n    running_max = n;\n    else\n   \n    if (n > running_max)\n    running_max = n;\n    else\n    continue;\n    \n    \n    \n  }\n  return result;\n};\n\nrollingMax([1, 2, 3, 2, 3, 4, 2]);\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (\"(\" == b)\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (\"(\" == b)\n    depth+=1;\n    else\n   \n    if (\")\" == b)\n    depth-=1;\n  }\n  if (depth!= 0)\n  return false;\n  else\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game [ i ]-=guess [ i ]\n    if (0 > game [ i ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    game [ i ] = - game [ i ];}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game [ i ]-=guess [ i ]\n    if (0 > game [ i ])\n   \n  }\n  return game\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea =(a, b, c) => {\n  if (c >= a + b || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) *"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  if (0 == l [ i ] + l [ j ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  if (0 == l [ i ] + l [ j ])\n \n  return false\n}\n\n/*\n  pairsSumToZero2 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  if (0 == l [ i ] + l [ j ])\n \n  return true\n}\n\n/*\n  pairsSumToZero3 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  if (0 == l [ i ] + l [ j ])\n \n  return true\n}\n\n/*\n  pairsSumToZero4 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 =(l) => {\n  for (let i = 0; i < l.length; i++)\n  for (let j = i + 1; j < l.length; j++)\n  if (0 == l [ i ] + l [ j ])\n \n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst [ i ] < pre) {\n      return false}\n    if (pre == lst [ i ]) {\n      dup+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (dup == 3) {\n        return false}\n      }\n    else {\n      pre = lst [ i ]\n      dup = 1\n      }\n    }\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst [ i ] < pre) {\n      return false}\n    if (pre == lst [ i ]) {\n      dup+=1;\n     \n      if (dup > 1) {\n        return false}\n    }\n    pre = lst [ i ]\n  }\n  return true\n}\n\n/*\n  Given a sorted list, write a function to find the first missing number.\n  For example, Given 1,2,3,4,find the missing number is 5.\n  Example\n  findMissing([1,2,3,4]) ➞ 5\n  findMissing([1,2,3]) ➞ 4\n  findMissing([1,2]) ➞ 3\n  findMissing([1]) ➞ 2\n  findMissing([]) ➞ 1\n  */\nconst findMissing = (lst) => {\n  if (lst.length == 0) {\n    return 0}\n  let i = 1\n  let pre = lst [ 0 ]\n  for (let i = 1; i < lst.length; i++) {\n    if (pre == lst [ i ]) {\n      i += 1}\n    else {\n      return lst [ i ]}\n  }\n  return i + 1}\n\n/*\n  Given a list of numbers, write a function to find the first missing number.\n  For example, Given 1,2,3,find the missing number is 4.\n  Example\n  findMissing([1,2,3]) ➞ 4\n  findMissing([1,2]) ➞ 3\n  findMissing([1]) ➞ 2\n  findMissing([]) ➞ 1\n  */\nconst findMissing2 = (lst) => {\n  if (lst.length == 0) {\n    return 0}\n  let i = 1\n  let pre = lst [ 0 ]\n  for (let i = 1; i < lst.length; i++) {\n    if (pre == lst [ i ]) {\n      i += 1}\n    else {\n      return lst [ i ]}\n  }\n  return i + 1}\n\n/*\n  Given a list of numbers, write a function to find the sum of the even elements.\n  For example, Given 1,2,3,4,find the sum of the even elements is 14.\n  Example\n  sumEven([1,2,3,4]) ➞ 14\n  sumEven([1,2,3,4,5]) ➞ 12\n  sumEven([1,2,3]) ➞ 6\n  sumEven([1,2]) ➞ 4\n  sumEven([1]) ➞ 2\n  sumEven([]) ➞ 0\n  */\nconst sumEven = (lst) => {\n  if (lst.length == 0) {\n    return 0}\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] % 2 == 0) {\n      sum += lst [ i ]}\n  }\n  return sum}\n\n/*\n  Given a list of numbers, write a function to find the difference between the odd elements and even elements.\n  For example, Given 1,2,3,4,find the difference between the odd elements and the even elements is 1.\n  Example\n  difference([1,2,3,4]) ➞ 1\n  difference([1,2,3,4,5]) ➞ 2\n  difference([1,2,3,4]) ➞ 3\n  difference([1,2]) ➞ 4\n  difference([1]) ➞ 5\n  difference([]) ➞ 0\n  */\nconst difference = (lst) => {\n  if (lst.length == 0) {\n    return 0}\n  let diff = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] % 2 == 1) {\n      diff += lst [ i ]}\n  }\n  return diff}\n\n/*\n  Given a list of numbers, write a function to find the sum of the multiples of each number.\n  For example, Given 1,2,3,find the sum of the multiples of each number is 6.\n  Example\n  sumMultiples([1,2,3]) ➞ 6\n  sumMultiples([1,2,3,4]) ➞ 12\n  sumMultiples([1,2,3,4,5]) ➞ 15\n  sumMultiples([1,2,3]) ➞ 9\n  sumMultiples([1,2]) ➞ 4\n  sumMultiples([1]) ➞ 1\n  sumMultiples([]) ➞ 0\n  */\nconst sumMultiples = (lst) => {\n  if (lst.length == 0) {\n    return 0}\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst [ i ] * (lst [ i ] + 1)}\n  return sum}\n\n/*\n  Given a list of numbers, write a function to find the difference between the multiples of each number.\n  For example, Given 1,2,3,find the difference between the multiples of each number is -2.\n  Example\n  differenceMultiples([1,"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s+=arr [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (0 == arr [ i ]) {\n      return 0}\n    if (arr [ i ] < 0) {\n      n = - n; s-=2 * arr [ i ]}\n    }\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s+=arr [ i ]\n   \n    if (arr[i] < 0) {\n      n*=-1\n    }\n  }\n  return n * s\n}\n\n//console.log(prodSigns([1, 2, 2, -4]))\n//console.log(prodSigns([0, 1]))\n//console.log(prodSigns([1, 2, 3]))\n//console.log(prodSigns([1, 2, 3, 4]))\n//console.log(prodSigns([1, 2, 3, 4, 5]))\n//console.log(prodSigns([-1, -2, -3]))\n//console.log(prodSigns([-1, -2, -3, -4]))\n//console.log(prodSigns([1, 2, -3, 4]))\n//console.log(prodSigns([1, 2, 3, -4]))\n//console.log(prodSigns([1, 2, 3, 4, 5]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6, 7, 8, 9, -10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]))\n//console.log(prodSigns([1, 2, 3, 4, 5, -6,"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  for (let i = 2; n > i; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t = t * 10\n    }\n  return t\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  for (let i = 2; n > i; i++) {\n   \n    if (n % i == 0) {\n      t += (n / i)\n    }\n  }\n  return t\n}\n\nmodule.exports = startsOneEnds\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (0 < y) {\n      y--;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t *= n;\n      }\n    p++;\n    n--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (0 < y) {\n      y--;\n     \n      t = t * (n - y);\n      if (y === 0) break;\n    }\n    p = p * (n - t);\n    n = t;\n  }\n  return p;\n}\n\n/*\n  The following function returns the factorial of an integer n.\n  n! = n * (n-1) * (n-2) *... * 1\n  \n  For example:\n  >>> factorial(3)\n  6\n  \n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  let p = 1;\n  while (n > 1) {\n    p = p * (n - 1);\n    n = n - 1;\n  }\n  return p;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors = (n) => {\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors2 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors3 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors4 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors5 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors6 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors7 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1, 3]\n  \n  The function will receive an integer as input and should return a list of\n  the prime factors of this integer.\n  */\nconst primeFactors8 = (n) => {\n  let factors = [];\n  let count = 2;\n  while (count <= n) {\n    if (n % count === 0) {\n      factors.push(count);\n      n = n / count;\n    } else count++;\n  }\n  return factors;\n}\n\n/*\n  The following function returns the prime factors of a number n.\n  For example:\n  >>> primeFactors(3)\n  [1,"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(x => '' != x)\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n    }\n    return max_depth;\n  };\n  const parse_groups = paren_string.split(' ');\n  let groups = parse_groups.map(parseParenGroup);\n  groups.reduce((a, b) => a.concat(b));\n  return groups;\n};\n\n/*\nInput:\n    2\nOutput:\n    1\n    2\n\nInput:\n    1 2 3 4\nOutput:\n    1 2 3 4\n    1 2 3 4\n    1 2 3 4\n    1 2 3 4\n*/\nconst getGroupCount =(string) => {\n  var groups = parseNestedParens(string);\n  var count = 0;\n  for (const group of groups) {\n    count+=group;\n  }\n  return count;\n};\n\nconsole.log(getGroupCount('2'));\nconsole.log(getGroupCount('1 2 3 4'));\nconsole.log(getGroupCount('1 2 3 4'));\nconsole.log(getGroupCount('1 2 3 4'));\nconsole.log(getGroupCount('1 2 3 4'));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; n - 1 > j; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y [ i ] + y [ j ] + y [ k ]) % 3 == 0) {\n          u++}\n        }\n      }\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; n - 1 > j; j++) {\n     \n      let x = y[i] + y[j] + y[n - 1]\n      if (x % 3 === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\nlet result = getMaxTriples(5)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr [ j - 1 ] > arr [ j ]) {\n        t = 0;\n        break;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    arr.push(arr [ 0 ]);\n    arr.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr [ j - 1 ] > arr [ j ]) {\n        t = 0;\n        break;\n        }\n     \n    }\n    if (t) {\n      arr [ i ] = arr [ k ]\n      k++\n      }\n    }\n  return arr.every(x => x >= 0);\n}\n\n/*\n  moveOneBall([3, 5, 4, 1, 2])==>true\n  moveOneBall([3, 5, 4, 1, 2, -1, -2, -3, -4, -5])==>true\n  moveOneBall([3, 5, 4, 1, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9])==>false\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\nwhile (number) {\n    let div =(number - number % num [ i ]) / num [ i ]\n    number = number % num [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (div) {\n      res+=sym [ i ]\n      div-=1\n      }\n    i-=1\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\nwhile (number) {\n    let div =(number - number % num [ i ]) / num [ i ]\n    number = number % num [ i ]\n   \n    if (div === 1) {\n        res = res + sym [ i ]\n    } else {\n        res = res + sym [ i ] + num [ i ] - div\n    }\n    i--\n}\nreturn res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its roman numeral as a string,\n  and return it in lowercase.\n\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> intToRoman(3999) == 'ixxxxvii'\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(3) == 'iii'\n  >>> intToRoman(4) == 'iv'\n  >>> intToRoman(1) == 'i'\n  */\nconst intToRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000, 3000, 4000, 4999 ]\n  let sym = [ 'i', 'iv', 'v', 'x', 'xl', 'l', 'c', 'cx', 'cd', 'd', 'cm','m' ]\n  let res = ''\n  while (number) {\n    let div =(number - number % num [ (number < 1000)? 11 : 12 ]) / num [ (number < 1000)? 11 : 12 ]\n    number = number % num [ (number < 1000)? 11 : 12 ]\n   \n    if (div === 1) {\n        res = res + sym [ (number < 1000)? 11 : 12 ]\n    } else {\n        res = res + sym [ (number < 1000)? 11 : 12 ] + num [ (number < 1000)? 11 : 12 ] - div\n    }\n}\nreturn res.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (s.length < shift)\n  return s.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return s.slice( - shift) + s.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (s.length < shift)\n  return s.split('').reverse().join('');\n \n  const result = s.split('').reverse().join('');\n  return result.substring(shift);\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (0 == lst [ i ].length % 2) {\n      p.push(lst [ i ])\n      }\n    }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p [ k ].length > p [ k + 1 ].length) {\n        f = 1}\n      if (p [ k ].length == p [ k + 1 ].length) {\n        let r = p [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            break;\n            }\n          if (p [ k ] [ l ].charCodeAt() < p [ k + 1 ] [ l ].charCodeAt()) {\n            break;\n            }\n          }\n        }\n      if (f == 1) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (0 == lst [ i ].length % 2) {\n      p.push(lst [ i ])\n      }\n    }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p [ k ].length > p [ k + 1 ].length) {\n        f = 1}\n      if (p [ k ].length == p [ k + 1 ].length) {\n        let r = p [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n          }\n        }\n      }\n      if (f == 1) {\n        p.splice(k, 1);\n        k--\n      }\n    }\n  }\n  return p\n}\n\nconsole.log(sortedListSum([\"a\", \"aa\", \"aaa\", \"a\", \"a\", \"aa\", \"aaa\"]))\n\n/*\nGiven a sorted array, delete all the duplicates in place.\n\nFor example,\nGiven [1,1,2,3,4,4,5,5],\nAfter calling your function, [1,2,3,4,5].\n\nNote:\nYou may assume that all elements are distinct.\n\nFollow up:\nWhat if duplicates are allowed?\nWhat if elements are in the set are large enough to hold the entire elements?\nWhat if elements are in the set are to large to hold the entire elements?\nWhat if elements are in the set are both large and small?\nWhat if elements are in the set are both large and small?\n*/\nconst deleteDup = (arr) => {\n  let j = 0\n  for (let i = 1; i < arr.length; i++) {\n    if (arr [ j ]!= arr [ i ]) {\n      j++\n      arr [ j ] = arr [ i ]\n    }\n  }\n  return arr.slice(0, j + 1)\n}\n\nconsole.log(deleteDup([1,1,2,3,4,4,5,5]))\n<|endoftext|>"}
