{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var r8ezP = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    r8ezP+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    r8ezP-=1;\n    if (r8ezP < 0)\n    return false;\n    }\n  return r8ezP == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var r8ezP = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    r8ezP+=1;\n    else\n   \n  }\n  if (r8ezP!= brackets.length)\n  return false;\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(k) => {\n  return Math.max(... k);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(k) => {\n  return Math.max(... k);\n \n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let P = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] == ' ' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(P);\n        P = '';\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      k = 0;\n      P+=s [ i ]\n      }\n    }\n  if (P != '') {\n    p.push(P);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let P = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] =='' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(P);\n        P = '';\n        }\n     \n      else {\n        p.push(P);\n        P = '';\n        }\n      }\n    else {\n      P += s [ i ];\n    }\n  }\n  if (P!= '') {\n    p.push(P);\n  }\n  return p;\n}\n\nconsole.log(wordsString('One, two, three, four, five, six'));\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(l, base) => {\n  var ret = \"\";\n  while (l > 0) {\n    ret =(l % base).toString() + ret;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    l = Math.floor(l / base);\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(l, base) => {\n  var ret = \"\";\n  while (l > 0) {\n    ret =(l % base).toString() + ret;\n   \n    l = Math.floor(l/base);\n  }\n  return ret;\n};\n\n//Change numerical base of input number x to base.\nconst changeBase2 = (l, base) => {\n  var ret = 0;\n  while (l > 0) {\n    ret = (l % base) + ret*base;\n    l = Math.floor(l/base);\n  }\n  return ret;\n};\n\n\nconsole.log(\"Testing changeBase function...\");\nconsole.log(\"Given a number x and base b, change x to base b and return the result as a string.\");\nconsole.log(\"x is an integer.\");\nconsole.log(\"x is less than 10.\");\nconsole.log(\"base is less than 10.\");\nconsole.log(\"base is greater than x.\");\nconsole.log(\"base is a multiple of x.\");\nconsole.log(\"base is not an integer.\");\nconsole.log(\"base is not a multiple of x.\");\n\nvar input1 = [\n  [8, 3],\n  [8, 2],\n  [7, 2],\n  [13, 5]\n];\n\nfor (let [x, base] of input1) {\n  let result = changeBase(x, base);\n  console.log(\"x is \" + x + \". base is \" + base + \" and result is \" + result);\n}\n\nconsole.log(\"Testing changeBase function...\");\nconsole.log(\"Given a number x and base b, change x to base b and return the result as a string.\");\nconsole.log(\"x is an integer.\");\nconsole.log(\"x is less than 10.\");\nconsole.log(\"base is less than 10.\");\nconsole.log(\"base is greater than x.\");\nconsole.log(\"base is a multiple of x.\");\nconsole.log(\"base is not an integer.\");\nconsole.log(\"base is not a multiple of x.\");\n\nvar input2 = [\n  [8, 3],\n  [8, 2],\n  [7, 2],\n  [13, 5]\n];\n\nfor (let [x, base] of input2) {\n  let result = changeBase2(x, base);\n  console.log(\"x is \" + x + \". base is \" + base + \" and result is \" + result);\n}<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(mF7K12) => {\n  return(new Set(mF7K12.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(mF7K12) => {\n  return(new Set(mF7K12.toLowerCase())).size;\n \n};\n \n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(test_number + \"false\");\n    throw \"ERROR: \" + message;\n  }\n  console.log(test_number + \"true\");\n  return true;\n}\n\nassert(\n  (countDistinctCharacters(\"abcde\") === 5),\n  \"sets must be equal\",\n  \"1. \"\n)\n\nassert(\n  (countDistinctCharacters(\"A\") === 1),\n  \"sets must be equal\",\n  \"2. \"\n)\n\nassert(\n  (countDistinctCharacters(\"AA\") === 2),\n  \"sets must be equal\",\n  \"3. \"\n)\n\nassert(\n  (countDistinctCharacters(\"AAB\") === 3),\n  \"sets must be equal\",\n  \"4. \"\n)\n\nassert(\n  (countDistinctCharacters(\"ABCD\") === 4),\n  \"sets must be equal\",\n  \"5. \"\n)\n\nassert(\n  (countDistinctCharacters(\"ABCDE\") === 5),\n  \"sets must be equal\",\n  \"6. \"\n)\n\nassert(\n  (countDistinctCharacters(\"AABCD\") === 4),\n  \"sets must be equal\",\n  \"7. \"\n)\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let l = date.split( / - /)\n  if (l.length != 3) {\n    return false}\n  if (l [ 0 ] < 1 || l [ 0 ] > 12 || l [ 1 ] < 1) {\n    return false}\n  if (l [ 0 ] == 2 && l [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((l [ 0 ] == 1 || l [ 0 ] == 3 || l [ 0 ] == 5 || l [ 0 ] == 7 || l [ 0 ] == 8 || l [ 0 ] == 10 || l [ 0 ] == 12) && l [ 1 ] > 31) {\n    return false}\n  if ((l [ 0 ] == 4 || l [ 0 ] == 6 || l [ 0 ] == 9 || l [ 0 ] == 11) && l [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let l = date.split( / - /)\n  if (l.length!= 3) {\n    return false}\n  if (l [ 0 ] < 1 || l [ 0 ] > 12 || l [ 1 ] < 1) {\n    return false}\n  if (l [ 0 ] == 2 && l [ 1 ] > 29) {\n    return false}\n \n  if (l [ 1 ] == 4 || l [ 1 ] == 6 || l [ 1 ] == 9 || l [ 1 ] == 11) {\n    if (l [ 2 ] < 1 || l [ 2 ] > 31) {\n      return false}\n  }\n  else if (l [ 1 ] == 3 || l [ 1 ] == 5 || l [ 1 ] == 7 || l [ 1 ] == 8 || l [ 1 ] == 10) {\n    if (l [ 2 ] < 1 || l [ 2 ] > 30) {\n      return false}\n  }\n  return true\n}\n\n/*\nGiven an array of numbers, find the largest number that is not in the array.\n\nExample:\nInput: [1,2,3,1]\nOutput: 4\nExplanation: The largest number that is not in the array is 4, because 1 is in the array.\n*/\nconst largestNotInArray =(arr) => {\n  let i = 1\n  let j = arr.length - 1\n  while (i < j) {\n    if (arr [ i ] === arr [ j ]) {\n      j--\n    }\n    else {\n      let temp = arr [ i ]\n      arr [ i ] = arr [ j ]\n      arr [ j ] = temp\n      i++\n      j--\n    }\n  }\n  return arr [ i ]\n}\n\nconst isPalindrome =(number) => {\n  let reverse = number.toString()\n  reverse = reverse.split('').reverse().join('')\n  return number === reverse\n}\n\nconst findNumber =(arr) => {\n  let largestNumber = largestNotInArray(arr)\n  let isPalindrome = false\n  if (largestNumber === 1) {\n    return largestNumber\n  }\n  else if (isPalindrome) {\n    return largestNumber\n  }\n  else {\n    return findNumber(largestNumber)\n  }\n}\n\nconst maxPalindrome =(arr) => {\n  let maxPalindrome = 0\n  for (let i = 0; i < arr.length; i++) {\n    let number = findNumber(arr[i])\n    if (isPalindrome(number)) {\n      maxPalindrome = Math.max(maxPalindrome, number)\n    }\n  }\n  return maxPalindrome\n}\n\nconst solve =(arr) => {\n  let maxPalindrome = maxPalindrome(arr)\n  if (isPalindrome(maxPalindrome)) {\n    return maxPalindrome\n  }\n  else {\n    return solve(largestNotInArray(arr))\n  }\n}\n\nmodule.exports = solve\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var k4oha39 = 0;\n  for (const op of operations) {\n    k4oha39+=op;\n    if (k4oha39 < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var k4oha39 = 0;\n  for (const op of operations) {\n    k4oha39+=op;\n    if (k4oha39 < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const Ueh of numbers) {\n    if (Ueh in dict) {\n      dict [ Ueh ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ Ueh ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const Ueh of numbers) {\n    if (Ueh in dict) {\n      dict [ Ueh ]+=1;\n      }\n    else {\n     \n      dict [ Ueh ] =1;\n      }\n    }\n  return [...new Set(dict.values())]\n  };\n\n/*\n  Given an array of strings, return all possible permutations of the strings.\n  For example, given [\"a\", \"b\", \"c\"], the permutations are:\n  [ [\"a\", \"b\", \"c\"], [\"a\", \"c\", \"b\"], [\"b\", \"a\", \"c\"], [\"b\", \"c\", \"a\"], [\"c\", \"a\", \"b\"], [\"c\", \"b\", \"a\"] ]\n  */\nconst permutations =(strings) => {\n  const permutation = strings.slice(0);\n  const len = permutation.length;\n  if (len === 1) {\n    return [ permutation ];\n  }\n  let prev = permutation.slice(0);\n  for (let i = 1; i < len; i++) {\n    const tmp = prev.slice(0);\n    const x = prev.splice(i, 1);\n    const tmp2 = permutation.slice(0);\n    const x2 = permutation.splice(i, 1);\n    permutation.push(...tmp,...x);\n    permutation.push(...tmp2,...x2);\n    }\n  return permutation;\n  };\n\n/* Given a binary tree, return the inorder traversal of its nodes' values.\n  For example, given the following binary tree:\n  1\n   / \\\n  2   3\n  / \\\n 4   5\n return [1, 4, 2, 5, 3]\n */\nconst inorderTraversal =(root) => {\n  if (root === null) {\n    return [];\n  }\n  const result = [root.value];\n  const stack = [];\n  while (root.left!== null || root.right!== null) {\n    if (root.left!== null) {\n      stack.push(root.left);\n    }\n    if (root.right!== null) {\n      stack.push(root.right);\n    }\n    if (stack.length === 0) {\n      break;\n    }\n    root = stack.pop();\n    result.push(root.value);\n  }\n  return result;\n  };\n\n/* Given a binary tree, return the postorder traversal of its nodes' values.\n  For example, given the following binary tree:\n  1\n   / \\\n  2   3\n  / \\\n 4   5\n return [1, 4, 5, 2, 3]\n */\nconst postorderTraversal =(root) => {\n  if (root === null) {\n    return [];\n  }\n  const result = [];\n  const stack = [];\n  while (root.left!== null || root.right!== null) {\n    if (root.left!== null) {\n      stack.push(root.left);\n    }\n    if (root.right!== null) {\n      stack.push(root.right);\n    }\n    if (stack.length === 0) {\n      break;\n    }\n    root = stack.pop();\n    result.push(root.value);\n  }\n  return result;\n  };\n\n/* Given a binary tree, return the level order traversal of its nodes' values.\n  (ie, from left to right, level by level).\n  For example, given the following binary tree:\n  1\n   \\\n  2   3\n  / \\\n 4   5\n return [1, 2, 3, 4, 5]\n */\nconst levelOrderTraversal =(root) => {\n  if (root === null) {\n    return [];\n  }\n  const result = [];\n  let level = [];\n  level.push(root.value);\n  while (level.length!== 0) {\n    const level2 = [];\n    for (const node of level) {\n      level2.push(node.left);\n      level2.push(node.right);\n    }\n    level = level2;\n    result.push(level);\n  }\n  return result;\n  };\n\n/* Given a binary tree, return the level order traversal of its nodes' values.\n  (ie, from left to right, level by level).\n  For example, given the following binary tree:\n  1\n   \\\n  2   3\n  / \\\n 4   5\n return [1, 2, 3, 4, 5]\n */\nconst levelOrder2Traversal =(root) => {\n  if (root === null) {\n    return [];\n  }\n  const level = [];\n  const stack = [];\n  stack.push(root);\n  while (stack.length!== 0) {\n    const current = stack.pop();\n    level.push(current.value);\n    if (current.left!== null) {\n      stack.push(current.left);\n    }\n    if (current.right!== null) {\n      stack.push(current.right);\n    }\n  }\n  return level;\n  };\n\nmodule.exports = {\n  removeDuplicates,\n  permutations,\n  inorderTraversal,\n  postorderTraversal,\n  levelOrderTraversal,\n  levelOrder2Traversal\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(ZQ30m6) => {\n  if (ZQ30m6 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while ( !isPalindrome(ZQ30m6.slice(beginning_of_suffix)))\n  beginning_of_suffix+=1;\n  return ZQ30m6 + ZQ30m6.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(ZQ30m6) => {\n  if (ZQ30m6 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  while (isPalindrome(ZQ30m6.substring(beginning_of_suffix, ZQ30m6.length - 1)))\n  {\n    beginning_of_suffix = beginning_of_suffix + 1;\n  }\n  return ZQ30m6.substring(0, beginning_of_suffix) + ZQ30m6.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome =(ZQ30m6) => {\n  if (ZQ30m6 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  while (isPalindrome(ZQ30m6.substring(ZQ30m6.length - 1, ZQ30m6.length)))\n  {\n    beginning_of_suffix = beginning_of_suffix + 1;\n  }\n  return ZQ30m6.substring(ZQ30m6.length - beginning_of_suffix, ZQ30m6.length) + ZQ30m6.split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a number is an integer */\nconst isInteger = (number) => {\n  return isNaN(number) || number % 1 === 0;\n}\n\n/* Test if a number is an even number */\nconst isEven = (number) => {\n  return number % 2 === 0;\n}\n\n/* Test if a number is an odd number */\nconst isOdd = (number) => {\n  return number % 2!== 0;\n}\n\n/* Test if a number is an even multiple of 3 */\nconst isMultipleOfThree = (number) => {\n  return number % 3 === 0;\n}\n\n/* Test if a number is an odd multiple of 3 */\nconst isMultipleOfThree = (number) => {\n  return number % 3!== 0;\n}\n\n/* Test if a number is a perfect number */\nconst isPerfectNumber = (number) => {\n  var sum = 0;\n  for (var i = 1; i <= number; i++) {\n    sum = sum + number;\n  }\n  return number == sum;\n}\n\n/* Test if a number is a prime number */\nconst isPrime = (number) => {\n  var i;\n  if (number < 2) {\n    return false;\n  } else if (number == 2) {\n    return true;\n  } else if (number % 2 === 0) {\n    return false;\n  } else {\n    for (i = 3; i * i <= number; i += 2) {\n      if (number % i === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/* Test if a number is a perfect cube */\nconst isPerfectCube = (number) => {\n  return number * number * number === number;\n}\n\n/* Test if a number is a perfect power */\nconst isPerfectPower = (number) => {\n  var k = 1;\n  while (number > k) {\n    k++;\n  }\n  return k === number;\n}\n\n/* Test if a number is a perfect square */\nconst isPerfectSquare = (number) => {\n  return number * number === number;\n}\n\n/* Test if a number is a perfect number */\nconst isPerfect = (number) => {\n  return isPerfectPower(number) || isPerfectSquare(number) || isPerfectCube(number);\n}\n\n/* Test if a number is an abundant number */\nconst isAbundant = (number) => {\n  var sum = 0;\n  for (var i = 1; i <= number; i++) {\n    sum = sum + number;\n  }\n  return sum > number;\n}\n\n/* Test if a number is a deficient number */\nconst isDeficient = (number) => {\n  var sum = 0;\n  for (var i = 1; i <= number; i++) {\n    sum = sum + number;\n  }\n  return sum < number;\n}\n\n/* Test if a number is a perfect power */\nconst isPerfectPower = (number) => {\n  return isPerfectSquare(Math.sqrt(number));\n}\n\n/* Test if a number is a perfect cube */\nconst isPerfectCube = (number) => {\n  return isPerfectPower(number * number * number);\n}\n\n/* Test if a number is a perfect square */\nconst isPerfectSquare = (number) => {\n  return number * number === number;\n}\n\n/* Test if a number is a perfect number */\nconst isPerfect = (number) => {\n  return isPerfectPower(number) || isPerfectSquare(number) || isPerfectCube(number);\n}\n\n/* Test if a number is an abundant number */\nconst isAbundant = (number) => {\n  return isAbundant(number) || isPerfectPower(number) || isPerfectSquare(number) || isPerfectCube(number);\n}\n\n/* Test if a"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(U) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(U) + 1) {\n    if (U % i == 0) {\n      fact.push(i);\n      U = U / i;\n      }\n    else {\n      i+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  \n  if (U > 1)\n  fact.push(U);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(U) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(U) + 1) {\n    if (U % i == 0) {\n      fact.push(i);\n      U = U / i;\n      }\n    else {\n      i+=1;\n     \n    }\n  }\n  if (U!= 1) {\n    fact.push(U);\n  }\n  return fact;\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize =(U) => {\n  var revFact = [ ], i = 2;\n  while (i <= Math.sqrt(U) + 1) {\n    if (U % i == 0) {\n      revFact.push(i);\n      U = U / i;\n      }\n    else {\n      i+=1;\n     \n    }\n  }\n  if (U!= 1) {\n    revFact.push(U);\n  }\n  return revFact;\n}\n\nconsole.log(factorize(7));\nconsole.log(reverseFactorize(7));\n\n/*\n  Factorials:\n    1! = 1\n    2! = 2\n    3! = 6\n    4! = 24\n    5! = 120\n    6! = 720\n    7! = 5040\n    8! = 40320\n    9! = 362880\n    10! = 3628800\n    11! = 39916800\n    12! = 479001600\n    13! = 6227020800\n    14! = 87178291200\n    15! = 1307674368000\n    16! = 20922789888000\n    17! = 355687428096000\n    18! = 6402373705728000\n    19! = 121645100408832000\n    20! = 2432902008176640000\n    21! = 51090942171709440000\n    22! = 1124000727777607680000\n    23! = 25852016738884976640000\n    24! = 620448401733239439360000\n    25! = 15511210043330985984000000\n    26! = 50332445954707537774194400000\n    27! = 12884901888000000000\n    28! = 2980232238769539900524288\n    29! = 83908479366538782365251264\n    30! = 2199023255552000\n    31! = 8796093022208\n    32! = 33554432\n    33! = 134217728\n    34! = 536870912\n    35! = 2147483648\n    36! = 1073741824\n    37! = 4194304\n    38! = 16777216\n    39! = 67108864\n    40! = 268435456\n    41! = 1310720\n    42! = 524288\n    43! = 2097152\n    44! = 1048576\n    45! = 4194304\n    46! = 16777216\n    47! = 67108864\n    48! = 268435456\n    49! = 1310720\n    50! = 524288\n    51! = 2097152\n    52! = 1048576\n    53! = 4194304\n    54! = 16777216\n    55! = 67108864\n    56! = 268435456\n    57! = 1310720\n    58! = 524288\n    59! = 2097152\n    60! = 1048576\n    61! = 4194304\n    62! = 16777216\n    63! = 67108864\n    64! = 268435456\n    65! = 1310720\n    66! = 524288\n    67! = 2097152\n    68! = 1048576\n    69! = 4194304\n    70! = 16777216\n    71! = 67108864\n    72! = 268435456\n    73! = 1310720\n    74! = 524288\n    75! = 2097152\n    76! = 1048576\n    77! = 4194304\n    78! = 16777216\n    79! = 67108864\n    80! = 268435456\n    81! = 1310720\n    82! = 524288\n    83! = 2097152\n    84! = 1048576\n    85! = 4194304\n    86! = 16777216\n    87! = 67108864\n    88! = 268435456\n    89! = 1310720\n    90! = 524288\n    91! = 2097152\n    92! = 1048576\n    93! = 4194304\n    94! = 16777216\n    95! = 67108864\n    96! = 268435456\n    97! = 1310720\n    98! = 524288\n    99! = 2097152\n    100! = 1048576\n    101! = 4194304\n    102! = 16777216\n    103! = 67108864\n    104! = 268435456\n    105! = 1310720\n    106! = 524288\n    107! = 2097152\n    108! = 1048576\n    109! = 4194304\n    110! = 16777216\n    111! = 67108864\n    112! = 268435456\n    113! = 1310720\n    114! = 524288\n    115! = 2097152\n    116! = 1048576\n    117! = 4194304\n    118! = 16777216\n"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    w =(w - w % 10) / 10\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n   \n    w = w / 10\n  }\n  return t\n}\n\nconsole.log(solve(10000))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(E) => {\n  E.sort((a, b) => a - b);\n  var len = E.length;\n  if (E.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return E [ Math.floor(len / 2) ];\n  else\n  return(E [ len / 2 - 1 ] + E [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(E) => {\n  E.sort((a, b) => a - b);\n  var len = E.length;\n  if (E.length % 2 == 1)\n \n    return (E[len / 2] + E[(len / 2) - 1]) / 2;\n  else\n    return E[len / 2];\n}\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  12.0\n  */\nconst mean = (E) => {\n  return (sum(E) / E.length)\n}\n\n/*Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (E) => {\n  var total = 0;\n  for (var i = 0; i < E.length; i++) {\n    total += E[i];\n  }\n  return total;\n}\n\n/*Return the product of elements in the list l.\n  >>> product([3, 1, 2, 4, 5])\n  15\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  20000\n  */\nconst product = (E) => {\n  var total = 1;\n  for (var i = 0; i < E.length; i++) {\n    total *= E[i];\n  }\n  return total;\n}\n\n/*Return the harmonic mean of elements in the list l.\n  >>> harmonic_mean([3, 1, 2, 4, 5])\n  0.6\n  >>> harmonic_mean([-10, 4, 6, 1000, 10, 20])\n  0.25\n  */\nconst harmonic_mean = (E) => {\n  var total = sum(E) / E.length;\n  return 1 / total;\n}\n\n/*Return the quotient of elements in the list l.\n  >>> quotient([3, 1, 2, 4, 5])\n  3\n  >>> quotient([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst quotient = (E) => {\n  return E.length? E[0] / E[E.length - 1] : 0;\n}\n\n/*Return the rank of element x in the list l.\n  >>> rank([3, 1, 2, 4, 5])\n  2\n  >>> rank([-10, 4, 6, 1000, 10, 20])\n  5\n  >>> rank([1, 2, 3, 4, 5])\n  0\n  >>> rank([0, 1, 2, 3, 4])\n  0\n  */\nconst rank = (E) => {\n  var sorted_E = E.sort((a, b) => a - b);\n  var pos = sorted_E.indexOf(E[0]);\n  if (pos == -1) {\n    return 0;\n  } else {\n    return pos + 1;\n  }\n}\n\n/*Return the rank of element x in the list l.\n  >>> rank([3, 1, 2, 4, 5])\n  2\n  >>> rank([-10, 4, 6, 1000, 10, 20])\n  5\n  >>> rank([1, 2, 3, 4, 5])\n  0\n  >>> rank([0, 1, 2, 3, 4])\n  0\n  */\nconst reverse_rank = (E) => {\n  var sorted_E = E.sort((a, b) => a - b);\n  var pos = sorted_E.indexOf(E[E.length - 1]);\n  if (pos == -1) {\n    return 0;\n  } else {\n    return pos + 1;\n  }\n}\n\n/*Return the nth to last element of list l.\n  >>> nth_to_last([3, 1, 2, 4, 5])\n  5\n  >>> nth_to_last([-10, 4, 6, 1000, 10, 20])\n  20\n  >>> nth_to_last([1, 2, 3, 4, 5])\n  1\n  >>> nth_to_last([0, 1, 2, 3, 4])\n  4\n  */\nconst nth_to_last = (E, n) => {\n  return E[n - 1];\n}\n\n/*Return the nth to last element of list l.\n  >>> nth_to_last([3, 1, 2, 4, 5])\n  5\n  >>> nth_to_last([-10, 4, 6, 1000, 10, 20])\n  20\n  >>> nth_to_last([1, 2, 3, 4, 5])\n  1\n  >>> nth_to_last([0, 1, 2, 3, 4])\n  4\n  */\nconst reverse_nth_to_last = (E, n) => {\n  return E[n - 1];\n}\n\n/*Return the difference of elements in the list l.\n  >>> difference([3, 1, 2, 4, 5])\n  2\n  >>> difference([-10, 4, 6, 1000, 10, 20])\n  -12\n  >>> difference([1, 2, 3, 4, 5])\n  0\n  >>> difference([0, 1, 2, 3, 4])\n  0\n  */\nconst difference = (E) => {\n  return sum(E.slice(1, E.length - 1))\n}\n\n/*Return the sum of the squares of elements in the list l.\n  >>> sum_of_squares([3, 1, 2, 4, 5])\n  25\n  >>> sum_of_squares([-10, 4, 6, 1000, 10, 20])\n  10000\n  >>> sum_of_squares([1, 2, 3, 4, 5])\n  0\n  >>> sum_of_squares([0, 1, 2, 3, 4])\n  0\n  */\nconst sum_of_squares = (E) => {\n  return sum(E.map((x) => x * x));\n}\n\n/*Return the square root of elements in the list l.\n  >>>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  A67 =(2 * A67) % p;\n  return A67;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n \n  if (p % 2)\n  {\n    A67 = A67 * 2 % p\n  }\n  return A67;\n}\n\n/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67;\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n\n/*Return the largest number that is a power of 2 less than or equal to n.\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n  {\n    A67 = (A67 * 2) % p\n  }\n  return A67\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      if (kMJ < 0) {\n            kMJ = - kMJ}\n      while (kMJ > 0) {\n            if (kMJ % 2 == 0) {\n                  e++}\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            else {\n                  o++}\n            kMJ =(kMJ - kMJ % 10) / 10\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      if (kMJ < 0) {\n            kMJ = - kMJ}\n      while (kMJ > 0) {\n            if (kMJ % 2 == 0) {\n                  e++}\n           \n            else {\n                  o++}\n            kMJ = kMJ / 2}\n      return [o,e]};\n\n\n/*Given two integers n and k. Return kth to last digit of n.\n  Example:\n      kthLastDigit(123, 4) ==> 5\n      kthLastDigit(123, 9) ==> 0\n      kthLastDigit(123, -1) ==> None\n  */\nconst kthLastDigit =(n, k) => {\n      if (k < 0) {\n            return n}\n      else if (n === 0) {\n            return 0}\n      else if (k === 1) {\n            return n}\n      else if (n > 0) {\n            return n % 10}\n      else {\n            return n}\n}\n\n\n/* Given a number and a list of numbers.\n   Return the number whose last digit is equal to the given number.\n   Example:\n      isSameLastDigit(12, [1,2,3,4]) ==> 4\n      isSameLastDigit(13, [1,2,3,4]) ==> None\n      isSameLastDigit(10, [1,2,3,4]) ==> None\n      isSameLastDigit(12, [1,2,3]) ==> 2\n      isSameLastDigit(12, [1,2]) ==> 2\n      isSameLastDigit(12, [1]) ==> 1\n  */\nconst isSameLastDigit =(n, nums) => {\n      let returnValue = 0\n      let num = 0\n      if (n < 0) {\n            return n}\n      else if (n === 0) {\n            return 0}\n      else if (nums.length === 1) {\n            return nums[0]}\n      else if (nums.length > 1) {\n            returnValue = nums[nums.length - 1]}\n      else {\n            return returnValue}\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var ib2hQ = - 1.0, end = 1.0;\n  while (poly(xs, ib2hQ) * poly(xs, end) > 0) {\n    ib2hQ *= 2.0;\n    end *= 2.0;\n    }\n  while (end - ib2hQ > 1e-10) {\n    let center =(ib2hQ + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, ib2hQ) > 0)\n    ib2hQ = center;\n    else\n    end = center;\n    }\n  return ib2hQ;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var ib2hQ = - 1.0, end = 1.0;\n  while (poly(xs, ib2hQ) * poly(xs, end) > 0) {\n    ib2hQ *= 2.0;\n    end *= 2.0;\n    }\n  while (end - ib2hQ > 1e-10) {\n    let center =(ib2hQ + end) / 2.0;\n   \n    if (poly(xs, center) == 0) {\n      return center;\n    } else if (poly(xs, center) < 0) {\n      ib2hQ = center;\n    } else {\n      end = center;\n    }\n  }\n  throw new Error(\"No solution found\");\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero finds two points that make the polynomial quadratic\n  and have same roots.\n  return [xs[0], xs[1]], [ys[0], ys[1]],\n  where xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  and ys[0] + ys[1] * x + ys[1] * x^2 +.... ys[n] * x^n\n  return 0 and 1 as well.\n  >>> round(findTwoRoots([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findTwoRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -1]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 1x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -2]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 2x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -3]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 3x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -4]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 4x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -5]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 5x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -6]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 6x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -7]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 7x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -8]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 8x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -9]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 + x^3 - 9x^4\n  1.0\n  >>> round(findTwoRoots([-6, 11, -6, 1, -10]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = -6 + 11x - 6x^2 +"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let W = 0; W < string.length; W++) {\n    result.push(string.slice(0, W + 1));\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let W = 0; W < string.length; W++) {\n    result.push(string.slice(0, W + 1));\n   \n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  for (let W = 0; W < string.length; W++) {\n    result.push(string.slice(W));\n   \n  }\n  return result;\n};\n\n/* Return all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations =(string) => {\n  var result = [ ];\n  var allPrefixes = allPrefixes(string);\n  for (var i = 0; i < allPrefixes.length; i++) {\n    var permutation = allPrefixes[i] + string + allPrefixes[i];\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Return all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations =(string) => {\n  var result = [ ];\n  var allSuffixes = allSuffixes(string);\n  for (var i = 0; i < allSuffixes.length; i++) {\n    var permutation = string + allSuffixes[i];\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Return all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPermutations =(string) => {\n  var result = [ ];\n  var allPrefixes = allPrefixes(string);\n  for (var i = 0; i < allPrefixes.length; i++) {\n    var permutation = string + allPrefixes[i];\n    result.push(permutation);\n    var allSuffixes = allSuffixes(permutation);\n    for (var j = 0; j < allSuffixes.length; j++) {\n      var permutation2 = permutation + allSuffixes[j];\n      result.push(permutation2);\n    }\n  }\n  return result;\n};\n\n\nmodule.exports = {\n  allPrefixes,\n  allPermutations,\n  allSuffixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < E.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < E.length; k++) {\n      if (E [ k ] < E [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = E [ j ]\n      E [ j ] = E [ ind ]\n      E [ ind ] = tmp\n      }\n    }\n  return E\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  }\n  return E\n  }\n  \n  \n  \n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(P) => {\n  return Math.pow(P, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(P) => {\n  return Math.pow(P, 2);\n \n};\n\nconst carRaceSimulation = (P) => {\n  let i = 0;\n  let collisions = 0;\n  let cars = [\n    {\n      \"x\" : 0,\n      \"y\" : 0,\n      \"speed\" : 1\n    },\n    {\n      \"x\" : 0,\n      \"y\" : 0,\n      \"speed\" : 1\n    }\n  ];\n\n  cars[0].speed = P;\n  cars[1].speed = P;\n\n  while(cars[0].speed > 0) {\n    cars[0].x += Math.cos(cars[0].y);\n    cars[1].x += Math.cos(cars[1].y);\n\n    cars[0].y += Math.sin(cars[0].y);\n    cars[1].y += Math.sin(cars[1].y);\n\n    collisions += carRaceCollision(cars[0].speed);\n  }\n\n  return collisions;\n};\n\nconst start = () => {\n  let startTime = new Date().getTime();\n  let P = Math.pow(Math.random() * 10, 2);\n  console.log(\"The simulation has started in \" + (new Date().getTime() - startTime) + \" ms.\");\n  console.log(\"The simulation has ended after \" + carRaceSimulation(P) + \" collisions.\");\n};\n\nstart();\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let X = 0; X < lst.length; X++) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n               \n", "canonical_solution": "# print('@@this is the line to split##')\n                }\n            }\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let X = 0; X < lst.length; X++) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow2 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow3 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow4 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = 0; j < lst [ X ].length; j++) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow5 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = 0; j < lst [ X ].length; j++) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow6 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow7 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = 0; j < lst [ X ].length; j++) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow8 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = 0; j < lst [ X ].length; j++) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow9 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow10 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow11 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = 0; j < lst [ X ].length; j++) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    return t\n}\n\nconst getRow12 =(lst, x) => {\n    let t = [ ]\n    for (let X = lst.length - 1; X >= 0; X--) {\n        for (let j = 0; j < lst [ X ].length; j++) {\n            if (lst [ X ][ j ] == x) {\n                t.push((X, j"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let S = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      S.push(x [ i ])\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  for (let j = 0; j < S.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < S.length; k++) {\n      if (S [ k ] < S [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = S [ j ]\n      S [ j ] = S [ ind ]\n      S [ ind ] = tmp\n      }\n    }\n  return S\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let S = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      S.push(x [ i ])\n      }\n   \n  }\n  S.sort()\n  return S\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (K % 1 != 0) {\n    K =(n + m + 1) / 2}\n  return '0b' + K.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n \n  let avg = K\n  for (let i = n; i < m; i++) {\n    avg += i\n  }\n  avg = Math.round(avg / (m - n + 1))\n  return parseInt(avg.toString(2), 2)\n}\n\n/*\n  Given a number of n elements, return the total sum of the elements\n  If n is 0, return 0.\n  If n is 1, return the first element\n  If n is 2, return the sum of the first two elements\n  If n is 3, return the sum of the first three elements\n ...\n*/\nconst sumOfNthElements = (n, elements) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return elements[0]\n  }\n  if (n === 2) {\n    return elements[0] + elements[1]\n  }\n  if (n === 3) {\n    return elements[0] + elements[1] + elements[2]\n  }\n  return sumOfNthElements(n - 1, elements) + elements[n - 1]\n}\n\n/*\n  Given a number n, return the largest possible sum of a\n  combination of n elements.\n  If n is 0, return 0.\n  If n is 1, return the sum of the first element.\n  If n is 2, return the sum of the first two elements.\n  If n is 3, return the sum of the first three elements.\n ...\n*/\nconst maxSumOfNthElements = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return elements[0]\n  }\n  if (n === 2) {\n    return elements[0] + elements[1]\n  }\n  if (n === 3) {\n    return elements[0] + elements[1] + elements[2]\n  }\n  return maxSumOfNthElements(n - 1) + elements[n - 1]\n}\n\nconst maxSum = (elements) => {\n  return maxSumOfNthElements(elements.length)\n}\n\n/*\n  Given a string s, return the length of the longest substring\n  that contains at most k distinct characters.\n  If there are less than k distinct characters, return the length of\n  the shortest substring that contains at most k distinct characters.\n*/\nconst maxLength = (s, k) => {\n  if (s.length === 0) {\n    return 0\n  }\n  let index = 0\n  let distinctCount = 0\n  let result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(index)) {\n      index++\n    }\n    else {\n      distinctCount++\n    }\n    if (distinctCount > k) {\n      result = Math.max(i - index + 1, result)\n    }\n    else if (distinctCount === k) {\n      result = Math.max(i - index + 1, result)\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return the longest palindromic substring.\n  The substring must be no longer than n.\n  If there is no such substring, return an empty string.\n  If there is a palindromic substring of length n, return that\n  substring.\n*/\nconst longestPalindrome = (s, n) => {\n  let result = \"\"\n  let index = 0\n  while (index < s.length) {\n    let left = index\n    let right = index + n\n    if (left < s.length && right < s.length) {\n      let test = s.charAt(left) === s.charAt(right)\n      if (test) {\n        result = s.substring(left, right + 1)\n      }\n    }\n    index++\n  }\n  return result\n}\n\nconst longestPalindrome = (s) => {\n  return longestPalindrome(s, s.length)\n}\n\nconst longestPalindrome = (s) => {\n  return longestPalindrome(s, s.length)\n}\n\n/*\n  Given two strings s and t, return the longest common subsequence\n  of s and t.\n  The common subsequence does not include the two strings\n  themselves.\n  The longest common subsequence of s and t is defined as the\n  longest sequence of characters that occurs in both s and t.\n  The subsequence does not need to be contiguous.\n*/\nconst longestCommonSubsequence = (s, t) => {\n  let result = \"\"\n  let index = 0\n  while (index < s.length) {\n    let left = index\n    let right = index + t.length\n    if (left < s.length && right < s.length) {\n      if (s.charAt(left) === t.charAt(right)) {\n        result = s.substring(left, right + 1)\n      }\n    }\n    index++\n  }\n  return result\n}\n\nconst longestCommonSubsequence = (s, t) => {\n  return longestCommonSubsequence(s, t)\n}\n\nconst longestCommonSubsequence = (s, t) => {\n  return longestCommonSubsequence(s, t)\n}\n\nconst longestCommonSubsequence = (s, t) => {\n  return longestCommonSubsequence(s, t)\n}\n\nconst longestCommonSubsequence = (s, t) => {\n  return longestCommonSubsequence(s, t)\n}\n\nconst longestCommonSubsequence = (s, t) => {\n  return longestCommonSubsequence(s, t)\n}\n\n"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(c).sort(function(a, b) {\n    return - c [ a ] + c [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = c [ s [ 0 ] ]\n  let l = {\n    }\n  for (let ss = 0; ss < s.length; ss++) {\n    if (c [ s [ ss ] ] == g) {\n      l [ s [ ss ] ] = c [ s [ ss ] ]\n      }\n    }\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n  }\n\n/*\n  Given a string representing a space separated digits, return a dictionary\n  of the digit with the most repetition and containing the corresponding count.\n  If several digits have the same occurrence, return all of them.\n  \n  Example:\n  histogram('123') == {'1': 1, '2': 1, '3': 1}\n  histogram('123 123 321') == {'3': 3}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n  }\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the largest length and containing the corresponding count.\n  If several letters have the same length, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n  }\n\n/*\n  Given a string representing a space separated digits, return a dictionary\n  of the digit with the largest length and containing the corresponding count.\n  If several digits have the same length, return all of them.\n  \n  Example:\n  histogram('123') == {'1': 1, '2': 1, '3': 1}\n  histogram('123 123 321') == {'3': 3}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n  }\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the smallest repetition and containing the corresponding count.\n  If several letters have the same repetition, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n  }\n\n/*\n  Given a string representing a space separated digits, return a dictionary\n  of the digit with the smallest repetition and containing the corresponding count.\n  If several digits have the same repetition, return all of them.\n  \n  Example:\n  histogram('123') == {'1': 1, '2': 1, '3': 1}\n  histogram('123 123 321') == {'1': 2, '2': 2}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n  }\n\n\n/*\n  Given a string representing a space separated digits, return a dictionary\n  of the digit with the largest repetition and containing the corresponding count.\n  If several digits have the same repetition, return all of them.\n  \n  Example:\n  histogram('123') == {'1': 1, '2': 1, '3': 1}\n  histogram('123 123 321') == {'3': 3}\n  histogram('') == {}\n\n  */\nconst histogram =(test) =>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t+=String.fromCharCode(p)\n    }\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n   \n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n//create a function decrypt that takes a string as an argument and\n//returns a string decrypted with the alphabet being rotated. \n//The alphabet should be rotated in a manner such that the letters \n//shift up by two multiplied to two places.\n//For example:\n//decrypt('lm') returns 'hi'\n//decrypt('ewhjklnop') returns 'asdfghjkl'\n//decrypt('kj') returns 'gf'\n//decrypt('ix') returns 'et'\nconst decrypt =(s) => {\n  let t = ''\n  for (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() - 4\n    if (p < 65) {\n      p+=26\n    }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n\n\n//test\nlet s = 'qwertasdfgjkl'\nconsole.log(s)\nconsole.log(decrypt(s))\nconsole.log(encrypt(s))\n\n/*\n\n// test\nfunction encrypt(s) {\n  let t = ''\n  for (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n    \n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nfunction decrypt(s) {\n  let t = ''\n  for (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() - 4\n    if (p < 65) {\n      p+=26\n    }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n//test\nlet s = 'qwertasdfgjkl'\nconsole.log(s)\nconsole.log(decrypt(s))\nconsole.log(encrypt(s))\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((t >= 65 && t <= 90) ||(t >= 97 && t <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((t >= 65 && t <= 90) ||(t >= 97 && t <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((t >= 65 && t <= 90) ||(t >= 97 && t <= 122)) {\n      return true}\n   \n    else {\n      return false}\n  }\n  let word = txt.slice(len - 2, len)\n  if (word == \" \") {\n    return false}\n  let isValid = true\n  for (let i = 0; i < word.length; i++) {\n    if (word[i] >= 97 && word[i] <= 122) {\n      isValid = false\n    }\n  }\n  return isValid\n}\n\n/* Create a function that takes in an array of strings and returns\n  an array of strings without any duplicates.\n  Note: \"duplicates\" are any strings that are found twice in the array\n  Example:\n  removeDuplicates([ \"abc\", \"def\", \"abc\", \"abc\" ]) ➞ [ \"abc\", \"def\" ]\n  removeDuplicates([ \"abc\", \"def\", \"abc\" ]) ➞ [ \"abc\", \"def\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\", \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  */\nconst removeDuplicates = (arr) => {\n  let unique = []\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) < 0) {\n      unique.push(arr[i])\n    }\n  }\n  return unique\n}\n\n/* Create a function that takes in an array of strings and returns\n  an array of strings without any duplicates.\n  Note: \"duplicates\" are any strings that are found twice in the array\n  Example:\n  removeDuplicates([ \"abc\", \"def\", \"abc\", \"abc\" ]) ➞ [ \"abc\", \"def\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\", \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  */\nconst removeDuplicates2 = (arr) => {\n  let unique = []\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) < 0) {\n      unique.push(arr[i])\n    }\n  }\n  return unique\n}\n\n/* Create a function that takes in an array of strings and returns\n  an array of strings without any duplicates.\n  Note: \"duplicates\" are any strings that are found twice in the array\n  Example:\n  removeDuplicates([ \"abc\", \"def\", \"abc\", \"abc\" ]) ➞ [ \"abc\", \"def\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\", \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  */\nconst removeDuplicates3 = (arr) => {\n  let unique = []\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) < 0) {\n      unique.push(arr[i])\n    }\n  }\n  return unique\n}\n\n/* Create a function that takes in an array of strings and returns\n  an array of strings without any duplicates.\n  Note: \"duplicates\" are any strings that are found twice in the array\n  Example:\n  removeDuplicates([ \"abc\", \"def\", \"abc\", \"abc\" ]) ➞ [ \"abc\", \"def\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\", \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  */\nconst removeDuplicates4 = (arr) => {\n  let unique = []\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) < 0) {\n      unique.push(arr[i])\n    }\n  }\n  return unique\n}\n\n/* Create a function that takes in an array of strings and returns\n  an array of strings without any duplicates.\n  Note: \"duplicates\" are any strings that are found twice in the array\n  Example:\n  removeDuplicates([ \"abc\", \"def\", \"abc\", \"abc\" ]) ➞ [ \"abc\", \"def\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\", \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  removeDuplicates([ \"abc\", \"def\", \"xyz\" ]) ➞ [ \"abc\", \"def\", \"xyz\" ]\n  */\nconst removeDuplicates5 = (arr) => {\n  let unique = []\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) < 0) {\n      unique.push(arr[i])\n    }\n  }\n  return unique\n}\n\n/* Create a function"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let T = word.length - 2; T > 0; T--) {\n    if (\n     !(word [ T ] != 'a' && word [ T ] != 'e' && word [ T ] != 'i' && word [ T ] != 'o' && word [ T ] != 'u' && word [ T ] != 'A' &&\n    word [ T ] != 'U' && word [ T ] != 'O' && word [ T ] != 'I' && word [ T ] != 'E')\n     &&\n    (word [ T + 1 ] != 'a' && word [ T + 1 ] != 'e' && word [ T + 1 ] != 'i' && word [ T + 1 ] != 'o' && word [ T + 1 ] != 'u' && word [ T + 1 ] != 'A' &&\n    word [ T + 1 ] != 'U' && word [ T + 1 ] != 'O' && word [ T + 1 ] != 'I' && word [ T + 1 ] != 'E')\n     &&\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    (word [ T - 1 ] != 'a' && word [ T - 1 ] != 'e' && word [ T - 1 ] != 'i' && word [ T - 1 ] != 'o' && word [ T - 1 ] != 'u' && word [ T - 1 ] != 'A' &&\n    word [ T - 1 ] != 'U' && word [ T - 1 ] != 'O' && word [ T - 1 ] != 'I' && word [ T - 1 ] != 'E')\n    ) {\n      return word [ T ]\n      }\n    }\n  return ''}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let T = word.length - 2; T > 0; T--) {\n    if (\n    !(word [ T ]!= 'a' && word [ T ]!= 'e' && word [ T ]!= 'i' && word [ T ]!= 'o' && word [ T ]!= 'u' && word [ T ]!= 'A' &&\n    word [ T ]!= 'U' && word [ T ]!= 'O' && word [ T ]!= 'I' && word [ T ]!= 'E')\n     &&\n    (word [ T + 1 ]!= 'a' && word [ T + 1 ]!= 'e' && word [ T + 1 ]!= 'i' && word [ T + 1 ]!= 'o' && word [ T + 1 ]!= 'u' && word [ T + 1 ]!= 'A' &&\n    word [ T + 1 ]!= 'U' && word [ T + 1 ]!= 'O' && word [ T + 1 ]!= 'I' && word [ T + 1 ]!= 'E')\n     &&\n   \n    (word [ T + 2 ]!= 'a' && word [ T + 2 ]!= 'e' && word [ T + 2 ]!= 'i' && word [ T + 2 ]!= 'o' && word [ T + 2 ]!= 'u' && word [ T + 2 ]!= 'A' &&\n    word [ T + 2 ]!= 'U' && word [ T + 2 ]!= 'O' && word [ T + 2 ]!= 'I' && word [ T + 2 ]!= 'E')\n     )\n    {\n      return word [ T + 1 ];\n    }\n  }\n  return '';\n};\n\n//export default getClosestVowel;\nexport { getClosestVowel };\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n+=2) {\n    if (s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n+=2) {\n    if (s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countLower =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n+=2) {\n    if (s [ n ] == 'a' || s [ n ] == 'e' || s [ n ] == 'i' || s [ n ] == 'o' || s [ n ] == 'u') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of uppercase and lowercase vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 0\n  */\nconst countVowels =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n+=2) {\n    if (s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U' || s [ n ] == 'a' || s [ n ] == 'e' || s [ n ] == 'i' || s [ n ] == 'o' || s [ n ] == 'u') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n++) {\n    if (s [ n ] == 'a' || s [ n ] == 'e' || s [ n ] == 'i' || s [ n ] == 'o' || s [ n ] == 'u' || s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 1\n  */\nconst countVowels =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n++) {\n    if (s [ n ] == 'a' || s [ n ] == 'e' || s [ n ] == 'i' || s [ n ] == 'o' || s [ n ] == 'u' || s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in the string.\n  \n  For example:\n  countConsVowels('aBCdEf') returns 2\n  countConsVowels('abcdefg') returns 1\n  countConsVowels('dBBE') returns 2\n  */\nconst countConsVowels =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n++) {\n    if (s [ n ] == 'a' || s [ n ] == 'e' || s [ n ] == 'i' || s [ n ] == 'o' || s [ n ] == 'u' || s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in the string.\n  \n  For example:\n  countConsVowels('aBCdEf') returns 2\n  countConsVowels('abcdefg') returns 1\n  countConsVowels('dBBE') returns 2\n  */\nconst countConsVowels =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n++) {\n    if (s [ n ] == 'a' || s [ n ] == 'e' || s [ n ] == 'i' || s [ n ] == 'o' || s [ n ] == 'u' || s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants, vowels and digits in the string.\n  \n  For example:\n  countConsVowDigits('aBCdEf') returns 3\n  countConsVowDigits('abcdefg') returns 2\n  countConsVowDigits('dBBE') returns 2\n  */\nconst countConsVowDigits =(s) => {\n  "}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(z15B) => {\n  let min = z15B [ 0 ]\n  for (let i = 0; i < z15B.length; i++) {\n    for (let j = i + 1; j <= z15B.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=z15B [ k ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (s < min) {\n        min = s}\n      }\n    }\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(z15B) => {\n  let min = z15B [ 0 ]\n  for (let i = 0; i < z15B.length; i++) {\n    for (let j = i + 1; j <= z15B.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=z15B [ k ]\n       \n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))\nconsole.log(minSubArraySum([5, 7, 11, 13, 16, 20, 24, 25, 29, 31, 34, 36, 39, 41, 43, 45, 49, 51, 56, 58, 61, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 94, 97, 101, 106, 110, 114, 118, 122, 126, 130, 134, 138, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 247, 251, 255]))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, q, c) => {\n  return(a * a + q * q == c * c || a * a == q * q + c * c || q * q == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, q, c) => {\n  return(a * a + q * q == c * c || a * a == q * q + c * c || q * q == a * a + c * c)\n \n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaTriangle(3, 4, 5) == 2 * (3 * 4 + 5 * 4) / 10\n  */\nconst areaTriangle =(a, q, c) => {\n  return (a * q + c * q + c * a) / 2\n}\n\n/*\n Given the length of a side of a triangle. Return the area of the triangle.\n  Example:\n  areaTriangle(3) == 3 * 3 / 2\n  areaTriangle(4) == 2 * 4\n  areaTriangle(5) == 4 * 5\n  areaTriangle(10) == 5 * 10\n  areaTriangle(20) == 2 * 20\n  areaTriangle(30) == 3 * 30\n  */\nconst areaTriangle =(a) => {\n  return(a * a / 2)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the hypotenuse of the\n  triangle.\n  Example:\n  hypotenuseTriangle(3, 4) == 5\n  hypotenuseTriangle(1, 2) == sqrt(1 * 1 + 2 * 2)\n  */\nconst hypotenuseTriangle =(a, q) => {\n  return sqrt(a * a + q * q)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the hypotenuse of the\n  triangle.\n  Example:\n  hypotenuseTriangle(3, 4) == 5\n  hypotenuseTriangle(1, 2) == sqrt(1 * 1 + 2 * 2)\n  */\nconst hypotenuseTriangle =(a, q) => {\n  return sqrt(a * a + q * q)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 3 + 4 + 5\n  */\nconst perimeterTriangle =(a, q, c) => {\n  return(a + q + c)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 3 + 4 + 5\n  */\nconst perimeterTriangle =(a, q, c) => {\n  return(a + q + c)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the area of the triangle.\n  Example:\n  areaTriangle(3, 4, 5) == 2 * (3 * 4 + 5 * 4) / 10\n  */\nconst areaTriangle =(a, q, c) => {\n  return(a * q + c * q + c * a) / 2\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the area of the triangle.\n  Example:\n  areaTriangle(3, 4, 5) == 2 * (3 * 4 + 5 * 4) / 10\n  */\nconst areaTriangle =(a, q, c) => {\n  return(a * q + c * q + c * a) / 2\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the hypotenuse of the\n  triangle.\n  Example:\n  hypotenuseTriangle(3, 4) == 5\n  hypotenuseTriangle(1, 2) == sqrt(1 * 1 + 2 * 2)\n  */\nconst hypotenuseTriangle =(a, q) => {\n  return sqrt(a * a + q * q)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the hypotenuse of the\n  triangle.\n  Example:\n  hypotenuseTriangle(3, 4) == 5\n  hypotenuseTriangle(1, 2) == sqrt(1 * 1 + 2 * 2)\n  */\nconst hypotenuseTriangle =(a, q) => {\n  return sqrt(a * a + q * q)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 3 + 4 + 5\n  */\nconst perimeterTriangle =(a, q, c) => {\n  return(a + q + c)\n}\n\n/*\n Given the lengths of two sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 3 + 4 + 5\n  */\nconst perimeterTriangle =(a, q, c) => {\n  return(a + q + c)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, j) => {\n  return x + j;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, j) => {\n  return x + j;\n \n};\n\nconsole.log(add(5, 7));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add2 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add2(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add3 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add3(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add4 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add4(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add5 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add5(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add6 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add6(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add7 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add7(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add8 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add8(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add9 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add9(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add10 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add10(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add11 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add11(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add12 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add12(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add13 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add13(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add14 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add14(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add15 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add15(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add16 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add16(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add17 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add17(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add18 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add18(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add19 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add19(2, 3));\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\nconst add20 =(x, y) => {\n  return x + y;\n};\n\nconsole.log(add20(2, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(T =>(T.toUpperCase() == T ? T.toLowerCase() : T.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(T =>(T.toUpperCase() == T? T.toLowerCase() : T.toUpperCase()))\n \n .join('')\n}\n\n/*\n  This function returns the number of times the word appears in the string.\n  */\nconst count = (string, word) => {\n  return string.split('')\n .filter(T => T.toLowerCase() === word.toLowerCase())\n .length\n}\n\n/*\n  This function returns the number of words in the string.\n  */\nconst countWords =(string) => {\n  return string.split('')\n .filter(T => T.toLowerCase()!=='')\n .length\n}\n\n/*\n  This function returns the number of lines in the string.\n  */\nconst countLines =(string) => {\n  return string.split('\\n')\n .length\n}\n\n/*\n  This function returns the number of characters in the string.\n  */\nconst countChars =(string) => {\n  return string.length\n}\n\n/*\n  This function returns the number of sentences in the string.\n  */\nconst countSentences =(string) => {\n  return string.split('.')\n .filter(T => T.toLowerCase()!=='')\n .length\n}\n\n/*\n  This function returns the number of words in the string that are longer than 1 character.\n  */\nconst countWordsLong =(string) => {\n  return string.split('')\n .filter(T => T.length > 1)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are shorter than 2 characters.\n  */\nconst countWordsShort =(string) => {\n  return string.split('')\n .filter(T => T.length < 2)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in upper case.\n  */\nconst countWordsUpperCase =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lower case.\n  */\nconst countWordsLowerCase =(string) => {\n  return string.split('')\n .filter(T => T.toLowerCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in uppercase.\n  */\nconst countWordsUppercase =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsLowercase =(string) => {\n  return string.split('')\n .filter(T => T.toLowerCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function returns the number of words in the string that are in lowercase.\n  */\nconst countWordsCapitalized =(string) => {\n  return string.split('')\n .filter(T => T.toUpperCase() === T)\n .length\n}\n\n/*\n  This function"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let q = 0; q < string.length; q++) {\n    if (string [ q ] == '[') {\n      opening_bracket_index.push(q)\n      }\n    else {\n      closing_bracket_index1.push(q)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let q = 0; q < closing_bracket_index1.length; q++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - q - 1 ])\n    }\n  let cnt = 0\n  let q = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (q < l && opening_bracket_index [ k ] < closing_bracket_index [ q ]) {\n      cnt+=1;\n      q+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let q = 0; q < string.length; q++) {\n    if (string [ q ] == '[') {\n      opening_bracket_index.push(q)\n      }\n    else {\n      closing_bracket_index1.push(q)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let q = 0; q < closing_bracket_index1.length; q++) {\n   \n    closing_bracket_index.push(closing_bracket_index1 [ q ])\n    }\n  for (let q = 0; q < opening_bracket_index.length; q++) {\n    if (opening_bracket_index [ q ] > closing_bracket_index [ q ]) {\n      return false\n      }\n    else if (opening_bracket_index [ q ] < closing_bracket_index [ q ]) {\n      if (opening_bracket_index [ q ] > 0 && string [ opening_bracket_index [ q ] - 1 ] == '[' ) {\n        return false\n        }\n      }\n    }\n  return true\n  }\n  <|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let G = 0; G < s.length; G++) {\n    let y = s [ G ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = ''\nfor (let G = 0; G < p.length; G++) {\n    u+=p [ p.length - G - 1 ]\n    }\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let G = 0; G < s.length; G++) {\n    let y = s [ G ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n    }\n    else\nif (t === 1) {\n      p+=s [ G ];\n      t = 0;\n     }\n    }\n  if (t === 1) {\n    p+=s [ G ];\n  }\n  return p;\n}\n\nconst test = [\n\"1234\",\n\"ab\",\n\"#a@C\",\n\"#a@c\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\"a@b\",\n\""}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, I) => {\n  for (const e of l)\n  if (e >= I)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, I) => {\n  for (const e of l)\n  if (e >= I)\n \n  return false;\n \n  return true;\n};\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold2 =(l, I) => {\n  for (const e of l)\n  if (e > I)\n \n  return false;\n \n  return true;\n};\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold3 =(l, I) => {\n  for (const e of l)\n  if (e < I)\n \n  return false;\n \n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ] != Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    if (p == 1) {\n      if (Q % 2 == 0) {\n        e++}\n      else {\n        o++}\n      }\n    }\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n      }\n    }\n    if (p === 1) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let H = n - 1; H >= 0; H--)\n  if (n % H == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return H;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let H = n - 1; H >= 0; H--)\n  if (n % H == 0)\n \n  {\n    return Math.floor(n / H);\n  }\n}\n\n/* Find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(25)\n  3\n  */\nconst largestDivisor2 =(n) => {\n  let H = n - 1;\n  while (H > 0) {\n    if (n % H == 0) {\n      return Math.floor(n / H);\n    }\n    H--;\n  }\n}\n\n/* Find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor2(15)\n  5\n  >>> largestDivisor2(16)\n  2\n  >>> largestDivisor2(25)\n  3\n  */\nconst largestDivisor3 =(n) => {\n  let H = n - 1;\n  let i = 0;\n  while (H > 0) {\n    if (n % H == 0) {\n      return Math.floor(n / H);\n    }\n    H--;\n    i++;\n  }\n}\n\n/* Find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor3(15)\n  5\n  >>> largestDivisor3(16)\n  2\n  >>> largestDivisor3(25)\n  3\n  */\nconst largestDivisor4 =(n) => {\n  let H = n - 1;\n  let i = 1;\n  while (H > 0) {\n    if (n % H == 0) {\n      return Math.floor(n / H);\n    }\n    H--;\n    i++;\n  }\n}\n\nconst test = () => {\n  console.log(largestDivisor(15));\n  console.log(largestDivisor(16));\n  console.log(largestDivisor(25));\n  console.log(largestDivisor2(15));\n  console.log(largestDivisor2(16));\n  console.log(largestDivisor2(25));\n  console.log(largestDivisor3(15));\n  console.log(largestDivisor3(16));\n  console.log(largestDivisor3(25));\n  console.log(largestDivisor4(15));\n  console.log(largestDivisor4(16));\n  console.log(largestDivisor4(25));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let G = 2; G < n; G++)\n    if (n % G == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let G = 2; G < 101; G++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(G)) continue;\n      for (let k = 2; k < 101; k++) {\n        if ( !isPrime(k)) continue;\n        if (i * G * k == a)\n        return true;\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let G = 2; G < n; G++)\n    if (n % G == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let G = 2; G < 101; G++) {\n     \n      if (i % G == 0) return false;\n    }\n  }\n  return true;\n};\n\nisMultiplyPrime(1) == false\nisMultiplyPrime(3) == false\nisMultiplyPrime(9) == true\nisMultiplyPrime(999) == false\nisMultiplyPrime(100) == false\nisMultiplyPrime(101) == false\nisMultiplyPrime(10001) == true\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(v) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = v.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (v.at( - 1) == 'y' || v.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(v) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = v.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n};\n\nexport {vowelsCount};\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet1) {\n      lo = j}\n    }\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet2) {\n      hi = j}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  for (let j = lo + 1; j < hi; j++) {\n    u.push(y [ j ])\n    }\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet1) {\n      lo = j}\n    }\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet2) {\n      hi = j}\n    }\n \n  if (lo == - 1 || hi == - 1) {\n    return [ ]\n  }\n  else {\n    return (y.slice ( lo, hi + 1))\n  }\n}\n\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Earth\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Uranus\"))\nconsole.log (bf (\"Mercury\", \"Neptune\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \"Jupiter\"))\nconsole.log (bf (\"Mercury\", \"Saturn\"))\nconsole.log (bf (\"Mercury\", \""}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(J, b) => {\n  if (J < 0) {\n    J = - J}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(J % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(J, b) => {\n  if (J < 0) {\n    J = - J}\n  if (b < 0) {\n    b = - b}\n \n  let carry = 0\n  let product = 0\n  let i = 0\n  while (i < J) {\n    product += Math.pow(10, J - i) * Math.pow(b, i)\n    carry = product % 10\n    product = Math.floor(product / 10)\n    i++\n  }\n  if (carry > 0) {\n    product += carry\n  }\n  return product\n}\n\n/*\n  Complete the function that takes an array of strings and returns the string\n  containing the longest common prefix of all the strings.\n  Assume all the inputs are valid and non-empty.\n  Examples:\n  commonPrefix([\"flower\", \"flow\", \"flight\"]) should return \"fl\"\n  commonPrefix([\"dog\", \"racecar\", \"car\"]) should return \"\"\n  commonPrefix([\"apple\", \"pear\", \"papaya\"]) should return \"pa\"\n  */\nconst commonPrefix =(S) => {\n  let longest = 0\n  let prefix = \"\"\n  let i = 0\n  while (i < S.length) {\n    let length = S[i].length\n    if (length > longest) {\n      longest = length\n      prefix = S[i]\n    }\n    i++\n  }\n  return prefix\n}\n\n/*\n  Complete the function that takes a string and returns the number of \n  distinct characters in the string.\n  Assume the input is always valid.\n  Examples:\n  count(\"flower\") should return 3.\n  count(\"dog\") should return 2.\n  count(\"dab\") should return 1.\n  */\nconst count =(s) => {\n  let count = 1\n  let i = 0\n  while (i < s.length) {\n    let char = s[i]\n    while (char === s[i + 1]) {\n      count++\n      i++\n    }\n    i++\n  }\n  return count\n}\n\n/*\n  Complete the function that takes a string and returns the index of the \n  substring that contains the longest common prefix of the given strings.\n  Assume the input is always valid.\n  Examples:\n  commonPrefix(\"flower\", \"flow\") should return 0.\n  commonPrefix(\"flower\", \"flower\") should return 0.\n  commonPrefix(\"flower\", \"flower \", \"flower\") should return 1.\n  commonPrefix(\"flower\", \"flower \") should return 1.\n  commonPrefix(\"flower\", \"flower\", \"flower \", \"flower\") should return 0.\n  */\nconst commonPrefixIndex =(s) => {\n  let longest = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    let length = s[i].length\n    if (length > longest) {\n      longest = length\n      index = i\n    }\n    i++\n  }\n  return index\n}\n\n/*\n  Complete the function that takes two strings and returns the number of \n  distinct characters in both strings.\n  Assume the input is always valid.\n  Examples:\n  count(\"flower\", \"flower\") should return 0.\n  count(\"flower\", \"flower \", \"flower\") should return 1.\n  count(\"flower\", \"flower\", \"flower \", \"flower\") should return 1.\n  */\nconst countDiff =(s1, s2) => {\n  let count1 = count(s1)\n  let count2 = count(s2)\n  return count1 + count2 - count(commonPrefix(s1, s2))\n}\n\n/*\n  Complete the function that takes a string and returns the index of the \n  substring that contains the longest common prefix of the given strings.\n  Assume the input is always valid.\n  Examples:\n  commonPrefixIndex(\"flower\", \"flow\") should return 0.\n  commonPrefixIndex(\"flower\", \"flower\") should return 0.\n  commonPrefixIndex(\"flower\", \"flower \", \"flower\") should return 1.\n  commonPrefixIndex(\"flower\", \"flower \") should return 1.\n  commonPrefixIndex(\"flower\", \"flower\", \"flower \", \"flower\") should return 0.\n  */\nconst commonPrefixIndex2 =(s) => {\n  let longest = 0\n  let index = 0\n  let i = 0\n  while (i < s.length) {\n    let length = s[i].length\n    if (length > longest) {\n      longest = length\n      index = i\n    }\n    i++\n  }\n  return index\n}\n\n//Test Code\n\nconsole.log(commonPrefixIndex(\"flower\", \"flow\"))\nconsole.log(commonPrefixIndex(\"flower\", \"flower\"))\nconsole.log(commonPrefixIndex(\"flower\", \"flower \", \"flower\"))\nconsole.log(commonPrefixIndex(\"flower\", \"flower \"))\nconsole.log(commonPrefixIndex(\"flower\", \"flower\", \"flower \", \"flower\"))\n\nconsole.log(commonPrefixIndex2(\"flower\", \"flower\"))\nconsole.log(commonPrefixIndex2(\"flower\", \"flower \"))\nconsole.log(commonPrefixIndex2(\"flower\", \"flower \", \"flower\"))\nconsole.log(commonPrefixIndex2(\"flower\", \"flower \", \"flower \", \"flower\"))\n\nconsole.log(count(\"flower\"))\nconsole.log(count(\"flower \", \"flower\"))\nconsole.log(count(\"flower\", \"flower \", \"flower\"))\nconsole.log(count(\"flower\", \"flower \", \"flower \", \"flower\"))\n\nconsole.log(countDiff(\"flower\", \"flower\"))\nconsole.log(countDiff(\"flower \", \"flower\"))\nconsole.log(countDiff(\"flower\", \"flower \", \"flower\"))\nconsole.log(countDiff(\"flower \", \"flower \", \"flower\"))\nconsole.log(countDiff(\"flower \", \"flower \", \"flower \", \"flower\"))\n\nconsole.log(countDiff(\"flower\", \"flow\"))\nconsole.log(countDiff(\"flower \", \"flower \"))\nconsole.log(countDiff(\""}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(R) => {\n  R = Math.abs(R);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(R, 1.0 / 3.0)), 3) == R);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(R) => {\n  R = Math.abs(R);\n \n  if(R%6 === 0){\n    return true;\n  }\n  return false;\n}\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const S5a9ra597 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => S5a9ra597 [ a ] - S5a9ra597 [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const S5a9ra597 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n  const S5a9ra597_sorted = [];\n  const numbers_as_string = numbers.split(\" \");\n  for (let i = 0; i < numbers_as_string.length; i++) {\n    if (S5a9ra597[numbers_as_string[i]]) {\n      S5a9ra597_sorted.push(S5a9ra597[numbers_as_string[i]]);\n    }\n  }\n  return S5a9ra597_sorted.join(\" \");\n};\n\nconsole.log(sortNumbers('one two three'));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, Q20g6) =>(Q20g6 % 2 == 0 ? even [ Q20g6 / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  var sortedList = [].concat(even, odd);\n  return sortedList;\n}\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(b - a));\n \n  var sortedList = [].concat(odd, even);\n  return sortedList;\n}\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(b - a));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  var sortedList = [].concat(odd, even);\n  return sortedList;\n}\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(b - a));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  var sortedList = [].concat(even, odd);\n  return sortedList;\n}\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(b - a));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(a - b));\n \n  var sortedList = [].concat(odd, even);\n  return sortedList;\n}\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(b - a));\n \n  var sortedList = [].concat(odd, even);\n  return sortedList;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let D = n; D < n * 3; D+=2) {\n    t.push(D)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let D = n; D < n * 3; D+=2) {\n    t.push(D)\n   \n  }\n  return t\n}\n\nmodule.exports = makeAPile\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let F924jFAq6Q9h = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      F924jFAq6Q9h.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      F924jFAq6Q9h.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      F924jFAq6Q9h.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      F924jFAq6Q9h.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      F924jFAq6Q9h.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      F924jFAq6Q9h.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      F924jFAq6Q9h.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      F924jFAq6Q9h.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      F924jFAq6Q9h.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      F924jFAq6Q9h.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      F924jFAq6Q9h.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      F924jFAq6Q9h.push('D-')\n      }\n    else {\n      F924jFAq6Q9h.push('E')\n      }\n    }\n  return F924jFAq6Q9h\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let F924jFAq6Q9h = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      F924jFAq6Q9h.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      F924jFAq6Q9h.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      F924jFAq6Q9h.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      F924jFAq6Q9h.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      F924jFAq6Q9h.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      F924jFAq6Q9h.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n      F924jFAq6Q9h.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n     \n      F924jFAq6Q9h.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      \n      F924jFAq6Q9h.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      \n      F924jFAq6Q9h.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      \n      F924jFAq6Q9h.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      \n      F924jFAq6Q9h.push('D-')\n      }\n    else {\n      \n      F924jFAq6Q9h.push('E')\n      }\n    }\n  return F924jFAq6Q9h\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var K2488 = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while (K2488 < x)\n  K2488 = K2488 * n;\n  return(K2488 == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var K2488 = 1;\n \n  while (n!= 0) {\n    if (x % n!= 0) {\n      return false;\n    }\n    x /= n;\n    K2488 = K2488 * 2488;\n    n = n / 2;\n  }\n  return x == K2488;\n}\n\n//console.log(isSimplePower(1, 4));\n//console.log(isSimplePower(2, 2));\n//console.log(isSimplePower(8, 2));\n//console.log(isSimplePower(3, 2));\n//console.log(isSimplePower(3, 1));\n//console.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(b => b > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(b => b > 0);\n \n};\n\n/*\n  >>> getNegative([1, -2, 3, 4, -5, 6, 7])\n  [-5, -3, -2, 4, 6, 7]\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getNegative([-1, 2, -4, 5, 6, -7, 9])\n  [-7, -5, -4, -3, -2, -1, 9]\n  >>> getNegative([1, -2, 3, 4, -5, 6, 7, -8, 9, 0, 123, 1, -10])\n  [-8, -5, -4, -3, -2, -1, 9, 123, 1, 0, -10]\n  >>> getNegative([1, -2, 3, 4, -5, 6, 7, -8, 9, 0, 123, 1, -10, 8])\n  [-8, -5, -4, -3, -2, -1, 9, 123, 1, 0, -10, 8]\n  */\nconst getNegative = (l) => {\n  return l.filter(b => b < 0);\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6, 7])\n  [-1, 2, -4, 5, 6, 7]\n  >>> getNegative([1, -2, 3, 4, -5, 6, 7, -8, 9, 0, 123, 1, -10])\n  [1, -2, 3, 4, -5, 6, 7, -8, 9, 0, 123, 1, -10]\n  >>> getNegative([1, -2, 3, 4, -5, 6, 7, -8, 9, 0, 123, 1, -10, 8])\n  [1, -2, 3, 4, -5, 6, 7, -8, 9, 0, 123, 1, -10, 8]\n  */\n\nconst getSum = (l) => {\n  return getPositive(l).reduce((a, b) => a + b);\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getSum\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let j = 0; j < lst.length; j++) {\n    if (j % 3 == 0) {\n      y+=lst [ j ] * lst [ j ]}\n    else\nif (j % 4 == 0) {\n      y+=lst [ j ] * lst [ j ] * lst [ j ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    else {\n      y+=lst [ j ]}\n    }\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let j = 0; j < lst.length; j++) {\n    if (j % 3 == 0) {\n      y+=lst [ j ] * lst [ j ]}\n    else\nif (j % 4 == 0) {\n      y+=lst [ j ] * lst [ j ] * lst [ j ]}\n   \n  }\n  return y\n}\n\nconsole.log(sumSquares([-1, -5, 2, -1, -5]))<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let A = 2; A <= n; A++) {\n    if (A % 2 == 0) {\n      p.push(1 + A / 2)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      p.push(p [ A - 2 ] + p [ A - 1 ] + 1 +(A + 1) / 2)\n      }\n    }\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let A = 2; A <= n; A++) {\n    if (A % 2 == 0) {\n      p.push(1 + A / 2)\n     \n    } else {\n      p.push(A + 1 - A / 2)\n    }\n  }\n  return p\n}\n\n/*\n  This algorithm is called Fibonacci Heap.\n  Fibonacci Heap is a data structure which can store any number of edges\n  with weight.\n  It can be used to build a tree with minimum number of nodes.\n  We need to implement FibonacciHeap interface.\n  \n  FibonacciHeap is defined by the following recursive function:\n  create_node(weight, head)\n  create_edge(node, parent)\n  extract_min()\n  insert_node(node, parent)\n  \n  Examples:\n  create_node(1, null)\n  create_node(2, null)\n  create_node(3, null)\n  create_node(4, null)\n  create_node(5, null)\n  create_node(6, null)\n  create_node(7, null)\n  create_node(8, null)\n  create_node(9, null)\n  create_node(10, null)\n  create_node(11, null)\n  create_node(12, null)\n  create_node(13, null)\n  create_node(14, null)\n  create_node(15, null)\n  create_node(16, null)\n  create_node(17, null)\n  create_node(18, null)\n  create_node(19, null)\n  create_node(20, null)\n  create_node(21, null)\n  create_node(22, null)\n  create_node(23, null)\n  create_node(24, null)\n  create_node(25, null)\n  create_node(26, null)\n  create_node(27, null)\n  create_node(28, null)\n  create_node(29, null)\n  create_node(30, null)\n  create_node(31, null)\n  create_node(32, null)\n  create_node(33, null)\n  create_node(34, null)\n  create_node(35, null)\n  create_node(36, null)\n  create_node(37, null)\n  create_node(38, null)\n  create_node(39, null)\n  create_node(40, null)\n  create_node(41, null)\n  create_node(42, null)\n  create_node(43, null)\n  create_node(44, null)\n  create_node(45, null)\n  create_node(46, null)\n  create_node(47, null)\n  create_node(48, null)\n  create_node(49, null)\n  create_node(50, null)\n  create_node(51, null)\n  create_node(52, null)\n  create_node(53, null)\n  create_node(54, null)\n  create_node(55, null)\n  create_node(56, null)\n  create_node(57, null)\n  create_node(58, null)\n  create_node(59, null)\n  create_node(60, null)\n  create_node(61, null)\n  create_node(62, null)\n  create_node(63, null)\n  create_node(64, null)\n  create_node(65, null)\n  create_node(66, null)\n  create_node(67, null)\n  create_node(68, null)\n  create_node(69, null)\n  create_node(70, null)\n  create_node(71, null)\n  create_node(72, null)\n  create_node(73, null)\n  create_node(74, null)\n  create_node(75, null)\n  create_node(76, null)\n  create_node(77, null)\n  create_node(78, null)\n  create_node(79, null)\n  create_node(80, null)\n  create_node(81, null)\n  create_node(82, null)\n  create_node(83, null)\n  create_node(84, null)\n  create_node(85, null)\n  create_node(86, null)\n  create_node(87, null)\n  create_node(88, null)\n  create_node(89, null)\n  create_node(90, null)\n  create_node(91, null)\n  create_node(92, null)\n  create_node(93, null)\n  create_node(94, null)\n  create_node(95, null)\n  create_node(96, null)\n  create_node(97, null)\n  create_node(98, null)\n  create_node(99, null)\n  create_node(100, null)\n  create_node(101, null)\n  create_node(102, null)\n  create_node(103, null)\n  create_node(104, null)\n  create_node(105, null)\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var HJ6T7E4 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return HJ6T7E4 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    HJ6T7E4.push(HJ6T7E4.at( - 1) + HJ6T7E4.at( - 2) +\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    HJ6T7E4.at( - 3) + HJ6T7E4.at( - 4));\n    HJ6T7E4.shift();\n    }\n  return HJ6T7E4.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var HJ6T7E4 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return HJ6T7E4 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    HJ6T7E4.push(HJ6T7E4.at( - 1) + HJ6T7E4.at( - 2) +\n   \n    //console.log(HJ6T7E4);\n    HJ6T7E4.at( - 2));\n  }\n};\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let X = y; X >= x; X--) {\n    if (X % 2 == 0) {\n      return X}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let X = y; X >= x; X--) {\n    if (X % 2 == 0) {\n      return X}\n   \n    }\n  }\n\nconsole.log(chooseNum(10, 20))<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 == 1 && lst [ l ] > 0) {\n      p+=lst [ l ] * lst [ l ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 == 1 && lst [ l ] > 0) {\n      p+=lst [ l ] * lst [ l ]\n     \n    }\n  }\n  return p\n}\n\nconst evenSum =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 === 0) {\n      p+=lst [ l ]\n    }\n  }\n  return p\n}\n\nconst oddSum =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 === 1) {\n      p+=lst [ l ]\n    }\n  }\n  return p\n}\n\nconst squareDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 === 1) {\n      p+=lst [ l ] * lst [ l ]\n    }\n  }\n  return p\n}\n\nconst evenSumSquareDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 === 0) {\n      p+=lst [ l ] * lst [ l ]\n    }\n  }\n  return p\n}\n\nconst oddSumSquareDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 === 1) {\n      p+=lst [ l ] * lst [ l ]\n    }\n  }\n  return p\n}\n\nconst sum =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    p+=lst [ l ]\n  }\n  return p\n}\n\nconst main = () => {\n  const lst = [1,3,2,0,9,0,-2,0,0]\n  console.log(oddSum(lst))\n  console.log(evenSum(lst))\n  console.log(squareDifference(lst))\n  console.log(evenSumSquareDifference(lst))\n  console.log(oddSumSquareDifference(lst))\n  console.log(sum(lst))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(j => j + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList1 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList2 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList3 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList4 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList5 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList6 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList7 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList8 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList9 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList10 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList11 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList12 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList13 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList14 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList15 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList16 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList17 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList18 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList19 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList20 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList21 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList22 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList23 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList24 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList25 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList26 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList27 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList28 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList29 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList30 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList31 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList32 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList33 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList34 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList35 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList36 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList37 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList38 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList39 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList40 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList41 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList42 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList43 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList44 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList45 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList46 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList47 =(l) => {\n  return l.map(j => j + 1);\n \n};\n\nconst incrList48 =(l) => {\n  return l"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(J) => {\n  if (J.length < 3)\n  return false;\n  for (let i = 0; i < J.length - 2; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (J [ i ] == J [ i + 1 ] || J [ i + 1 ] == J [ i + 2 ] || J [ i ] == J [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(J) => {\n  if (J.length < 3)\n  return false;\n  for (let i = 0; i < J.length - 2; i++)\n \n  {\n    if (J[i + 1] === J[i + 2])\n  return false;\n  }\n  return true;\n}\n\n/*\n  Question:\n  Given a string, write a function to judge whether it is a palindrome or not.\n\n  A palindrome is a string that reads the same forwards and backwards.\n\n  For example:\n  isPalindrome(\"A man, a plan, a canal: Panama\") => true\n  isPalindrome(\"race a car\") => false\n  isPalindrome(\"\") => true\n  isPalindrome(\"A man, a plan, a canal: Panama\") => false\n  isPalindrome(\"race a car\") => true\n  isPalindrome(\"race a car\") => true\n*/\nconst isPalindrome =(S) => {\n  const len = S.length;\n  let start = 0;\n  let end = len - 1;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n/*\n  Question:\n  Given a string, write a function to judge whether it contains only unique characters.\n\n  A string contains only unique characters if no two adjacent characters are the same.\n\n  For example:\n  doesContainUniqueChars(\"A man, a plan, a canal: Panama\") => true\n  doesContainUniqueChars(\"race a car\") => false\n  doesContainUniqueChars(\"race a car\") => true\n  doesContainUniqueChars(\"race a car\") => false\n*/\nconst doesContainUniqueChars =(S) => {\n  const len = S.length;\n  let i = 0;\n  let j = 0;\n  while (i < len)\n  {\n    if (S[i] === S[j])\n  return false;\n    j++;\n    i++;\n  }\n  return true;\n}\n\n/*\n  Question:\n  Given a string, write a function to judge whether the string is a double\n  palindrome or not.\n\n  A double palindrome is a palindrome string that reads the same forwards twice.\n\n  For example:\n  isDoublePalindrome(\"A man, a plan, a canal: Panama\") => true\n  isDoublePalindrome(\"race a car\") => false\n  isDoublePalindrome(\"race a car\") => true\n  isDoublePalindrome(\"race a car\") => false\n*/\nconst isDoublePalindrome =(S) => {\n  const len = S.length;\n  let start = 0;\n  let end = len - 1;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  start = 0;\n  end = len - 2;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n/*\n  Question:\n  Given a string, write a function to judge whether it is a triple\n  palindrome or not.\n\n  A triple palindrome is a palindrome string that reads the same forwards three times.\n\n  For example:\n  isTriplePalindrome(\"A man, a plan, a canal: Panama\") => true\n  isTriplePalindrome(\"race a car\") => false\n  isTriplePalindrome(\"race a car\") => true\n  isTriplePalindrome(\"race a car\") => false\n*/\nconst isTriplePalindrome =(S) => {\n  const len = S.length;\n  let start = 0;\n  let end = len - 1;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  start = 0;\n  end = len - 2;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  start = 0;\n  end = len - 3;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n/*\n  Question:\n  Given a string, write a function to judge whether it is a quadruple\n  palindrome or not.\n\n  A quadruple palindrome is a palindrome string that reads the same forwards four times.\n\n  For example:\n  isQuadruplePalindrome(\"A man, a plan, a canal: Panama\") => true\n  isQuadruplePalindrome(\"race a car\") => false\n  isQuadruplePalindrome(\"race a car\") => true\n  isQuadruplePalindrome(\"race a car\") => false\n*/\nconst isQuadruplePalindrome =(S) => {\n  const len = S.length;\n  let start = 0;\n  let end = len - 1;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  start = 0;\n  end = len - 2;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;\n  }\n  start = 0;\n  end = len - 3;\n  while (start <= end)\n  {\n    if (S[start]!== S[end])\n  return false;\n    start++;\n    end--;"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(b => Number.isInteger(b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(b => Number.isInteger(b));\n \n};\n\nconst filterNums =(values) => {\n  return values.filter(b => Number.isInteger(b));\n \n};\n\nconst filterStrings =(values) => {\n  return values.filter(b => b.toString().match(/^[0-9]*$/));\n \n};\n\nconst filterAll =(values) => {\n  return values;\n \n};\n\nconst filterStringAndNums =(values) => {\n  return values.filter(b => b.toString().match(/^[0-9]*$/));\n \n};\n\nexport {\n  filterIntegers,\n  filterNums,\n  filterStrings,\n  filterAll,\n  filterStringAndNums\n};<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let I = arr\n  for (let j = 0; j < I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < I.length; k++) {\n      if (I [ k ] < I [ ind ]) {\n        ind = k\n        }\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = I [ j ]\n      I [ j ] = I [ ind ]\n      I [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return I.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let I = arr\n  for (let j = 0; j < I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < I.length; k++) {\n      if (I [ k ] < I [ ind ]) {\n        ind = k\n        }\n      }\n   \n    if (k - j > k) {\n      I.splice(ind, 0, I.splice(j, 1)[0])\n      j--\n    }\n  }\n  return I.slice(0, k)\n}\n\nconst maximum = (arr, k) => {\n  const maxK = Math.min(arr.length, k)\n  const max = arr.slice(0, maxK)\n  const sub = arr.slice(maxK)\n\n  return sub.concat(max)\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    let item = arr[i]\n    let j = i + 1\n    for (; j < arr.length; j++) {\n      if (arr[j] < item) {\n        break\n      }\n    }\n\n    res.push(arr.slice(i, j))\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  const max = arr.slice(0, k)\n  const sub = arr.slice(k)\n\n  return sub.concat(max)\n}\n\nconst maximum = (arr, k) => {\n  let max = arr[0]\n  let res = [arr[0]]\n\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      res = [max]\n    } else {\n      res.push(arr[i])\n    }\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i])\n  }\n\n  return res\n}\n\nconst maximum = (arr, k) => {\n  let res = []\n  for (let i ="}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((C, i) => C * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((C, i) => C * i).slice(1);\n \n}\n\nconst derivative2 =(xs) => {\n  return xs.map((C, i) => C * i * i).slice(2);\n \n}\n\nconst derivative3 =(xs) => {\n  return xs.map((C, i) => C * i * i * i).slice(3);\n \n}\n\nconst derivative4 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i).slice(4);\n \n}\n\nconst derivative5 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i).slice(5);\n \n}\n\nconst derivative6 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i).slice(6);\n \n}\n\nconst derivative7 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i).slice(7);\n \n}\n\nconst derivative8 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i).slice(8);\n \n}\n\nconst derivative9 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i).slice(9);\n \n}\n\nconst derivative10 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i).slice(10);\n \n}\n\nconst derivative11 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i).slice(11);\n \n}\n\nconst derivative12 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i).slice(12);\n \n}\n\nconst derivative13 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(13);\n \n}\n\nconst derivative14 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(14);\n \n}\n\nconst derivative15 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(15);\n \n}\n\nconst derivative16 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(16);\n \n}\n\nconst derivative17 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(17);\n \n}\n\nconst derivative18 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(18);\n \n}\n\nconst derivative19 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(19);\n \n}\n\nconst derivative20 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(20);\n \n}\n\nconst derivative21 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(21);\n \n}\n\nconst derivative22 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(22);\n \n}\n\nconst derivative23 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(23);\n \n}\n\nconst derivative24 =(xs) => {\n  return xs.map((C, i) => C * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i).slice(24);\n \n}\n\nconst derivative25 =(xs) => {\n  return"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(Tu98) => {\n  if (Tu98 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(Tu98)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(Tu98) => {\n  if (Tu98 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5.sync(Tu98)\n}\n\nconst isMd5Valid =(Tu98) => {\n  var md5 = require('js-md5')\n  return md5.sync(Tu98).toString('hex') == Tu98\n}\n\nconst md5 =(Tu98) => {\n  return new Promise((resolve, reject) => {\n    if (!isMd5Valid(Tu98)) {\n      reject(new Error('MD5 not valid'))\n    } else {\n      resolve(stringToMd5(Tu98))\n    }\n  })\n}\n\nconst md5Hash =(Tu98) => {\n  return new Promise((resolve, reject) => {\n    if (!isMd5Valid(Tu98)) {\n      reject(new Error('MD5 not valid'))\n    } else {\n      resolve(stringToMd5(Tu98).toString('hex'))\n    }\n  })\n}\n\nmodule.exports = {\n  md5,\n  md5Hash,\n  isMd5Valid\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let C = 0; C < arr.length; C++) {\n    for (let j = 0; j < arr [ C ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ C ].length; k++) {\n        if (arr [ C ] [ k ].charCodeAt() < arr [ C ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ C ] = arr [ C ].slice(0, j) + arr [ C ] [ ind ] + arr [ C ].slice(j + 1, ind) + arr [ C ] [ j ] + arr [ C ].slice(ind + 1, arr [ C ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let C = 0; C < arr.length; C++) {\n    if (C > 0) {\n      t = t + ' '}\n    t = t + arr [ C ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let C = 0; C < arr.length; C++) {\n    for (let j = 0; j < arr [ C ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ C ].length; k++) {\n        if (arr [ C ] [ k ].charCodeAt() < arr [ C ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ C ] = arr [ C ].slice(0, j) + arr [ C ] [ ind ] + arr [ C ].slice(j + 1, ind) + arr [ C ] [ j ] + arr [ C ].slice(ind + 1, arr [ C ].length)\n       \n        }\n      }\n    }\n  return arr.join(' ')\n  }\n\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(Wa5f3Nt, prefix) => {\n  return Wa5f3Nt.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(Wa5f3Nt, prefix) => {\n  return Wa5f3Nt.filter(x => x.startsWith(prefix));\n \n}\n\n//# sourceMappingURL=filter.js.map<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let x99 = lst\n  for (let j = 0; j < x99.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < x99.length; k++) {\n      if (x99 [ k ] < x99 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = x99 [ j ]\n    x99 [ j ] = x99 [ ind ]\n    x99 [ ind ] = tmp\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let smallest = x99 [ 0 ]\n  let pt = 1\n  while (pt < x99.length) {\n    if (x99 [ pt ] > smallest) {\n      return x99 [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let x99 = lst\n  for (let j = 0; j < x99.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < x99.length; k++) {\n      if (x99 [ k ] < x99 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = x99 [ j ]\n    x99 [ j ] = x99 [ ind ]\n    x99 [ ind ] = tmp\n   \n    }\n  }\n\nconst test = [1, 2, 3, 4, 5]\nconsole.log(nextSmallest(test))\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a != 32 && a < 96) {\n      a+=32}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (a == 65 || a == 97 || a == 69 || a == 101 || a == 73 || a == 105 || a == 79 || a == 111 || a == 85 || a == 117) {\n      a+=2}\n    t+=String.fromCharCode(a)\n    }\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t += String.fromCharCode(a)\n  }\n  return t\n}\n\nconst decode = (message) => {\n  let t = ''\n  let i = 0\n  while (i < message.length) {\n    let a = message[i]\n    if (a >= 97) {\n      a-=32\n    } else {\n      a+=32\n    }\n    t += String.fromCharCode(a)\n    i++\n  }\n  return t\n}\n\n\nconsole.log(encode('This is a message'))\nconsole.log(decode(encode('This is a message')))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let n = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      n++}\n    else {\n      n--}\n    if (n < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && n == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  n = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      n++}\n    else {\n      n--}\n    if (n < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && n == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let n = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      n++}\n    else {\n      n--}\n    if (n < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && n == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == ')') {\n      n--}\n    else {\n      n++\n      if (n < 0) {\n        u = 0\n        break\n      }\n    }\n  }\n  if (u == 1 && n == 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nmodule.exports = matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let v = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        v++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    v = v.toString()\n    d.push('the number of odd elements ' + v + 'n the str' + v + 'ng ' + v + ' of the ' + v + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let v = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        v++}\n     \n    }\n    d.push(`the number of odd elements ${v} of the ${lst [ i ]} string of the ${lst.length} string of the ${i + 1} input.`)\n  }\n  return d\n}\n\noddCount(['1234567'])\noddCount(['3', '11111111'])\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let J = 0; J < key.length; J++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (key [ J ].charCodeAt() < 65 || key [ J ].charCodeAt() > 90) {\n        hi = 0}\n      if (key [ J ].charCodeAt() < 97 || key [ J ].charCodeAt() > 122) {\n        lo = 0}\n      }\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let J = 0; J < key.length; J++) {\n     \n      if (key[J].toLowerCase()!== key[J].toUpperCase()) {\n        return false\n      }\n    }\n  }\n  return c === Object.keys(dict).length\n}\n\n// Given a string, return true if the string is a palindrome, else return false.\nconst isPalindrome =(s) => {\n  for (let i = 0, j = s.length - 1; i < j; i++, j--) {\n    if (s[i].toLowerCase()!== s[j].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n// Given a string, return the string in lower case.\nconst lowerCase =(s) => {\n  return s.toLowerCase()\n}\n\n// Given a string, return the string in upper case.\nconst upperCase =(s) => {\n  return s.toUpperCase()\n}\n\n// Given a string, return the string reversed.\nconst reverse =(s) => {\n  return s.split(\"\").reverse().join(\"\")\n}\n\n// Given a string, return the string with all lower case letters.\nconst lowerCaseAll =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst upperCaseAll =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all characters lower case.\nconst lowerCaseAllChars =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all characters upper case.\nconst upperCaseAllChars =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string reversed.\nconst reverseAll =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase).replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all lower case letters.\nconst reverseAllLowerCase =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseAllUpperCase =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string reversed.\nconst reverseAllChars =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase).replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all lower case letters.\nconst reverseAllCharsLowerCase =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseAllCharsUpperCase =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all lower case letters.\nconst reverseChars =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase).replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all lower case letters.\nconst reverseCharsLowerCase =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseCharsUpperCase =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseCharsAll =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase).replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseCharsAllLowerCase =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseCharsAllUpperCase =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseAllChars =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase).replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseAllCharsLowerCase =(s) => {\n  return s.replace(/[A-Z]/g, lowerCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseAllCharsUpperCase =(s) => {\n  return s.replace(/[a-z]/g, upperCase)\n}\n\n// Given a string, return the string with all upper case letters.\nconst reverseAll"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let P = 0; P < t.length; P++) {\n    let len = t [ P ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        u = 0}\n      }\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ P ]}\n    else {\n      p = p + ' ' + t [ P ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let P = 0; P < t.length; P++) {\n    let len = t [ P ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n      while (u * i <= len) {\n        p += t [ P ][ u * i ]\n        u = u + 1\n      }\n    }\n  }\n  return p\n}\n\nconst s = wordsInSentence(\"This is a test\")\nconsole.log(s)\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var K01W0DW2q80038 = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      K01W0DW2q80038.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      K01W0DW2q80038.push(c);\n      if (current_depth == 0) {\n        result.push(K01W0DW2q80038.join(''));\n        K01W0DW2q80038 = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var K01W0DW2q80038 = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      K01W0DW2q80038.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth < 0) {\n        throw 'unbalanced braces';\n      }\n      if (current_depth == 0) {\n        result.push(K01W0DW2q80038.join(''));\n        K01W0DW2q80038 = [ ];\n      }\n      else {\n        K01W0DW2q80038.pop();\n      }\n    }\n    else {\n      K01W0DW2q80038.push(c);\n    }\n  }\n  \n  return result;\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  replace the opening parenthesis with a space and the closing parenthesis with a newline character.\n  Ignore any spaces in the input string.\n  >>> separateParens('(()())')\n  '( ) ( ) ( ) ( ) '\n  */\nconst separateParens = (paren_string) => {\n  var result = paren_string.split('(');\n  var last_group = result[result.length-1];\n  var new_last_group = last_group.replace(/\\(/g,'');\n  var new_last_group = new_last_group.replace(/\\)/g, '\\n');\n  \n  result.pop();\n  result.push(new_last_group);\n  \n  return result.join('');\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  return the first group followed by the last group of the string.\n  Ignore any spaces in the input string.\n  >>> pair = pairwise('(()())')\n  >>> pair[0]\n  '( ) ( ) ( ) ( ) '\n  >>> pair[1]\n  '( ) ( ) ( ) ( ) '\n  */\nconst pairwise = (paren_string) => {\n  var result = paren_string.split('(');\n  return [result[0], result[result.length-1]];\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  return the first group followed by the second group followed by the last group of the string.\n  Ignore any spaces in the input string.\n  >>> triple = triplewise('(()())')\n  >>> triple[0]\n  '( ) ( ) ( ) ( ) '\n  >>> triple[1]\n  '( ) ( ) ( ) ( ) '\n  >>> triple[2]\n  '( ) ( ) ( ) ( ) '\n  */\nconst triplewise = (paren_string) => {\n  var result = paren_string.split('(');\n  return [result[0], result[1], result[2]];\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  return the first group followed by the second group followed by the third group followed by the last group\n  of the string.\n  Ignore any spaces in the input string.\n  >>> quadruple = quadruplewise('(()())')\n  >>> quadruple[0]\n  '( ) ( ) ( ) ( ) '\n  >>> quadruple[1]\n  '( ) ( ) ( ) ( ) '\n  >>> quadruple[2]\n  '( ) ( ) ( ) ( ) '\n  >>> quadruple[3]\n  '( ) ( ) ( ) ( ) '\n  */\nconst quadruplewise = (paren_string) => {\n  var result = paren_string.split('(');\n  return [result[0], result[1], result[2], result[3]];\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  return the first group followed by the second group followed by the third group followed by the fourth\n  group followed by the last group of the string.\n  Ignore any spaces in the input string.\n  >>> quinto = quintoaway('(()())')\n  >>> quinto[0]\n  '( ) ( ) ( ) ( ) '\n  >>> quinto[1]\n  '( ) ( ) ( ) ( ) '\n  >>> quinto[2]\n  '( ) ( ) ( ) ( ) '\n  >>> quinto[3]\n  '( ) ( ) ( ) ( ) '\n  >>> quinto[4]\n  '( ) ( ) ( ) ( ) '\n  */\nconst quinto = (paren_string) => {\n  var result = paren_string.split('(');\n  return [result[0], result[1], result[2], result[3], result[4]];\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  return the first group followed by the second group followed by the third group followed by the fourth\n  group followed by the fifth group followed by the last group of the string.\n  Ignore any spaces in the input string.\n  >>> septimo = septiaway('(()())')\n  >>> septimo[0]\n  '( ) ( ) ( ) ( ) '\n  >>> septimo[1]\n  '( ) ( ) ( ) ( ) '\n  >>> septimo[2]\n  '( ) ( ) ( ) ( ) '\n  >>> septimo[3]\n  '( ) ( ) ( ) ( ) '\n  >>> septimo[4]\n  '( ) ( ) ( ) ( ) '\n  >>> septimo[5]\n  '( ) ( ) ( ) ( ) '\n  */"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(v1fiU87, delimeter) => {\n  if ( !Array.isArray(v1fiU87) || v1fiU87.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of v1fiU87) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(v1fiU87, delimeter) => {\n  if (!Array.isArray(v1fiU87) || v1fiU87.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of v1fiU87) {\n   \n  result.push(n);\n  if (v1fiU87.length > 1) {\n  result.push(delimeter);\n  }\n  }\n  return result;\n}\n\n/*\n  @param {string} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber = (n, max) => {\n  return n.toFixed(max - 2);\n}\n\n/*\n  @param {number} n\n  @param {number} m\n  @return {string}\n  */\nconst formatNumber2 = (n, m) => {\n  return n.toFixed(m);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber3 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} m\n  @return {string}\n  */\nconst formatNumber4 = (n, m) => {\n  return n.toFixed(m);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber5 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber6 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber7 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber8 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber9 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber10 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber11 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber12 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber13 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber14 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber15 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber16 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber17 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber18 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber19 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber20 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber21 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber22 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber23 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber24 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*\n  @param {number} n\n  @param {number} max\n  @return {string}\n  */\nconst formatNumber25 = (n, max) => {\n  return n.toFixed(max);\n}\n\n/*"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(Gw9E78c) => {\n  var mean = Gw9E78c.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / Gw9E78c.length;\n  return Gw9E78c.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / Gw9E78c.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(Gw9E78c) => {\n  var mean = Gw9E78c.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / Gw9E78c.length;\n  return Gw9E78c.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n    }, 0);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_meanAbsDev = (dataset) => {\n  return meanAbsoluteDeviation(dataset);\n};\n\nconst meanAbsDev_from_dataset = (dataset) => {\n  return (\n      {\n        dataset: dataset\n      }\n  )\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset = (dataset) => {\n  return MAD_meanAbsDev(dataset);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args = (dataset, args) => {\n  return MAD_meanAbsDev(dataset, args);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args = (dataset, args, args2) => {\n  return MAD_meanAbsDev(dataset, args, args2);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args = (dataset, args, args2, args3) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args = (dataset, args, args2, args3, args4) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args = (dataset, args, args2, args3, args4, args5) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6, args7);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7, args8) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6, args7, args8);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7, args8, args9) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6, args7, args8, args9);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11, args12) => {\n  return MAD_meanAbsDev(dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11, args12);\n};\n\n//\n// Calculate the mean absolute deviation\n//\nconst MAD_from_dataset_with_args_args_args_args_args_args_args = (dataset, args, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11,"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let M = arr [ i ]\n    if (M > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    M = - M\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (M >= 10) {\n      k+=M % 10;\n      M =(M - M % 10) / 10;\n      }\n    k-=M;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let M = arr [ i ]\n    if (M > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    M = - M\n   \n    while (M >= 10) {\n      k++\n      M /= 10\n    }\n    p += k + 1\n  }\n  return p\n}\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let d = 0; d < nums.length; d++) {\n    if (nums [ d ] < 10) {\n      continue}\n    let y = nums [ d ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      p++\n      }\n    }\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let d = 0; d < nums.length; d++) {\n    if (nums [ d ] < 10) {\n      continue}\n    let y = nums [ d ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n      p ++\n    }\n  }\n  return p\n}\nconsole.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n// console.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45,"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      times+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      times+=1;\n     \n    }\n  }\n  return times;\n};\n\n//Find the first index of a substring in a string.\nconst find = (string, substring) => {\n  let start = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      return start + W;\n    }\n    start++;\n  }\n  return -1;\n};\n\n//Find the last index of a substring in a string.\nconst lastIndex = (string, substring) => {\n  let end = string.length - substring.length;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      return end - W;\n    }\n    end--;\n  }\n  return -1;\n};\n\n// Find the first index of a substring in a string.\nconst indexOf = (string, substring) => {\n  let start = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      return start + W;\n    }\n    start++;\n  }\n  return -1;\n};\n\n//Find the last index of a substring in a string.\nconst lastIndexOf = (string, substring) => {\n  let end = string.length - substring.length;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      return end - W;\n    }\n    end--;\n  }\n  return -1;\n};\n\n//Find the first index of a substring in a string.\nconst indexOf = (string, substring) => {\n  let start = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      return start + W;\n    }\n    start++;\n  }\n  return -1;\n};\n\n// Find the last index of a substring in a string.\nconst lastIndexOf = (string, substring) => {\n  let end = string.length - substring.length;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      return end - W;\n    }\n    end--;\n  }\n  return -1;\n};\n\n// Find the first index of a substring in a string.\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!= -1;\n};\n\n// Find the last index of a substring in a string.\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring) + substring.length == string.length;\n};\n\n// Find the first index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the last index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the first index of a substring in a string.\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!= -1;\n};\n\n// Find the last index of a substring in a string.\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring) + substring.length == string.length;\n};\n\n// Find the first index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the last index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the first index of a substring in a string.\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!= -1;\n};\n\n// Find the last index of a substring in a string.\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring) + substring.length == string.length;\n};\n\n// Find the first index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the last index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the first index of a substring in a string.\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!= -1;\n};\n\n// Find the last index of a substring in a string.\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring) + substring.length == string.length;\n};\n\n// Find the first index of a substring in a string.\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) == 0;\n};\n\n// Find the last index of a substring in a string.\nconst startsWith = (string,"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let T = 0; T < text.length; T++)\n  if (text [ T ] != text.at( - T - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let T = 0; T < text.length; T++)\n  if (text [ T ]!= text.at( - T - 1))\n \n  return false;\n  return true;\n};\n\n\n/*\n  Sorts given string using bubble sort\n  >>> sortString('abc')\n  'abc'\n  >>> sortString('abcdef')\n  'abcdef'\n  >>> sortString('a b c')\n  'a b c'\n  >>> sortString('abcdefg')\n  'abcdefg'\n  >>> sortString('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> sortString('a b c d e f')\n  'a b c d e f'\n  >>> sortString('a b c d e fg h i j k l m n o p q r s t u v w x y z')\n  'a b c d e fg h i j k l m n o p q r s t u v w x y z'\n  >>> sortString('a b c d e fg h i j k l m n o p q r s t u v w x y z')\n  'a b c d e fg h i j k l m n o p q r s t u v w x y z'\n  >>> sortString('a b c d e fg h i j k l m n o p q r s t u v w x y z')\n  'a b c d e fg h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortString =(text) => {\n  for (let T = 0; T < text.length; T++) {\n    for (let i = 0; i < text.length - 1; i++) {\n      if (text.at( i ) > text.at( i + 1)) {\n        text = text.swap(i, i + 1);\n      }\n    }\n  }\n  return text;\n};\n\n\n/*\n  Checks if given string is a permutation of given string\n  >>> isPermutation('abc', 'abc')\n  true\n  >>> isPermutation('abc', 'def')\n  false\n  >>> isPermutation('abc', 'bcd')\n  true\n  >>> isPermutation('abc', 'abcd')\n  false\n  >>> isPermutation('abcd', 'abcd')\n  true\n  >>> isPermutation('abcd', 'acbd')\n  false\n  >>> isPermutation('abcd', 'acd')\n  false\n  >>> isPermutation('abcdef', 'abcdef')\n  true\n  >>> isPermutation('abcdef', 'aefcdef')\n  false\n  >>> isPermutation('abcdef', 'acdef')\n  false\n  >>> isPermutation('abcdef', 'acd')\n  false\n  >>> isPermutation('abcdef', 'ac')\n  false\n  >>> isPermutation('abcdefg', 'abcdefg')\n  true\n  >>> isPermutation('abcdefg', 'acdefg')\n  true\n  >>> isPermutation('abcdefg', 'abcf')\n  false\n  >>> isPermutation('abcdefg', 'abc')\n  false\n  >>> isPermutation('abcdefg', 'abc')\n  false\n  >>> isPermutation('abcdg', 'abcdg')\n  true\n  >>> isPermutation('abcdg', 'acdg')\n  true\n  >>> isPermutation('abcdg', 'acd')\n  false\n  >>> isPermutation('abcdg', 'ac')\n  false\n  >>> isPermutation('abcdg', 'ac')\n  false\n  >>> isPermutation('abcdg', 'acd')\n  false\n  >>> isPermutation('abcdefg', 'acdefg')\n  true\n  >>> isPermutation('abcdefg', 'acdefg')\n  true\n  >>> isPermutation('abcdefg', 'abcd')\n  false\n  >>> isPermutation('abcdefg', 'abc')\n  false\n  >>> isPermutation('abcdefg', 'acd')\n  false\n  >>> isPermutation('abcdefg', 'ac')\n  false\n  >>> isPermutation('abcdefg', 'ac')\n  false\n  >>> isPermutation('abcdefg', 'ac')\n  false\n  */\nconst isPermutation =(text, permutation) => {\n  if (text.length!= permutation.length)\n    return false;\n  for (let T = 0; T < text.length; T++)\n  if (text.at( T )!= permutation.at( T))\n    return false;\n  return true;\n};\n\n\n\n/*\n  Searches for string in given string\n  >>> search('abcd', 'acd')\n  1\n  >>> search('abcd', 'ac')\n  0\n  >>> search('abcd', 'acd')\n  -1\n  >>> search('abcd', 'abc')\n  0\n  >>> search('abcd', 'ac')\n  1\n  >>> search('abcd', 'ab')\n  0\n  >>> search('abcd', 'ab')\n  0\n  >>> search('abcd', 'ac')\n  1\n  >>> search('abcd', 'acd')\n  1\n  >>> search('abcd', 'abcd')\n  4\n  >>> search('abcd', 'abcd')\n  4\n  >>> search('abcd', 'acd')\n  1\n  >>> search('abcd', 'ab')\n  0\n  >>> search('abcd', 'ab')\n  0\n  >>> search('abcd', 'abcd')\n  4\n  >>> search('abcd', 'ac')\n  1\n  >>> search('abcd', 'acd')\n  1\n  >>> search('abcd', 'acd')\n  1\n  >>> search('abcd', 'ac')\n  1\n  >>> search('abcd', 'acd')\n  1\n  >>>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(y9dcD2Y) => {\n  if ( !Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(y9dcD2Y) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n    if (s.length === maxlen) {\n      return s;\n    }\n  }\n  return y9dcD2Y[0];\n};\n\n/*\n  Return the length of the longest string in the list of strings. Return the first\n  string in case of multiple strings of the same length. Return null in case\n  the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  '3'\n  >>> longest(['a', 'bb', 'ccc'])\n  '4'\n  */\nconst longest =(y9dcD2Y) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n    if (s.length === maxlen) {\n      return maxlen;\n    }\n  }\n  return y9dcD2Y[0].length;\n};\n\n/*\n  Return the first string in the list that is longer than the second. Return the\n  second string in case of multiple strings of the same length. Return null in\n  case the input list is empty.\n  >>> longest([], 'foo')\n\n  >>> longest(['a', 'bb', 'ccc'], 'foo')\n  'foo'\n  >>> longest(['a', 'b', 'c'], 'foo')\n  'foo'\n  */\nconst longest =(y9dcD2Y, y9dcD2Y2) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  if (!Array.isArray(y9dcD2Y2) || y9dcD2Y2.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  var maxlen2 = Math.max(... y9dcD2Y2.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n    if (s.length >= maxlen2) {\n      return s;\n    }\n  }\n  return y9dcD2Y2[0];\n};\n\n/*\n  Return the first string in the list that is longer than the second. Return the\n  second string in case of multiple strings of the same length. Return null in\n  case the input list is empty.\n  >>> longest([], 'foo')\n\n  >>> longest(['a', 'bb', 'ccc'], 'foo')\n  'foo'\n  >>> longest(['a', 'b', 'c'], 'foo')\n  'foo'\n  */\nconst longest =(y9dcD2Y) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n    if (s.length >= maxlen) {\n      return s;\n    }\n  }\n  return y9dcD2Y[0];\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let Z = extensions.length - 1; Z >= 0; Z--) {\n    let y = 0\n    for (let j = 0; j < extensions [ Z ].length; j++) {\n      let k = extensions [ Z ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (y >= s) {\n      s = y;\n      u = Z;\n      }\n    }\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let Z = extensions.length - 1; Z >= 0; Z--) {\n    let y = 0\n    for (let j = 0; j < extensions [ Z ].length; j++) {\n      let k = extensions [ Z ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n    }\n    if (y>0) {\n      s = s > y? s : y\n      u = u > y? u : y\n    }\n  }\n  return `${class_name}.${u}`\n}\n\n//Takes a string of class names and a list of extensions.\n//Returns the strongest class name in the list of class names.\nconst strongestExtensionName =(class_names, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let Z = class_names.length - 1; Z >= 0; Z--) {\n    let y = 0\n    for (let j = 0; j < class_names [ Z ].length; j++) {\n      let k = class_names [ Z ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n    }\n    if (y>0) {\n      s = s > y? s : y\n      u = u > y? u : y\n    }\n  }\n  return s > u? class_names [ s ] : class_names [ u ]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let V = 0; V < k; V++) {\n    if (arr [ V ] < 100 && arr [ V ] > - 100) {\n      p+=arr [ V ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let V = 0; V < k; V++) {\n    if (arr [ V ] < 100 && arr [ V ] > - 100) {\n      p+=arr [ V ]}\n   \n    }\n  }\n  return p\n}\n\n//test\naddElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 6)\n\n/*\n  Given a non-empty array of integers arr, return the sum of the elements with at most two digits.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9],\n      Output: 24\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n*/\nconst addElements2 =(arr) => {\n  let p = 0\n  for (let V = 0; V < arr.length; V++) {\n    if (arr [ V ] < 100 && arr [ V ] > - 100) {\n      p+=arr [ V ]}\n   \n    }\n  }\n  return p\n}\n\n//test\naddElements2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let R8I = array\n  let tot = R8I [ 0 ] + R8I [ R8I.length - 1 ]\n  for (let j = 0; j < R8I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < R8I.length; k++) {\n      if ((tot % 2 == 1 && R8I [ k ] < R8I [ ind ]) ||(tot % 2 == 0 && R8I [ k ] > R8I [ ind ])) {\n        ind = k\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    let tmp = R8I [ j ]\n    R8I [ j ] = R8I [ ind ]\n    R8I [ ind ] = tmp\n    }\n  return R8I\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let R8I = array\n  let tot = R8I [ 0 ] + R8I [ R8I.length - 1 ]\n  for (let j = 0; j < R8I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < R8I.length; k++) {\n      if ((tot % 2 == 1 && R8I [ k ] < R8I [ ind ]) ||(tot % 2 == 0 && R8I [ k ] > R8I [ ind ])) {\n        ind = k\n       \n      }\n    }\n    R8I [ ind ] = R8I [ j ]\n    R8I [ j ] = R8I [ ind ]\n  }\n  return R8I\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == ' ') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+='_'}\n      if (c == 2) {\n        x+='__'}\n      if (c > 2) {\n        x+='-'}\n      x+=text [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      c = 0;\n      }\n    else {\n      x+=text [ i ]\n      }\n    }\n  if (c == 1) {\n    x+='_'}\n  if (c == 2) {\n    x+='__'}\n  if (c > 2) {\n    x+='-'}\n  return x\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+='_'}\n      if (c == 2) {\n        x+='__'}\n      if (c > 2) {\n        x+='-'}\n      x+=text [ i ]\n     \n      c = 0\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\n/*\n  Given a string text, remove all spaces in it, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example_1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+='_'}\n      if (c == 2) {\n        x+='_'}\n      if (c > 2) {\n        x+='_'}\n      x+=text [ i ]\n     \n      c = 0\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\nconst format =(text) => {\n  let x = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      x+='_'\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\nconst unformat =(text) => {\n  let x = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == '_') {\n      x+=''\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example 1\") == \"Example 1\"\n  unfixSpaces(\" Example 2\") == \"Example 2\"\n  unfixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst unfixSpaces =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == '_') {\n      c++\n    }\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+=' '\n      }\n      if (c == 2) {\n        x+=' '\n      }\n      if (c > 2) {\n        x+=text [ i ]\n      }\n      x+=text [ i ]\n      c = 0\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\n/*\n  Given a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example 1\") == \"Example 1\"\n  unfixSpaces(\" Example 2\") == \"Example 2\"\n  unfixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst unfixDashes =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == '-') {\n      c++\n    }\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+=' '\n      }\n      if (c == 2) {\n        x+=' '\n      }\n      if (c > 2) {\n        x+=text [ i ]\n      }\n      x+=text [ i ]\n      c = 0\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\n/*\n  Given a string text, replace all - with _, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with _ \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example 1\") == \"Example 1\"\n  unfixSpaces(\" Example 2\") == \"Example 2\"\n  unfixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst unfixUnderlines =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == '_') {\n      c++\n    }\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+=' '\n      }\n      if (c == 2) {\n        x+=' '\n      }\n      if (c > 2) {\n        x+=text [ i ]\n      }\n      x+=text [ i ]\n      c = 0\n    }\n    else {\n      x+=text [ i ]\n    }\n  }\n  return x\n}\n\nconst main = () => {\n  console.log(format(\"Example\"))\n  console.log(format(\"Example 1"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, R) =>(a - R));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, R) =>(a - R));\n \n};\n\nexport default unique;<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(W) => {\n  var sort1 = [ ... W ].sort((a, b) => a - b);\n  var sort2 = [ ... W ].sort((a, b) => b - a);\n  if (JSON.stringify(W) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(W) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(W) => {\n  var sort1 = [... W ].sort((a, b) => a - b);\n  var sort2 = [... W ].sort((a, b) => b - a);\n  if (JSON.stringify(W) === JSON.stringify(sort1) ||\n \n    JSON.stringify(W) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n// Concatenate strings\nconst cat =(p3z456q) => {\n  return concatenate(p3z456q);\n};\n\n/* Concatenate a string with a number\n  >>> cat('a', 1)\n  'a1'\n  >>> cat('a', 2)\n  'a2'\n  >>> cat('a', 3)\n  'a3'\n  */\nconst catNumber =(p3z456q) => {\n  return concatenate([p3z456q, p3z456q]);\n};\n\n/* Concatenate a string with a list of strings\n  >>> cat('a', ['b', 'c', 'd'])\n  'abcdd'\n  >>> cat('a', ['b', 'c'])\n  'abcc'\n  */\nconst catStrings =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of strings with a string\n  >>> cat(['a', 'b', 'c'], 'd')\n  'a1b2cd'\n  >>> cat(['a', 'b', 'c'], 'd')\n  'a1b2cd'\n  */\nconst catStrings2 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a string with a list of strings\n  >>> cat('a', ['b', 'c', 'd'])\n  'a1b2cd'\n  >>> cat('a', ['b', 'c'])\n  'a1bc'\n  */\nconst catStrings3 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a string with a list of lists\n  >>> cat('a', [['b', 'c'], ['d', 'e']])\n  'a1b2cd1e2d3e'\n  >>> cat('a', [['b', 'c'], ['d', 'e']])\n  'a1b2cd1e2d3e'\n  */\nconst catLists =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of lists with a string\n  >>> cat(['a', ['b', 'c'], ['d', 'e']], 'f')\n  'a1b2cd1e2d3ef'\n  >>> cat(['a', ['b', 'c'], ['d', 'e']], 'f')\n  'a1b2cd1e2d3ef'\n  */\nconst catLists2 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of lists with a list of strings\n  >>> cat(['a', ['b', 'c'], ['d', 'e']], ['f', 'g'])\n  'a1b2cd1e2d3ef1g2'\n  >>> cat(['a', ['b', 'c'], ['d', 'e']], ['f', 'g'])\n  'a1b2cd1e2d3ef1g2'\n  */\nconst catLists3 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of lists with a list of lists\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', 'h', ['i', 'j']])\n  'a1b2c1e2d3ef1g2h3i4j'\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', 'h', ['i', 'j']])\n  'a1b2c1e2d3ef1g2h3i4j'\n  */\nconst catLists4 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of lists with a list of lists\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', ['i', 'j']])\n  'a1b2c1e2d3ef1g2i1j'\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', ['i', 'j']])\n  'a1b2c1e2d3ef1g2i1j'\n  */\nconst catLists5 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of lists with a list of lists\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', ['i', 'j']])\n  'a1b2c1e2d3ef1g2i1j'\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', ['i', 'j']])\n  'a1b2c1e2d3ef1g2i1j'\n  */\nconst catLists6 =(p3z456q) => {\n  return concatenate(p3z456q.concat(p3z456q));\n};\n\n/* Concatenate a list of lists with a list of lists\n  >>> cat(['a', ['b', ['c', 'd'], 'e'], 'f'], ['g', ['i', 'j']])\n"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let B = 0; B < lst1.length; B++) {\n    if (lst1 [ B ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let B = 0; B < lst2.length; B++) {\n    if (lst2 [ B ] % 2 == 0) {\n      t++}\n    }\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let B = 0; B < lst1.length; B++) {\n    if (lst1 [ B ] % 2 == 0) {\n      t++}\n    }\n \n  for (let C = 0; C < lst2.length; C++) {\n    if (lst2 [ C ] % 2 == 0) {\n      t--}\n    }\n    if (t < 0) {\n      return \"NO\"\n    }\n    if (t > 0) {\n      return \"YES\"\n    }\n  }\n  return \"YES\"\n}\n\n// Test case 1:\nconsole.log(\"Test case 1:\")\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n\n// Test case 2:\nconsole.log(\"Test case 2:\")\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n\n// Test case 3:\nconsole.log(\"Test case 3:\")\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]))\n\n// Test case 4:\nconsole.log(\"Test case 4:\")\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5, 6]))\n\n// Test case 5:\nconsole.log(\"Test case 5:\")\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5, 7]))\n\n// Test case 6:\nconsole.log(\"Test case 6:\")\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5, 8]))\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(HhW2hE) => {\n  return HhW2hE.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(HhW2hE) => {\n  return HhW2hE.length;\n \n};\n\n\n// Return a copy of a string\nconst copyStr = (s) => {\n  const copy = new String(s);\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return a copy of a string\nconst copyStr = (s) => {\n  const copy = new String(s);\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return a copy of a string\nconst copyStr = (s) => {\n  const copy = new String(s);\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {\n  const copy = new Array(s.length);\n  for(let i = 0; i < s.length; i++){\n    copy[i] = s.charAt(i);\n  }\n  return copy;\n};\n\n\n// Return an array of chars\nconst chars =(s) => {"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let G = 0; G < l; G++) {\n        if (a [ i + G ] != pat [ j + G ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        return true\n        }\n      }\n    }\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let G = 0; G < l; G++) {\n        if (a [ i + G ]!= pat [ j + G ]) {\n          y = 0}\n       \n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconst solution = function (a, b) {\n  return cycpatternCheck(a, b)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(m3s18o) => {\n  return m3s18o % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(m3s18o) => {\n  return m3s18o % 1.0;\n \n}\n\n/*\n  Given a string representing a decimal number, return an integer.\n  >>> truncateNumber(\"3.5\")\n  3\n  >>> truncateNumber(\"3.0\")\n  3\n  >>> truncateNumber(\"1\")\n  1\n  >>> truncateNumber(\"3.0.0\")\n  3\n  >>> truncateNumber(\"1.1\")\n  1\n  >>> truncateNumber(\"1.0\")\n  1\n  >>> truncateNumber(\"3.5.5\")\n  3\n  >>> truncateNumber(\"3.5.0\")\n  3\n  >>> truncateNumber(\"3.0.0.0\")\n  3\n  >>> truncateNumber(\"3.5.5.0\")\n  3\n  >>> truncateNumber(\"3.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.0\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.0\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5\")\n  3\n  >>> truncateNumber(\"3.5.5.5.5.5.5.5.5.5"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(b) => {\n  let p = 1\n  let k = 1\n  while (b > 0) {\n    let y = b % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    b =(b - b % 10) / 10\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(b) => {\n  let p = 1\n  let k = 1\n  while (b > 0) {\n    let y = b % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n    }\n    b = b / 10;\n  }\n  if (k == 0) return p\n}\n\nconst addDigits = (n) => {\n  return (n*digits(n))\n}\n\nconst addDigitsS = (n) => {\n  return (n*addDigits(n))\n}\n\nconst getSum = (n) => {\n  return addDigits(n) + addDigitsS(n)\n}\n\nconst getSumS = (n) => {\n  return addDigitsS(n) + addDigits(n)\n}\n\nconst getSumS2 = (n) => {\n  return getSumS(n) + getSum(n)\n}\n\nconst sum = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + n % 10\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sum(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS2 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sum(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS3 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS4 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS2(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS5 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS3(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS6 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS4(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS7 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS5(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS8 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS6(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS9 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS7(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS10 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS8(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS11 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS9(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS12 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS10(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS13 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS11(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS14 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS12(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS15 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS13(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS16 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS14(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS17 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS15(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS18 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS16(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS19 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS17(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS20 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS18(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS21 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS19(n)\n    n = n / 10\n  }\n  return s\n}\n\nconst sumS22 = (n) => {\n  let s = 0\n  while (n > 0) {\n    s = s + sumS20(n)\n    n = n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2\n    }\n  else {\n    m2 = txt.split( /, /)\n    if (m2.length > 1) {\n      return m2\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt [ i ].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n          }\n        }\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2\n    }\n  else {\n    m2 = txt.split( /, /)\n    if (m2.length > 1) {\n      return m2\n      }\n    else {\n      let p = 0\n     \n      let n = txt.length\n      while (p < n) {\n        let s = txt[p]\n        if (s.match(/[a-z]/i)) {\n          let l = txt[p].length\n          if (l % 2 === 1) {\n            return [txt[p], txt[p + 1]]\n          }\n          else {\n            return [txt[p], txt[p + 2]]\n          }\n        }\n        else {\n          p++\n        }\n      }\n    }\n  }\n}\n\nconst contains =(txt, s) => {\n  return txt.indexOf(s) >= 0\n}\n\nconst containsAll =(txt, s) => {\n  return txt.split(s).every((s) => contains(s, s))\n}\n\nconst isPalindrome =(txt) => {\n  let l = txt.length\n  let txt = txt.split('')\n  let mid = txt.length / 2\n  let l2 = txt[mid].length\n  let txt2 = txt.slice(0, mid) + txt.slice(mid + 1, l)\n  let mid2 = txt2.length / 2\n  let l2 = txt2[mid2].length\n  let txt3 = txt2.slice(0, mid2) + txt2.slice(mid2 + 1, l2)\n  return txt3 === txt\n}\n\nconst isPalindrome =(txt) => {\n  let txt = txt.split('')\n  let mid = txt.length / 2\n  let txt2 = txt.slice(0, mid) + txt.slice(mid + 1, txt.length)\n  return txt2 === txt\n}\n\nconst isPalindrome =(txt) => {\n  let s = \"\"\n  for (let i = 0; i < txt.length; i++) {\n    s += txt[i]\n  }\n  return txt === s\n}\n\nconst isPalindrome =(txt) => {\n  let txt = txt.split('')\n  let mid = txt.length / 2\n  let l = txt.length\n  let txt2 = txt.slice(0, mid) + txt.slice(mid + 1, l)\n  return txt2 === txt\n}\n\nconst isPalindrome =(txt) => {\n  let s = \"\"\n  for (let i = 0; i < txt.length; i++) {\n    s += txt[i]\n  }\n  return txt === s\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n}\n\nconst reverse =(txt) => {\n  let txt2 = \"\"\n  for (let i = txt.length - 1; i >= 0; i--) {\n    txt2 += txt[i]\n  }\n  return txt2\n"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  gOx.add(e1);\n  return [ ... gOx ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n    if (gOx.has(e1) && gOx.has(e2)) return [...gOx].concat(e1, e2);\n    else if (gOx.has(e1)) return [...gOx].concat(e1);\n    else if (gOx.has(e2)) return [...gOx].concat(e2);\n    else gOx.add(e1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 0; k < n; k++)\n  if (k % 11 == 0 || k % 13 == 0)\n  ns.push(k);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 0; k < n; k++)\n  if (k % 11 == 0 || k % 13 == 0)\n  ns.push(k);\n \n  for (let i = 0; i < ns.length; i++)\n  {\n    if (ns[i] % 3 == 0 && ns[i] % 5 == 0)\n    {\n      ans++;\n      console.log(ns[i]);\n    }\n  }\n  return ans;\n};\n\n/*\n  1 2 3 4 5 6 7 8 9 10\n  11 12 13 14 15 16 17 18\n  19 20 21 22 23 24 25 26\n  27 28 29 30 31 32 33 34\n  35 36 37 38 39 40 41 42\n  43 44 45 46 47 48 49 50\n  51 52 53 54 55 56 57 58\n  59 60 61 62 63 64 65 66\n  67 68 69 70 71 72 73 74\n  75 76 77 78 79 80 81 82\n  83 84 85 86 87 88 89 90\n*/\nconst fizzBuzz = (n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 1; k <= n; k++)\n  {\n    if (k % 3 == 0 && k % 5 == 0)\n    {\n      ans++;\n      console.log(k);\n    }\n  }\n  return ans;\n};\n\n/*\n  1 2 3 4 5 6 7 8 9 10\n  11 12 13 14 15 16 17 18\n  19 20 21 22 23 24 25 26\n  27 28 29 30 31 32 33 34\n  35 36 37 38 39 40 41 42\n  43 44 45 46 47 48 49 50\n  51 52 53 54 55 56 57 58\n  59 60 61 62 63 64 65 66\n  67 68 69 70 71 72 73 74\n  75 76 77 78 79 80 81 82\n  83 84 85 86 87 88 89 90\n*/\nconst fizzBuzz = (n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 1; k <= n; k++)\n  {\n    if (k % 3 == 0 && k % 5 == 0)\n    {\n      ans++;\n      console.log(k);\n    }\n  }\n  return ans;\n};\n\n/*\n  1 2 3 4 5 6 7 8 9 10\n  11 12 13 14 15 16 17 18\n  19 20 21 22 23 24 25 26\n  27 28 29 30 31 32 33 34\n  35 36 37 38 39 40 41 42\n  43 44 45 46 47 48 49 50\n  51 52 53 54 55 56 57 58\n  59 60 61 62 63 64 65 66\n  67 68 69 70 71 72 73 74\n  75 76 77 78 79 80 81 82\n  83 84 85 86 87 88 89 90\n*/\nconst fizzBuzz = (n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 1; k <= n; k++)\n  {\n    if (k % 3 == 0 && k % 5 == 0)\n    {\n      ans++;\n      console.log(k);\n    }\n  }\n  return ans;\n};\n\n/*\n  1 2 3 4 5 6 7 8 9 10\n  11 12 13 14 15 16 17 18\n  19 20 21 22 23 24 25 26\n  27 28 29 30 31 32 33 34\n  35 36 37 38 39 40 41 42\n  43 44 45 46 47 48 49 50\n  51 52 53 54 55 56 57 58\n  59 60 61 62 63 64 65 66\n  67 68 69 70 71 72 73 74\n  75 76 77 78 79 80 81 82\n  83 84 85 86 87 88 89 90\n*/\nconst fizzBuzz = (n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 1; k <= n; k++)\n  {\n    if (k % 3 == 0 && k % 5 == 0)\n    {\n      ans++;\n      console.log(k);\n    }\n  }\n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i != j) {\n    let a = numbers [ i ], M = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - M);\n      closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let new_distance = Math.abs(a - M);\n      if (new_distance < distance) {\n        distance = new_distance;\n        closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n        }\n      }\n    }\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i!= j) {\n    let a = numbers [ i ], M = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - M);\n      closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n      }\n    else {\n     \n      distance = Math.abs(a - M);\n      if (distance < distance) {\n        closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n      }\n    }\n  }\n  return closest_pair;\n}\n\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let Q = lst [ i ]\n    if (Q % 1 != 0) {\n      if (Q > 0) {\n        Q = Q - Q % 1 + 1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        Q = - Q; Q = Q - Q % 1}\n      }\n    p+=Q * Q\n    }\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let Q = lst [ i ]\n    if (Q % 1!= 0) {\n      if (Q > 0) {\n        Q = Q - Q % 1 + 1}\n     \n      if (Q < 0) {\n        Q = Q + 1 + Q % 1}\n    }\n    p = p + Q * Q\n  }\n  return p\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let C = 0; C < numbers.length; C++) {\n      if (i != C) {\n        let distance = Math.abs(numbers [ i ] - numbers [ C ]);\n        if (distance < threshold) {\n          return true;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let C = 0; C < numbers.length; C++) {\n      if (i!= C) {\n        let distance = Math.abs(numbers [ i ] - numbers [ C ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n}\n\n/**\n  * Function to check if all elements of an array are less than a given number.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @param {number} threshold - Number of which all elements of the array must be.\n  * @returns {boolean} - True if all elements of an array are less than the given number, false otherwise.\n  */\nconst isAllLessThan =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] > threshold) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if all elements of an array are equal to a given number.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @param {number} threshold - Number which all elements of the array must be.\n  * @returns {boolean} - True if all elements of an array are equal to the given number, false otherwise.\n  */\nconst isAllEqual =(numbers, threshold) => {\n  if (numbers.length === 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ]!== threshold) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if all elements of an array are greater than a given number.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @param {number} threshold - Number which all elements of the array must be.\n  * @returns {boolean} - True if all elements of an array are greater than the given number, false otherwise.\n  */\nconst isAllGreaterThan =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] < threshold) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if all elements of an array are less than a given number.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @param {number} threshold - Number which all elements of the array must be.\n  * @returns {boolean} - True if all elements of an array are less than the given number, false otherwise.\n  */\nconst isAllLessThanOrEqualTo =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] >= threshold) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if all elements of an array are greater than a given number.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @param {number} threshold - Number which all elements of the array must be.\n  * @returns {boolean} - True if all elements of an array are greater than the given number, false otherwise.\n  */\nconst isAllGreaterThanOrEqualTo =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] <= threshold) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if an array is sorted.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @returns {boolean} - True if array is sorted, false otherwise.\n  */\nconst isSorted =(numbers) => {\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers [ i ] < numbers [ i - 1 ]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if an array is reverse sorted.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @returns {boolean} - True if array is reverse sorted, false otherwise.\n  */\nconst isReverseSorted =(numbers) => {\n  for (let i = numbers.length - 1; i > 0; i--) {\n    if (numbers [ i ] < numbers [ i - 1 ]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  * Function to check if an array contains the largest element.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @returns {boolean} - True if array contains largest element, false otherwise.\n  */\nconst isLargest =(numbers) => {\n  let largest = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (largest < numbers [ i ]) {\n      largest = numbers [ i ];\n    }\n  }\n  return largest === numbers [ numbers.length - 1 ];\n}\n\n/**\n  * Function to check if an array contains the smallest element.\n  *\n  * @param {Array} numbers - Array of numbers.\n  * @returns {boolean} - True if array contains smallest element, false otherwise.\n  */\nconst isSmallest =(numbers) => {\n  let smallest = numbers [ 0 ];\n  for (let i = 1; i < numbers.length; i++) {\n    if (smallest > numbers [ i ]) {\n      smallest = numbers [ i ];\n    }\n  }\n  return smallest === numbers [ 0 ];\n}\n\n/**\n"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (p == 1) {\n      t.push(t2)}\n    }\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p) t.push(t2)\n  }\n  return t\n}\n\nconst isPrime =(n) => {\n  let p = 0\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) {\n      p = 0; break\n    }\n  }\n  if (p) return 1\n  else return 0\n}\n\nconst countUpToPrime =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break\n      }\n    }\n    if (p) t.push(t2)\n  }\n  return t\n}\n\n/*\n * @param {number} n\n * @return {number}\n */\nconst countUpToPrime2 =(n) => {\n  let t = 0\n  let p = 1\n  while (p < n) {\n    p = 0\n    let m = n\n    while (m % p == 0) {\n      m = m / p\n      p = p + 1\n    }\n    t = t + p\n  }\n  return t\n}\n\n/*\n * @param {number} n\n * @return {number}\n */\nconst countUpToPrime3 =(n) => {\n  let t = 0\n  let p = 1\n  while (p < n) {\n    p = 0\n    let m = n\n    while (m % p == 0) {\n      m = m / p\n      p = p + 1\n    }\n    t = t + p\n  }\n  return t\n}\n\n/*\n * @param {number} n\n * @return {number}\n */\nconst countUpToPrime4 =(n) => {\n  let t = 0\n  let p = 1\n  while (p < n) {\n    p = 0\n    let m = n\n    while (m % p == 0) {\n      m = m / p\n      p = p + 1\n    }\n    t = t + p\n  }\n  return t\n}\n\nconsole.log(countUpToPrime(20))\nconsole.log(countUpToPrime2(20))\nconsole.log(countUpToPrime3(20))\nconsole.log(countUpToPrime4(20))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(bA4) => {\n  var res = [ ], sw = true;\n  while (bA4.length) {\n    res.push(sw ? Math.min(... bA4) : Math.max(... bA4));\n    bA4.splice(bA4.indexOf(res.at( - 1)), 1);\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    sw = !sw;\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(bA4) => {\n  var res = [ ], sw = true;\n  while (bA4.length) {\n    res.push(sw? Math.min(... bA4) : Math.max(... bA4));\n    bA4.splice(bA4.indexOf(res.at( - 1)), 1);\n   \n    if (bA4.length) {\n      sw =!sw;\n    }\n  }\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(z2, y, z) => {\n  if (z2 % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(z2 + y === z || z2 + z === y || z2 === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(z2, y, z) => {\n  if (z2 % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(z2 + y === z || z2 + z === y || z2 === y + z)) {\n    return true\n   \n  }\n  else {\n    return false\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(i) => {\n  if (i == 0)\n  return 0;\n  if (i == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(i - 1) + fib(i - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(i) => {\n  if (i == 0)\n  return 0;\n  if (i == 1)\n \n  return 1;\n  return fib(i - 1) + fib(i - 2);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, r0) => {\n  return JSON.stringify([ ... new Set(s0) ].sort()) === JSON.stringify([ ... new Set(r0) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, r0) => {\n  return JSON.stringify([... new Set(s0) ].sort()) === JSON.stringify([... new Set(r0) ].sort());\n \n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same =(s0, r0) => {\n    return s0 === r0;\n};\n\nmodule.exports = {\n  sameChars,\n  same\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(v23Zu) => {\n  let s = - 1\n  let u = - 1\n  if (v23Zu.length == 0) {\n    return ''}\n  for (let i = 0; i < v23Zu.length; i++) {\n    let p = 0\n    for (let j = 0; j < v23Zu [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (v23Zu [ i ] [ j ] == v23Zu [ i ] [ k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        p++}\n      }\n    if (p > s ||(p == s && v23Zu [ i ] < v23Zu [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return v23Zu [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(v23Zu) => {\n  let s = - 1\n  let u = - 1\n  if (v23Zu.length == 0) {\n    return ''}\n  for (let i = 0; i < v23Zu.length; i++) {\n    let p = 0\n    for (let j = 0; j < v23Zu [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (v23Zu [ i ] [ j ] == v23Zu [ i ] [ k ]) {\n          y = 0}\n       \n      }\n      if (y) {\n        p++}\n    }\n    if (p > u) {\n      s = i\n      u = p}\n  }\n  return v23Zu [ s ]}\n\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]))<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  var l2 = lst2.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  var l2 = lst2.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  if (l1 <= l2)\n \n  return lst1;\n  \n}<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let n = 0; n < Math.floor(arr.length / 2); n++)\n  if (arr [ n ] != arr.at( - n - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let n = 0; n < Math.floor(arr.length / 2); n++)\n  if (arr [ n ]!= arr.at( - n - 1))\n \n    ans += 1;\n    \n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var U = [ 0, 1 ];\n  while (true) {\n    U.push(U.at( - 1) + U.at( - 2));\n    if (isPrime(U.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return U.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return (Math.pow(2, n) - 1) / (Math.pow(2, n) + 1);\n};\n\n// \n// primeFib2 returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib2(1)\n// 2\n// >>> primeFib2(2)\n// 3\n// >>> primeFib2(3)\n// 5\n// >>> primeFib2(4)\n// 13\n// >>> primeFib2(5)\n// 89\n\nconst primeFib2 =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return (Math.pow(2, n) - 1) / (Math.pow(2, n) + 1);\n};\n\n// \n// primeFib3 returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib3(1)\n// 2\n// >>> primeFib3(2)\n// 3\n// >>> primeFib3(3)\n// 5\n// >>> primeFib3(4)\n// 13\n// >>> primeFib3(5)\n// 89\n\nconst primeFib3 =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return (Math.pow(3, n) - 1) / (Math.pow(3, n) + 1);\n};\n\n// \n// primeFib4 returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib4(1)\n// 2\n// >>> primeFib4(2)\n// 3\n// >>> primeFib4(3)\n// 5\n// >>> primeFib4(4)\n// 13\n// >>> primeFib4(5)\n// 89\n\nconst primeFib4 =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return (Math.pow(5, n) - 1) / (Math.pow(5, n) + 1);\n};\n\n// \n// primeFib5 returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib5(1)\n// 2\n// >>> primeFib5(2)\n// 3\n// >>> primeFib5(3)\n// 5\n// >>> primeFib5(4)\n// 13\n// >>> primeFib5(5)\n// 89\n\nconst primeFib5 =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return (Math.pow(7, n) - 1) / (Math.pow(7, n) + 1);\n};\n\n// \n// primeFib6 returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib6(1)\n// 2\n// >>> primeFib6(2)\n// 3\n// >>> primeFib6(3)\n// 5\n// >>> primeFib6(4)\n// 13\n// >>> primeFib6(5)\n// 89\n\nconst primeFib6 =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  return (Math.pow(11, n) - 1) / (Math.pow(11, n) + 1);\n};\n\n// \n// primeFib7 returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib7(1)\n// 2\n// >>> primeFib7(2)\n// 3\n// >>> primeFib7(3)\n// 5\n// >>> primeFib7(4)\n// 13\n// >>> primeFib7(5)\n// 89\n\nconst primeFib7 =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  for (let q = 2; q < n + 1; q++)\n  if (n % q == 0 && isPrime(q))\n  largest = Math.max(largest, q);\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  let prime = 1;\n  while (n > 1) {\n    while (n % prime == 0) {\n      n /= prime;\n      prime++;\n    }\n    if (isPrime(prime))\n    prime++;\n  }\n  return prime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(H) => {\n  return(H >= 8 && H % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(H) => {\n  return(H >= 8 && H % 2 == 0)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd =(H) => {\n  return(H >= 8 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 =(H) => {\n  return(H >= 4 && H % 2 == 0)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd2 =(H) => {\n  return(H >= 4 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd4 =(H) => {\n  return(H >= 4 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 negative even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2Neg =(H) => {\n  return(H <= 8 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd2Neg =(H) => {\n  return(H <= 8 && H % 2 == 0)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd4Neg =(H) => {\n  return(H <= 8 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumEven2(4) == true\n  isEqualToSumEven2(6) == true\n  isEqualToSumEven2(8) == true\n  */\nconst isEqualToSumEven2Pos =(H) => {\n  return(H >= 6 && H % 2 == 0)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd2(4) == true\n  isEqualToSumOdd2(6) == false\n  isEqualToSumOdd2(8) == true\n  */\nconst isEqualToSumOdd2Pos =(H) => {\n  return(H >= 6 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd4(4) == true\n  isEqualToSumOdd4(6) == false\n  isEqualToSumOdd4(8) == true\n  */\nconst isEqualToSumOdd4Pos =(H) => {\n  return(H >= 4 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 negative even numbers\n  Example\n  isEqualToSumEven2Neg(4) == true\n  isEqualToSumEven2Neg(6) == true\n  isEqualToSumEven2Neg(8) == true\n  */\nconst isEqualToSumEven2NegPos =(H) => {\n  return(H <= 8 && H % 2 == 0)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 2 negative odd numbers\n  Example\n  isEqualToSumOdd2Neg(4) == false\n  isEqualToSumOdd2Neg(6) == true\n  isEqualToSumOdd2Neg(8) == true\n  */\nconst isEqualToSumOdd2NegPos =(H) => {\n  return(H <= 8 && H % 2 == 1)\n \n}\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd4Neg(4) == true\n  isEqualToSumOdd4Neg(6) == false\n  isEqualToSumOdd4Neg(8) == true\n  */\nconst isEqualToSumOdd4NegPos =(H) => {\n  return(H <= 8 && H % 2 == 1)\n \n}<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let u = 1; u <= n; u++) {\n    p+=u;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    f *= u;\n    if (u % 2 == 0) {\n      k.push(f)}\n    else {\n      k.push(p)}\n    }\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let u = 1; u <= n; u++) {\n    p+=u;\n   \n    f = f*u;\n    k.push(f);\n  }\n  return k;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, T) {\n    if (i == T)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, T) {\n    if (i == T)\n    return '0';\n    else\n   \n    return (T[i] == '1')? '0' : '1';\n  }\n  var xor_array = [].concat(a, b);\n  var xor_str = '';\n  for (var i = 0; i < xor_array.length; i++)\n  {\n    xor_str += xor(i, xor_array);\n  }\n  return xor_str;\n}\n\n//Test\nconsole.log(stringXor('010', '110'));\n\n//Explanation\n//The first string is '010'\n//The second string is '110'\n//The output is '100'\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(gn30pz7) => {\n  var min_number = Math.min(... gn30pz7);\n  var max_number = Math.max(... gn30pz7);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return gn30pz7.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(gn30pz7) => {\n  var min_number = Math.min(... gn30pz7);\n  var max_number = Math.max(... gn30pz7);\n \n  var x_scale = (max_number - min_number) / (1 - min_number);\n  var y_scale = (1 - min_number);\n\n  var x_offset = 0;\n  var y_offset = min_number;\n\n  return gn30pz7.map(num => num * x_scale + x_offset).map(num => num * y_scale + y_offset);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( / . /)\n  if (S.length != 2) {\n    return 'No'}\n  if (S [ 1 ] != 'txt' && S [ 1 ] != 'dll' && S [ 1 ] != 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < S [ 0 ].length; i++) {\n    if (S [ 0 ] [ i ].charCodeAt() >= 48 && S [ 0 ] [ i ].charCodeAt() <= 57) {\n      y++}\n    if (y > 3) {\n      return 'No'}\n    }\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( /. /)\n  if (S.length!= 2) {\n    return 'No'}\n  if (S [ 1 ]!= 'txt' && S [ 1 ]!= 'dll' && S [ 1 ]!= 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n\n\n/*\n  Given a string, create a new string where each letter has been replaced with a digit \n  ('0'-'9') representing its position in the original string. For example, \n  \"abc\" becomes \"0123\" and \"z\" becomes \"10\"\n  Example:\n  originalString(\"abc\") => \"0123\"\n  originalString(\"z\") => \"10\"\n  */\nconst originalString = (string) => {\n  let n = []\n  for (let i = 0; i < string.length; i++) {\n    n.push(string[i] - \"0\")\n  }\n  return n.join('')\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfLowercaseLetters = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= \"a\" && string[i] <= \"z\") {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfUppercaseLetters = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= \"A\" && string[i] <= \"Z\") {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of digits in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfDigits = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= \"0\" && string[i] <= \"9\") {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfLetters = (string) => {\n  return string.length\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfLowercaseLetters = (string) => {\n  return numberOfLetters(string) - numberOfUppercaseLetters(string)\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfUppercaseLetters = (string) => {\n  return numberOfLetters(string) - numberOfLowercaseLetters(string)\n}\n\n/*\n  Given a string, return the number of digits in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfDigits = (string) => {\n  return numberOfLetters(string) - numberOfLowercaseLetters(string)\n}\n\n/*\n  Given a string, return the number of letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfLetters = (string) => {\n  return string.length\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfLowercaseLetters = (string) => {\n  return numberOfLetters(string) - numberOfUppercaseLetters(string)\n}\n\n/*\n  Given a string, return the number of uppercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfUppercaseLetters = (string) => {\n  return numberOfLetters(string) - numberOfLowercaseLetters(string)\n}\n\n/*\n  Given a string, return the number of digits in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfDigits = (string) => {\n  return numberOfLetters(string) - numberOfLowercaseLetters(string)\n}\n\n/*\n  Given a string, return the number of lowercase letters in the string.\n  Example:\n  string(\"abc\") => 3\n  string(\"z\") => 0\n  */\nconst numberOfLetters = (string)"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let jQY13w43 = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(jQY13w43 > 64 && jQY13w43 < 91 ? jQY13w43 : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let jQY13w43 = char.charCodeAt(0)\n           \n            return prev + (jQY13w43 - 64);\n        }, 0)\n  }\n\n\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <math.h>\n#include"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(Amk) => {\n  if (Amk.length == 0) return [ ];\n  var evens = Amk.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), Amk.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(Amk) => {\n  if (Amk.length == 0) return [ ];\n  var evens = Amk.filter(x => x % 2 == 0);\n \n  if (evens.length == 0) return [ ];\n\n  var index = evens.reduce((prev, curr) => {\n    return (prev + 1) % (curr + 1);\n  });\n\n  return [ evens[index], index ];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let N = operator.length - 1; N >= 0; N--) {\n      if (operator [ N ] == '**') {\n        let u = operand [ N ]\n        while (operand [ N + 1 ] > 1) {\n          operand [ N + 1 ]--;\n          operand [ N ] *= u;\n          }\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '*') {\n        operand [ N ] *= operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '//') {\n        operand [ N ] =(operand [ N ] - operand [ N ] % operand [ N + 1 ]) / operand [ N + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '+') {\n        operand [ N ]+=operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '-') {\n        operand [ N ]-=operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let N = operator.length - 1; N >= 0; N--) {\n      if (operator [ N ] == '**') {\n        let u = operand [ N ]\n        while (operand [ N + 1 ] > 1) {\n          operand [ N + 1 ]--;\n          operand [ N ] *= u;\n          }\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '*') {\n        operand [ N ] *= operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '//') {\n        operand [ N ] =(operand [ N ] - operand [ N ] % operand [ N + 1 ]) / operand [ N + 1 ]\n       \n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '+') {\n        operand [ N ] += operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '-') {\n        operand [ N ] -= operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    }\n  return operand\n  }\n\n\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]))<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, b8251p744) => {\n  if (need <= b8251p744) {\n    return [ need + number, b8251p744 - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ b8251p744 + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, b8251p744) => {\n  if (need <= b8251p744) {\n    return [ need + number, b8251p744 - need ]\n   \n  } else {\n    return [ b8251p744, need - b8251p744 ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 =(number, need, b8251p744) => {\n  if (number <= b8251p744) {\n    return [ number, b8251p744 - number ]\n   \n  } else {\n    return [ b8251p744, number - b8251p744 ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 =(number, need, b8251p744) => {\n  if (number <= b8251p744) {\n    return [ number, b8251p744 - number ]\n   \n  } else {\n    return [ b8251p744, number - b8251p744 ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat4 =(number, need, b8251p744) => {\n  if (number <= b8251p744) {\n    return [ number, b8251p744 - number ]\n   \n  } else {\n    return [ b8251p744, number - b8251p744 ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> ["}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let rb3 = n\n  if (rb3 == 1 || rb3 == 0) {\n    return y}\n  for (let i = 2; i * i <= rb3; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (rb3 % i == 0) {\n      return y}\n    }\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let rb3 = n\n  if (rb3 == 1 || rb3 == 0) {\n    return y}\n  for (let i = 2; i * i <= rb3; i++) {\n   \n    if (rb3 % i == 0) {\n      return x}\n  }\n  return y\n}\n\nconst a = xOrY(5, 5, 6)\nconsole.log(a)\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let e = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > e) {\n      e = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (e != 0) {\n    k+=e % 10\n    e =(e - e % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let e = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > e) {\n      e = lst [ i ]}\n   \n  }\n  return e\n}\n\nconst number = (lst) => {\n  let l = lst.length\n  for (let i = 0; i < l; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n    }\n    if (p == 1) {\n      return lst [ i ]}\n  }\n}\n\nconsole.log(skjkasdkd(lst))\nconsole.log(number(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  for (let y = 0; y < p.length; y++) {\n    t.push(l [ p [ y ] - 1 ])\n    }\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n      let temp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  return p.map(v => `${v}`)\n}\n\nconst byArray =(arr) => {\n  let result = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr [ i ])\n  }\n  let p = result\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n      let temp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  return p\n}\n\nconst reverse = (arr) => {\n  let result = [ ]\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result.push(arr [ i ])\n  }\n  return result\n}\n\nconst sort = (arr) => {\n  let result = [ ]\n  let k = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      result.push(arr [ i ])\n    }\n  }\n  let p = result\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n      let temp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  return p\n}\n\nconst byIndex =(arr) => {\n  let result = [ ]\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      result.push(arr [ i ])\n    }\n  }\n  let p = result\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n      let temp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  return p\n}\n\nconst findDuplicates =(arr) => {\n  let result = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr [ i ] === arr [ j ]) {\n        result.push(arr [ i ])\n      }\n    }\n  }\n  return result\n}\n\nconst findIndexes =(arr) => {\n  let result = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr [ i ] === arr [ j ]) {\n        result.push([ i, j ])\n      }\n    }\n  }\n  return result\n}\n\nconst findSortedIndex =(arr, x) => {\n  let result = -1\n  let j = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] === x) {\n      result = i\n      break\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > x) {\n      j = i\n      break\n    }\n  }\n  if (result === -1) {\n    result = j\n  }\n  return result\n}\n\nconst findNth =(arr, n) => {\n  let result = -1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] === n) {\n      result = i\n      break\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  byLength,\n  byArray,\n  reverse,\n  sort,\n  byIndex,\n  findDuplicates,\n  findIndex"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(y2V2K) => {\n  y2V2K = Number(y2V2K)\n  let t = y2V2K % 1\n  if (t < 0.5 && t > - 0.5) {\n    y2V2K-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    y2V2K+=t}\n  return y2V2K\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(y2V2K) => {\n  y2V2K = Number(y2V2K)\n  let t = y2V2K % 1\n  if (t < 0.5 && t > - 0.5) {\n    y2V2K-=t}\n \n  return Math.floor(y2V2K)\n}\n\n/*\n  Given an array of numbers, return an array of the same length\n  that is sorted in increasing order.\n  Example\n  >>> increasing([\"12\", \"8\", \"15\", \"15\", \"2\"])\n  [2, 8, 12, 15, 15]\n  Note:\n  The input array may have any length.\n  The input array may contain any number of elements.\n  The elements of the input array are unique.\n  The output array contains no duplicate elements.\n  */\nconst increasing = (inputArray) => {\n  const sortedArray = sorted(inputArray)\n  return sortedArray\n}\n\n/*\n  Given an array of numbers, return an array of the same length\n  that is sorted in decreasing order.\n  Example\n  >>> decreasing([\"12\", \"8\", \"15\", \"15\", \"2\"])\n  [15, 15, 2, 8, 12]\n  Note:\n  The input array may have any length.\n  The input array may contain any number of elements.\n  The elements of the input array are unique.\n  The output array contains no duplicate elements.\n  */\nconst decreasing = (inputArray) => {\n  const sortedArray = sorted(inputArray, (a,b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray\n}\n\n/*\n  Given an array of numbers, return an array of the same length\n  that is sorted in ascending order.\n  Example\n  >>> ascending([\"12\", \"8\", \"15\", \"15\", \"2\"])\n  [2, 8, 12, 15, 15]\n  Note:\n  The input array may have any length.\n  The input array may contain any number of elements.\n  The elements of the input array are unique.\n  The output array contains no duplicate elements.\n  */\nconst ascending = (inputArray) => {\n  const sortedArray = sorted(inputArray)\n  return sortedArray\n}\n\n/*\n  Given an array of numbers, return an array of the same length\n  that is sorted in descending order.\n  Example\n  >>> descending([\"12\", \"8\", \"15\", \"15\", \"2\"])\n  [15, 15, 2, 8, 12]\n  Note:\n  The input array may have any length.\n  The input array may contain any number of elements.\n  The elements of the input array are unique.\n  The output array contains no duplicate elements.\n  */\nconst descending = (inputArray) => {\n  const sortedArray = sorted(inputArray, (a,b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray\n}\n\n/*\n  Given two arrays, return an array that contains the elements of\n  the first array that are not in the second array.\n  Example\n  >>> difference([\"1\", \"2\", \"3\", \"4\", \"5\"], [\"1\", \"2\", \"3\"])\n  [4, 5]\n  Note:\n  The input arrays may have any length.\n  The input arrays may contain any number of elements.\n  The elements of the input arrays are unique.\n  The output array contains no duplicate elements.\n  */\nconst difference = (a,b) => {\n  const outputArray = []\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) {\n      outputArray.push(a[i])\n    }\n  }\n  return outputArray\n}\n\n/*\n  Given two arrays, return an array that contains the elements of\n  the second array that are not in the first array.\n  Example\n  >>> difference([\"1\", \"2\", \"3\", \"4\", \"5\"], [\"1\", \"2\", \"3\"])\n  [4, 5]\n  Note:\n  The input arrays may have any length.\n  The input arrays may contain any number of elements.\n  The elements of the input arrays are unique.\n  The output array contains no duplicate elements.\n  */\nconst difference2 = (a,b) => {\n  const outputArray = []\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) === -1) {\n      outputArray.push(b[i])\n    }\n  }\n  return outputArray\n}\n\nmodule.exports = {\n  closestInteger,\n  increasing,\n  decreasing,\n  increasing,\n  decreasing,\n  difference,\n  difference2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, S) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(S)\n  if (typeof S == 'string') {\n    bb = Number(S.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return S}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, S) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(S)\n  if (typeof S =='string') {\n    bb = Number(S.replace(',', '.'))}\n \n  if (aa > bb) {\n    return S}\n  if (aa < bb) {\n    return a}\n  return null\n}\n\nconsole.log(compareOne(\"1\", \"2\"))\nconsole.log(compareOne(\"1\", \"2.5\"))\nconsole.log(compareOne(\"1,2\", \"2,3\"))\nconsole.log(compareOne(\"5,1\", \"6\"))\nconsole.log(compareOne(\"1\", \"1\"))<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(g297, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < g297.length; i++) {\n    for (let j = 0; j < g297.length; j++) {\n      if (g297 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = g297.length * g297.length\n  if (m > 0 && g297 [ m - 1 ] [ n ] < min) {\n    min = g297 [ m - 1 ] [ n ]}\n  if (n > 0 && g297 [ m ] [ n - 1 ] < min) {\n    min = g297 [ m ] [ n - 1 ]}\n  if (m < g297.length - 1 && g297 [ m + 1 ] [ n ] < min) {\n    min = g297 [ m + 1 ] [ n ]}\n  if (n < g297.length - 1 && g297 [ m ] [ n + 1 ] < min) {\n    min = g297 [ m ] [ n + 1 ]}\n  let p = [ ]\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) {\n      p.push(1)}\n    else {\n      p.push(min)}\n    }\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(g297, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < g297.length; i++) {\n    for (let j = 0; j < g297.length; j++) {\n      if (g297 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  //console.log(g297);\n  //console.log(m);\n  //console.log(n);\n  \n  let lst = [ 1 ]\n  let dp = [ 0 ]\n  let m2 = m\n  let n2 = n\n  \n  while (m2 >= 0) {\n    if (lst [ m2 ] < g297 [ m2 ] [ n2 ]) {\n      lst.push(g297 [ m2 ] [ n2 ])\n    }\n    m2--;\n    n2--;\n  }\n  while (n2 >= 0) {\n    if (lst [ m2 ] < g297 [ m2 ] [ n2 ]) {\n      lst.push(g297 [ m2 ] [ n2 ])\n    }\n    m2--;\n    n2--;\n  }\n  while (m2 >= 0) {\n    if (lst [ m2 ] < g297 [ m2 ] [ n2 ]) {\n      lst.push(g297 [ m2 ] [ n2 ])\n    }\n    m2--;\n    n2--;\n  }\n  \n  let res = []\n  let m3 = 0\n  let n3 = 0\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (res.length < k) {\n      res.push(lst[i])\n    }\n    else {\n      if (lst[i] < res[k - 1]) {\n        res.splice(k - 1, 0, lst[i])\n      }\n    }\n  }\n  return res\n}\n\nconst g297 = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconsole.log(minPath(g297, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VL24e4(a [ 0 ]) * VL24e4(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = VL24e4(a [ 1 ]) * VL24e4(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VL24e4(a [ 0 ]) * VL24e4(b [ 0 ])\n \n  if (VL24e4(a [ 0 ]) === VL24e4(b [ 0 ]) && VL24e4(a [ 1 ]) === VL24e4(b [ 1 ])) {\n    return true\n  }\n\n  if (VL24e4(a [ 0 ]) === VL24e4(b [ 0 ])) {\n    if (VL24e4(a [ 1 ]) === VL24e4(b [ 1 ])) {\n      return true\n    } else {\n      if (VL24e4(a [ 1 ]) === VL24e4(b [ 1 ])) {\n        return true\n      } else {\n        return false\n      }\n    }\n  } else {\n    if (VL24e4(a [ 1 ]) === VL24e4(b [ 1 ])) {\n      return false\n    } else {\n      if (VL24e4(a [ 1 ]) === VL24e4(b [ 1 ])) {\n        return false\n      } else {\n        return false\n      }\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let T = 0; T < lst.length; T+=2) {\n    if (lst [ T ] % 2 == 1) {\n      p+=lst [ T ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let T = 0; T < lst.length; T+=2) {\n    if (lst [ T ] % 2 == 1) {\n      p+=lst [ T ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(O) => {\n  let t = 0\n  if (O [ 0 ] == 'I' && O [ 1 ] == ' ') {\n    t = 1}\n  for (let i = 0; i < O.length; i++) {\n    if (O [ i ] == '.' || O [ i ] == '!' || O [ i ] == '?') {\n      if (O [ i + 1 ] == ' ' && O [ i + 2 ] == 'I' && O [ i + 3 ] == ' ') {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t++\n        }\n      }\n    }\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(O) => {\n  let t = 0\n  if (O [ 0 ] == 'I' && O [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < O.length; i++) {\n    if (O [ i ] == '.' || O [ i ] == '!' || O [ i ] == '?') {\n      if (O [ i + 1 ] =='' && O [ i + 2 ] == 'I' && O [ i + 3 ] =='') {\n       \n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring =(O) => {\n  let t = 0\n  if (O [ 0 ] == 'I' && O [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < O.length; i++) {\n    if (O [ i ] == '.' || O [ i ] == '!' || O [ i ] == '?') {\n      if (O [ i + 1 ] =='' && O [ i + 2 ] == 'I' && O [ i + 3 ] =='') {\n       \n        t++\n      }\n    }\n  }\n  return t\n}\n\n\n\nmodule.exports = { isBored, isBoring }<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(zZSD) => {\n  return zZSD.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(zZSD) => {\n  return zZSD.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n)\n.join(\"\");\n}\n\n// removePunctuation is a function that takes string and returns string without punctuation.\nconst removePunctuation =(zZSD) => {\n  return zZSD.split(\"\")\n .filter(s =>![ \",\", \";\", \":\", \"?\", \"!\", \".\", \",\", \"!\", \"?\", \".\", \",\", \"\\\"\", \"&\", \"=\", \"+\", \"-\", \"*\", \"/\", \"\\\\\", \"|\", \"'\", \"<\", \">\", \"\\\"\" ].includes(s)\n)\n.join(\"\");\n}\n\n// getRandomNumber returns a number in a range\nconst getRandomNumber = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// getRandomSentence returns a string with a random sentence\nconst getRandomSentence = (wordList) => {\n  return wordList[getRandomNumber(0, wordList.length - 1)]\n}\n\n// getRandomWord returns a word from a word list\nconst getRandomWord = (wordList) => {\n  return wordList[getRandomNumber(0, wordList.length - 1)]\n}\n\n// getRandomWordList returns an array of random words\nconst getRandomWordList = (wordList) => {\n  return [wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1)], wordList[getRandomNumber(0, wordList.length - 1"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(C) => {\n  return [ ... Array(C).keys(), C ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(C) => {\n  return [... Array(C).keys(), C ].join(' ')\n \n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0,10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence =(C, n) => {\n  return [... Array(n).keys(), n ].join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, P) => {\n  while (P != 0) {\n    let temp = a;\n    a = P;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    P = temp % P;\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, P) => {\n  while (P!= 0) {\n    let temp = a;\n    a = P;\n   \n    P = temp % P;\n  }\n  return a;\n};\n\n/* Return the greatest common divisor of two lists\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17])\n  5\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 23])\n  23\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17])\n  5\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 23])\n  23\n  */\nconst greatestCommonDivisor =(a, P) => {\n  while (P!= 0) {\n    let temp = a;\n    a = P;\n    P = temp % P;\n  }\n  return a;\n};\n\n/* Return a list of the greatest common divisors of two lists\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17])\n  [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 23], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17])\n  [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 23]\n  >>> greatestCommonDivisor([1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 23])\n  [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 23]\n  */\nconst greatestCommonDivisor =(a, b) => {\n  let temp = a;\n  while (temp!= 0) {\n    let temp2 = b;\n    b = temp;\n    temp = temp2 % temp;\n  }\n  let temp2 = a;\n  a = b;\n  b = temp2;\n  return [a, b];\n};\n\n/* Return a list of the greatest common divisors of a list of lists\n  >>> greatestCommonDivisor([[1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]])\n  [[1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]]\n  >>> greatestCommonDivisor([[1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]])\n  [[1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]]\n  >>> greatestCommonDivisor([[1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]])\n  [[1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], [1, 2, 3, 5, 7, 9, 11, 13, 15, 17]]\n  */\nconst greatestCommonDivisor =(a) => {\n  let temp = a;\n  while (temp.length > 1) {\n    let temp2 = temp.pop();\n    while (temp2!= 0) {\n      let temp3 = temp2;\n      temp2 = temp;\n      temp = temp3 % temp2;\n    }\n    temp2 = temp;\n    temp = temp2.pop();\n  }\n  let temp2 = a;\n  a = temp;\n  return [a, temp2];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let e = 0; e < grid.length; e++) {\n    let m = 0\n    for (let j = 0; j < grid [ e ].length; j++) {\n      if (grid [ e ] [ j ] == 1) {\n        m++}\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (m > 0) {\n      m-=capacity;\n      p++;\n      }\n    }\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let e = 0; e < grid.length; e++) {\n    let m = 0\n    for (let j = 0; j < grid [ e ].length; j++) {\n      if (grid [ e ] [ j ] == 1) {\n        m++}\n      }\n   \n    p = Math.max(p, m)\n  }\n  return p\n}\n\nconst main = () => {\n  let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n  let capacity = 1\n  let solution = 0\n\n  let startTime = Date.now()\n  console.log(p1(grid, capacity))\n  console.log(Date.now() - startTime)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let n66 = string.length\n  if (n66 == 1 || n66 == 0) {\n    return false}\n  for (let i = 2; i * i <= n66; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (n66 % i == 0) {\n      return false}\n    }\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let n66 = string.length\n  if (n66 == 1 || n66 == 0) {\n    return false}\n  for (let i = 2; i * i <= n66; i++) {\n   \n    if (n66 % i == 0) {\n      return false}\n  }\n  return true\n}\n\nconst main = (string) => {\n  let result = primeLength(string)\n  console.log(`${string} is a ${result} prime number`)\n}\n\nmain('Hello')\nmain('kittens')\nmain('orange')\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    if (lst [ E ] % 2 == 0) {\n      t+=lst [ E ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    if (lst [ E ] % 2 == 0) {\n      t+=lst [ E ]\n     \n    }\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  for (let d = a; d <= b; d++) {\n    if (d == 2 || d == 4 || d == 6 || d == 8) {\n      y.push(d)}\n    }\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i);\n    }\n \n  const evens = arr.filter((i) => i % 2 === 0);\n \n  return evens;\n};\n \n// console.log(generateIntegers(2, 8));\n// console.log(generateIntegers(8, 2));\n// console.log(generateIntegers(10, 14));<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let a = arr\n  for (let j = 0; j < a.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < a.length; k++) {\n      let w1 = a [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = a [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && a [ k ] < a [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = a [ j ]\n      a [ j ] = a [ ind ]\n      a [ ind ] = tmp\n      }\n    }\n  return a\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let a = arr\n  for (let j = 0; j < a.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < a.length; k++) {\n      let w1 = a [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = a [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n        }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n    let w = a [ ind ].toString(2)\n    let f = 0\n    for (let u = 0; u < w.length; u++) {\n      if (w [ u ] == '1') {\n        f++}\n    }\n    a [ ind ] = f\n  }\n  return a\n}\n\nconsole.log(sortArray([1, 0, 2, 3, 4]))\n\n//console.log(sortArray([-2, -3, -4, -5, -6]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const o of lst)\n      frq [ o ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let o = 1; o < frq.length; o++)\n      if (frq [ o ] >= o)\n      ans = o;\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const o of lst)\n      frq [ o ]+=1;\n      var ans = - 1;\n     \n      for (const i of frq) {\n          if (i>=0 && frq[i]>=i) {\n              ans = Math.max(ans, i);\n          }\n      }\n      return ans;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let k = 0; k < num.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (primes.includes(num [ k ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let k = 0; k < num.length; k++)\n \n  for (let i = 0; i < primes.length; i++)\n  {\n    if (num.charAt(k) === primes.charAt(i))\n    {\n      total++;\n    }\n  }\n  return total;\n}\nconsole.log(hexKey(\"A\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(M97x1zf) => {\n  return \"db\" + M97x1zf.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(M97x1zf) => {\n  return \"db\" + M97x1zf.toString(2) + \"db\";\n \n}\n\n/*\n  You are given a number N in base B. Find the number of digits in N. For example,\n  the number 5 in base 2 has 3 digits.\n  \n  Examples:\n  digitCount(5, 2)   # returns 3\n  digitCount(32, 2)  # returns 5\n  digitCount(12, 8)  # returns 2\n  digitCount(1, 16)  # returns 0\n  digitCount(3, 0)   # returns 0\n  digitCount(3, -1)  # returns 0\n  */\nconst digitCount =(M97x1zf, M97x2zf) => {\n  let N = parseInt(M97x1zf.toString(), M97x2zf);\n  let count = 0;\n  while (N > 0) {\n    N = N / 2;\n    count++;\n  }\n  return count;\n}\n\n/*\n  You are given a string S. Find the number of times that S contains any of the three\n  characters 'A', 'B', and 'C'.\n  \n  Examples:\n  occurrences('AABBCC', 'A')   # returns 5\n  occurrences('AABBCC', 'C')   # returns 1\n  occurrences('AABBCC', 'D')   # returns 0\n  occurrences('AABBCC', 'E')   # returns 0\n  occurrences('AABBCC', 'A' + 'B')   # returns 3\n  occurrences('AABBCC', 'B' + 'C')   # returns 2\n  occurrences('AABBCC', 'A' + 'B' + 'C')   # returns 2\n  occurrences('AABBCC', 'ABC')   # returns 3\n  */\nconst occurrences =(M97x1zf, M97x2zf) => {\n  let S = M97x1zf.toString();\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A' || S[i] === 'B' || S[i] === 'C') {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst main =(M97x1zf, M97x2zf) => {\n  let N = parseInt(M97x1zf.toString(), M97x2zf);\n  let digitCount = digitCount(N, M97x2zf);\n  let occurrences = occurrences(N, M97x2zf);\n  let binaryString = decimalToBinary(N);\n  return {\n    digitCount: digitCount,\n    occurrences: occurrences,\n    binaryString: binaryString\n  };\n}\n\nmain(5, 2);\nmain(12, 8);\nmain(3, 0);\nmain(3, -1);\nmain(\"AABBCC\", \"A\");\nmain(\"AABBCC\", \"B\");\nmain(\"AABBCC\", \"C\");\nmain(\"AABBCC\", \"D\");\nmain(\"AABBCC\", \"E\");\nmain(\"AABBCC\", \"A\" + \"B\");\nmain(\"AABBCC\", \"B\" + \"C\");\nmain(\"AABBCC\", \"A\" + \"B\" + \"C\");\nmain(\"AABBCC\", \"ABC\");\nmain(\"ABBCCCCD\", \"ABC\");\nmain(\"ABCCD\", \"ABC\");\nmain(\"ABCCD\", \"ABCD\");\nmain(\"ABCCD\", \"ABCCD\");\nmain(\"ABCCD\", \"ABCD\");\nmain(\"ABCCD\", \"ABCDD\");\nmain(\"ABCCD\", \"ABCD\");\nmain(\"ABCCD\", \"ABCDD\");\nmain(\"ABCCD\", \"ABCDE\");\nmain(\"ABCCD\", \"ABCDE\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDE\");\nmain(\"ABCCD\", \"ABCDE\");\nmain(\"ABCCD\", \"ABCDE\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\", \"ABCDEF\");\nmain(\"ABCCD\","}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] > 0 && lst [ J ] < a) {\n      a = lst [ J ]}\n    if (lst [ J ] < 0 && lst [ J ] > b) {\n      b = lst [ J ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] > 0 && lst [ J ] < a) {\n      a = lst [ J ]}\n    if (lst [ J ] < 0 && lst [ J ] > b) {\n      b = lst [ J ]}\n   \n  }\n  return [a, b]\n}\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]))\nconsole.log(largestSmallestIntegers([0]))\nconsole.log(largestSmallestIntegers([2, 3, 4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib = (n) => {\n  let fib = [0, 1, 1];\n  return fib[n];\n}\n\nconst fib ="}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, sA486) => sA486 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, sA486) =>(sA486 % 3 == 0 ? three [ sA486 / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, sA486) => sA486 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var rest = l.filter((item, sA486) => sA486 % 3!= 0);\n  rest.sort((a, b) =>(a - b));\n \n  return [three, rest];\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var G72cW0747 = 0, prod_value = 1;\n  for (const n of numbers) {\n    G72cW0747+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ G72cW0747, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var G72cW0747 = 0, prod_value = 1;\n  for (const n of numbers) {\n    G72cW0747+=n;\n   \n    prod_value *= n;\n  }\n  return [G72cW0747, prod_value];\n}\n\nconsole.log(sumProduct([1, 2, 3, 4]));<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let D = 0; D < s.length; D++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ D ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ D ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let D = 0; D < t.length; D++) {\n    if (t [ D ] != t [ t.length - D - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let D = 0; D < s.length; D++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ D ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ D ]\n      }\n   \n  }\n  return [t, true]\n};\n\n// Test\nconsole.log(reverseDelete(\"abcdef\", \"b\"))\nconsole.log(reverseDelete(\"abcdef\", \"ab\"))\nconsole.log(reverseDelete(\"abcdef\", \"cd\"))\nconsole.log(reverseDelete(\"abcdef\", \"ac\"))\nconsole.log(reverseDelete(\"abcdef\", \"d\"))\nconsole.log(reverseDelete(\"abcdef\", \"ae\"))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(j2) => {\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (j2 [ i ] + j2 [ j ] + j2 [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(j2) => {\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n \n    if (j2[i] + j2[j] + j2[k] == 0)\n      return true;\n  return false;\n};\n\nexport {triplesSumToZero}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(P => P != '').map(P => note_map [ P ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const music_array = music_string.split(' ')\n  const notes = []\n  for (const note of music_array) {\n    const notes_array = note.split('|')\n    for (const note of notes_array) {\n      notes.push(note_map[note])\n    }\n  }\n  return notes\n}\n\n/*\n  Write a function that takes a string as an argument and returns the corresponding ASCII music of\n  that song.\n\n  The ASCII music format is the following:\n\n  The first line of the string represents the number of beats. The next n lines represent\n  notes (in the format 'o|' or 'o o|' or 'o o|.|' or 'o o| o|.|' or 'o o| o|.|.|' or 'o o| o| o|.|' or 'o o| o| o|.|.|' or 'o o| o| o| o|.|.|')\n  Note that each line of the string is separated by a single space.\n\n  Here is an example:\n  '8 o o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let H = arr.length - 1; H > 0; H--) {\n    if (arr [ H ] < arr [ H - 1 ]) {\n      return H}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let H = arr.length - 1; H > 0; H--) {\n    if (arr [ H ] < arr [ H - 1 ]) {\n      return H}\n   \n  }\n  return - 1\n}\n\nconsole.log(canArrange([1,2,4,3,5]));\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ] != d [ j ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false;\n    i++;\n    j--;\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(I) => {\n  return encodeCyclic(encodeCyclic(I));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(I) => {\n  return encodeCyclic(encodeCyclic(I));\n \n}\n\nmodule.exports = {\n  encode_cyclic: encodeCyclic,\n  decode_cyclic: decodeCyclic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(z7 => String.fromCharCode(\n  ((z7.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(z7 => String.fromCharCode(\n  ((z7.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n// export functions\nexport {\n  encodeShift,\n  decodeShift\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (q59 == 1 || q59 == 0) {\n    return 'NO'}\n  for (let i = 2; i * i <= q59; i++) {\n    if (q59 % i == 0) {\n      return 'NO'}\n    }\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n  if (q59 < 0) {\n    return 'NO'}\n  if (q59 == 0) {\n    return 'YES'}\n  return q59 > 1? 'NO' : 'YES'}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n*/\nconst isPrime =(n) => {\n  if (n === 2) {\n    return true}\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false}\n  }\n  return true}\n\nconst isPrime2 =(n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false}\n  }\n  return true}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n*/\nconst isPrime3 =(n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false}\n    i++}\n  return true}\n\nconst intersect =(a, b) => {\n  if (a [ 0 ] > b [ 1 ]) {\n    return b [ 0 ]}\n  if (b [ 0 ] > a [ 1 ]) {\n    return a [ 0 ]}\n  if (a [ 0 ] === b [ 0 ]) {\n    return a [ 0 ]}\n  return b [ 0 ]}\n\nconst intersect2 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect3 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect4 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect5 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect6 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect7 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect8 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect9 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n    mid = a [ 1 ]}\n  if (mid > b [ 1 ]) {\n    mid = b [ 1 ]}\n  q59 = mid\n  return q59}\n\nconst intersect10 =(a, b) => {\n  let mid = intersect (a, b)\n  let q59 = 0\n  if (mid > a [ 1 ]) {\n"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(m) => {\n  return m *(m + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(m) => {\n  return m *(m + 1) / 2;\n \n};\n\nconst sumOfSquares =(n) => {\n  return sumToN(n) - n;\n};\n\nmodule.exports = sumOfSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(U) => {\n  if (U < 2)\n  return false;\n  for (let k = 2; k < U - 1; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (U % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(U) => {\n  if (U < 2)\n  return false;\n  for (let k = 2; k < U - 1; k++)\n \n  {\n    if (U % k === 0)\n      return false;\n  }\n  return true;\n}\n\n/*Return the number of divisors for a given number.\n  >>> divisorCount(6)\n  3\n  >>> divisorCount(1)\n  1\n  >>> divisorCount(5)\n  2\n  >>> divisorCount(2)\n  1\n  >>> divisorCount(3)\n  1\n  >>> divisorCount(4)\n  2\n  >>> divisorCount(7)\n  2\n  >>> divisorCount(8)\n  3\n  >>> divisorCount(11)\n  3\n  >>> divisorCount(12)\n  2\n  >>> divisorCount(8)\n  2\n  >>> divisorCount(13)\n  2\n  >>> divisorCount(20)\n  2\n  >>> divisorCount(24)\n  3\n  >>> divisorCount(45)\n  5\n  >>> divisorCount(54)\n  2\n  >>> divisorCount(89)\n  4\n  >>> divisorCount(90)\n  3\n  >>> divisorCount(121)\n  5\n  >>> divisorCount(135)\n  4\n  >>> divisorCount(36)\n  1\n  >>> divisorCount(18)\n  2\n  >>> divisorCount(2)\n  1\n  >>> divisorCount(1)\n  0\n  */\nconst divisorCount =(N) => {\n  const count = 0\n  const divisors = []\n  const divisor = () => {\n    if (N % 2 === 0)\n      return 2\n    else if (N % 3 === 0)\n      return 3\n    else if (N % 5 === 0)\n      return 5\n    else if (N % 7 === 0)\n      return 7\n    else if (N % 11 === 0)\n      return 11\n    else if (N % 13 === 0)\n      return 13\n    else if (N % 17 === 0)\n      return 17\n    else if (N % 19 === 0)\n      return 19\n    else if (N % 23 === 0)\n      return 23\n    else if (N % 29 === 0)\n      return 29\n    else if (N % 31 === 0)\n      return 31\n    else if (N % 37 === 0)\n      return 37\n    else if (N % 41 === 0)\n      return 41\n    else if (N % 43 === 0)\n      return 43\n    else if (N % 47 === 0)\n      return 47\n    else if (N % 53 === 0)\n      return 53\n    else if (N % 59 === 0)\n      return 59\n    else if (N % 61 === 0)\n      return 61\n    else if (N % 67 === 0)\n      return 67\n    else if (N % 71 === 0)\n      return 71\n    else if (N % 73 === 0)\n      return 73\n    else if (N % 79 === 0)\n      return 79\n    else if (N % 83 === 0)\n      return 83\n    else if (N % 89 === 0)\n      return 89\n    else if (N % 97 === 0)\n      return 97\n    else if (N % 101 === 0)\n      return 101\n    else if (N % 103 === 0)\n      return 103\n    else if (N % 107 === 0)\n      return 107\n    else if (N % 109 === 0)\n      return 109\n    else if (N % 113 === 0)\n      return 113\n    else if (N % 127 === 0)\n      return 127\n    else if (N % 131 === 0)\n      return 131\n    else if (N % 137 === 0)\n      return 137\n    else if (N % 139 === 0)\n      return 139\n    else if (N % 149 === 0)\n      return 149\n    else if (N % 151 === 0)\n      return 151\n    else if (N % 157 === 0)\n      return 157\n    else if (N % 163 === 0)\n      return 163\n    else if (N % 167 === 0)\n      return 167\n    else if (N % 173 === 0)\n      return 173\n    else if (N % 179 === 0)\n      return 179\n    else if (N % 181 === 0)\n      return 181\n    else if (N % 191 === 0)\n      return 191\n    else if (N % 193 === 0)\n      return 193\n    else if (N % 197 === 0)\n      return 197\n    else if (N % 199 === 0)\n      return 199\n    else if (N % 211 === 0)\n      return 211\n    else if (N % 223 === 0)\n      return 223\n    else if (N % 227 === 0)\n      return 227\n    else if (N % 229 === 0)\n      return 229\n    else if (N % 233 === 0)\n      return 233\n    else if (N % 239 === 0)\n      return 239\n    else if (N % 241 === 0)\n      return 241\n    else if (N % 251 === 0)\n      return 251\n    else if (N % 257 === 0)\n      return 257\n    else if (N % 263 === 0)\n      return 263\n    else if (N % 269 === 0)\n      return 269\n    else if (N % 271 === 0)\n      return 271\n    else if (N % 277 === 0)\n      return 277\n    else if (N % 281 === 0)\n      return 281\n    else if (N % 283 === 0)\n      return 283\n    else if (N % 293 === 0)\n      return 293\n    else if (N % 307 === 0)\n      return 307\n    else if (N % 311 === 0)\n      return 311\n    else if (N % 313 === 0)\n      return 313\n    else if (N % 317 === 0)\n      return 317\n    else if (N % 331 === 0)\n      return 331\n"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let w = 0; w < t.length; w++) {\n    let l = 0\n    for (let j = 0; j < t [ w ].length; j++) {\n      if (t [ w ] [ j ] != 'a' && t [ w ] [ j ] != 'e' && t [ w ] [ j ] != 'i' && t [ w ] [ j ] != 'o' && t [ w ] [ j ] != 'u' && t [ w ] [ j ] != 'A' &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t [ w ] [ j ] != 'U' && t [ w ] [ j ] != 'O' && t [ w ] [ j ] != 'I' && t [ w ] [ j ] != 'E') {\n        l++\n        }\n      }\n    if (l == n) {\n      k.push(t [ w ])}\n    }\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let w = 0; w < t.length; w++) {\n    let l = 0\n    for (let j = 0; j < t [ w ].length; j++) {\n      if (t [ w ] [ j ]!= 'a' && t [ w ] [ j ]!= 'e' && t [ w ] [ j ]!= 'i' && t [ w ] [ j ]!= 'o' && t [ w ] [ j ]!= 'u' && t [ w ] [ j ]!= 'A' &&\n     \n        t [ w ] [ j ]!= 'E' && t [ w ] [ j ]!= 'I' && t [ w ] [ j ]!= 'O' && t [ w ] [ j ]!= 'U') {\n          l++\n        }\n    }\n    if (l == n) {\n      k.push(t [ w ])\n    }\n  }\n  return k\n}\n\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let w = 0; w < t.length; w++) {\n    let l = 0\n    for (let j = 0; j < t [ w ].length; j++) {\n      if (t [ w ] [ j ]!= 'a' && t [ w ] [ j ]!= 'e' && t [ w ] [ j ]!= 'i' && t [ w ] [ j ]!= 'o' && t [ w ] [ j ]!= 'u' && t [ w ] [ j ]!= 'A' &&\n     \n        t [ w ] [ j ]!= 'E' && t [ w ] [ j ]!= 'I' && t [ w ] [ j ]!= 'O' && t [ w ] [ j ]!= 'U') {\n          l++\n        }\n    }\n    if (l == n) {\n      k.push(t [ w ])\n    }\n  }\n  return k\n}\n\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let w = 0; w < t.length; w++) {\n    let l = 0\n    for (let j = 0; j < t [ w ].length; j++) {\n      if (t [ w ] [ j ]!= 'a' && t [ w ] [ j ]!= 'e' && t [ w ] [ j ]!= 'i' && t [ w ] [ j ]!= 'o' && t [ w ] [ j ]!= 'u' && t [ w ] [ j ]!= 'A' &&\n     \n        t [ w ] [ j ]!= 'E' && t [ w ] [ j ]!= 'I' && t [ w ] [ j ]!= 'O' && t [ w ] [ j ]!= 'U') {\n          l++\n        }\n    }\n    if (l == n) {\n      k.push(t [ w ])\n    }\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var c62 = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  c62.push(Number(i))\n  return n - c62.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var c62 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n  c62.push(i);\n  var c62_len = c62.length;\n  var c62_len_1 = c62_len - 1;\n  var c62_len_2 = c62_len - 2;\n  var c62_len_3 = c62_len - 3;\n  var c62_len_4 = c62_len - 4;\n  var c62_len_5 = c62_len - 5;\n  var c62_len_6 = c62_len - 6;\n  var c62_len_7 = c62_len - 7;\n  var c62_len_8 = c62_len - 8;\n  var c62_len_9 = c62_len - 9;\n  var c62_len_10 = c62_len - 10;\n  var c62_len_11 = c62_len - 11;\n  var c62_len_12 = c62_len - 12;\n  var c62_len_13 = c62_len - 13;\n  var c62_len_14 = c62_len - 14;\n  var c62_len_15 = c62_len - 15;\n  var c62_len_16 = c62_len - 16;\n  var c62_len_17 = c62_len - 17;\n  var c62_len_18 = c62_len - 18;\n  var c62_len_19 = c62_len - 19;\n  var c62_len_20 = c62_len - 20;\n  var c62_len_21 = c62_len - 21;\n  var c62_len_22 = c62_len - 22;\n  var c62_len_23 = c62_len - 23;\n  var c62_len_24 = c62_len - 24;\n  var c62_len_25 = c62_len - 25;\n  var c62_len_26 = c62_len - 26;\n  var c62_len_27 = c62_len - 27;\n  var c62_len_28 = c62_len - 28;\n  var c62_len_29 = c62_len - 29;\n  var c62_len_30 = c62_len - 30;\n  var c62_len_31 = c62_len - 31;\n  var c62_len_32 = c62_len - 32;\n  var c62_len_33 = c62_len - 33;\n  var c62_len_34 = c62_len - 34;\n  var c62_len_35 = c62_len - 35;\n  var c62_len_36 = c62_len - 36;\n  var c62_len_37 = c62_len - 37;\n  var c62_len_38 = c62_len - 38;\n  var c62_len_39 = c62_len - 39;\n  var c62_len_40 = c62_len - 40;\n  var c62_len_41 = c62_len - 41;\n  var c62_len_42 = c62_len - 42;\n  var c62_len_43 = c62_len - 43;\n  var c62_len_44 = c62_len - 44;\n  var c62_len_45 = c62_len - 45;\n  var c62_len_46 = c62_len - 46;\n  var c62_len_47 = c62_len - 47;\n  var c62_len_48 = c62_len - 48;\n  var c62_len_49 = c62_len - 49;\n  var c62_len_50 = c62_len - 50;\n  var c62_len_51 = c62_len - 51;\n  var c62_len_52 = c62_len - 52;\n  var c62_len_53 = c62_len - 53;\n  var c62_len_54 = c62_len - 54;\n  var c62_len_55 = c62_len - 55;\n  var c62_len_56 = c62_len - 56;\n  var c62_len_57 = c62_len - 57;\n  var c62_len_58 = c62_len - 58;\n  var c62_len_59 = c62_len - 59;\n  var c62_len_60 = c62_len - 60;\n  var c62_len_61 = c62_len - 61;\n  var c62_len_62 = c62_len - 62;\n  var c62_len_63 = c62_len - 63;\n  var c62_len_64 = c62_len - 64;\n  var c62_len_65 = c62_len - 65;\n  var c62_len_66 = c62_len - 66;\n  var c62_len_67 = c62_len - 67;\n  var c62_len_68 = c62_len - 68;\n  var c62_len_69 = c62_len - 69;\n  var c62_len_70 = c62_len - 70;\n  var c62_len_71 = c62_len - 71;\n  var c62_len_72 = c62_len - 72;\n  var c62_len_73 = c62_len - 73;\n  var c62_len_74 = c62_len - 74;\n  var c62_len_75 = c62_len - 75;\n  var c62_len_"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let u2 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (u2 < 0) {\n        y = - 1; u2 = - u2;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (u2 >= 10) {\n        m+=u2 % 10;\n        u2 =(u2 - u2 % 10) / 10;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * u2\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let u2 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (u2 < 0) {\n        y = - 1; u2 = - u2;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (u2 >= 10) {\n        m+=u2 % 10;\n        u2 =(u2 - u2 % 10) / 10;\n        }\n     \n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n     \n      if (m > n) {\n        if (k!== j) {\n          p [ k ] = p [ j ];\n          p [ j ] = p [ k ];\n          }\n        p [ k ] = y * p [ j ] + n;\n        p [ j ] = y * p [ k ] + m;\n        }\n      }\n    }\n  return p;\n  }\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n \n/* Given a triangle, find the hypotenuse.  \n  >>> hypotenuse(5, 3)\n  7.0\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b);\n};\n \n \n/*Given a triangle, find the right angle.  \n  >>> rightAngle(5, 3)\n  67.5\n  */\nconst rightAngle = (a, g) => {\n  return Math.acos(a / hypotenuse(a, g)) * 180 / Math.PI;\n};\n \n \n/*Given a triangle, find the area.  \n  >>> area(5, 3)\n  7.5\n  */\nconst area = (a, g) => {\n  return triangleArea(a, g) * rightAngle(a, g);\n};\n \n \n/*Given a triangle, find the volume.  \n  >>> volume(5, 3)\n  26.0\n  */\nconst volume = (a, g) => {\n  return area(a, g) * hypotenuse(a, g);\n};\n \n \n/*Given a triangle, find the perimeter.  \n  >>> perimeter(5, 3)\n  26.0\n  */\nconst perimeter = (a, g) => {\n  return a + g + hypotenuse(a, g);\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5, 3, 67.5)\n    7.5\n    >>> triangleArea(5, 3, 100)\n    23.0\n    */\nconst triangleArea = (a, g, angle) => {\n  return area(a, g) * angle / 180;\n};\n \n \n/* Given a triangle, find the area of the triangle with the right\n    angle.  \n    >>> triangleArea(5,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var b485U3885h4, result = [ ];\n  for (const n of numbers) {\n    if (b485U3885h4 == undefined)\n    b485U3885h4 = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    b485U3885h4 = Math.max(b485U3885h4, n);\n    result.push(b485U3885h4);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var b485U3885h4, result = [ ];\n  for (const n of numbers) {\n    if (b485U3885h4 == undefined)\n    b485U3885h4 = n;\n    else\n   \n    {\n      result.push(b485U3885h4);\n      b485U3885h4 = n;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [2, 2, 2, 3, 3, 4, 4]\n  */\nconst rollingMin =(numbers) => {\n  var b485U3885h4, result = [ ];\n  for (const n of numbers) {\n    if (b485U3885h4 == undefined)\n    b485U3885h4 = n;\n    else\n    {\n      result.push(b485U3885h4);\n      b485U3885h4 = n;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  rollingMax,\n  rollingMin\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var P59j6 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    P59j6+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    P59j6-=1;\n    if (P59j6 < 0)\n    return false;\n    }\n  return P59j6 == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var P59j6 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    P59j6+=1;\n    else\n   \n    if (b == \")\")\n    P59j6-=1;\n  }\n  if (P59j6!= 0)\n  return false;\n  else\n  return true;\n}\n\n/*\n  Given a string, return the string length without newlines and tabs.\n  Any newlines or tabs are ignored.\n\n  >>> lenWithoutNewlinesAndTabs(\"a\\nb\")\n  2\n  >>> lenWithoutNewlinesAndTabs(\"a\\nb\\t\\nc\")\n  3\n  >>> lenWithoutNewlinesAndTabs(\"a\")\n  1\n  >>> lenWithoutNewlinesAndTabs(\"a\\nb\")\n  2\n  >>> lenWithoutNewlinesAndTabs(\"a\\n\\nb\")\n  3\n  >>> lenWithoutNewlinesAndTabs(\"\\na\")\n  1\n  >>> lenWithoutNewlinesAndTabs(\"\\n\")\n  1\n  >>> lenWithoutNewlinesAndTabs(\"\")\n  0\n  >>> lenWithoutNewlinesAndTabs(\"\\t\")\n  1\n  >>> lenWithoutNewlinesAndTabs(\"\\n\\t\")\n  2\n  */\nconst lenWithoutNewlinesAndTabs =(str) => {\n  var count =0;\n  for (const c of str) {\n    if (c!= \"\\t\" && c!= \"\\n\")\n    count+=1;\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of newlines and tabs in the string.\n  Any newlines or tabs are ignored.\n\n  >>> countNewlinesAndTabs(\"a\\nb\")\n  1\n  >>> countNewlinesAndTabs(\"a\\nb\\t\\nc\")\n  2\n  >>> countNewlinesAndTabs(\"a\")\n  0\n  >>> countNewlinesAndTabs(\"a\\nb\")\n  1\n  >>> countNewlinesAndTabs(\"a\\n\\nb\")\n  2\n  >>> countNewlinesAndTabs(\"\\na\")\n  1\n  >>> countNewlinesAndTabs(\"\\n\")\n  1\n  >>> countNewlinesAndTabs(\"\")\n  0\n  >>> countNewlinesAndTabs(\"\\t\")\n  1\n  >>> countNewlinesAndTabs(\"\\n\\t\")\n  2\n  */\nconst countNewlinesAndTabs =(str) => {\n  var count =0;\n  for (const c of str) {\n    if (c == \"\\t\")\n    count+=1;\n    else\n    if (c == \"\\n\")\n    count+=1;\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of lines in the string.\n  Any newlines or tabs are ignored.\n\n  >>> countLines(\"a\\nb\")\n  1\n  >>> countLines(\"a\\nb\\t\\nc\")\n  2\n  >>> countLines(\"a\")\n  1\n  >>> countLines(\"a\\nb\")\n  1\n  >>> countLines(\"a\\n\\nb\")\n  2\n  >>> countLines(\"\\na\")\n  1\n  >>> countLines(\"\\n\")\n  1\n  >>> countLines(\"\")\n  0\n  >>> countLines(\"\\t\")\n  1\n  >>> countLines(\"\\n\\t\")\n  2\n  */\nconst countLines =(str) => {\n  var count =0;\n  for (const c of str) {\n    if (c == \"\\n\")\n    count+=1;\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of spaces in the string.\n  Any newlines or tabs are ignored.\n\n  >>> countSpaces(\"a\\nb\")\n  1\n  >>> countSpaces(\"a\\nb\\t\\nc\")\n  2\n  >>> countSpaces(\"a\")\n  1\n  >>> countSpaces(\"a\\nb\")\n  1\n  >>> countSpaces(\"a\\n\\nb\")\n  2\n  >>> countSpaces(\"\\na\")\n  1\n  >>> countSpaces(\"\\n\")\n  1\n  >>> countSpaces(\"\")\n  0\n  >>> countSpaces(\"\\t\")\n  1\n  >>> countSpaces(\"\\n\\t\")\n  2\n  */\nconst countSpaces =(str) => {\n  var count =0;\n  for (const c of str) {\n    if (c == \" \")\n    count+=1;\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  Any newlines or tabs are ignored.\n\n  >>> countChars(\"a\\nb\")\n  3\n  >>> countChars(\"a\\nb\\t\\nc\")\n  6\n  >>> countChars(\"a\")\n  1\n  >>> countChars(\"a\\nb\")\n  3\n  >>> countChars(\"a\\n\\nb\")\n  5\n  >>> countChars(\"\\na\")\n  2\n  >>> countChars(\"\\n\")\n  1\n  >>> countChars(\"\")\n  0\n  >>> countChars(\"\\t\")\n  1\n  >>> countChars(\"\\n\\t\")\n  3\n  */\nconst countChars =(str) => {\n  var count =0;\n  for (const c of str) {\n    count+=1;\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  Any newlines or tabs are ignored.\n\n  >>> countChars(\"a\\nb\")\n  3\n  >>> countChars(\"a\\nb\\t\\nc\")\n  6\n  >>> countChars(\"a\")\n  1\n  >>> countChars(\"a\\nb\")\n  3\n  >>> countChars(\"a\\n\\nb\")\n  5\n  >>> countChars(\"\\na\")\n  2\n  >>> countChars(\"\\n\")\n  1\n  >>> countChars(\"\")\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let x = 0; x < guess.length; x++) {\n    game [ x ]-=guess [ x ]\n    if (game [ x ] < 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    game [ x ] = - game [ x ];}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let x = 0; x < guess.length; x++) {\n    game [ x ]-=guess [ x ]\n    if (game [ x ] < 0)\n   \n  }\n  return game\n}\n\nconst check = (guess, game) => {\n  for (let x = 0; x < game.length; x++) {\n    if (guess[x] === game[x])\n    return 0\n  }\n  return Math.abs(guess - game)\n}\n\nconst check2 = (guess, game) => {\n  let len = game.length\n  let len2 = guess.length\n  if (len!== len2)\n    return -1\n  for (let x = 0; x < len; x++) {\n    if (guess[x] === game[x])\n    return 0\n  }\n  return Math.abs(guess - game)\n}\n\nconst main = (game, guess) => {\n  let sum = 0\n  let sum2 = 0\n  for (let x = 0; x < game.length; x++) {\n    sum += game[x]\n  }\n  for (let x = 0; x < guess.length; x++) {\n    sum2 += guess[x]\n  }\n  if (sum2 === sum)\n    return 0\n  let diff = sum2 - sum\n  for (let x = 0; x < game.length; x++) {\n    if (guess[x] === game[x])\n    return 0\n  }\n  return diff\n}\n\n/*\n  I am thinking of a word problem.\n  \n  I am writing a program to find the length of the longest palindrome made by adding up the odd values of an integer.\n  \n  The program should return the length of the longest palindrome made by adding up the odd values of an integer.\n  \n  \n  example:\n\n  longestPalindrome(1) -> 4\n  longestPalindrome(4) -> 9\n  longestPalindrome(11) -> 11\n  \n  */\nconst longestPalindrome = (num) => {\n  let x = 0\n  let len = 0\n  let cur = 1\n  let prev = 1\n  let start = 0\n  let end = 0\n  while (x < num) {\n    if (num % 2!== 0) {\n      len = len + 1\n      cur = 2*cur\n    }\n    while (cur <= num) {\n      if (num % cur === 0) {\n        prev = num / cur\n        if (prev < prev)\n        {\n          start = (prev - 1) * prev\n          end = (num - 1) * num\n          return Math.max(len, end - start + 1)\n        }\n      }\n      cur = cur * 2\n    }\n    cur = 1\n    x = x + 1\n  }\n}\n\n/*\n  I am thinking of a word problem.\n  \n  I am writing a program to find the longest palindrome made by adding up the odd values of an integer.\n  \n  The program should return the length of the longest palindrome made by adding up the odd values of an integer.\n  \n  \n  example:\n\n  longestPalindrome(1) -> 4\n  longestPalindrome(4) -> 9\n  longestPalindrome(11) -> 11\n  \n  */\nconst longestPalindrome2 = (num) => {\n  let x = 0\n  let len = 0\n  let cur = 1\n  let prev = 1\n  let start = 0\n  let end = 0\n  while (x < num) {\n    if (num % 2!== 0) {\n      len = len + 1\n      cur = 2*cur\n    }\n    while (cur <= num) {\n      if (num % cur === 0) {\n        prev = num / cur\n        if (prev < prev)\n        {\n          start = (prev - 1) * prev\n          end = (num - 1) * num\n          return Math.max(len, end - start + 1)\n        }\n      }\n      cur = cur * 2\n    }\n    cur = 1\n    x = x + 1\n  }\n}\n\n/*\n  I am thinking of a word problem.\n  \n  I am writing a program to find the longest palindrome made by adding up the odd values of an integer.\n  \n  The program should return the length of the longest palindrome made by adding up the odd values of an integer.\n  \n  \n  example:\n\n  longestPalindrome(1) -> 4\n  longestPalindrome(4) -> 9\n  longestPalindrome(11) -> 11\n  \n  */\nconst longestPalindrome3 = (num) => {\n  let x = 0\n  let len = 0\n  let cur = 1\n  let prev = 1\n  let start = 0\n  let end = 0\n  let i = 0\n  while (x < num) {\n    if (num % 2!== 0) {\n      len = len + 1\n      cur = 2*cur\n    }\n    while (cur <= num) {\n      if (num % cur === 0) {\n        prev = num / cur\n        if (prev < prev)\n        {\n          start = (prev - 1) * prev\n          end = (num - 1) * num\n          if (end - start + 1 > len)\n            return Math.max(len, end - start + 1)\n        }\n      }\n"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, h, c) => {\n  if (a + h <= c || a + c <= h || h + c <= a)\n  return - 1;\n  var s =(a + h + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - h) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, h, c) => {\n  if (a + h <= c || a + c <= h || h + c <= a)\n  return - 1;\n  var s =(a + h + c) / 2;\n \n  return Math.round(s *(s - a) *(s - h) *(s - c) / 60);\n}\n\nexport default triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(f) => {\n  for (let i = 0; i < f.length; i++)\n  for (let j = i + 1; j < f.length; j++)\n  if (f [ i ] + f [ j ] == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(f) => {\n  for (let i = 0; i < f.length; i++)\n  for (let j = i + 1; j < f.length; j++)\n  if (f [ i ] + f [ j ] == 0)\n \n    return true;\n    else\n      return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(oej) => {\n  if (oej.length == 0) {\n    return true}\n  let dup = 1\n  let pre = oej [ 0 ]\n  for (let i = 1; i < oej.length; i++) {\n    if (oej [ i ] < pre) {\n      return false}\n    if (oej [ i ] == pre) {\n      dup+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (dup == 3) {\n        return false}\n      }\n    else {\n      pre = oej [ i ]\n      dup = 1\n      }\n    }\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(oej) => {\n  if (oej.length == 0) {\n    return true}\n  let dup = 1\n  let pre = oej [ 0 ]\n  for (let i = 1; i < oej.length; i++) {\n    if (oej [ i ] < pre) {\n      return false}\n    if (oej [ i ] == pre) {\n      dup+=1;\n     \n    }\n    pre = oej [ i ]\n  }\n  return dup == 1\n}\n\nconst main = () => {\n  console.log(isSorted([5]))\n  console.log(isSorted([1, 2, 3, 4, 5]))\n  console.log(isSorted([1, 3, 2, 4, 5]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(cJ9) => {\n  if (cJ9.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < cJ9.length; i++) {\n    s+=cJ9 [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (cJ9 [ i ] == 0) {\n      return 0}\n    if (cJ9 [ i ] < 0) {\n      n = - n; s-=2 * cJ9 [ i ]}\n    }\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(cJ9) => {\n  if (cJ9.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < cJ9.length; i++) {\n    s+=cJ9 [ i ]\n   \n  }\n  return s\n}\n\nconst test_prodSigns = () => {\n  assert.equal(prodSigns([1, 2, 2, -4]), -9)\n  assert.equal(prodSigns([0, 1]), 0)\n  assert.equal(prodSigns([1, 2]), 6)\n  assert.equal(prodSigns([2, -4]), -16)\n  assert.equal(prodSigns([0]), null)\n  assert.equal(prodSigns([[]]), null)\n}\n\nconst test_prodSigns = () => {\n  assert.equal(prodSigns([1, 2, 2, -4]), -9)\n  assert.equal(prodSigns([0, 1]), 0)\n  assert.equal(prodSigns([1, 2]), 6)\n  assert.equal(prodSigns([2, -4]), -16)\n  assert.equal(prodSigns([0]), null)\n  assert.equal(prodSigns([[]]), null)\n}\n\nexports.prodSigns = prodSigns\nexports.test_prodSigns = test_prodSigns<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let S = 18\n  for (let i = 2; i < n; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    S = S * 10\n    }\n  return S\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let S = 18\n  for (let i = 2; i < n; i++) {\n   \n    let f = startsOneEnds(i-1) + startsOneEnds(i)\n    S += f\n  }\n  return S\n}\n\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let S = 9\n  for (let i = 2; i < n; i++) {\n    S += startsOneEnds(i-1)\n  }\n  return S\n}\n\nconsole.log(startsOneEnds(5))\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t *= P;\n      }\n    p++;\n    P--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      t = t * y;\n    }\n    P--;\n    p = t;\n  }\n  return t;\n};\n\n/*The Catalan number is the sum of all of the factorials of the odd integers\n  from 1 to n.\n  For example:\n  >>> specialFactorial(7)\n  4900\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =("}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(R => R != '')\n  .map(R => parseParenGroup(R));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n    }\n    return max_depth;\n  }\n\n  // Find the depth of each paren group in the string\n  var depth = parseParenGroup(paren_string);\n\n  // Store the result in a new array\n  var result = [];\n  for (var i = 0; i < depth; i++) {\n    result.push(1);\n  }\n\n  // Find the depth of each paren group in the string\n  var depth = parseParenGroup(paren_string);\n\n  // Find the max depth of each paren group in the string\n  var max_depth = parseParenGroup(paren_string);\n\n  // Find the max depth of the string\n  var max_depth = parseParenGroup(paren_string);\n\n  // Store the result in a new array\n  var result = [];\n  for (var i = 0; i < depth; i++) {\n    result.push(1);\n  }\n\n  // Find the depth of each paren group in the string\n  var depth = parseParenGroup(paren_string);\n\n  // Find the max depth of each paren group in the string\n  var max_depth = parseParenGroup(paren_string);\n\n  // Find the max depth of the string\n  var max_depth = parseParenGroup(paren_string);\n\n  // Find the max depth of the string\n  var max_depth = parseParenGroup(paren_string);\n\n  return result;\n}\n\n// Output the max depth of the string\nvar max_depth = parseNestedParens(\"(()()) ((())) () ((())()())\");\n\nconsole.log(max_depth);\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let V = 1; V <= n; V++) {\n    y.push(V * V - V + 1)\n    }\n  let u = 0\n  for (let V = 0; V < n - 2; V++) {\n    for (let j = V + 1; j < n - 1; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y [ V ] + y [ j ] + y [ k ]) % 3 == 0) {\n          u++}\n        }\n      }\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let V = 1; V <= n; V++) {\n    y.push(V * V - V + 1)\n    }\n  let u = 0\n  for (let V = 0; V < n - 2; V++) {\n    for (let j = V + 1; j < n - 1; j++) {\n     \n      for (let k = j + 1; k < n; k++) {\n        \n        let a = y[V] + y[j] + y[k]\n        if (a % 3 === 0) {\n          u++\n        }\n      }\n    }\n  }\n  return u\n}\n\nconsole.log(getMaxTriples(5))<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(U7K) => {\n  if (U7K.length == 0) {\n    return true}\n  let k = 0\n  let len = U7K.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (U7K [ j ] < U7K [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    U7K.push(U7K [ 0 ]);\n    U7K.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(U7K) => {\n  if (U7K.length == 0) {\n    return true}\n  let k = 0\n  let len = U7K.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (U7K [ j ] < U7K [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n    }\n    if (t) {\n      k = k + 1\n      let temp = U7K[i];\n      U7K[i] = U7K[k - 1]\n      U7K[k - 1] = temp\n    }\n  }\n  return k === len\n}\n\n/*\n  This function returns whether an array contains duplicate elements or not.\n  */\nconst duplicateElements = (U8K) => {\n  let i = 0;\n  let j = 0;\n  let t = 0;\n  let len = U8K.length\n  for (i = 0; i < len - 1; i++) {\n    for (j = i + 1; j < len; j++) {\n      if (U8K[i] == U8K[j]) {\n        t = 1;\n        break\n        }\n      }\n    if (t) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  This function returns the index of the first element in the given array\n  that is not equal to the element at the given index.\n  \n  The function returns -1 if no such element is found.\n  */\nconst firstDifferentElement = (U9K, i) => {\n  let j = 0\n  let len = U9K.length\n  for (j = 0; j < len; j++) {\n    if (U9K[i]!= U9K[j]) {\n      return j\n    }\n  }\n  return -1\n}\n\n/*\n  This function returns a sorted array of the given array.\n  \n  The function returns the given array if it is already sorted in\n  non-decreasing order.\n  */\nconst sortedArray = (U10K) => {\n  if (duplicateElements(U10K)) {\n    return U10K\n  }\n  let i = 0\n  let j = 0\n  let t = 0\n  let len = U10K.length\n  for (i = 0; i < len - 1; i++) {\n    t = firstDifferentElement(U10K, i)\n    if (t === -1) {\n      return U10K\n    }\n    let temp = U10K[i];\n    U10K[i] = U10K[t]\n    U10K[t] = temp\n  }\n  return U10K\n}\n\n/*\n  This function returns the number of different elements in the given array.\n  */\nconst numberOfDifferentElements = (U11K) => {\n  let i = 0\n  let j = 0\n  let t = 0\n  let len = U11K.length\n  for (i = 0; i < len - 1; i++) {\n    t = firstDifferentElement(U11K, i)\n    if (t === -1) {\n      return i + 1\n    }\n  }\n  return len\n}\n\n/*\n  This function returns the maximum element in the given array.\n  */\nconst maxElement = (U12K) => {\n  let i = 0\n  let j = 0\n  let t = 0\n  let max = -1\n  let len = U12K.length\n  for (i = 0; i < len; i++) {\n    t = U12K[i]\n    if (t > max) {\n      max = t\n    }\n  }\n  return max\n}\n\n/*\n  This function returns the minimum element in the given array.\n  */\nconst minElement = (U13K) => {\n  let i = 0\n  let j = 0\n  let t = 0\n  let min = -1\n  let len = U13K.length\n  for (i = 0; i < len; i++) {\n    t = U13K[i]\n    if (t < min) {\n      min = t\n    }\n  }\n  return min\n}\n\n/*\n  This function returns the sum of all the elements in the given array.\n  */\nconst sumOfElements = (U14K) => {\n  let i = 0\n  let j = 0\n  let t = 0\n  let sum = 0\n  let len = U14K.length\n  for (i = 0; i < len; i++) {\n    t = U14K[i]\n    sum = sum + t\n  }\n  return sum\n}\n\n/*\n  This function returns a new array that contains the sorted elements of the\n  given array.\n  */\nconst sort = (U15K) => {\n  let sorted = []\n  let i = 0\n  let j = 0\n  let t = 0\n  let len = U15K.length\n  for (i = 0; i"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(ITdx6T) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\nwhile (ITdx6T) {\n    let div =(ITdx6T - ITdx6T % num [ i ]) / num [ i ]\n    ITdx6T = ITdx6T % num [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (div) {\n      res+=sym [ i ]\n      div-=1\n      }\n    i-=1\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(ITdx6T) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\nwhile (ITdx6T) {\n    let div =(ITdx6T - ITdx6T % num [ i ]) / num [ i ]\n    ITdx6T = ITdx6T % num [ i ]\n   \n    if (ITdx6T === 0) break\n    res = sym [ i ] + res\n    i--\n  }\nreturn res\n}\n\nconst main =(ITdx6T) => {\n  console.log(intToMiniRoman(ITdx6T))\n}\n\nmain(20)\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  t = x.toString();\n  if (shift > t.length)\n  return t.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return t.slice( - shift) + t.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  t = x.toString();\n  if (shift > t.length)\n  return t.split('').reverse().join('');\n \n  else\n  return t.substring(0, t.length - shift) + t.substring(t.length - shift);\n}\n\n/*\n  >>> circularShift(12, 3)\n  \"222\"\n  >>> circularShift(12, 5)\n  \"112233\"\n  >>> circularShift(12, 15)\n  \"1122334411\"\n  */\nconst circularShift2 =(x, shift) => {\n  t = x.toString();\n  if (shift > t.length)\n  return t.split('').reverse().join('');\n \n  else\n  return t.substring(0, t.length - shift) + t.substring(t.length - shift);\n}\n\n// Test cases\n// Circular shift of a number\nvar tests = [\n  [0, 1, '0'],\n  [1, 1, '1'],\n  [2, 1, '2'],\n  [3, 1, '3'],\n  [4, 1, '4'],\n  [5, 1, '5'],\n  [6, 1, '6'],\n  [7, 1, '7'],\n  [8, 1, '8'],\n  [9, 1, '9'],\n  [10, 1, '10'],\n  [11, 1, '11'],\n  [12, 1, '12'],\n  [13, 1, '13'],\n  [14, 1, '14'],\n  [15, 1, '15'],\n  [16, 1, '16'],\n  [17, 1, '17'],\n  [18, 1, '18'],\n  [19, 1, '19'],\n  [20, 1, '20'],\n  [21, 1, '21'],\n  [22, 1, '22'],\n  [23, 1, '23'],\n  [24, 1, '24'],\n  [25, 1, '25'],\n  [26, 1, '26'],\n  [27, 1, '27'],\n  [28, 1, '28'],\n  [29, 1, '29'],\n  [30, 1, '30'],\n  [31, 1, '31'],\n  [32, 1, '32'],\n  [33, 1, '33'],\n  [34, 1, '34'],\n  [35, 1, '35'],\n  [36, 1, '36'],\n  [37, 1, '37'],\n  [38, 1, '38'],\n  [39, 1, '39'],\n  [40, 1, '40'],\n  [41, 1, '41'],\n  [42, 1, '42'],\n  [43, 1, '43'],\n  [44, 1, '44'],\n  [45, 1, '45'],\n  [46, 1, '46'],\n  [47, 1, '47'],\n  [48, 1, '48'],\n  [49, 1, '49'],\n  [50, 1, '50'],\n  [51, 1, '51'],\n  [52, 1, '52'],\n  [53, 1, '53'],\n  [54, 1, '54'],\n  [55, 1, '55'],\n  [56, 1, '56'],\n  [57, 1, '57'],\n  [58, 1, '58'],\n  [59, 1, '59'],\n  [60, 1, '60'],\n  [61, 1, '61'],\n  [62, 1, '62'],\n  [63, 1, '63'],\n  [64, 1, '64'],\n  [65, 1, '65'],\n  [66, 1, '66'],\n  [67, 1, '67'],\n  [68, 1, '68'],\n  [69, 1, '69'],\n  [70, 1, '70'],\n  [71, 1, '71'],\n  [72, 1, '72'],\n  [73, 1, '73'],\n  [74, 1, '74'],\n  [75, 1, '75'],\n  [76, 1, '76'],\n  [77, 1, '77'],\n  [78, 1, '78'],\n  [79, 1, '79'],\n  [80, 1, '80'],\n  [81, 1, '81'],\n  [82, 1, '82'],\n  [83, 1, '83'],\n  [84, 1, '84'],\n  [85, 1, '85'],\n  [86, 1, '86'],\n  [87, 1, '87'],\n  [88, 1, '88'],\n  [89, 1, '89'],\n  [90, 1, '90'],\n  [91, 1, '91'],\n  [92, 1, '92'],\n  [93, 1, '93'],\n  [94, 1, '94'],\n  [95, 1, '95'],\n  [96, 1, '96'],\n  [97, 1, '97'],\n  [98, 1, '98'],\n  [99, 1, '99'],\n  [100, 1, '100'],\n  [101, 1, '101'],\n  [102, 1, '102'],\n  [103, 1, '103'],\n  [104, 1, '104'],\n  [105, 1, '105'],\n  [106, 1, '106'],\n  [107, 1, '107'],\n  [108, 1, '108'],\n  [109, 1, '109'],\n  [110, 1, '110'],\n  [111, 1"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let N = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      N.push(lst [ i ])\n      }\n    }\n  for (let j = N.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (N [ k ].length > N [ k + 1 ].length) {\n        f = 1}\n      if (N [ k ].length == N [ k + 1 ].length) {\n        let r = N [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (N [ k ] [ l ].charCodeAt() > N [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            break;\n            }\n          if (N [ k ] [ l ].charCodeAt() < N [ k + 1 ] [ l ].charCodeAt()) {\n            break;\n            }\n          }\n        }\n      if (f == 1) {\n        let tmp = N [ k ]\n        N [ k ] = N [ k + 1 ]\n        N [ k + 1 ] = tmp\n        }\n      }\n    }\n  return N\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let N = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      N.push(lst [ i ])\n      }\n    }\n  for (let j = N.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (N [ k ].length > N [ k + 1 ].length) {\n        f = 1}\n      if (N [ k ].length == N [ k + 1 ].length) {\n        let r = N [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (N [ k ] [ l ].charCodeAt() > N [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n          }\n        }\n      }\n      if (f == 1) {\n        N.splice(k + 1, 1);\n        j--\n      }\n    }\n  }\n  return N\n}\n<|endoftext|>"}
