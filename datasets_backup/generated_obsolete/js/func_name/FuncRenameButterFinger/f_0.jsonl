{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  return numbers.reduce((acc, number) => {\n    const difference = Math.abs(number - acc);\n    return difference < threshold? false : acc;\n  }, true);\n};\n\nconst hasFloseElements2 = (numbers, threshold) => {\n  return numbers.reduce((acc, number) => {\n    const difference = Math.abs(number - acc);\n    return difference < threshold? false : acc;\n  }, true);\n};\n\nconst hasFloseElements3 = (numbers, threshold) => {\n  return numbers.reduce((acc, number) => {\n    const difference = Math.abs(number - acc);\n    return difference < threshold? false : acc;\n  }, true);\n};\n\n/*\n  Check if number is an even number.\n  >>> isEven(0)\n  false\n  >>> isEven(1)\n  false\n  >>> isEven(2)\n  true\n  >>> isEven(3)\n  true\n  >>> isEven(4)\n  false\n  */\nconst isEven = number => number % 2 === 0;\n\n/*\n  Check if number is an odd number.\n  >>> isOdd(0)\n  true\n  >>> isOdd(1)\n  false\n  >>> isOdd(2)\n  false\n  >>> isOdd(3)\n  true\n  >>> isOdd(4)\n  true\n  */\nconst isOdd = number => number % 2!== 0;\n\n/*\n  Check if number is prime.\n  >>> isPrime(0)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  false\n  >>> isPrime(4)\n  true\n  >>> isPrime(5)\n  false\n  >>> isPrime(6)\n  true\n  >>> isPrime(7)\n  false\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  true\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  true\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  true\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  true\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  true\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  true\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  true\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  true\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  true\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  true\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  true\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  true\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  "}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const groups = paren_string.split(/(\\(\\()/g)\n  let group_arr = []\n  groups.forEach(group => {\n    let group_array = group.split(/(\\(|\\))/g)\n    group_array.forEach(group => {\n      if(group.trim()!== '') {\n        group_arr.push(group.trim())\n      }\n    })\n  })\n  return group_arr\n}\n\n/*\n  Input:  \"abcde (fghi) abc\"\n  Output: [\"abcde fghi\", \"abc\"]\n  Given a string with parentheses, return a list of the substrings that are fully contained within the parentheses.\n  Do not include the parentheses themselves in the result.\n  >>> substringsInParentheses('abcde (fghi) abc')\n  ['abcde fghi', 'abc']\n  */\nconst substringsInParentheses = (string) => {\n  const groups = string.split(/\\((.*?)\\)/g)\n  let substring_arr = []\n  groups.forEach(group => {\n    const substrings = group.split(/\\(|\\)/g)\n    substrings.forEach(substring => {\n      if(substring.trim()!== '') {\n        substring_arr.push(substring.trim())\n      }\n    })\n  })\n  return substring_arr\n}\n\n/*\n  Input:  \"abcde (fghi) abc\"\n  Output: [\"fghi\"]\n  Given a string with parentheses, return a list of the substrings that are not fully contained within the parentheses.\n  Do not include the parentheses themselves in the result.\n  >>> substringsNotInParentheses('abcde (fghi) abc')\n  ['abcde fghi', 'abc']\n  */\nconst substringsNotInParentheses = (string) => {\n  const groups = string.split(/\\((.*?)\\)/g)\n  let substrings = []\n  groups.forEach(group => {\n    const substrings = group.split(/\\(|\\)/g)\n    substrings.forEach(substring => {\n      if(substring.trim()!== '') {\n        substrings.push(substring.trim())\n      }\n    })\n  })\n  return substrings\n}\n\n/*\n  Input:  \"abcde (fghi) abc\"\n  Output: [\"abcde abc\"]\n  Given a string with parentheses, return a list of the substrings that are fully contained within the parentheses and not within the parentheses\n  Do not include the parentheses themselves in the result.\n  >>> substringsNotContainedInParentheses('abcde (fghi) abc')\n  ['abcde abc']\n  */\nconst substringsNotContainedInParentheses = (string) => {\n  const groups = string.split(/\\((.*?)\\)/g)\n  let substrings = []\n  groups.forEach(group => {\n    const substrings = group.split(/\\(|\\)/g)\n    substrings.forEach(substring => {\n      if(substring.trim()!== '') {\n        substrings.push(substring.trim())\n      }\n    })\n  })\n  return substrings\n}\n\n/*\n  Input:  \"abcde (fghi) abc\"\n  Output: [\"fghi\"]\n  Given a string with parentheses, return a list of the substrings that are fully contained within the parentheses and are not within the parentheses.\n  Do not include the parentheses themselves in the result.\n  >>> substringsNotContainedInParentheses('abcde (fghi) abc')\n  ['abcde abc']\n  */\nconst substringsNotContainedInParentheses2 = (string) => {\n  const groups = string.split(/\\((.*?)\\)/g)\n  let substrings = []\n  groups.forEach(group => {\n    const substrings = group.split(/\\(|\\)/g)\n    substrings.forEach(substring => {\n      if(substring.trim()!== '') {\n        substrings.push(substring.trim())\n      }\n    })\n  })\n  return substrings\n}\n\n/*\n  Input:  \"abcde (fghi) abc\"\n  Output: [\"abc\"]\n  Given a string with parentheses, return a list of the substrings that are fully contained within the parentheses and are not within the parentheses.\n  Do not include the parentheses themselves in the result.\n  >>> substringsNotContainedInParentheses('abcde (fghi) abc')\n  ['abcde abc']\n  */\nconst substringsNotContainedInParentheses3 = (string) => {\n  const groups = string.split(/\\((.*?)\\)/g)\n  let substrings = []\n  groups.forEach(group => {\n    const substrings = group.split(/\\(|\\)/g)\n    substrings.forEach(substring => {\n      if(substring.trim()!== '') {\n        substrings.push(substring.trim())\n      }\n    })\n  })\n  return substrings\n}\n\n/*\n  Input:  \"abcde (fghi) abc\"\n  Output: [\"abc\"]\n  Given a string with parentheses, return a list of the substrings that are fully contained within the parentheses and are not within the parentheses.\n  Do not include the parentheses themselves in the result.\n  >>> substringsNotContainedInParentheses('abcde (fghi) abc')\n  ['abcde abc']\n  */\nconst substringsNotContainedInParentheses4 = (string) => {\n  const groups = string.split(/\\((.*?)\\)/g)\n  let substrings = []\n  groups.forEach(group => {\n    const substrings = group.split(/\\(|\\)/g)\n    "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  let integerPart = number;\n  let decimalPart = number;\n  let numberLength = number.toString().length;\n  let decimalsLength = 0;\n\n  while (numberLength > 0) {\n    decimalsLength = numberLength % 3;\n    integerPart = number - decimalPart;\n    numberLength = numberLength / 3;\n    decimalPart = number - integerPart;\n  }\n\n  return decimalPart;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n    let result = false\n    let i = 0\n    while (i < operations.length) {\n        const current = operations[i]\n        const prev = operations[i + 1]\n        if (prev > 0 && current < prev) {\n            result = true\n            break\n        }\n        i++\n    }\n    return result\n}\n\nmodule.exports = bellwZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n) / numbers.length\n  return numbers.reduce((acc, n) => Math.abs(n - mean), 0) / numbers.length\n}\n\n/*\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = numbers.sort((a, b) => a - b)[Math.floor(numbers.length / 2)]\n  return Math.abs(median - numbers.reduce((acc, n) => acc + n, 0) / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the mean squared deviation.\n  Mean squared deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MAD = sum ( | x - x_mean |^2 ) / (n - 1)\n  >>> mad([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  return numbers.reduce((acc, n) => acc + Math.pow(n - numbers.reduce((acc, n) => acc + n, 0) / numbers.length, 2), 0) / (numbers.length - 1)\n}\n\n/*\n  >>> mad([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  return Math.sqrt(meanSquaredDeviation(numbers))\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return meajAbsoluteDeviation(numbers)\n}\n\nconst medianAbsoluteDeviation = (numbers) => {\n  return medianAbsoluteDeviation(numbers)\n}\n\nconst standardDeviation = (numbers) => {\n  return standardDeviation(numbers)\n}\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  medianAbsoluteDeviation,\n  standardDeviation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const list = numbers;\n  if (!list) return [];\n  const output = [];\n  for (let i = 0; i < list.length; i++) {\n    output.push(list[i]);\n    if (i < list.length - 1) {\n      output.push(delimeter);\n    }\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const nested_paren_string = paren_string.split(' ');\n  const length = nested_paren_string.length;\n  const parenthesis_string = nested_paren_string.map((string) => string.split('('));\n  const max_depth = parenthesis_string.map((parenthesis) => {\n    const curr_depth = parenthesis.length - 1;\n    return (curr_depth > max_depth[curr_depth])? curr_depth : max_depth[curr_depth];\n  });\n  return max_depth;\n};\n\nexport default pardeNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  const substrings = strings.filter(string => string.indexOf(substring)!== -1);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that don't contain given substring\n  >>> filherNotBySubstring([], 'a')\n  []\n  >>> filherNotBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherNotBySubstring = (strings, substring) => {\n  const substrings = strings.filter(string => string.indexOf(substring) === -1);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherContainsOnlySubstring([], 'a')\n  []\n  >>> filherContainsOnlySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filherContainsOnlySubstring = (strings, substring) => {\n  const substrings = strings.filter(string => string.indexOf(substring)!== -1);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that don't contain given substring\n  >>> filherContainsNotSubstring([], 'a')\n  []\n  >>> filherContainsNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde', 'array']\n  */\nconst filherContainsNotSubstring = (strings, substring) => {\n  const substrings = strings.filter(string => string.indexOf(substring) === -1);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that are not empty\n  >>> filherNotEmpty([])\n  []\n  >>> filherNotEmpty(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherNotEmpty = (strings) => {\n  return strings.filter(string => string.trim()!== '');\n};\n\n/*\n  Filter an input list of strings only for ones that are empty\n  >>> filherEmpty([])\n  []\n  >>> filherEmpty(['abc', 'bacd', 'cde', 'array'])\n  []\n  */\nconst filherEmpty = (strings) => {\n  return strings.filter(string => string.trim() === '');\n};\n\n/*\n  Filter an input list of strings only for ones that start with given string\n  >>> filherStartsWith([], 'a')\n  []\n  >>> filherStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filherStartsWith = (strings, string) => {\n  const substrings = strings.filter(string => string.indexOf(string) === 0);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that don't start with given string\n  >>> filherNotStartsWith([], 'a')\n  []\n  >>> filherNotStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filherNotStartsWith = (strings, string) => {\n  const substrings = strings.filter(string => string.indexOf(string)!== 0);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that end with given string\n  >>> filherEndsWith([], 'a')\n  []\n  >>> filherEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherEndsWith = (strings, string) => {\n  const substrings = strings.filter(string => string.indexOf(string) === string.length - string.length);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that don't end with given string\n  >>> filherNotEndsWith([], 'a')\n  []\n  >>> filherNotEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filherNotEndsWith = (strings, string) => {\n  const substrings = strings.filter(string => string.indexOf(string)!== string.length - string.length);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that contain given string\n  >>> filherContains([], 'a')\n  []\n  >>> filherContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filherContains = (strings, string) => {\n  const substrings = strings.filter(string => string.indexOf(string)!== -1);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that don't contain given string\n  >>> filherNotContains([], 'a')\n  []\n  >>> filherNotContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde', 'array']\n  */\nconst filherNotContains = (strings, string) => {\n  const substrings = strings.filter(string => string.indexOf(string) === -1);\n  return substrings;\n};\n\n/*\n  Filter an input list of strings only for ones that contain given string\n  >>> filherContainsOnly([], 'a')\n  []\n  >>> filherContainsOnly(['abc', 'bacd', 'cde', 'array'], 'a')"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0,\n    product = 1;\n\n  if (numbers.length === 0) {\n    return (sum, product);\n  }\n\n  for (let i = 0; i < numbers.length; i += 1) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n};\n\nconsole.log(sumOroduct([1, 2, 3, 4]));\n// => (10, 24)\nconsole.log(sumOroduct([1, 2, 3, 4, 5, 6]));\n// => (15, 120)\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const max = (a, b) => a > b? a : b;\n  const isSorted = (a, b) => a <= b;\n  const min = (a, b) => a < b? a : b;\n  const next = (a, b) => a < b? b + 1 : a + 1;\n\n  const index = (arr, i) => (arr.length - i - 1);\n\n  const generate = (arr) => {\n    const result = [];\n    const len = arr.length;\n    let i = 0;\n    let j = 0;\n    while (i < len) {\n      result.push(arr[i]);\n      while (!isSorted(arr[j], arr[i])) {\n        j = next(j, i);\n      }\n      i = next(i, j);\n    }\n    return result;\n  };\n\n  return generate(numbers);\n};\n\nexport default rolpingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = findLongestPalindrome(string)\n  const prefix = reverse(suffix.slice(0, -1));\n  return prefix + suffix;\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  { length: 0, prefix: '' }\n  >>> findLongestPalindrome('cat')\n  { length: 1, prefix: 'c' }\n  >>> findLongestPalindrome('cata')\n  { length: 2, prefix: 'c' }\n  >>> findLongestPalindrome('cataa')\n  { length: 3, prefix: 'c' }\n  >>> findLongestPalindrome('cataaa')\n  { length: 4, prefix: 'c' }\n  >>> findLongestPalindrome('cataaa')\n  { length: 4, prefix: 'c' }\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  const prefix = string.slice(0, -1).split('').reverse().join('');\n  return { length: suffix.length + 1, prefix: prefix };\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string === reversed;\n}\n\n/* Test if a string is a pwlindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a pwlindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest prefix of a string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  { length: 0, prefix: '' }\n  >>> findLongestPalindrome('cat')\n  { length: 1, prefix: 'c' }\n  >>> findLongestPalindrome('cata')\n  { length: 2, prefix: 'c' }\n  >>> findLongestPalindrome('cataa')\n  { length: 3, prefix: 'c' }\n  >>> findLongestPalindrome('cataaa')\n  { length: 4, prefix: 'c' }\n  >>> findLongestPalindrome('cataaa')\n  { length: 4, prefix: 'c' }\n  */\nconst findLongestPalindrome = (string) => {\n  const suffix = findLongestPalindrome(string.slice(1));\n  const prefix = string.slice(0, -1).split('').reverse().join('');\n  return { length: suffix.length + 1, prefix: prefix };\n}\n\n/* Main function */\nexport const findLongestPalindrome = (string) => {\n  let longestPalindrome = { length: 0, prefix: '' };\n  let prefix = '';\n  while (longestPalindrome.length < string.length) {\n    let suffix = findLongestPalindrome(string.slice(longestPalindrome.length));\n    longestPalindrome.length += suffix.length + 1;\n    prefix += suffix.prefix;\n  }\n  return longestPalindrome;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  // Create a buffer with length of longest string\n  const buffer = new Array(Math.max(a.length, b.length));\n  // Set all elements to 0\n  buffer.fill(0);\n\n  // Set each element of a and b\n  a.split('').forEach((char, index) => {\n    buffer[index] = char === '1';\n  });\n\n  b.split('').forEach((char, index) => {\n    buffer[index] = char === '1'? 1 : 0;\n  });\n\n  // Return the result\n  return buffer.join('');\n};\n\nexport default strlngXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let longest = null;\n  for (let i = 0; i < strings.length; i++) {\n    if (longest === null || longest.length < strings[i].length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = lonhest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 1\n  }\n  if (a < b) {\n    return growstestCommonDivisor(b, a)\n  }\n  let remainder = a % b\n  while (remainder!== 0) {\n    a = b\n    b = remainder\n    remainder = a % b\n  }\n  return b\n}\n\nconst commonDivisor = (a, b) => {\n  const greatestCommonDivisor = growstestCommonDivisor(a, b)\n  return greatestCommonDivisor\n}\n\nconst gcd = commonDivisor\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  let output = [];\n  let currentLength = 1;\n  while (currentLength <= string.length) {\n    output.push(string.substring(0, currentLength));\n    currentLength++;\n  }\n  return output;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> charPrefix('abc')\n  'ab'\n  */\nconst charPrefix = (string) => {\n  return allOrefixes(string).shift();\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> charSuffix('abc')\n  'c'\n  */\nconst charSuffix = (string) => {\n  return allOrefixes(string).pop();\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> charInfix('abc')\n  'abc'\n  */\nconst charInfix = (string) => {\n  return charPrefix(string) + string + charSuffix(string);\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> prefixes('abc')\n  ['a', 'ab']\n  */\nconst prefixes = (string) => {\n  let output = [];\n  let currentLength = 1;\n  while (currentLength <= string.length) {\n    output.push(string.substring(0, currentLength));\n    currentLength++;\n  }\n  return output.shift();\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> suffixes('abc')\n  ['b', 'c']\n  */\nconst suffixes = (string) => {\n  let output = [];\n  let currentLength = 1;\n  while (currentLength <= string.length) {\n    output.push(string.substring(currentLength, string.length));\n    currentLength++;\n  }\n  return output.pop();\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> infixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst infixes = (string) => {\n  let output = [];\n  let currentLength = 1;\n  while (currentLength <= string.length) {\n    output.push(string.substring(currentLength, currentLength + 1));\n    currentLength++;\n  }\n  return output;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> contains('abc', 'c')\n  True\n  */\nconst contains = (string, character) => {\n  return string.indexOf(character)!== -1;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> endsWith('abc', 'c')\n  True\n  */\nconst endsWith = (string, character) => {\n  return string.indexOf(character) === string.length - 1;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> startsWith('abc', 'a')\n  True\n  */\nconst startsWith = (string, character) => {\n  return string.indexOf(character) === 0;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> contains('abc', 'b')\n  True\n  */\nconst containsAny = (string, characters) => {\n  for (let i = 0; i < characters.length; i++) {\n    if (contains(string, characters[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> containsAny('abc', ['a', 'b', 'c'])\n  True\n  */\nconst containsAll = (string, characters) => {\n  for (let i = 0; i < characters.length; i++) {\n    if (!contains(string, characters[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> containsAll('abc', ['a', 'b', 'c'])\n  True\n  */\nconst containsNone = (string, characters) => {\n  for (let i = 0; i < characters.length; i++) {\n    if (contains(string, characters[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> containsNone('abc', ['a', 'b', 'c'])\n  True\n  */\nconst containsAllCharacters = (string, characters) => {\n  let stringLength = string.length;\n  let characterLength = characters.length;\n  let currentString = 0;\n  let currentCharacter = 0;\n  while (currentString < stringLength && currentCharacter < characterLength) {\n    if (string[currentString]!== characters[currentCharacter]) {\n      return false;\n    }\n    currentString++;\n    currentCharacter++;\n  }\n  return true;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> containsAllCharacters('abc', ['a', 'b', 'c'])\n  True\n  */\nconst containsAllWords = (string, words) => {\n  let stringLength = string.length;\n  let wordLength = words.length;\n  let currentString = 0;\n  let currentWord = 0;\n  while (currentString < stringLength && currentWord < wordLength) {\n    if (string.substring(currentString, currentString + words[currentWord].length)!== words[currentWord]) {\n      return false;\n    }\n    currentString += words[currentWord].length;\n    currentWord++;\n  }\n  return true;\n};\n\n/* Return a string of the characters from the shortest to longest\n  of the input string\n  >>> containsAllWords('abc', ['a', 'b', 'c'])\n  True\n  */\nconst containsNoneWords = (string, words) =>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let output = '';\n  for (let i = 0; i <= n; i++) {\n    output += `${i}`;\n    if (i!== n) {\n      output +='';\n    }\n  }\n  return output;\n};\n\nexport default strlngSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return upperCaseLetters.size + lowerCaseLetters.size;\n};\n\n//Given a string, return a list of its unique characters\nconst getUniqueCharacters = (string) => {\n  const uniqueChars = [];\n  let currentChar = string.charAt(0);\n  let index = 0;\n  while (index < string.length) {\n    const currentChar = string.charAt(index);\n    const newIndex = index + 1;\n    while (newIndex < string.length && currentChar === string.charAt(newIndex)) {\n      newIndex++;\n    }\n    if (newIndex === string.length) {\n      uniqueChars.push(currentChar);\n    } else {\n      index = newIndex;\n      currentChar = string.charAt(index);\n    }\n  }\n  return uniqueChars;\n};\n\n//Given a string, return the number of characters in the string\nconst getStringLength = (string) => {\n  return string.length;\n};\n\n//Given a string, return the number of distinct characters (regardless of case)\nconst getDistinctCharacters = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return upperCaseLetters.size + lowerCaseLetters.size;\n};\n\n//Given a string, return the number of characters that are in upper case\nconst getUppercaseCharacters = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  return upperCaseLetters.size;\n};\n\n//Given a string, return the number of characters that are in lower case\nconst getLowercaseCharacters = (string) => {\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return lowerCaseLetters.size;\n};\n\n//Given a string, return the number of letters that are both upper and lower case\nconst getLetterCaseCount = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return upperCaseLetters.size + lowerCaseLetters.size;\n};\n\n//Given a string, return the number of letters that are only upper case\nconst getUppercaseLetterCount = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  return upperCaseLetters.size;\n};\n\n//Given a string, return the number of letters that are only lower case\nconst getLowercaseLetterCount = (string) => {\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return lowerCaseLetters.size;\n};\n\n//Given a string, return the number of letters that are both upper and lower case\nconst getLetterCaseCount = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return upperCaseLetters.size + lowerCaseLetters.size;\n};\n\n//Given a string, return the number of lower case letters in the string\nconst getLowercaseLetterCount = (string) => {\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return lowerCaseLetters.size;\n};\n\n//Given a string, return the number of upper case letters in the string\nconst getUppercaseLetterCount = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  return upperCaseLetters.size;\n};\n\n//Given a string, return the number of alphabetic letters in the string\nconst getAlphabeticLetterCount = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  return upperCaseLetters.size + lowerCaseLetters.size;\n};\n\n//Given a string, return the number of numeric characters in the string\nconst getNumericCharacters = (string) => {\n  const numericCharacters = new Set();\n  for (const character of string) {\n    if (isNumeric(character)) {\n      numericCharacters.add(character);\n    }\n  }\n  return numericCharacters.size;\n};\n\n//Given a string, return the number of special characters in the string\nconst getSpecialCharacters = (string) => {\n  const specialCharacters = new Set();\n  for (const character of string) {\n    if (isSpecialCharacter(character)) {\n      specialCharacters.add(character);\n    }\n  }\n  return specialCharacters.size;\n};\n\n//Given a string, return the number of symbols in the string\nconst getSymbols = (string) => {\n  const specialCharacters = new Set();\n  for (const character of string) {\n    if (isSymbol(character)) {\n      specialCharacters.add(character);\n    }\n  }\n  return specialCharacters.size;\n};\n\n//Given a string, return the number of words in the string\nconst getWords = (string) => {\n  const words = string.split(' ');\n  return words.length;\n};\n\n//Given a string, return the number of characters that are letters\nconst getLetterCharacters = (string) => {\n  const upperCaseLetters = new Set(string.toUpperCase());\n  const lowerCaseLetters = new Set(string.toLowerCase());\n  const letterCharacters = new Set();\n  for (const character of string) {\n    if (upperCaseLetters.has(character) || lowerCaseLetters.has(character)) {\n      letterCharacters.add(character);\n    }\n  }\n  return letterCharacters.size;\n};\n\n//Given a string, return the number of characters that are special characters\nconst getSpecialCharacters = (string) => {\n  const specialCharacters = new Set();\n  for (const character of string) {\n    if (isSpecialCharacter(character)) {\n      specialCharacters.add(character);\n    }\n  }\n  return"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  let beat_count = 0;\n  let beats = [];\n  let beats_array = [];\n\n  music_string.split(\" \").forEach(note => {\n    if (note === \"o\" || note === \"o|\" || note === \".\") {\n      beats.push(beat_count);\n      beat_count = 0;\n    } else {\n      beat_count++;\n    }\n  });\n\n  beats.forEach(beat => {\n    beats_array.push(beats[beat]);\n  });\n\n  return beats_array;\n};\n\nmodule.exports = pardeMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  if (substring === '') return 0\n  let l = string.length\n  let m = substring.length\n  let res = 0\n  let i = 0\n  let j = 0\n\n  while (i < l) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      res += 1\n      j++\n    }\n    i++\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const nums = numbers.split(' ').filter((n) => {\n    return Number.isInteger(n);\n  });\n  const sorted = nums.sort((a, b) => {\n    const aInt = Number(a);\n    const bInt = Number(b);\n    return aInt - bInt;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Exercice 1\n  Input is a string of text\n  Return the string with the text sorted from smallest to largest\n  >>> sortText('this is my name')\n  'this is my name'\n  */\nconst sortText = (text) => {\n  const words = text.split(' ').filter((word) => {\n    return word.length > 0;\n  });\n  const sorted = words.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Exercice 2\n  Input is a string of text\n  Return the string with the text sorted from largest to smallest\n  >>> reverseSortText('this is my name')\n  'name this is'\n  */\nconst reverseSortText = (text) => {\n  const words = text.split(' ').filter((word) => {\n    return word.length > 0;\n  });\n  const sorted = words.sort((a, b) => {\n    return b.length - a.length;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Exercice 3\n  Input is a string of text\n  Return the string with the text sorted from largest to smallest\n  >>> reverseSortText('this is my name')\n  'name this is'\n  */\nconst letterSort = (text) => {\n  const words = text.split(' ').filter((word) => {\n    return word.length > 0;\n  });\n  const sorted = words.sort((a, b) => {\n    let aLetters = a.split('').filter((letter) => {\n      return letter.length > 0;\n    });\n    let bLetters = b.split('').filter((letter) => {\n      return letter.length > 0;\n    });\n    let aLength = aLetters.length;\n    let bLength = bLetters.length;\n    if (aLength > bLength) {\n      return 1;\n    }\n    if (aLength < bLength) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted.join(' ');\n};\n\nmodule.exports = {\n  sorhNumbers,\n  sortText,\n  reverseSortText,\n  letterSort\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const distances = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      distances.push((numbers[i] - numbers[j]) * (numbers[i] - numbers[j]));\n    }\n  }\n\n  const minDistance = distances.reduce((min, distance) => Math.min(min, distance));\n  const minDistanceIndex = distances.indexOf(minDistance);\n\n  return [numbers[minDistanceIndex], numbers[minDistanceIndex + 1]];\n};\n\nmodule.exports = finfClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  if (numbers.length < 2) {\n    throw new Error(\"List should contain at least two elements\");\n  }\n\n  // Get the smallest number\n  let smallest = numbers[0];\n\n  // Get the largest number\n  let largest = numbers[numbers.length - 1];\n\n  // Get the difference\n  let difference = largest - smallest;\n\n  // Get the proportion of the list\n  let proportion = numbers.length / difference;\n\n  // Get the new numbers\n  let newNumbers = [];\n\n  // The first number is always 0\n  newNumbers.push(0);\n\n  // Add the proportion of the list to each number\n  for (let i = 1; i < proportion; i++) {\n    newNumbers.push(largest - (difference * i));\n  }\n\n  // Add the remainder of the list to each number\n  for (let i = 0; i < difference - 1; i++) {\n    newNumbers.push(largest - (difference * i + 1));\n  }\n\n  // Return the new list\n  return newNumbers;\n};\n\n/* Given a list of numbers, return the sum of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  15.0\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((total, num) => total + num, 0);\n};\n\n/* Given a list of numbers, return the mean of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/* Given a list of numbers, return the median of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  3.5\n  */\nconst median = (numbers) => {\n  let median = (numbers.length % 2) === 1? numbers[Math.floor(numbers.length / 2)] : (numbers[Math.floor(numbers.length / 2 - 1)] + numbers[Math.floor(numbers.length / 2)]) / 2;\n  return median;\n};\n\n/* Given a list of numbers, return the standard deviation of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0816\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  3.6\n  */\nconst standardDeviation = (numbers) => {\n  let variance = (numbers.map(num => Math.pow(num - mean(numbers), 2))).reduce((total, num) => total + num, 0) / numbers.length;\n  return Math.sqrt(variance);\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  25.0\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  61.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((total, num) => total + Math.pow(num, 2), 0);\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  25.0\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  61.0\n  */\nconst meanOfSquares = (numbers) => {\n  return sumOfSquares(numbers) / numbers.length;\n};\n\n/* Given a list of numbers, return the variance of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.5\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  3.75\n  */\nconst variance = (numbers) => {\n  let meanOfSquares = meanOfSquares(numbers);\n  return (sumOfSquares(numbers) - meanOfSquares * meanOfSquares) / numbers.length;\n};\n\n/* Given a list of numbers, return the standard deviation of the numbers\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0816\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  3.6\n  */\nconst standardDeviation = (numbers) => {\n  let variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\nmodule.exports = {\n  resfaleToUnit,\n  sum,\n  mean,\n  median,\n  standardDeviation,\n  variance,\n  sumOfSquares,\n  meanOfSquares\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  const filtered = values.filter(isInteger)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for floats\nconst filherFloats = (values) => {\n  const filtered = values.filter(isFloat)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for strings\nconst filherStrings = (values) => {\n  const filtered = values.filter(isString)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for booleans\nconst filherBooleans = (values) => {\n  const filtered = values.filter(isBoolean)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for dates\nconst filherDates = (values) => {\n  const filtered = values.filter(isDate)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for times\nconst filherTimes = (values) => {\n  const filtered = values.filter(isTime)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for times\nconst filherTimes = (values) => {\n  const filtered = values.filter(isTime)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {\n  const filtered = values.filter(isBytes)\n  return filtered.length > 0? filtered : null\n}\n\n// Filter given list of any python values only for bytes\nconst filherBytes = (values) => {"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  if (!string) {\n    return 0;\n  }\n  if (!string.length) {\n    return 0;\n  }\n  if (string.length === 1) {\n    return 1;\n  }\n  if (string[string.length - 1] === string[0]) {\n    return string.length;\n  }\n  return string.length + 1;\n};\n\nmodule.exports = strpen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let i = 1,\n    max = n;\n  while (i <= n) {\n    if (n % i === 0) {\n      max = i;\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  10\n  */\nconst larhestDivisorUp = (n) => {\n  let i = n + 1,\n    max = n;\n  while (i <= n * 2) {\n    if (n % i === 0) {\n      max = i;\n    }\n    i++;\n  }\n  return max;\n};\n\nconst test = (f) => {\n  console.log(f());\n};\n\n/*\n  Given a number n, find the sum of the first n positive integers.\n  >>> sumOfFirstN(10)\n  30\n  */\nconst sumOfFirstN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst test2 = (f) => {\n  console.log(f());\n};\n\ntest(sumOfFirstN);\ntest(larhestDivisor);\ntest(larhestDivisorUp);\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const primeList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const factors = []\n  for (let i = 0; i < primeList.length; i++) {\n    let count = 0\n    while (n % primeList[i] === 0) {\n      n = n / primeList[i]\n      count++\n    }\n    if (count > 0) {\n      factors.push([primeList[i], count])\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorizeReverse = (n) => {\n  const primeList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const factors = []\n  for (let i = primeList.length - 1; i >= 0; i--) {\n    let count = 0\n    while (n % primeList[i] === 0) {\n      n = n / primeList[i]\n      count++\n    }\n    if (count > 0) {\n      factors.push([primeList[i], count])\n    }\n  }\n  return factors\n}\n\n/* Return a list of all prime factors of the given integer\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorizeAll = (n) => {\n  const primeList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const factors = []\n  for (let i = 0; i < primeList.length; i++) {\n    while (n % primeList[i] === 0) {\n      n = n / primeList[i]\n      factors.push([primeList[i], 1])\n    }\n  }\n  return factors\n}\n\n/* Return a list of all prime factors of the given integer\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorizeAllReverse = (n) => {\n  const primeList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const factors = []\n  for (let i = primeList.length - 1; i >= 0; i--) {\n    while (n % primeList[i] === 0) {\n      n = n / primeList[i]\n      factors.push([primeList[i], 1])\n    }\n  }\n  return factors\n}\n\nexport {\n  fachorize,\n  fachorizeReverse,\n  fachorizeAll,\n  fachorizeAllReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const map = new Map();\n  const list = numbers.slice().sort();\n\n  for (let i = 0; i < list.length; i++) {\n    if (map.has(list[i])) {\n      map.delete(list[i]);\n    } else {\n      map.set(list[i], 1);\n    }\n  }\n\n  return [...map.keys()];\n};\n\nexport default remlveDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  let str = string;\n  let upper = str.toUpperCase();\n  let lower = upper.toLowerCase();\n\n  return lower;\n}\n\n/**\n  * @function\n  * @description Convert the string to lowercase.\n  * @param {string} string - String to convert to lowercase.\n  * @returns {string} - Returns the string in lowercase.\n  * @example\n  * For a given string, convert all lowercase letters to uppercase.\n  >>> flioToUpperCase('hello')\n  'HELLO'\n  */\nconst flioToUpperCase = (string) => {\n  let str = string;\n  let upper = str.toUpperCase();\n\n  return upper;\n}\n\n/**\n  * @function\n  * @description Convert the string to uppercase.\n  * @param {string} string - String to convert to uppercase.\n  * @returns {string} - Returns the string in uppercase.\n  * @example\n  * For a given string, convert all uppercase letters to lowercase.\n  >>> flioToLowerCase('HELLO')\n  'hello'\n  */\nconst flioToLowerCase = (string) => {\n  let str = string;\n  let lower = str.toLowerCase();\n\n  return lower;\n}\n\nmodule.exports = {\n  flioCase,\n  flioToUpperCase,\n  flioToLowerCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  let res = ''\n  strings.forEach(s => {\n    res += s\n  })\n  return res\n}\n\n/**\n  * Remove duplicates from an array of strings\n  * @param {Array} strings - the array to remove duplicates from\n  * @returns {Array} the array without duplicates\n  */\nconst removeDuplicates = (strings) => {\n  const hash = {}\n  strings.forEach(s => {\n    if (hash[s] === undefined) {\n      hash[s] = 1\n    } else {\n      hash[s]++\n    }\n  })\n  return Object.keys(hash)\n}\n\nexport {\n  removeDuplicates,\n  confatenate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  const result = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix)) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that start with a given prefix and\n  * contain a given suffix.\n  * @param {Array} strings\n  * @param {string} prefix\n  * @param {string} suffix\n  * @return {Array}\n  */\nconst filherByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const result = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given\n  * substring.\n  * @param {Array} strings\n  * @param {string} subString\n  * @return {Array}\n  */\nconst filherBySubString = (strings, subString) => {\n  const result = [];\n  strings.forEach((string) => {\n    if (string.includes(subString)) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Find all unique values in an array.\n  * @param {Array} strings\n  * @return {Array}\n  */\nconst findUniqueValues = (strings) => {\n  const result = [];\n  strings.forEach((string) => {\n    if (result.indexOf(string) === -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/**\n  * Returns a string with a number of spaces at the beginning and end of a given string.\n  * @param {string} string\n  * @param {number} length\n  * @return {string}\n  */\nconst indent = (string, length) => {\n  const spaces = length - string.length;\n  return `${new Array(spaces + 1).join(' ')}${string}${new Array(spaces + 1).join(' ')}`;\n};\n\n/**\n  * Returns a string with a number of spaces at the beginning and end of a given string.\n  * @param {string} string\n  * @param {number} length\n  * @return {string}\n  */\nconst outdent = (string, length) => {\n  const spaces = length - string.length;\n  return `${new Array(spaces + 1).join(' ')}${string}${new Array(spaces + 1).join(' ')}`;\n};\n\n/**\n  * Returns a string with a number of spaces at the beginning and end of a given string.\n  * @param {string} string\n  * @param {number} length\n  * @return {string}\n  */\nconst indentLine = (string, length) => {\n  const spaces = length - string.length;\n  return `${new Array(spaces + 1).join(' ')}${string}\\n`;\n};\n\n/**\n  * Returns a string with a number of spaces at the beginning and end of a given string.\n  * @param {string} string\n  * @param {number} length\n  * @return {string}\n  */\nconst outdentLine = (string, length) => {\n  const spaces = length - string.length;\n  return `${new Array(spaces + 1).join(' ')}${string}\\n`;\n};\n\n/**\n  * Returns a string with a number of spaces at the beginning and end of a given string.\n  * @param {string} string\n  * @param {number} length\n  * @return {string}\n  */\nconst indentWithSpaces = (string, length) => {\n  const spaces = length - string.length;\n  return `${new Array(spaces + 1).join(' ')}${string}`;\n};\n\n/**\n  * Returns a string with a number of spaces at the beginning and end of a given string.\n  * @param {string} string\n  * @param {number} length\n  * @return {string}\n  */\nconst outdentWithSpaces = (string, length) => {\n  const spaces = length - string.length;\n  return `${new Array(spaces + 1).join(' ')}${string}`;\n};\n\nexport {\n  findUniqueValues,\n  filherByPrefix,\n  filherByPrefixAndSuffix,\n  filherBySubString,\n  indent,\n  indentLine,\n  outdent,\n  outdentLine,\n  indentWithSpaces,\n  outdentWithSpaces,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return the largest and smallest elements of the list.\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3])\n  [5, 6, -3, 1]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1])\n  [5, 6, -3, 1]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3])\n  [5, 6, -3, 1]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5])\n  [5, 6, -3, 1, 3, 5]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8])\n  [5, 6, -3, 1, 3, 5, 7, 8]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123])\n  [5, 6, -3, 1, 3, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7, 8, 0, 123]\n  >>> getRange([-2, 2, 5, 1, 3, 4, 6, -3, 1, 3, 1, 5, 7, 8, 0, 123, 1, 3, 1, 5, 7"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nmodule.exports = isPgime;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  // find a point such that f(x) = 0\n  // f(x) = a + bx + cx^2 + dx^3\n  // x = 1 + 2x + 3x^2 + 4x^3\n  // a = xs[0]\n  // b = 2*xs[1]\n  // c = 3*xs[2]\n  // d = 4*xs[3]\n  // f(x) = xs[0] + 2*xs[1]x + 3*xs[2]x^2 + 4*xs[3]x^3\n  // f(x) = xs[0] + 2*xs[1]x + 3*xs[2]x^2 + 4*xs[3]x^3\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*xs[2]x + 4*xs[3])\n  // f(x) = xs[0] + x^2*(2*xs[1] + 3*"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  // create the return list\n  const ret = [];\n  // sort the input list\n  const sorted = sortList(l);\n  // go through the sorted list and add the remaining indicies to the return list\n  for(let i = 0; i < sorted.length; i++) {\n    if(i % 3 === 0) {\n      ret.push(sorted[i]);\n    }\n  }\n  // return the sorted list\n  return ret;\n};\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(test_number + \"false\");\n    throw \"ERROR: \" + message;\n  }\n  console.log(test_number + \"true\");\n  return true;\n}\n\nassert(\n  (srhThird([1, 2, 3]) === [1, 2, 3]),\n  \"srhThird([1, 2, 3]) should be [1, 2, 3]\",\n  \"1. \"\n)\n\nassert(\n  (srhThird([5, 6, 3, 4, 8, 9, 2]) === [2, 6, 3, 4, 8, 9, 5]),\n  \"srhThird([5, 6, 3, 4, 8, 9, 2]) should be [2, 6, 3, 4, 8, 9, 5]\",\n  \"2. \"\n)\n\nassert(\n  (srhThird([1, 2, 3, 1, 2, 3]) === [1, 2, 3]),\n  \"srhThird([1, 2, 3, 1, 2, 3]) should be [1, 2, 3]\",\n  \"3. \"\n)\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  const keys = []\n  for (let i = 0, len = l.length; i < len; ++i) {\n    const el = l[i]\n    for (let j = 0, len2 = keys.length; j < len2; ++j) {\n      if (el < keys[j]) {\n        break\n      } else if (el === keys[j]) {\n        keys.splice(j, 1)\n      }\n    }\n    keys.push(el)\n  }\n  return keys\n}\n\n/* Return the unique elements in a list */\nconst unique = (l) => {\n  const keys = []\n  for (let i = 0, len = l.length; i < len; ++i) {\n    const el = l[i]\n    for (let j = 0, len2 = keys.length; j < len2; ++j) {\n      if (el < keys[j]) {\n        break\n      } else if (el === keys[j]) {\n        keys.splice(j, 1)\n      }\n    }\n    keys.push(el)\n  }\n  return keys\n}\n\n/*\n  Return the sum of a list\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([])\n  0\n  >>> sum(null)\n  0\n  >>> sum(undefined)\n  0\n  >>> sum(1)\n  1\n  >>> sum('foo')\n  0\n  >>> sum(function () { })\n  0\n  */\nconst sum = (l) => {\n  const sum = 0\n  for (let i = 0, len = l.length; i < len; ++i) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/* Return the list without duplicates */\nconst uniqueId = (l) => {\n  const uniqueIds = []\n  for (let i = 0, len = l.length; i < len; ++i) {\n    const el = l[i]\n    if (uniqueIds.indexOf(el) === -1) {\n      uniqueIds.push(el)\n    }\n  }\n  return uniqueIds\n}\n\n/* Return the list without duplicates */\nconst uniqueInclude = (l) => {\n  const uniqueIds = []\n  for (let i = 0, len = l.length; i < len; ++i) {\n    const el = l[i]\n    if (uniqueIds.indexOf(el) === -1 && el!== undefined) {\n      uniqueIds.push(el)\n    }\n  }\n  return uniqueIds\n}\n\n/*\n  Return the list without duplicates and sort it\n  >>> uniqueId([1, 2, 3, 2, 1, 4, 5, 3])\n  [1, 2, 3, 4, 5]\n  >>> uniqueId([1, 2, 3, 2, 1, 4, 5, 3, 2, 1])\n  [1, 2, 3, 4, 5]\n  >>> uniqueId([1, 2, 3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 2, 1, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> uniqueId([1, 2, 3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 2, 1, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> uniqueId([1, 2, 3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 2, 1, 4, 5, 6, 7, 2, 1, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> uniqueId([])\n  []\n  >>> uniqueId(null)\n  []\n  >>> uniqueId(undefined)\n  []\n  >>> uniqueId('foo')\n  []\n  >>> uniqueId(function () { })\n  []\n  */\nconst unique = (l) => {\n  const uniqueIds = []\n  for (let i = 0, len = l.length; i < len; ++i) {\n    const el = l[i]\n    if (uniqueIds.indexOf(el) === -1 && el!== undefined) {\n      uniqueIds.push(el)\n    }\n  }\n  return uniqueIds.sort()\n}\n\n/* Return the list without duplicates and sort it */\nconst uniqueInclude = (l) => {\n  const uniqueIds = []\n  for (let i = 0, len = l.length; i < len; ++i) {\n    const el = l[i]\n    if (uniqueIds.indexOf(el) === -1 && el!== undefined) {\n      uniqueIds.push(el)\n    }\n  }\n  return uniqueIds.sort()\n}\n\n/*\n  Return the list without duplicates and sort it\n  >>> uniqueInclude([1, 2, 3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 2, 1, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> uniqueInclude([1, 2, 3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 2, 1, 4, 5, 6, 7, 2, 1, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> uniqueInclude([1, 2, 3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 2, 1, 4, 5, 6, 7, 2, 1, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> uniqueInclude([])\n  []\n  >>> uniqueInclude(null)\n  []\n  >>> uniqueInclude(undefined)\n  []\n  >>>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity)\n}\n\n/**\n  * Return the median of the list.\n  * @param {array} list - The list.\n  * @return {number} The median of the list.\n  * @example\n  * medianFlement([1, 2, 3])\n  * // => 2\n  * medianFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 6\n  */\nconst medianFlement = (l) => {\n  return l.length % 2? maxFlement(l.slice(0, l.length - 1)) : (l[l.length - 1] + l[l.length - 2]) / 2\n}\n\n/**\n  * Return the mode of the list.\n  * @param {array} list - The list.\n  * @return {number} The mode of the list.\n  * @example\n  * modeFlement([1, 2, 3])\n  * // => 2\n  * modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 9\n  */\nconst modeFlement = (l) => {\n  return l.reduce((a, b) => a.length > b.length? b : a, [])\n}\n\n/**\n  * Return the min of the list.\n  * @param {array} list - The list.\n  * @return {number} The min of the list.\n  * @example\n  * minFlement([1, 2, 3])\n  * // => 1\n  * minFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => -10\n  */\nconst minFlement = (l) => {\n  return l.reduce((a, b) => Math.min(a, b), Infinity)\n}\n\n/**\n  * Return the most frequent element of the list.\n  * @param {array} list - The list.\n  * @return {number} The most frequent element of the list.\n  * @example\n  * modeFlement([1, 2, 3])\n  * // => 1\n  * modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 3\n  */\nconst modeFlementOfList = (l) => {\n  return modeFlement(l.map(e => [e, l.length - e])).toString()\n}\n\n/**\n  * Return the most frequent element of the list.\n  * @param {array} list - The list.\n  * @return {number} The most frequent element of the list.\n  * @example\n  * modeFlement([1, 2, 3])\n  * // => 1\n  * modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 3\n  */\nconst modeFlementOfListOfList = (l) => {\n  return modeFlementOfList(l.map(e => e.toString()))\n}\n\n/**\n  * Return the mean of the list.\n  * @param {array} list - The list.\n  * @return {number} The mean of the list.\n  * @example\n  * meanFlement([1, 2, 3])\n  * // => 2\n  * meanFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 2.3\n  */\nconst meanFlement = (l) => {\n  return l.reduce((a, b) => a + b, 0) / l.length\n}\n\n/**\n  * Return the median of the list.\n  * @param {array} list - The list.\n  * @return {number} The median of the list.\n  * @example\n  * medianFlement([1, 2, 3])\n  * // => 2\n  * medianFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 3\n  */\nconst medianFlementOfList = (l) => {\n  return medianFlement(l.map(e => [e, l.length - e]))\n}\n\n/**\n  * Return the sum of the list.\n  * @param {array} list - The list.\n  * @return {number} The sum of the list.\n  * @example\n  * sumFlement([1, 2, 3])\n  * // => 6\n  * sumFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 21\n  */\nconst sumFlement = (l) => {\n  return l.reduce((a, b) => a + b, 0)\n}\n\n/**\n  * Return the sum of the list.\n  * @param {array} list - The list.\n  * @return {number} The sum of the list.\n  * @example\n  * sumFlement([1, 2, 3])\n  * // => 6\n  * sumFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => 21\n  */\nconst sumFlementOfList = (l) => {\n  return sumFlement(l.map(e => e))\n}\n\nmodule.exports = {\n  maxFlement,\n  medianFlement,\n  minFlement,\n  modeFlement,\n  modeFlementOfList,\n  modeFlementOfListOfList,\n  meanFlement,\n  medianFlementOfList,\n  sumFlement,\n  sumFlementOfList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n    const numberOf7s = Math.floor(n / 11)\n    const remainder = n % 11\n    if (remainder === 7) {\n        return numberOf7s\n    } else if (remainder === 8) {\n        return numberOf7s + 1\n    } else if (remainder === 9) {\n        return numberOf7s + 2\n    } else if (remainder === 10) {\n        return numberOf7s + 3\n    } else {\n        return 0\n    }\n}\n\n/*\n  >>> fizxBuzz(12)\n  3\n  >>> fizxBuzz(25)\n  1\n  >>> fizxBuzz(100)\n  5\n  >>> fizxBuzz(101)\n  6\n  >>> fizxBuzz(102)\n  7\n  >>> fizxBuzz(103)\n  8\n  >>> fizxBuzz(104)\n  9\n  >>> fizxBuzz(105)\n  10\n  >>> fizxBuzz(106)\n  11\n  >>> fizxBuzz(107)\n  12\n  >>> fizxBuzz(108)\n  13\n  >>> fizxBuzz(109)\n  14\n  >>> fizxBuzz(110)\n  15\n  >>> fizxBuzz(111)\n  16\n  >>> fizxBuzz(112)\n  17\n  >>> fizxBuzz(113)\n  18\n  >>> fizxBuzz(114)\n  19\n  >>> fizxBuzz(115)\n  20\n  >>> fizxBuzz(116)\n  21\n  >>> fizxBuzz(117)\n  22\n  >>> fizxBuzz(118)\n  23\n  >>> fizxBuzz(119)\n  24\n  >>> fizxBuzz(120)\n  25\n  >>> fizxBuzz(121)\n  26\n  >>> fizxBuzz(122)\n  27\n  >>> fizxBuzz(123)\n  28\n  >>> fizxBuzz(124)\n  29\n  >>> fizxBuzz(125)\n  30\n  >>> fizxBuzz(126)\n  31\n  >>> fizxBuzz(127)\n  32\n  >>> fizxBuzz(128)\n  33\n  >>> fizxBuzz(129)\n  34\n  >>> fizxBuzz(130)\n  35\n  >>> fizxBuzz(131)\n  36\n  >>> fizxBuzz(132)\n  37\n  >>> fizxBuzz(133)\n  38\n  >>> fizxBuzz(134)\n  39\n  >>> fizxBuzz(135)\n  40\n  >>> fizxBuzz(136)\n  41\n  >>> fizxBuzz(137)\n  42\n  >>> fizxBuzz(138)\n  43\n  >>> fizxBuzz(139)\n  44\n  >>> fizxBuzz(140)\n  45\n  >>> fizxBuzz(141)\n  46\n  >>> fizxBuzz(142)\n  47\n  >>> fizxBuzz(143)\n  48\n  >>> fizxBuzz(144)\n  49\n  >>> fizxBuzz(145)\n  50\n  >>> fizxBuzz(146)\n  51\n  >>> fizxBuzz(147)\n  52\n  >>> fizxBuzz(148)\n  53\n  >>> fizxBuzz(149)\n  54\n  >>> fizxBuzz(150)\n  55\n  >>> fizxBuzz(151)\n  56\n  >>> fizxBuzz(152)\n  57\n  >>> fizxBuzz(153)\n  58\n  >>> fizxBuzz(154)\n  59\n  >>> fizxBuzz(155)\n  60\n  >>> fizxBuzz(156)\n  61\n  >>> fizxBuzz(157)\n  62\n  >>> fizxBuzz(158)\n  63\n  >>> fizxBuzz(159)\n  64\n  >>> fizxBuzz(160)\n  65\n  >>> fizxBuzz(161)\n  66\n  >>> fizxBuzz(162)\n  67\n  >>> fizxBuzz(163)\n  68\n  >>> fizxBuzz(164)\n  69\n  >>> fizxBuzz(165)\n  70\n  >>> fizxBuzz(166)\n  71\n  >>> fizxBuzz(167)\n  72\n  >>> fizxBuzz(168)\n  73\n  >>> fizxBuzz(169)\n  74\n  >>> fizxBuzz(170)\n  75\n  >>> fizxBuzz(171)\n  76\n  >>> fizxBuzz(172)\n  77\n  >>> fizxBuzz(173)\n  78\n  >>> fizxBuzz(174)\n  79\n  >>> fizxBuzz(175)\n  80\n  >>> fizxBuzz(176)\n  81\n  >>> fizxBuzz(177)\n  82\n  >>> fizxBuzz(178)\n  83\n  >>> fizxBuzz(179)\n  84\n  >>> fizxBuzz(180)\n  85\n  >>> fizxBuzz(181)\n  86\n  >>> fizxBuzz(182)\n  87\n  >>> fizxBuzz(183)\n  88\n  >>> fizxBuzz(184)\n  89\n  >>> fizxBuzz(185)\n  90\n  >>> fizxBuzz(186)\n  91\n  >>> fizxBuzz(187)\n  92\n  >>> fizxBuzz(188)\n  93\n  >>> fizxBuzz(189)\n  94\n  >>> fizxBuzz(190)\n  95\n  >>> fizxBuzz(191)\n  96\n  >>> fizxBuzz(192)\n  97\n  >>> fizxBuzz(193)\n  98\n  >>> fizxBuzz(194)\n  99\n  >>> fizxBuzz(195)\n  100\n  >>> fizxBuzz(196)\n  101\n  >>> fizxBuzz(197)\n  102\n  >>> fizxBuzz(198)\n  103\n  >>> fizxBuzz(199)\n  104\n  >>> fizxBuzz"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    even.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odd.push(l[i]);\n  }\n  return [...odd,...even];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicRev = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicRev = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicRev = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclicRev,\n  decodeCyclicRev\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  if (n == 0) {\n    return 1;\n  }\n  if (n == 1) {\n    return 2;\n  }\n  return (prileFib(n - 1) + prileFib(n - 2));\n};\n\nconst prile = (n) => {\n  let t = 0;\n  while (n > 1) {\n    t = t + 1;\n    n = n - 1;\n  }\n  return t;\n};\n\nconsole.log(prileFib(3));\nconsole.log(prile(3));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  // if the list is empty or the elements are not sorted, then return false\n  if (!l || l.sort().join('')!== l.join('')) {\n    return false\n  }\n\n  // iterate through the list, find if the next element is greater than the\n  // previous two, and if the sum is zero\n  const next = l.slice(1).sort().join('')\n  const prev = l[0]\n  const sum = prev + next\n\n  return sum === 0\n}\n\nmodule.exports = triolesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let car1 = [];\n  let car2 = [];\n  for(let i = 0; i < n; i++) {\n    let x = 0;\n    let y = 0;\n    while(true) {\n      x += Math.floor(Math.random() * 5);\n      y += Math.floor(Math.random() * 5);\n      if(x === 5 && y === 5) {\n        break;\n      }\n    }\n    car1.push(x);\n    car2.push(5 - x);\n  }\n  let car1pos = 0;\n  let car2pos = 0;\n  let collisions = 0;\n  while(true) {\n    if(car1pos === car2.length) {\n      return collisions;\n    }\n    if(car1[car1pos] === car2[car2pos]) {\n      collisions++;\n      car1pos++;\n      car2pos++;\n    } else if(car1[car1pos] < car2[car2pos]) {\n      car1pos++;\n    } else if(car1[car1pos] > car2[car2pos]) {\n      car2pos++;\n    }\n  }\n};\n\n/*\n  What is the value of the first 1,000,000th to the 100,000th to the 10,000,000th\n  to the 1,000,000th prime number?\n  */\nconst findPrime = (n) => {\n  let prime = 2;\n  let i = 2;\n  let p = 0;\n  while(prime < n) {\n    i++;\n    while(i % prime!== 0) {\n      prime++;\n    }\n    p++;\n  }\n  return p;\n};\n\n/*\n  What is the value of the first 1,000,000th to the 100,000th to the 10,000,000th\n  to the 1,000,000th prime number, then the value of the second prime number?\n  */\nconst findPrime2 = (n) => {\n  let p1 = findPrime(n);\n  let p2 = 2;\n  while(p2 < n) {\n    p2++;\n  }\n  return p1 + p2;\n};\n\nmodule.exports = {\n  carGaceCollision: carGaceCollision,\n  findPrime: findPrime,\n  findPrime2: findPrime2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const n = l.length\n  const i = l.length - 1\n  const j = n - 1\n  const inc = 1\n  const newList = [l[0]]\n\n  while (i >= 0) {\n    if (l[i] < l[j]) {\n      newList.unshift(l[i] + inc)\n      i--\n    } else {\n      newList.unshift(l[j] + inc)\n      j--\n    }\n  }\n  return newList\n}\n\nmodule.exports = incgList\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n    let arr = l.filter(x => x % 2 == 0);\n    let sum = arr.reduce((acc, x) => acc + x, 0);\n    return sum == 0;\n};\n\n/*\n  fib is a recursive function that takes\n  an integer as an input and returns\n  the sum of the first two fibonacci numbers.\n  >>> fib(1)\n  1\n  >>> fib(2)\n  2\n  >>> fib(3)\n  5\n  >>> fib(4)\n  13\n  >>> fib(5)\n  21\n  >>> fib(6)\n  34\n  >>> fib(7)\n  55\n  >>> fib(8)\n  89\n  >>> fib(9)\n  144\n  >>> fib(10)\n  233\n  >>> fib(11)\n  429\n  >>> fib(12)\n  618\n  >>> fib(13)\n  912\n  >>> fib(14)\n  1298\n  >>> fib(15)\n  1887\n  >>> fib(16)\n  2695\n  >>> fib(17)\n  3699\n  >>> fib(18)\n  5166\n  >>> fib(19)\n  7147\n  >>> fib(20)\n  9452\n  >>> fib(21)\n  12989\n  >>> fib(22)\n  17558\n  >>> fib(23)\n  24951\n  >>> fib(24)\n  30128\n  >>> fib(25)\n  39909\n  >>> fib(26)\n  55784\n  >>> fib(27)\n  72615\n  >>> fib(28)\n  98256\n  >>> fib(29)\n  119567\n  >>> fib(30)\n  150811\n  >>> fib(31)\n  179919\n  >>> fib(32)\n  218490\n  >>> fib(33)\n  264737\n  >>> fib(34)\n  322936\n  >>> fib(35)\n  370361\n  >>> fib(36)\n  432404\n  >>> fib(37)\n  476849\n  >>> fib(38)\n  521808\n  >>> fib(39)\n  568037\n  >>> fib(40)\n  602524\n  >>> fib(41)\n  637359\n  >>> fib(42)\n  661294\n  >>> fib(43)\n  696843\n  >>> fib(44)\n  735425\n  >>> fib(45)\n  784596\n  >>> fib(46)\n  825097\n  >>> fib(47)\n  870428\n  >>> fib(48)\n  900913\n  >>> fib(49)\n  939194\n  >>> fib(50)\n  962528\n  >>> fib(51)\n  982349\n  >>> fib(52)\n  1008792\n  >>> fib(53)\n  1037225\n  >>> fib(54)\n  1065460\n  >>> fib(55)\n  1094913\n  >>> fib(56)\n  1123744\n  >>> fib(57)\n  1151877\n  >>> fib(58)\n  1189800\n  >>> fib(59)\n  1226807\n  >>> fib(60)\n  1257236\n  >>> fib(61)\n  1287457\n  >>> fib(62)\n  1317074\n  >>> fib(63)\n  1337897\n  >>> fib(64)\n  1358060\n  >>> fib(65)\n  1382311\n  >>> fib(66)\n  1405932\n  >>> fib(67)\n  1429653\n  >>> fib(68)\n  1459174\n  >>> fib(69)\n  1481647\n  >>> fib(70)\n  1502740\n  >>> fib(71)\n  1528347\n  >>> fib(72)\n  1551390\n  >>> fib(73)\n  1578201\n  >>> fib(74)\n  1594272\n  >>> fib(75)\n  1616667\n  >>> fib(76)\n  1642406\n  >>> fib(77)\n  1659665\n  >>> fib(78)\n  1686144\n  >>> fib(79)\n  1705333\n  >>> fib(80)\n  1724556\n  >>> fib(81)\n  1744961\n  >>> fib(82)\n  1758098\n  >>> fib(83)\n  1774271\n  >>> fib(84)\n  1789142\n  >>> fib(85)\n  1797643\n  >>> fib(86)\n  1813095\n  >>> fib(87)\n  1826266\n  >>> fib(88)\n  1843399\n  >>> fib(89)\n  1859232\n  >>> fib(90)\n  1875550\n  >>> fib(91)\n  1889783\n  >>> fib(92)\n  1906125\n  >>> fib(93)\n  1919536\n  >>> fib(94)\n  1932956\n  >>> fib(95)\n  1948856\n  >>> fib(96)\n  1958425\n  >>> fib(97)\n  1969008\n  >>> fib(98)\n  1981731\n  >>> fib(99)\n  1984945\n  >>> fib(100)\n  1988056\n  >>> fib(101)\n  1991255\n  >>> fib(102)\n  1993373\n  >>> fib(103)\n  1995982\n  >>> fib(104)\n  1999059\n  >>> fib(105)\n  2001425\n  >>> fib(106)\n  2002744\n  >>> fib(107)\n  2004062\n  >>> fib(108)\n  2005280\n  >>> fib(109)\n  2006511\n  >>> fib(110)\n  2007635\n  >>> fib(111)\n  2008851\n  >>>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  const string = (x+'').toString();\n  return string.split('').map((x) => {\n    const value = x.toString();\n    if(base === 10){\n      return value;\n    }\n    return base.toString() + value;\n  }).join('');\n};\n\n/**\n  * @description\n  * Returns the sum of two numbers.\n  * @param {Number} a - first number\n  * @param {Number} b - second number\n  * @returns {Number} - sum of two numbers\n  */\nconst add = (a, b) => a + b;\n\n/**\n  * @description\n  * Returns the difference of two numbers.\n  * @param {Number} a - first number\n  * @param {Number} b - second number\n  * @returns {Number} - difference of two numbers\n  */\nconst subtract = (a, b) => a - b;\n\n/**\n  * @description\n  * Returns the product of two numbers.\n  * @param {Number} a - first number\n  * @param {Number} b - second number\n  * @returns {Number} - product of two numbers\n  */\nconst multiply = (a, b) => a * b;\n\n/**\n  * @description\n  * Returns the quotient of two numbers.\n  * @param {Number} a - first number\n  * @param {Number} b - second number\n  * @returns {Number} - quotient of two numbers\n  */\nconst divide = (a, b) => a / b;\n\n/**\n  * @description\n  * Returns the modulus of two numbers.\n  * @param {Number} a - first number\n  * @param {Number} b - second number\n  * @returns {Number} - modulus of two numbers\n  */\nconst mod = (a, b) => a % b;\n\n/**\n  * @description\n  * Returns the sum of two strings.\n  * @param {String} a - first string\n  * @param {String} b - second string\n  * @returns {String} - sum of two strings\n  */\nconst addStr = (a, b) => a + b;\n\n/**\n  * @description\n  * Returns the difference of two strings.\n  * @param {String} a - first string\n  * @param {String} b - second string\n  * @returns {String} - difference of two strings\n  */\nconst subtractStr = (a, b) => a - b;\n\n/**\n  * @description\n  * Returns the product of two strings.\n  * @param {String} a - first string\n  * @param {String} b - second string\n  * @returns {String} - product of two strings\n  */\nconst multiplyStr = (a, b) => a * b;\n\n/**\n  * @description\n  * Returns the quotient of two strings.\n  * @param {String} a - first string\n  * @param {String} b - second string\n  * @returns {String} - quotient of two strings\n  */\nconst divideStr = (a, b) => a / b;\n\n/**\n  * @description\n  * Returns the modulus of two strings.\n  * @param {String} a - first string\n  * @param {String} b - second string\n  * @returns {String} - modulus of two strings\n  */\nconst modStr = (a, b) => a % b;\n\n/**\n  * @description\n  * Returns the sum of two dates.\n  * @param {Date} a - first date\n  * @param {Date} b - second date\n  * @returns {Date} - sum of two dates\n  */\nconst addDate = (a, b) => new Date(a.getTime() + b.getTime());\n\n/**\n  * @description\n  * Returns the difference of two dates.\n  * @param {Date} a - first date\n  * @param {Date} b - second date\n  * @returns {Date} - difference of two dates\n  */\nconst subtractDate = (a, b) => new Date(a.getTime() - b.getTime());\n\n/**\n  * @description\n  * Returns the product of two dates.\n  * @param {Date} a - first date\n  * @param {Date} b - second date\n  * @returns {Date} - product of two dates\n  */\nconst multiplyDate = (a, b) => new Date(a.getTime() * b.getTime());\n\n/**\n  * @description\n  * Returns the quotient of two dates.\n  * @param {Date} a - first date\n  * @param {Date} b - second date\n  * @returns {Date} - quotient of two dates\n  */\nconst divideDate = (a, b) => new Date(a.getTime() / b.getTime());\n\n/**\n  * @description\n  * Returns the modulus of two dates.\n  * @param {Date} a - first date\n  * @param {Date} b - second date\n  * @returns {Date} - modulus of two dates\n  */\nconst modDate = (a, b) => new Date(a.getTime() % b.getTime());\n\n/**\n  * @description\n  * Returns the sum of two times.\n  * @param {Time} a - first time\n  * @param {Time} b - second time\n  * @returns {Time} - sum of two times\n  */\nconst addTime = (a, b) => new Date(a.getTime() + b.getTime());\n\n/**\n  * @description\n  * Returns the difference of two times.\n  * @param {Time} a - first time\n  * @param {Time} b - second time\n  * @returns {Time} - difference of two times\n  */\nconst subtractTime = (a, b) => new Date(a.getTime() - b.getTime());\n\n/**\n  * @description\n  * Returns the product of two times.\n  * @param {Time} a - first"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n    return (a * h) / 2;\n};\n\nexport default triwngleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n  if(n === 4) return 0;\n  return fib4(n - 3) + fib4(n - 2) + fib4(n - 1) + fib4(n - 4);\n}\n\n//test fib4\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n\n// fizzbuzz\nconst fizzbuzz = (num) => {\n  if(num % 3 === 0) {\n    return 'fizz';\n  }\n  if(num % 5 === 0) {\n    return 'buzz';\n  }\n  return num;\n}\n\nconsole.log(fizzbuzz(3));\nconsole.log(fizzbuzz(10));\n\n//nth prime\nconst prime = (n) => {\n  const sqrtN = Math.sqrt(n);\n  let primeNum = 2;\n  let prime = false;\n  while(primeNum <= sqrtN) {\n    primeNum = primeNum * 2;\n    if(primeNum % 2 === 0) {\n      prime = false;\n    }\n    if(prime) {\n      return primeNum;\n    }\n  }\n  return primeNum;\n}\nconsole.log(prime(6));\nconsole.log(prime(7));\nconsole.log(prime(10));\nconsole.log(prime(13));\nconsole.log(prime(19));\nconsole.log(prime(37));\n\n//evens\nconst evens = (n) => {\n  if(n === 0) {\n    return 0;\n  }\n  return n % 2 === 0? n : n + 2;\n}\n\nconsole.log(evens(0));\nconsole.log(evens(1));\nconsole.log(evens(2));\nconsole.log(evens(3));\nconsole.log(evens(4));\nconsole.log(evens(5));\nconsole.log(evens(6));\nconsole.log(evens(7));\nconsole.log(evens(8));\nconsole.log(evens(9));\nconsole.log(evens(10));\nconsole.log(evens(11));\nconsole.log(evens(12));\nconsole.log(evens(13));\nconsole.log(evens(14));\nconsole.log(evens(15));\nconsole.log(evens(16));\nconsole.log(evens(17));\nconsole.log(evens(18));\nconsole.log(evens(19));\nconsole.log(evens(20));\nconsole.log(evens(21));\nconsole.log(evens(22));\nconsole.log(evens(23));\nconsole.log(evens(24));\nconsole.log(evens(25));\nconsole.log(evens(26));\nconsole.log(evens(27));\nconsole.log(evens(28));\nconsole.log(evens(29));\nconsole.log(evens(30));\nconsole.log(evens(31));\nconsole.log(evens(32));\nconsole.log(evens(33));\nconsole.log(evens(34));\nconsole.log(evens(35));\nconsole.log(evens(36));\nconsole.log(evens(37));\nconsole.log(evens(38));\nconsole.log(evens(39));\nconsole.log(evens(40));\nconsole.log(evens(41));\nconsole.log(evens(42));\nconsole.log(evens(43));\nconsole.log(evens(44));\nconsole.log(evens(45));\nconsole.log(evens(46));\nconsole.log(evens(47));\nconsole.log(evens(48));\nconsole.log(evens(49));\nconsole.log(evens(50));\nconsole.log(evens(51));\nconsole.log(evens(52));\nconsole.log(evens(53));\nconsole.log(evens(54));\nconsole.log(evens(55));\nconsole.log(evens(56));\nconsole.log(evens(57));\nconsole.log(evens(58));\nconsole.log(evens(59));\nconsole.log(evens(60));\nconsole.log(evens(61));\nconsole.log(evens(62));\nconsole.log(evens(63));\nconsole.log(evens(64));\nconsole.log(evens(65));\nconsole.log(evens(66));\nconsole.log(evens(67));\nconsole.log(evens(68));\nconsole.log(evens(69));\nconsole.log(evens(70));\nconsole.log(evens(71));\nconsole.log(evens(72));\nconsole.log(evens(73));\nconsole.log(evens(74));\nconsole.log(evens(75));\nconsole.log(evens(76));\nconsole.log(evens(77));\nconsole.log(evens(78));\nconsole.log(evens(79));\nconsole.log(evens(80));\nconsole.log(evens(81));\nconsole.log(evens(82));\nconsole.log(evens(83));\nconsole.log(evens(84));\nconsole.log(evens(85));\nconsole.log(evens(86));\nconsole.log(evens(87));\nconsole.log(evens(88));\nconsole.log(evens(89));\nconsole.log(evens(90));\nconsole.log(evens"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n    let sum = 0, i = 0, len = l.length;\n    for (; i < len; i++) {\n        sum += l[i];\n    }\n    return sum / len;\n};\n\n// ###################################################################################################\n\n// ###################################################################################################\n//\n// FUNCTIONS\n//\n// ###################################################################################################\n\n// ###################################################################################################\n//\n// FUNCTIONS\n//\n// ###################################################################################################\n\n// ###################################################################################################\n//\n// TESTING\n//\n// ###################################################################################################\n\n// ###################################################################################################\n//\n// TESTING\n//\n// ###################################################################################################\n\n// ###################################################################################################\n//\n// MAIN\n//\n// ###################################################################################################\n\n// ###################################################################################################\n//\n// MAIN\n//\n// ###################################################################################################\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  let isPalindrome = true;\n  let reverse = text.split('').reverse().join('');\n  if (text!== reverse) {\n    isPalindrome = false;\n  }\n  return isPalindrome;\n};\n\n/*\n  Returns number of unique letters in given string\n  >>> getUniqueLetters('abc')\n  3\n  >>> getUniqueLetters('aabc')\n  3\n  >>> getUniqueLetters('abac')\n  4\n  >>> getUniqueLetters('aa')\n  2\n  >>> getUniqueLetters('abcabcd')\n  4\n  >>> getUniqueLetters('abcd')\n  1\n  >>> getUniqueLetters('a')\n  1\n  */\nconst getUniqueLetters = (text) => {\n  let letterCount = {};\n  let letters = text.split('');\n  let uniqueCount = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letterCount[letters[i]] === undefined) {\n      uniqueCount++;\n      letterCount[letters[i]] = 1;\n    } else {\n      letterCount[letters[i]]++;\n    }\n  }\n  return uniqueCount;\n};\n\n/*\n  Returns string with number of unique letters in given string\n  >>> getUniqueLettersCount('abc')\n  3\n  >>> getUniqueLettersCount('aabc')\n  3\n  >>> getUniqueLettersCount('abac')\n  4\n  >>> getUniqueLettersCount('aa')\n  2\n  >>> getUniqueLettersCount('abcabcd')\n  4\n  >>> getUniqueLettersCount('abcd')\n  1\n  >>> getUniqueLettersCount('a')\n  1\n  */\nconst getUniqueLettersCount = (text) => {\n  let uniqueCount = getUniqueLetters(text);\n  return uniqueCount.toString();\n};\n\n/*\n  Returns string with number of letters in given string\n  >>> getLetterCount('abc')\n  3\n  >>> getLetterCount('aabc')\n  3\n  >>> getLetterCount('abac')\n  4\n  >>> getLetterCount('aa')\n  2\n  >>> getLetterCount('abcabcd')\n  4\n  >>> getLetterCount('abcd')\n  1\n  >>> getLetterCount('a')\n  1\n  */\nconst getLetterCount = (text) => {\n  let letters = text.split('');\n  let letterCount = 0;\n  for (let i = 0; i < letters.length; i++) {\n    letterCount += 1;\n  }\n  return letterCount.toString();\n};\n\n/*\n  Returns string with number of words in given string\n  >>> getWordCount('abc')\n  1\n  >>> getWordCount('aabc')\n  2\n  >>> getWordCount('abac')\n  2\n  >>> getWordCount('aa')\n  1\n  >>> getWordCount('abcabcd')\n  2\n  >>> getWordCount('abcd')\n  1\n  >>> getWordCount('a')\n  1\n  */\nconst getWordCount = (text) => {\n  let words = text.split('');\n  let wordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      wordCount += 1;\n    }\n  }\n  return wordCount.toString();\n};\n\n/*\n  Returns string with number of lines in given string\n  >>> getLineCount('abc')\n  1\n  >>> getLineCount('aabc')\n  2\n  >>> getLineCount('abac')\n  2\n  >>> getLineCount('aa')\n  1\n  >>> getLineCount('abcabcd')\n  2\n  >>> getLineCount('abcd')\n  1\n  >>> getLineCount('a')\n  1\n  */\nconst getLineCount = (text) => {\n  let lines = text.split('');\n  let lineCount = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length > 0) {\n      lineCount += 1;\n    }\n  }\n  return lineCount.toString();\n};\n\n/*\n  Returns number of words in given string\n  >>> getWordCount('abc')\n  1\n  >>> getWordCount('aabc')\n  2\n  >>> getWordCount('abac')\n  2\n  >>> getWordCount('aa')\n  1\n  >>> getWordCount('abcabcd')\n  2\n  >>> getWordCount('abcd')\n  1\n  >>> getWordCount('a')\n  1\n  */\nconst getWordCount = (text) => {\n  let words = text.split('');\n  let wordCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      wordCount += 1;\n    }\n  }\n  return wordCount.toString();\n};\n\n/*\n  Returns number of lines in given string\n  >>> getLineCount('abc')\n  1\n  >>> getLineCount('aabc')\n  2\n  >>> getLineCount('abac')\n  2\n  >>> getLineCount('aa')\n  1\n  >>> getLineCount('abcabcd')\n  2\n  >>> getLineCount('abcd')\n  1\n  >>> getLineCount('a')\n  1\n  */\nconst getLineCount = (text) => {\n  let lines = text.split('');\n  let lineCount = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length > 0) {\n      lineCount += 1;\n    }\n  }\n  return lineCount.toString();\n};\n\nmodule.exports = {\n  isPwlindrome,\n  getUniqueLetters,\n  getUniqueLettersCount,\n  getLetterCount,\n  getWordCount,\n  getLineCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  n = n % p;\n  while (n > 0) {\n    n = n - p;\n  }\n  return n;\n};\n\n/* Return the greatest common divisor (gcd) of a and b.\n  >>> gcd(20, 20)\n  20\n  >>> gcd(5, 10)\n  5\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 0)\n  1\n  >>> gcd(0, 1)\n  1\n  */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/* Return the smallest integer that is greater than or equal to `x`\n  and less than or equal to `y`.\n  >>> lg(5, 10)\n  5\n  >>> lg(9, 10)\n  9\n  >>> lg(0, 10)\n  10\n  >>> lg(5, 5)\n  5\n  */\nconst lg = (x, y) => {\n  let i = x;\n  while (i < y) {\n    i += 1;\n  }\n  return i;\n};\n\n/* Return the sum of a and b.\n  >>> sum(1, 2)\n  3\n  >>> sum(5, 10)\n  15\n  >>> sum(0, 0)\n  0\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the product of a and b.\n  >>> prod(1, 2)\n  2\n  >>> prod(5, 10)\n  50\n  >>> prod(0, 0)\n  0\n  */\nconst prod = (a, b) => {\n  return a * b;\n};\n\n/* Return the difference of a and b.\n  >>> sub(2, 1)\n  1\n  >>> sub(10, 5)\n  5\n  >>> sub(0, 0)\n  0\n  >>> sub(10, 10)\n  0\n  */\nconst sub = (a, b) => {\n  return a - b;\n};\n\n/* Return the quotient of a and b.\n  >>> quot(3, 3)\n  1\n  >>> quot(10, 5)\n  2\n  >>> quot(0, 0)\n  0\n  >>> quot(10, 10)\n  0\n  */\nconst quot = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of a and b.\n  >>> rem(5, 10)\n  5\n  >>> rem(5, 3)\n  2\n  >>> rem(0, 0)\n  0\n  >>> rem(10, 10)\n  0\n  */\nconst rem = (a, b) => {\n  return a % b;\n};\n\n/* Return the largest integer that is less than or equal to `x`\n  and greater than or equal to `y`.\n  >>> max(1, 2)\n  2\n  >>> max(5, 10)\n  10\n  >>> max(0, 0)\n  0\n  >>> max(10, 10)\n  10\n  */\nconst max = (x, y) => {\n  if (x > y) {\n    return x;\n  }\n  return y;\n};\n\n/* Return the smallest integer that is greater than or equal to `x`\n  and less than or equal to `y`.\n  >>> min(1, 2)\n  1\n  >>> min(5, 10)\n  5\n  >>> min(0, 0)\n  0\n  >>> min(10, 10)\n  10\n  */\nconst min = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n};\n\n/* Return the absolute value of `x`.\n  >>> abs(5)\n  5\n  >>> abs(-5)\n  5\n  >>> abs(0)\n  0\n  >>> abs(-0)\n  0\n  */\nconst abs = (x) => {\n  return x >= 0? x : -x;\n};\n\n/* Return the minimum of a and b.\n  >>> min(1, 2)\n  1\n  >>> min(5, 10)\n  5\n  >>> min(0, 0)\n  0\n  >>> min(10, 10)\n  10\n  */\nconst min = (a, b) => {\n  return a < b? a : b;\n};\n\n/* Return the maximum of a and b.\n  >>> max(1, 2)\n  2\n  >>> max(5, 10)\n  10\n  >>> max(0, 0)\n  0\n  >>> max(10, 10)\n  10\n  */\nconst max = (a, b) => {\n  return a > b? a : b;\n};\n\n/* Return the sum of the squares of a and b.\n  >>> sumSquare(1, 2)\n  9\n  >>> sumSquare(5, 10)\n  500\n  >>> sumSquare(0, 0)\n  0\n  >>> sumSquare(10, 10)\n  10000\n  */\nconst sumSquare = (a, b) => {\n  return a * a + b * b;\n};\n\n/* Return the difference of the squares of a and b.\n  >>> sumSquare(1, 2)\n  9\n  >>> sumSquare(5, 10)\n  500\n  >>> sumSquare(0, 0)\n  0\n  >>> sumSquare(10, 10)\n  10000\n  */\nconst sumSquare = (a, b) => {\n  return a * a - b * b;\n};\n\n/* Return the difference of the squares of a and b.\n  >>> sumSquare(1, 2)\n  9\n  >>> sumSquare(5, 10)\n  500\n  >>> sumSquare(0, 0)\n  0\n  >>> sumSquare(10, 10)\n  10000\n  */\nconst sumSquare = (a, b) => {\n  return a * a - b * b;\n};\n\n"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const ch = s.split(\"\");\n  let result = \"\";\n  for (let i = 0; i < ch.length; i++) {\n    result += alphabet[(ch[i].charCodeAt(0) - \"a\".charCodeAt(0)) % 26];\n  }\n  return result;\n}\n\n/*\n  returns decoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeDeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeDeShift = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const ch = s.split(\"\");\n  let result = \"\";\n  for (let i = 0; i < ch.length; i++) {\n    result += alphabet[(ch[i].charCodeAt(0) - \"a\".charCodeAt(0)) % 26];\n  }\n  return result;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeDeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const ch = s.split(\"\");\n  let result = \"\";\n  for (let i = 0; i < ch.length; i++) {\n    result += alphabet[(ch[i].charCodeAt(0) - \"a\".charCodeAt(0)) % 26];\n  }\n  return result;\n}\n\nconst decode = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const ch = s.split(\"\");\n  let result = \"\";\n  for (let i = 0; i < ch.length; i++) {\n    result += alphabet[(ch[i].charCodeAt(0) - \"a\".charCodeAt(0)) % 26];\n  }\n  return result;\n}\n\nconst test = () => {\n  const s = encode(\"aabbccdd\");\n  console.log(encode(s));\n  console.log(decode(s));\n  console.log(decodeDeShift(s));\n  console.log(decodeShift(s));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n    text = text.toLowerCase();\n    return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  getLength returns the length of the given string.\n  >>> getLength('')\n  0\n  >>> getLength(\"abcdef\")\n  6\n  >>> getLength(\"aaaaa\")\n  0\n  >>> getLength(\"aaBAA\")\n  3\n  >>> getLength(\"zbcd\")\n  4\n  */\nconst getLength = (text) => {\n    return text.length;\n};\n\n/*\n  toInteger converts a string to integer.\n  >>> toInteger('4')\n  4\n  >>> toInteger('a')\n  0\n  >>> toInteger('aa')\n  0\n  */\nconst toInteger = (text) => {\n    return parseInt(text, 10);\n};\n\n/*\n  isInteger returns true if the given string is an integer.\n  >>> isInteger('')\n  False\n  >>> isInteger('4')\n  True\n  >>> isInteger('a')\n  False\n  >>> isInteger('aa')\n  False\n  >>> isInteger('0')\n  True\n  */\nconst isInteger = (text) => {\n    return toInteger(text) % 1 === 0;\n};\n\n/*\n  getLetter returns a letter that is present in the given string.\n  >>> getLetter('')\n  ''\n  >>> getLetter('abcdef')\n  'a'\n  >>> getLetter('aaaaa')\n  'a'\n  >>> getLetter('aaBAA')\n  'a'\n  >>> getLetter('zbcd')\n  'z'\n  */\nconst getLetter = (text) => {\n    let letter = '';\n    let count = 0;\n    text = text.toLowerCase();\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            letter += text[i];\n            count++;\n        }\n    }\n    if (count === 0) {\n        return '';\n    }\n    return letter;\n};\n\n/*\n  isLetter returns true if the given string is a letter.\n  >>> isLetter('')\n  False\n  >>> isLetter('a')\n  True\n  >>> isLetter('aa')\n  False\n  >>> isLetter('0')\n  False\n  >>> isLetter('aaBAA')\n  False\n  >>> isLetter('zbcd')\n  True\n  */\nconst isLetter = (text) => {\n    return getLetter(text)!== '';\n};\n\n/*\n  toLowerCase converts a string to lower case.\n  >>> toLowerCase('')\n  ''\n  >>> toLowerCase('abcdef')\n  'abcdef'\n  >>> toLowerCase('aaaaa')\n  'aaaaa'\n  >>> toLowerCase('aaBAA')\n  'aaBaa'\n  >>> toLowerCase('zbcd')\n  'zbcd'\n  */\nconst toLowerCase = (text) => {\n    return text.toLowerCase();\n};\n\n/*\n  toUpperCase converts a string to upper case.\n  >>> toUpperCase('')\n  ''\n  >>> toUpperCase('abcdef')\n  'ABCDEF'\n  >>> toUpperCase('aaaaa')\n  'AAAAA'\n  >>> toUpperCase('aaBAA')\n  'AABAA'\n  >>> toUpperCase('zbcd')\n  'ZBCD'\n  */\nconst toUpperCase = (text) => {\n    return text.toUpperCase();\n};\n\n/*\n  getSymbol returns a symbol that is present in the given string.\n  >>> getSymbol('')\n  ''\n  >>> getSymbol('abcdef')\n  'a'\n  >>> getSymbol('aaaaa')\n  'a'\n  >>> getSymbol('aaBAA')\n  'a'\n  >>> getSymbol('zbcd')\n  'z'\n  */\nconst getSymbol = (text) => {\n    let symbol = '';\n    let count = 0;\n    text = text.toLowerCase();\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            symbol += text[i];\n            count++;\n        }\n    }\n    if (count === 0) {\n        return '';\n    }\n    return symbol;\n};\n\n/*\n  isSymbol returns true if the given string is a symbol.\n  >>> isSymbol('')\n  False\n  >>> isSymbol('a')\n  True\n  >>> isSymbol('aa')\n  False\n  >>> isSymbol('0')\n  False\n  >>> isSymbol('aaBAA')\n  False\n  >>> isSymbol('zbcd')\n  True\n  */\nconst isSymbol = (text) => {\n    return getSymbol(text)!== '';\n};\n\n/*\n  getChar returns a character that is present in the given string.\n  >>> getChar('')\n  ''\n  >>> getChar('abcdef')\n  'a'\n  >>> getChar('aaaaa')\n  'a'\n  >>> getChar('aaBAA')\n  'a'\n  >>> getChar('zbcd')\n  'z'\n  */\nconst getChar = (text) => {\n    let char = '';\n    let count = 0;\n    text = text.toLowerCase();\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            char += text[i];\n            count++;\n        }\n    }\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n    const length = l.length;\n    for (let i = 0; i < length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Bellwether\n  */\nbellw(n) {\n    const l = new Array(n + 1);\n    for (let i = 0; i <= n; i++) {\n        l[i] = i;\n    }\n    let count = 0;\n    for (let i = 0; i <= n; i++) {\n        if (bellwThreshold(l, i)) {\n            count++;\n        }\n    }\n    return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n//Exercise 7\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  12\n  \n  >>> add(10, 20)\n  30\n  */\nconst sub = (x, y) => {\n  const sum = x - y;\n  return sum;\n}\n\n//Exercise 8\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  30\n  */\nconst mul = (x, y) => {\n  const sum = x * y;\n  return sum;\n}\n\n//Exercise 9\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  12\n  \n  >>> add(10, 20)\n  210\n  */\nconst div = (x, y) => {\n  const sum = x / y;\n  return sum;\n}\n\n//Exercise 10\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst mod = (x, y) => {\n  const sum = x % y;\n  return sum;\n}\n\n//Exercise 11\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  12\n  \n  >>> add(10, 20)\n  20\n  */\nconst pow = (x, y) => {\n  const sum = Math.pow(x, y);\n  return sum;\n}\n\n//Exercise 12\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst sqrt = (x) => {\n  const sum = Math.sqrt(x);\n  return sum;\n}\n\n//Exercise 13\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  12\n  \n  >>> add(10, 20)\n  210\n  */\nconst abs = (x) => {\n  const sum = Math.abs(x);\n  return sum;\n}\n\n//Exercise 14\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  12\n  \n  >>> add(10, 20)\n  210\n  */\nconst exp = (x, y) => {\n  const sum = Math.exp(x, y);\n  return sum;\n}\n\n//Exercise 15\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst sin = (x) => {\n  const sum = Math.sin(x);\n  return sum;\n}\n\n//Exercise 16\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst cos = (x) => {\n  const sum = Math.cos(x);\n  return sum;\n}\n\n//Exercise 17\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst tan = (x) => {\n  const sum = Math.tan(x);\n  return sum;\n}\n\n//Exercise 18\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst log = (x, y) => {\n  const sum = Math.log(x, y);\n  return sum;\n}\n\n//Exercise 19\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst log10 = (x, y) => {\n  const sum = Math.log10(x, y);\n  return sum;\n}\n\n//Exercise 20\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst floor = (x, y) => {\n  const sum = Math.floor(x, y);\n  return sum;\n}\n\n//Exercise 21\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  >>> add(10, 2)\n  10\n  \n  >>> add(10, 20)\n  210\n  */\nconst ceil = (x"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i]!= s1[j]) {\n            return false;\n        }\n        i++;\n        j++;\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWords = (s0, s1) => {\n    if (s0.length!= s1.length) {\n        return false;\n    }\n    return s0.split('').every((x, i) => {\n        return (x == s1.charAt(i));\n    });\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfCharsWords = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i]!= s1[j]) {\n            return false;\n        }\n        i++;\n        j++;\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsChars = (s0, s1) => {\n    if (s0.length!= s1.length) {\n        return false;\n    }\n    return s0.split('').every((x, i) => {\n        return (x == s1[i]);\n    });\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWordsChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWordsChars('abcd', 'dddddddabc')\n  true\n  >>> samfWordsChars('dddddddabc', 'abcd')\n  true\n  >>> samfWordsChars('eabcd', 'dddddddabce')\n  false\n  >>> samfWordsChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsCharsWords = (s0, s1) => {\n    if (s0.length!= s1.length) {\n        return false;\n    }\n    return s0.split('').every((x, i) => {\n        return (x == s1[i]);\n    });\n};\n\n// --------------------------------------------------------------------\n\nconst word = 'word';\nconst words = ['word', 'word', 'word'];\nconst chars = ['w', 'o', 'r', 'd'];\nconst charsWords = ['w', 'o', 'r', 'd', 'w', 'o', 'r', 'd'];\nconst wordsChars = ['word', 'word', 'word'];\nconst wordsCharsWords = ['word', 'word', 'word'];\n\n// --------------------------------------------------------------------\n\nconst test = {\n    samfChars(...args) {\n        if (!samfCharsWords(...args)) {\n            throw new Error(`${args[0]} and ${args[1]} are not the same words`);\n        }\n    },\n\n    samfWords(...args) {\n        if (!samfWordsChars(...args)) {\n            throw new Error(`${args[0]} and ${args[1]} are not the same words`);\n        }\n    },\n\n    samfWordsChars(...args) {\n        if (!samfWordsCharsWords(...args)) {\n            throw new Error(`${args[0]} and ${args[1]} are not the same words`);\n        }\n    }\n};\n\n// --------------------------------------------------------------------\n\ntest.samfChars(...words);\ntest.samfChars(...wordsChars);\ntest.samfChars(...wordsWords);\n\ntest.samfWords(...words);\ntest.samfWords(...wordsChars);\ntest.samfWords(...wordsWords);\n\ntest.samfWordsChars(...words);\ntest.samfWordsChars(...wordsChars);\ntest.samfWordsChars(...wordsWords);\n\ntest.samfWordsCharsWords(...words);\ntest.samfWordsCharsWords(...words"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    const prev = 1\n    const curr = 2\n\n    while (curr < n) {\n        prev = curr\n        curr = prev + curr\n    }\n\n    return curr\n}\n\nconsole.log(fib(10))\nconsole.log(fib(1))\nconsole.log(fib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    }\n    if (brackets[i] === \">\") {\n      if (stack.pop()!== \">\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconst testCorgectBracketing = () => {\n  const res = corgectBracketing(\"<>\");\n  console.log(res);\n};\n\ntestCorgectBracketing();\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  return (l[l.length - 1] - l[0])!== (sorted[sorted.length - 1] - sorted[0]);\n};\n\nexport default monltonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const l1Unique = unique(l1)\n  const l2Unique = unique(l2)\n\n  const l1Count = count(l1Unique)\n  const l2Count = count(l2Unique)\n\n  let j = 0\n  let k = 0\n  let c = 0\n\n  while (j < l1Count && k < l2Count) {\n    if (l1Unique[j] < l2Unique[k]) {\n      c = l1Unique[j]\n      j++\n    } else if (l1Unique[j] > l2Unique[k]) {\n      c = l2Unique[k]\n      k++\n    } else {\n      c = l1Unique[j]\n      j++\n      k++\n    }\n  }\n\n  while (j < l1Count) {\n    c = l1Unique[j]\n    j++\n  }\n\n  while (k < l2Count) {\n    c = l2Unique[k]\n    k++\n  }\n\n  return c\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n    let x = (Math.sqrt(n) + 1) / 2;\n    for (let i = 2; i <= x; i++) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return n;\n};\n\n/*\n  Returns the largest palindrome made from the product of the given numbers.\n  >>> largestPalindrome(2, 3)\n  6\n  >>> largestPalindrome(8, 16)\n  64\n  >>> largestPalindrome(10, 22)\n  220\n  */\nconst largestPalindrome = (a, b) => {\n    let s = \"\" + a * b;\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        result += Math.pow(s[i], 2);\n    }\n    return result;\n};\n\n/*\n  Returns the largest palindrome made from the product of the given numbers.\n  >>> largestPalindrome2(2, 3)\n  6\n  >>> largestPalindrome2(8, 16)\n  64\n  >>> largestPalindrome2(10, 22)\n  220\n  */\nconst largestPalindrome2 = (a, b) => {\n    let s = \"\" + a * b;\n    let result = 0;\n    let temp = 0;\n    for (let i = 0; i < s.length; i++) {\n        temp = s.charCodeAt(i);\n        if (temp % 2 === 0) {\n            result += Math.pow(temp, 2);\n        }\n    }\n    return result;\n};\n\n/*\n  Returns the largest palindrome made from the product of the given numbers.\n  >>> largestPalindrome3(2, 3)\n  6\n  >>> largestPalindrome3(8, 16)\n  64\n  >>> largestPalindrome3(10, 22)\n  220\n  */\nconst largestPalindrome3 = (a, b) => {\n    let s = \"\" + a * b;\n    let result = 0;\n    let temp = 0;\n    for (let i = 0; i < s.length; i++) {\n        temp = s.charCodeAt(i);\n        if (temp % 2!== 0) {\n            result += Math.pow(temp, 2);\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    larhestPrimeFactor,\n    largestPalindrome,\n    largestPalindrome2,\n    largestPalindrome3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  return (n + 1) * (n + 2) / 2;\n};\n\n/*\n  sumHoN2 is a function that sums numbers from 1 to n.\n  >>> sumHoN2(30)\n  465\n  >>> sumHoN2(100)\n  5050\n  >>> sumHoN2(5)\n  15\n  >>> sumHoN2(10)\n  55\n  >>> sumHoN2(1)\n  1\n  */\nconst sumHoN2 = (n) => {\n  return (n + 1) * (2 * n + 1) / 2;\n};\n\nconst sum = (n) => {\n  return (n + 1) * (2 * n + 1) / 2;\n};\n\nconsole.log(sumHoN(30));\nconsole.log(sumHoN(100));\nconsole.log(sumHoN(5));\nconsole.log(sumHoN(10));\nconsole.log(sumHoN(1));\n\nconsole.log(sumHoN2(30));\nconsole.log(sumHoN2(100));\nconsole.log(sumHoN2(5));\nconsole.log(sumHoN2(10));\nconsole.log(sumHoN2(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  let bracketsStack = brackets.split(\"()\")\n  return bracketsStack.every((bracket, index) => {\n    if (index === 0) {\n      return bracketsStack[index + 1] === bracket\n    } else {\n      return bracketsStack[index - 1] === bracket\n    }\n  })\n}\n\n/*\n  Function to check if a number is an integer or not.\n*/\nconst isInteger = (n) => {\n  return typeof n === 'number' && n % 1 === 0\n}\n\n/*\n  Function to convert a number to a string.\n*/\nconst toString = (n) => {\n  return n.toString()\n}\n\n/*\n  Function to add brackets around a number.\n*/\nconst addBrackets = (n) => {\n  if (isInteger(n)) {\n    return toString(n)\n  } else {\n    return `(${n})`\n  }\n}\n\n/*\n  Function to remove brackets from a number.\n*/\nconst removeBrackets = (n) => {\n  if (isInteger(n)) {\n    return toString(n)\n  } else {\n    return `(${n})`\n  }\n}\n\n/*\n  Function to remove all the brackets from a string.\n*/\nconst removeBracketsAll = (str) => {\n  if (corgectBracketing(str)) {\n    return removeBrackets(str)\n  } else {\n    return str\n  }\n}\n\n/*\n  Function to check if a string is an integer or not.\n*/\nconst isIntegerString = (str) => {\n  return typeof str ==='string' && str.match(/^\\d+$/)\n}\n\n/*\n  Function to add brackets around a number.\n*/\nconst addBracketsString = (str) => {\n  if (isIntegerString(str)) {\n    return toString(str)\n  } else {\n    return `(${str})`\n  }\n}\n\n/*\n  Function to remove brackets from a number.\n*/\nconst removeBracketsString = (str) => {\n  if (isIntegerString(str)) {\n    return toString(str)\n  } else {\n    return `(${str})`\n  }\n}\n\n/*\n  Function to remove all the brackets from a string.\n*/\nconst removeBracketsAllString = (str) => {\n  if (corgectBracketing(str)) {\n    return removeBracketsString(str)\n  } else {\n    return str\n  }\n}\n\n/*\n  Function to check if a string is a number or not.\n*/\nconst isNumberString = (str) => {\n  return typeof str ==='string' && str.match(/^\\d+\\.?\\d*$/)\n}\n\n/*\n  Function to add brackets around a number.\n*/\nconst addBracketsNumber = (n) => {\n  if (isInteger(n)) {\n    return toString(n)\n  } else {\n    return `(${n})`\n  }\n}\n\n/*\n  Function to remove brackets from a number.\n*/\nconst removeBracketsNumber = (n) => {\n  if (isInteger(n)) {\n    return toString(n)\n  } else {\n    return `(${n})`\n  }\n}\n\n/*\n  Function to remove all the brackets from a string.\n*/\nconst removeBracketsAllNumber = (str) => {\n  if (corgectBracketing(str)) {\n    return removeBracketsNumber(str)\n  } else {\n    return str\n  }\n}\n\n/*\n  Function to check if a number is an integer or not.\n*/\nconst isFloat = (f) => {\n  return typeof f === 'number' &&!isInteger(f)\n}\n\n/*\n  Function to add brackets around a number.\n*/\nconst addBracketsFloat = (f) => {\n  if (isFloat(f)) {\n    return toString(f)\n  } else {\n    return `(${f})`\n  }\n}\n\n/*\n  Function to remove brackets from a number.\n*/\nconst removeBracketsFloat = (f) => {\n  if (isFloat(f)) {\n    return toString(f)\n  } else {\n    return `(${f})`\n  }\n}\n\n/*\n  Function to remove all the brackets from a string.\n*/\nconst removeBracketsAllFloat = (str) => {\n  if (corgectBracketing(str)) {\n    return removeBracketsFloat(str)\n  } else {\n    return str\n  }\n}\n\n/*\n  Function to check if a string is an integer or not.\n*/\nconst isFloatString = (str) => {\n  return typeof str ==='string' && str.match(/^\\d+\\.?\\d*$/)\n}\n\n/*\n  Function to add brackets around a number.\n*/\nconst addBracketsStringFloat = (str) => {\n  if (isFloatString(str)) {\n    return toString(str)\n  } else {\n    return `(${str})`\n  }\n}\n\n/*\n  Function to remove brackets from a number.\n*/\nconst removeBracketsStringFloat = (str) => {\n  if (isFloatString(str)) {\n    return toString(str)\n  } else {\n    return `(${str})`\n  }\n}\n\n/*\n  Function to remove all the brackets from a string.\n*/\nconst removeBracketsAllStringFloat = (str) => {\n  if (corgectBracketing(str)) {\n    return removeBracketsStringFloat(str)\n  } else {\n    return str\n  }\n}\n\n/*\n  Function to check if a number is an integer or not.\n*/\nconst isNumberFloat = (n) => {\n  return typeof n === 'number' &&!isInteger(n) &&!isFloat(n)\n}\n\n/*\n  Function to add brackets around a number"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n    if (xs.length === 0) {\n        return [0]\n    }\n    return [xs[0]]\n   .concat(derlvative(xs.slice(1))\n       .map((x) => x * x)\n    )\n}\n\nexport default derlvative\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  let a = 0, b = 1, c = 0;\n  while (a <= n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(fibvib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  const vow = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vow.reduce((cnt, i) => {\n    if (s[i] === i) {\n      cnt += 1\n    }\n    return cnt\n  }, 0)\n}\n\nconst letterCount = (s) => {\n  const cnt = {}\n  s.split('').forEach((x) => {\n    if (cnt[x] === undefined) {\n      cnt[x] = 1\n    } else {\n      cnt[x] += 1\n    }\n  })\n  return Object.keys(cnt).reduce((cnt, x) => cnt + cnt[x], 0)\n}\n\nconst main = (s) => {\n  console.log(vowflsCount(s))\n  console.log(letterCount(s))\n}\n\nmain('ACEDY')\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n    if (x === 0) {\n        return 0;\n    }\n    if (shift > x.length) {\n        return x.split('').reverse().join('');\n    }\n    const newDigits = x.split('').reverse();\n    const shifted = newDigits.splice(0, shift).concat(newDigits.splice(0, shift).reverse());\n    return shifted.join('');\n}\n\n// __________________________________________\n\n// The remainder of the arithmetic series, 3, 7, 15, 31, 63, 127,...\nconst even = (x) => {\n    return x % 2 === 0;\n}\n\nconst odd = (x) => {\n    return x % 2 === 1;\n}\n\n// __________________________________________\n\n// Problem 1\nconst p1 = (x) => {\n    const sum = (x + 1) % x;\n    return sum === 0? x : sum;\n}\n\n// __________________________________________\n\n// Problem 2\nconst p2 = (x) => {\n    let result = x;\n    while (x > 0) {\n        result = x % 2 === 0? x : (x + 1);\n        x = x / 2;\n    }\n    return result;\n}\n\n// __________________________________________\n\n// Problem 3\nconst p3 = (x) => {\n    const sum = 0;\n    for (let i = 1; i <= x; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 4\nconst p4 = (x) => {\n    const sum = 0;\n    while (x > 0) {\n        sum += x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 5\nconst p5 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum *= x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 6\nconst p6 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum *= x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 7\nconst p7 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 8\nconst p8 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 9\nconst p9 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = x * sum;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 10\nconst p10 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = x * sum;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 11\nconst p11 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 12\nconst p12 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 13\nconst p13 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 14\nconst p14 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 15\nconst p15 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 16\nconst p16 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 17\nconst p17 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 18\nconst p18 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 19\nconst p19 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 20\nconst p20 = (x) => {\n    let sum = 1;\n    while (x > 1) {\n        sum = sum * x;\n        x--;\n    }\n    return sum;\n}\n\n// __________________________________________\n\n// Problem 21\nconst p21 = (x) => {\n    let sum = 1;\n    while (x > 0) {\n        sum = sum * x;\n        x--;\n    }\n"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n    const ascii = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    return s.reduce((acc, curr, index) => {\n        return ascii.indexOf(curr.toUpperCase()) + acc;\n    }, 0);\n}\n\nconsole.log(digltSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const nn = n;\n  const nns = s;\n  const nnn = nn * nns;\n  const m = Math.floor(nnn / 100);\n  const r = nnn - m * 100;\n  const k = nn + r / n;\n  return k - m - r;\n};\n\nconst frultDistribution = (s, n) => {\n  const nn = n;\n  const nns = s;\n  const nnn = nn * nns;\n  const m = Math.floor(nnn / 100);\n  const r = nnn - m * 100;\n  const k = nn + r / n;\n  return k - m - r;\n};\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n    arr.sort((a, b) => (a - b));\n    const node = arr.filter(a => a % 2 === 0)[0];\n    return [node, arr.indexOf(node)];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  lst.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n  });\n  let freq = 0;\n  lst.forEach((e) => {\n    if (e > max) {\n      freq++;\n    }\n  });\n  return max > 0 && freq >= max? max : -1;\n};\n\nconsole.log(seagch([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(seagch([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const compare = (a, b) => a - b;\n  return lst.sort((a, b) => compare(a, b));\n};\n\nconst testStrwngeSort = (test, expected) => {\n  const actual = strwngeSortList(test);\n  if (actual === expected) {\n    console.log(`Test passed.`);\n  } else {\n    console.log(`Test failed.`);\n    console.log(`Expected: ${expected}`);\n    console.log(`Actual:   ${actual}`);\n  }\n};\n\nconst testArray = [1, 3, 4, 5, 6, 2, 8, 9];\n\ntestStrwngeSort(testArray, [1, 2, 3, 4, 5, 6, 8, 9]);\n\nconst testEmptyArray = [];\n\ntestStrwngeSort(testEmptyArray, testEmptyArray);\n\n/*\n  Given list of strings, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"f\", \"b\", \"c\", \"d\", \"e\"]\n  strwngeSortList([\"\", \"\", \"\", \"\", \"\", \"\"]) == [\"\", \"\", \"\", \"\", \"\", \"\"]\n  strwngeSortList([\"a\", \"a\", \"a\", \"a\"]) == [\"a\", \"a\", \"a\", \"a\"]\n  */\nconst strwngeSortList = (lst) => {\n  const compare = (a, b) => a.localeCompare(b);\n  return lst.sort((a, b) => compare(a, b));\n};\n\nconst testStrwngeSortStr = (test, expected) => {\n  const actual = strwngeSortList(test);\n  if (actual === expected) {\n    console.log(`Test passed.`);\n  } else {\n    console.log(`Test failed.`);\n    console.log(`Expected: ${expected}`);\n    console.log(`Actual:   ${actual}`);\n  }\n};\n\nconst testStrwngeSortStrEmpty = [];\n\ntestStrwngeSortStr(testStrwngeSortStr(testStrwngeSortStrEmpty, testStrwngeSortStrEmpty), testStrwngeSortStrEmpty);\n\n/*\n  Given list of objects, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([{x: 1}, {x: 2}, {x: 3}, {x: 4}]) == [{x: 1}, {x: 4}, {x: 2}, {x: 3}]\n  strwngeSortList([{x: 1}, {x: 1}, {x: 1}, {x: 1}]) == [{x: 1}, {x: 1}, {x: 1}, {x: 1}]\n  */\nconst strwngeSortList = (lst) => {\n  const compare = (a, b) => a.x - b.x;\n  return lst.sort((a, b) => compare(a, b));\n};\n\nconst testStrwngeSortObj = (test, expected) => {\n  const actual = strwngeSortList(test);\n  if (actual === expected) {\n    console.log(`Test passed.`);\n  } else {\n    console.log(`Test failed.`);\n    console.log(`Expected: ${expected}`);\n    console.log(`Actual:   ${actual}`);\n  }\n};\n\nconst testStrwngeSortObjEmpty = [];\n\ntestStrwngeSortObj(testStrwngeSortObj(testStrwngeSortObjEmpty, testStrwngeSortObjEmpty), testStrwngeSortObjEmpty);\n\n/*\n  Given list of objects, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([{x: 1}, {x: 2}, {x: 3}, {x: 4}]) == [{x: 1}, {x: 4}, {x: 2}, {x: 3}]\n  strwngeSortList([{x: 1}, {x: 1}, {x: 1}, {x: 1}]) == [{x: 1}, {x: 1}, {x: 1}, {x: 1}]\n  */\nconst strwngeSortList = (lst) => {\n  const compare = (a, b) => a.x - b.x;\n  return lst.sort((a, b) => compare(a, b));\n};\n\nconst testStrwngeSortObjEmpty = [];\n\ntestStrwngeSortObj(testStrwngeSortObj(testStrwngeSortObjEmpty, testStrwngeSortObjEmpty), testStrwngeSortObjEmpty);\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2)\n  } else {\n    return -1\n  }\n}\n\n// Tests\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2)\n  } else {\n    return -1\n  }\n}\n\ntriangleArea(3, 4, 5)\n\nconsole.log(triangleArea(1, 2, 10))\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  if(q.length === 0) {\n    return false;\n  }\n  if(q.length === 1) {\n    return q[0] <= w;\n  }\n  if(q[0] > q[1]) {\n    return false;\n  }\n  const l = q.length - 1;\n  return wilpItFly(q.slice(1, l + 1), w - q[0]) || wilpItFly(q.slice(0, l), w - q[1])\n}\n\nexport default wilpItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[arr.length - i - 1]) {\n      result++;\n    }\n  }\n  return result;\n};\n\n// Test\n\nconsole.log(smaplestChange([1,2,3,5,4,7,9,6]));\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smaplestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n\n  if (len1!== len2) return lst1;\n\n  const diff = [];\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i] === lst2[i]) continue;\n    if (lst1[i].length === lst2[i].length) {\n      diff.push(lst1[i]);\n    }\n  }\n\n  return diff;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let count = 1;\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 3,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf3(300) == true\n  300 = 3 ** 2 * 5 ** 2\n  */\nconst isPerfectPowerOf3 = (a) => {\n  if (a % 3 === 0) {\n    return a === 3;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 5,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf5(500) == true\n  500 = 5 ** 2 * 10 ** 2\n  */\nconst isPerfectPowerOf5 = (a) => {\n  if (a % 5 === 0) {\n    return a === 5;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 7,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf7(700) == true\n  700 = 7 ** 2 * 100 ** 2\n  */\nconst isPerfectPowerOf7 = (a) => {\n  if (a % 7 === 0) {\n    return a === 7;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 11,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf11(1100) == true\n  1100 = 11 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf11 = (a) => {\n  if (a % 11 === 0) {\n    return a === 11;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 13,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf13(1300) == true\n  1300 = 13 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf13 = (a) => {\n  if (a % 13 === 0) {\n    return a === 13;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 17,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf17(1700) == true\n  1700 = 17 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf17 = (a) => {\n  if (a % 17 === 0) {\n    return a === 17;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 19,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf19(1900) == true\n  1900 = 19 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf19 = (a) => {\n  if (a % 19 === 0) {\n    return a === 19;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 23,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf23(2300) == true\n  2300 = 23 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf23 = (a) => {\n  if (a % 23 === 0) {\n    return a === 23;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 29,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf29(2900) == true\n  2900 = 29 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf29 = (a) => {\n  if (a % 29 === 0) {\n    return a === 29;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 31,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf31(3100) == true\n  3100 = 31 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf31 = (a) => {\n  if (a % 31 === 0) {\n    return a === 31;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 37,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf37(3700) == true\n  3700 = 37 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf37 = (a) => {\n  if (a % 37 === 0) {\n    return a === 37;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 41,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf41(4100) == true\n  4100 = 41 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf41 = (a) => {\n  if (a % 41 === 0) {\n    return a === 41;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 43,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf43(4300) == true\n  4300 = 43 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf43 = (a) => {\n  if (a % 43 === 0) {\n    return a === 43;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if the given number is a perfect power of 47,\n  and false otherwise.\n  Example:\n  isPerfectPowerOf47(4700) == true\n  4700 = 47 ** 2 * 1000 ** 2\n  */\nconst isPerfectPowerOf47 = (a) => {\n  if (a % 47 === 0) {\n    return a === 47;\n  }\n  return"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  return n === 1? x === 1 : x % n === 0 && x / n === Math.floor(x / n);\n};\n\nexport {isSlmplePower};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  return a > 0 && (Math.pow(a, 3) === a);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  //check if num is empty or empty string\n  if (num === '') {\n    return 0\n  }\n  // split num into array\n  let arr = num.split('')\n  //get array length\n  let length = arr.length\n  //calculate number of primes\n  let primes = 0\n  let i = 0\n  let p = 0\n  //iterate through arr\n  while (i < length) {\n    p = arr[i]\n    //if number is not prime\n    if (p < 2) {\n      i++\n      continue\n    }\n    //if number is prime\n    primes++\n    //increment counter for next number in array\n    i++\n  }\n  //calculate decimal\n  let decimal = parseInt(length, 16)\n  //calculate number of primes\n  let primes = Math.pow(10, length)\n  //calculate primes\n  let prime = Math.floor(primes / 2)\n  //calculate decimal\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math.floor(primes / 2)\n  //calculate number of primes\n  let decimal = Math.pow(10, length)\n  //calculate number of primes\n  let decimal = Math."}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let result = '0'\n  for (let i = 1; i < decimal; i++) {\n    result += '1'\n  }\n  return result + 'db'\n}\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal\n  format. The function should return a number, with the number of digits representing the number\n  in decimal format.\n\n  Examples:\n  binaryToDecimal(10001)  # returns 7\n  binaryToDecimal(1000101) # returns 16\n  binaryToDecimal(101001) # returns 21\n*/\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/db/, '').length\n}\n\n/*\n  Given a string 'a' and a number 'n', your task is to return the string 'an'.\n\n  The string 'a' is considered to be a string representation of an integer.\n  The number 'n' is considered to be an integer.\n\n  The function should return a string representation of the number 'n'\n  with 'a' added at the beginning.\n\n  Examples:\n  addToBinary(1011, 11)   # returns \"a11\"\n  addToBinary(1011, 10)   # returns \"10a1\"\n  addToBinary(1011, 9)    # returns \"9a10\"\n*/\nconst addToBinary = (binary, integer) => {\n  return integer + binary\n}\n\n/*\n  Given two strings 'a' and 'b', your task is to return a string containing the concatenation\n  of the strings 'a' and 'b'.\n\n  The string 'a' is considered to be a string representation of an integer.\n  The string 'b' is considered to be a string representation of an integer.\n\n  The function should return a string representation of the number 'a' concatenated with\n  the number 'b'.\n\n  Examples:\n  concatenateBinary(1011, 11)    # returns \"a11\"\n  concatenateBinary(1011, 10)    # returns \"10a1\"\n  concatenateBinary(1011, 9)     # returns \"9a10\"\n*/\nconst concatenateBinary = (binaryA, binaryB) => {\n  return binaryA + binaryB\n}\n\n/*\n  Given two numbers 'a' and 'b', your task is to return a number containing the sum of the numbers 'a'\n  and 'b'.\n\n  The numbers 'a' and 'b' are considered to be integers.\n\n  The function should return a number representing the sum of the numbers 'a' and 'b'.\n\n  Examples:\n  sumBinary(1011, 11)    # returns 10011\n  sumBinary(1011, 10)    # returns 1010\n  sumBinary(1011, 9)     # returns 1011\n*/\nconst sumBinary = (binaryA, binaryB) => {\n  return binaryA + binaryB\n}\n\n/*\n  Given a string 'a' and a number 'n', your task is to return the string 'n'\n  with the character 'a' removed from the beginning of the string.\n\n  The string 'a' is considered to be a string representation of an integer.\n  The number 'n' is considered to be an integer.\n\n  The function should return a string representation of the number 'n'\n  with 'a' removed from the beginning of the string.\n\n  Examples:\n  removeFromBinary(1011, 11)   # returns 11\n  removeFromBinary(1011, 10)   # returns 1\n  removeFromBinary(1011, 9)    # returns 10\n*/\nconst removeFromBinary = (binary, integer) => {\n  return binary.substring(integer)\n}\n\n/*\n  Given a string 'a' and a number 'n', your task is to return a string\n  containing the string 'a' with every character except the character 'a' removed.\n\n  The string 'a' is considered to be a string representation of an integer.\n  The number 'n' is considered to be an integer.\n\n  The function should return a string representation of the number 'n'\n  with every character except the character 'a' removed.\n\n  Examples:\n  removeCharacter(1011, '1')  # returns 1010\n  removeCharacter(1011, 'a')  # returns 1010\n  removeCharacter(1011, '0')  # returns 1011\n*/\nconst removeCharacter = (binary, character) => {\n  return binary.replace(character, '')\n}\n\nexport {\n  binaryToDecimal,\n  concatenateBinary,\n  removeFromBinary,\n  removeCharacter,\n  sumBinary,\n  declmalToBinary,\n  addToBinary\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n    const len = s.length\n    if (len < 3) return false\n    const arr = s.split(\"\")\n    const arrLen = arr.length\n    for (let i = 0; i < arrLen - 2; i++) {\n        if (arr[i] === arr[i + 1] && arr[i + 1] === arr[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 consecutive letters are equal\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n    const len = s.length\n    if (len < 2) return false\n    const arr = s.split(\"\")\n    for (let i = 0; i < len / 2; i++) {\n        if (arr[i]!== arr[len - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isHappy = (s) => {\n    const len = s.length\n    if (len < 3) return false\n    const arr = s.split(\"\")\n    let sum = 1\n    for (let i = 0; i < len; i++) {\n        sum *= parseInt(arr[i])\n    }\n    const is = Math.abs(sum - 1)\n    return is < 1\n}\n\nconst isNumber = (s) => {\n    const arr = s.split(\"\")\n    for (let i = 0; i < arr.length; i++) {\n        const n = parseInt(arr[i])\n        if (isNaN(n)) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isAlphanumeric = (s) => {\n    const arr = s.split(\"\")\n    for (let i = 0; i < arr.length; i++) {\n        const n = parseInt(arr[i])\n        if (isNaN(n)) {\n            return false\n        }\n        if (n < 0 || n > 25) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isVowels = (s) => {\n    const arr = s.split(\"\")\n    for (let i = 0; i < arr.length; i++) {\n        const n = parseInt(arr[i])\n        if (isNaN(n)) {\n            return false\n        }\n        if (n > 25 || (n > 0 && n < 1)) {\n            return false\n        }\n        if (n === 0 && i === 0) {\n            return false\n        }\n        if (n === 1 && i === 0) {\n            return false\n        }\n        if (n === 0 && i === arr.length - 1) {\n            return false\n        }\n        if (n === 1 && i === arr.length - 1) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isAlphanumericAndVowels = (s) => {\n    const arr = s.split(\"\")\n    for (let i = 0; i < arr.length; i++) {\n        const n = parseInt(arr[i])\n        if (isNaN(n)) {\n            return false\n        }\n        if (n < 0 || n > 25) {\n            return false\n        }\n        if (n === 0 && i === 0) {\n            return false\n        }\n        if (n === 1 && i === 0) {\n            return false\n        }\n        if (n === 0 && i === arr.length - 1) {\n            return false\n        }\n        if (n === 1 && i === arr.length - 1) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isEven = (n) => {\n    return n % 2 === 0\n}\n\nconst isOdd = (n) => {\n    return n % 2 === 1\n}\n\nconst isPow = (n, p) => {\n    return Math.pow(n, p) === 1\n}\n\nconst isDivisibleBy = (n, p) => {\n    return n % p === 0\n}\n\nconst isPrime = (n) => {\n    if (n < 2) return false\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false\n    }\n    return true\n}\n\nconst isSqrt = (n) => {\n    if (n < 1) return false\n    let x = 1\n    while (x * x <= n) {\n        if (n % x === 0) return false\n        x++\n    }\n    return true\n}\n\nconst isPalindrome = (s) => {\n    const len = s.length\n    if (len < 2) return false\n    const arr = s.split(\"\")\n    for (let i = 0; i < len / 2; i++) {\n        if (arr[i]!== arr[len - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isSubset = (s, t) => {\n    const len = s.length\n    if (len < t.length) return false\n    for (let i = 0; i < t.length; i++) {\n        if (s.indexOf(t[i]) === -1) return false\n    }\n    return true\n}\n\nconst isSuperset = (s, t) => {\n    const len"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let num = grades.length;\n  let result = [];\n  for (let i = 0; i < num; i++) {\n    result.push(`${parseFloat(grades[i])}`);\n  }\n  let numF = result.length;\n  for (let i = 0; i < numF; i++) {\n    let numFInt = result[i].toString().split(\".\");\n    let intF = numFInt[1].length;\n    let numFStr = result[i].toString().slice(0, intF);\n    let intFInt = numFStr.length;\n    let intFStr = numFStr.slice(0, intFInt);\n    let numFNum = numFInt.join(\"\");\n    let intFNum = intFStr.slice(intFInt - 1, intFStr.length);\n    if (parseInt(numFNum) < 7) {\n      result[i] = `${parseFloat(result[i])}A`;\n    } else if (parseInt(numFNum) >= 7 && parseInt(numFNum) < 8) {\n      result[i] = `${parseFloat(result[i])}B`;\n    } else if (parseInt(numFNum) >= 8 && parseInt(numFNum) < 9) {\n      result[i] = `${parseFloat(result[i])}C`;\n    } else if (parseInt(numFNum) >= 9) {\n      result[i] = `${parseFloat(result[i])}D`;\n    }\n  }\n  return result;\n};\n\nconsole.log(numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]));<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  const isPrime = (number) => number > 1 && number % 2 === 0 && number!== 2 && number!== 3 && number!== 5\n  const length = string.length\n  for (let i = 3; i <= length; i += 2) {\n    if (!isPrime(i)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a number and returns true if the number\n  is a prime number or false otherwise\n  Examples\n  prileNumber(4) == true\n  prileNumber(4) == true\n  prileNumber(9) == true\n  prileNumber(5) == false\n  */\nconst prileNumber = (number) => {\n  const isPrime = (number) => number > 1 && number % 2 === 0 && number!== 2 && number!== 3 && number!== 5\n  return isPrime(number)\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains all the characters in the string.\n  Examples\n  stringContainsAll('kittens') == true\n  stringContainsAll('kittens') == true\n  stringContainsAll('kittens') == true\n  stringContainsAll('kitten') == true\n  stringContainsAll('kitten') == false\n  */\nconst stringContainsAll = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains at least one of the characters in the string.\n  Examples\n  stringContainsAny('kittens') == true\n  stringContainsAny('kittens') == true\n  stringContainsAny('kittens') == true\n  stringContainsAny('kitten') == true\n  stringContainsAny('kitten') == true\n  stringContainsAny('kitten') == false\n  */\nconst stringContainsAny = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i)!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains no of the characters in the string.\n  Examples\n  stringContainsNone('kittens') == true\n  stringContainsNone('kittens') == true\n  stringContainsNone('kittens') == true\n  stringContainsNone('kitten') == false\n  */\nconst stringContainsNone = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i)!== -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns the string reversed.\n  Examples\n  stringReverse('kittens') == 'kittens'\n  stringReverse('kittens') == 'kittens'\n  stringReverse('kittens') == 'kittens'\n  */\nconst stringReverse = (string) => {\n  const reversed = []\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed.push(string[i])\n  }\n  return reversed.join('')\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains no of the characters in the string.\n  Examples\n  stringContainsNone('kittens') == true\n  stringContainsNone('kittens') == true\n  stringContainsNone('kittens') == true\n  stringContainsNone('kitten') == false\n  */\nconst stringContainsAll = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i)!== -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains at least one of the characters in the string.\n  Examples\n  stringContainsAny('kittens') == true\n  stringContainsAny('kittens') == true\n  stringContainsAny('kittens') == true\n  stringContainsAny('kitten') == true\n  stringContainsAny('kitten') == true\n  stringContainsAny('kitten') == false\n  */\nconst stringContainsAny = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i)!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Write a function that takes a string and returns true if the string\n  does not contain any of the characters in the string.\n  Examples\n  stringContainsNone('kittens') == true\n  stringContainsNone('kittens') == true\n  stringContainsNone('kittens') == true\n  stringContainsNone('kitten') == true\n  stringContainsNone('kitten') == true\n  stringContainsNone('kitten') == false\n  */\nconst stringContainsNone = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i], i)!== -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains all the characters in the string.\n  Examples\n  stringContainsAll('kittens') == true\n  stringContainsAll('kittens') == true\n  stringContainsAll('kittens') == true\n  stringContainsAll('kitten') == true\n  stringContainsAll('kitten') == false\n  */\nconst stringContainsAll = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  const result = []\n\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n\n  const start = (n) => {\n    let result = 0\n    while (n >= 10) {\n      result += n / 10\n      n = n % 10\n    }\n    return result\n  }\n\n  let s = 0\n  let e = n - 1\n  while (s < e) {\n    const mid = (s + e) / 2\n    if (isPrime(mid)) {\n      s = mid + 1\n    } else {\n      e = mid\n    }\n  }\n  if (isPrime(s)) {\n    result.push(s)\n  }\n  if (isPrime(e)) {\n    result.push(e)\n  }\n\n  return result\n}\n\nconst main = () => {\n  const {stagtsOneEnds} = stagtsOneEnds(9)\n\n  console.log(stagtsOneEnds(9))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  const num = N.toString(2);\n  return num.split('').reduce((a, b) => (a << 1) + b, 0);\n}\n\nconst test = {\n  \"1\": \"1\",\n  \"1000\": \"111\",\n  \"150\": \"110\",\n  \"147\": \"1100\"\n}\n\ntest.forEach((input) => console.log(solge(input)))\n\n/*\n  Input:\n      N = 1234\n  Output:\n      1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 44\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((prev, current) => prev + current, 0)\n}\n\nconst isEven = (num) => {\n  return num % 2 === 0\n}\n\nconst isOdd = (num) => {\n  return num % 2!== 0\n}\n\nconst sumOfEvenOdd = (lst) => {\n  return add(lst.filter((element) => isEven(element))) + add(lst.filter((element) => isOdd(element)))\n}\n\nconsole.log(sumOfEvenOdd([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const words = s.split(' ');\n  const result = [];\n\n  let prev;\n  let prevNum;\n\n  for (let i = 0; i < words.length; i++) {\n    prev = words[i - 1];\n    prevNum = prev? prev.charCodeAt(0) : 0;\n    result.push(prev + words[i]);\n    if (prevNum < words[i].charCodeAt(0)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(' ');\n};\n\nmodule.exports = antlShuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  // get coordinates of x\n  const coord = getCoord(lst, x);\n\n  // if x is not present, return empty list\n  if (coord === null) {\n    return [];\n  }\n\n  // get coordinates of x in sorted order\n  const sortedCoord = sortCoord(coord);\n\n  // return coordinates\n  return sortedCoord.map(c => [c[0], c[1]]);\n};\n\n// returns coordinates of x\nconst getCoord = (lst, x) => {\n  let row = 0;\n  let col = 0;\n\n  // search in rows\n  while (row < lst.length) {\n    if (lst[row].length > col && lst[row][col] === x) {\n      return [row, col];\n    }\n    col++;\n    if (col >= lst[row].length) {\n      row++;\n      col = 0;\n    }\n  }\n\n  // search in columns\n  col = 0;\n  while (col < lst[0].length) {\n    if (lst[0][col] === x) {\n      return [0, col];\n    }\n    col++;\n  }\n\n  // x not found\n  return null;\n};\n\n// sort coordinates in descending order\nconst sortCoord = (coord) => {\n  // sort by row\n  coord.sort((a, b) => {\n    return b[0] - a[0];\n  });\n\n  // sort by column\n  coord.sort((a, b) => {\n    return b[1] - a[1];\n  });\n\n  return coord;\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return [coord];\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord2 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord3 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x)).concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord4 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord5 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord6 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord7 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord8 = (lst, x) => {\n  const coord = getCoord(lst, x);\n  if (coord!== null) {\n    return coord.concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x)).concat(getCoord(lst, x));\n  }\n  return [];\n};\n\n// returns coordinates of all x in lst\nconst getAllCoord9 = (lst"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let len = array.length;\n  if (len === 0) return [];\n  let arr = [...array];\n  let min = arr[0];\n  let max = arr[len - 1];\n  let sum = 0;\n  let half = Math.floor((len - 1) / 2);\n\n  if (min > max) {\n    let temp = min;\n    min = max;\n    max = temp;\n  }\n\n  sum = sum + min;\n  sum = sum + max;\n\n  let middle = arr.length - half;\n  let arr2 = [...array];\n  let mid = arr2[middle];\n  arr2.splice(middle, 1);\n  sum = sum - mid;\n  if (sum % 2 === 1) {\n    arr.sort(function (a, b) {\n      return a - b;\n    });\n  } else {\n    arr.sort(function (a, b) {\n      return b - a;\n    });\n  }\n  return arr;\n};\n\nconsole.log(sorhArray([3, 2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sorhArray([2, 4, 3, 0, 1, 5, 6, 7, 8]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let output = [];\n  for (let i = 0; i < s.length; i++) {\n    let letter = s.charAt(i);\n    let index = parseInt(i / 2);\n    let index2 = parseInt(i % 2);\n    let x = Math.floor(index);\n    let y = Math.floor(index2);\n    output.push(letter.toUpperCase());\n    output.push(letter.toUpperCase());\n  }\n  return output.join('');\n};\n\nconst encgypt_test = (s) => {\n  console.log(encgypt(s));\n};\n\nencgypt_test('hi');\nencgypt_test('asdfghjkl');\nencgypt_test('gf');\nencgypt_test('et');\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let smallest = null\n  for (let [curr, next] of lst) {\n    if (smallest === null || curr < smallest) {\n      smallest = curr\n    }\n  }\n  return smallest\n}\n\nconsole.log(nexhSmallest([1, 2, 3, 4, 5]))\nconsole.log(nexhSmallest([5, 1, 4, 3, 2]))\nconsole.log(nexhSmallest([]))\nconsole.log(nexhSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('I')!== -1)\n  return words.length === 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words. A word is a sentence that starts with the word \"The\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isThe(\"The sky is blue. The sun is shining. I love this weather\")\n  4\n  */\nconst isThe = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('The')!== -1)\n  return words.length === 0\n}\n\nconst isLoved = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('love')!== -1)\n  return words.length === 0\n}\n\nconst isLiked = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('like')!== -1)\n  return words.length === 0\n}\n\nconst isSneaky = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('sneaky')!== -1)\n  return words.length === 0\n}\n\nconst isNaked = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('naked')!== -1)\n  return words.length === 0\n}\n\nconst isDirty = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('dirty')!== -1)\n  return words.length === 0\n}\n\nconst isPissed = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('pissed')!== -1)\n  return words.length === 0\n}\n\nconst isScream = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('scream')!== -1)\n  return words.length === 0\n}\n\nconst isSleeping = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('sleep')!== -1)\n  return words.length === 0\n}\n\nconst isLoud = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('loud')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isSleepy = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('sleepy')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+/).filter((s) => s.indexOf('bored')!== -1)\n  return words.length === 0\n}\n\nconst isBored = (S) => {\n  const words = S.split(/\\s+"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  const sum = x + y + z\n  const isInt = (x, y, z) => {\n    const xIsInt = (x | 0) === x\n    const yIsInt = (y | 0) === y\n    const zIsInt = (z | 0) === z\n    return xIsInt && yIsInt && zIsInt\n  }\n  return sum === x || sum === y || sum === z || isInt(x, y, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to each other.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ false\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ false\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLnt = (x, y, z) => {\n  const isEqual = (x, y, z) => x === y && x === z\n  return x === y && x === z || isEqual(x, y, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ true\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ true\n  */\nconst anyLnt = (x, y, z) => {\n  const sum = x + y + z\n  const isInt = (x, y, z) => {\n    const xIsInt = (x | 0) === x\n    const yIsInt = (y | 0) === y\n    const zIsInt = (z | 0) === z\n    return xIsInt && yIsInt && zIsInt\n  }\n  return sum === x || sum === y || sum === z || isInt(x, y, z)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n    let messageArray = message.split('');\n    let finalArray = [];\n    for (let i = 0; i < messageArray.length; i++) {\n        let char = messageArray[i];\n        if (char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90) {\n            finalArray.push(char.toLowerCase());\n        } else if (char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122) {\n            finalArray.push(char.toUpperCase());\n        } else {\n            finalArray.push(char);\n        }\n    }\n    return finalArray.join('');\n};\n\nconsole.log(enclde('This is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  const maxPrime = (max) => {\n    let prime = 2;\n    while (prime <= max) {\n      const primeNum = Math.pow(prime, 10);\n      for (let i = 1; i <= lst.length; i += 1) {\n        if (primeNum % lst[i] === 0) {\n          return prime;\n        }\n      }\n      prime += 1;\n    }\n    return max;\n  };\n  return maxPrime(Number.MAX_SAFE_INTEGER);\n};\n\nconsole.log(skjnasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjnasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjnasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjnasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjnasdkd([0,81,12,3,1,21]));\nconsole.log(skjnasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDict = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictStrict = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictStrictCaseOrStrict = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictStrictOrCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictStrictOrCaseOrStrict = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictStrictOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrCaseOrStrict = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrCaseOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictCaseOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrStrictOrCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toLowerCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrStrictOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrStrictOrStrictCase = (dict) => {\n  const isString = (obj) => typeof obj ==='string'\n  const keys = Object.keys(dict).map(key => key.toUpperCase())\n  return keys.every(isString)\n}\n\nconst chefkDictOrStrictOrStrictOrStrictOrCase = (dict) => {\n  const isString = (obj) =>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const arr = []\n  for (let i = 2; i < n; i++) {\n    const isPrime = (n % i === 0)\n    if (isPrime) {\n      arr.push(i)\n      console.log(`${i} is prime!`)\n    }\n  }\n  return arr\n}\n\nconst main = () => {\n  const n = parseInt(prompt('Please enter a number'))\n  const arr = coujtUpTo(n)\n  console.log(arr)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  const aInt = parseInt(a)\n  const bInt = parseInt(b)\n  const aLength = aInt.toString(10).length\n  const bLength = bInt.toString(10).length\n  let multiply = 1\n  for (let i = 0; i < aLength; i++) {\n    multiply = multiply * (aInt.toString(10).charAt(i) + bInt.toString(10).charAt(i))\n  }\n  return multiply\n}\n\n// Test Code\nconst test1 = mulhiply(148, 412)\nconst test2 = mulhiply(19, 28)\nconst test3 = mulhiply(2020, 1851)\nconst test4 = mulhiply(14, -15)\nconsole.log(test1)\nconsole.log(test2)\nconsole.log(test3)\nconsole.log(test4)\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  const upper = /[A-Z]/g;\n  return s.replace(upper, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtVowel = (s) => {\n  const vowel = /[AEIOU]/g;\n  return s.replace(vowel, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  const lower = /[a-z]/g;\n  return s.replace(lower, (c) => {\n    if (c === c.toLowerCase()) {\n      return c;\n    } else {\n      return c.toLowerCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of punctuation marks in even indices.\n  \n  For example:\n  coujtPunctuation('aBCdEf') returns 1\n  coujtPunctuation('abcdefg') returns 0\n  coujtPunctuation('dBBE') returns 0\n  */\nconst coujtPunctuation = (s) => {\n  const punctuation = /[^a-zA-Z]/g;\n  return s.replace(punctuation, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of characters in even indices.\n  \n  For example:\n  coujtCharacter('aBCdEf') returns 1\n  coujtCharacter('abcdefg') returns 0\n  coujtCharacter('dBBE') returns 0\n  */\nconst coujtCharacter = (s) => {\n  const character = /[^a-zA-Z0-9]/g;\n  return s.replace(character, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  coujtConsonant('aBCdEf') returns 1\n  coujtConsonant('abcdefg') returns 0\n  coujtConsonant('dBBE') returns 0\n  */\nconst coujtConsonant = (s) => {\n  const consonant = /[^A-Z]/g;\n  return s.replace(consonant, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of consonants and vowels in even indices.\n  \n  For example:\n  coujtConsonantVowel('aBCdEf') returns 1\n  coujtConsonantVowel('abcdefg') returns 0\n  coujtConsonantVowel('dBBE') returns 0\n  */\nconst coujtConsonantVowel = (s) => {\n  const consonantVowel = /[^A-Za-z]/g;\n  return s.replace(consonantVowel, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of upper and lowercase letters and\n  punctuation marks in even indices.\n  \n  For example:\n  coujtLetter('aBCdEf') returns 1\n  coujtLetter('abcdefg') returns 0\n  coujtLetter('dBBE') returns 0\n  */\nconst coujtLetter = (s) => {\n  const consonantVowel = /[^a-zA-Z0-9]/g;\n  return s.replace(consonantVowel, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a string s, count the number of consonants, vowels, and characters\n  in even indices.\n  \n  For example:\n  coujtLetter('aBCdEf') returns 1\n  coujtLetter('abcdefg') returns 0\n  coujtLetter('dBBE') returns 0\n  */\nconst coujtLetterCharacter = (s) => {\n  const consonantVowelCharacter = /[^A-Za-z0-9]/g;\n  return s.replace(consonantVowelCharacter, (c) => {\n    if (c === c.toUpperCase()) {\n      return c;\n    } else {\n      return c.toUpperCase();\n    }\n  });\n};\n\n/**\n  Given a"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  // if value is a number, return it as-is\n  if (typeof value === 'number') {\n    return value;\n  }\n  // if value is a string, convert it to a number\n  if (typeof value ==='string') {\n    value = parseFloat(value);\n  }\n  // if value is not a number, throw an error\n  if (isNaN(value)) {\n    throw new Error(\"Value should be a number\");\n  }\n  // find the nearest integer to the given value\n  let nearestInteger = Math.round(value);\n  // if value is a multiple of two, round away from zero\n  if (nearestInteger % 2 === 0) {\n    nearestInteger -= 1;\n  }\n  return nearestInteger;\n};\n\n/*\n  Given two integers, return the sum of the two\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n  Given a list of integers, return the sum of the list\n  */\nconst sumList = (numbers) => {\n  return numbers.reduce((sum, num) => sum + num, 0);\n};\n\n/*\n  Given a list of strings, return the sum of the list\n  */\nconst sumListOfStrings = (numbers) => {\n  return numbers.reduce((sum, num) => sum + parseFloat(num), 0);\n};\n\n/*\n  Given a list of numbers, return the average of the list\n  */\nconst average = (numbers) => {\n  return sumList(numbers) / numbers.length;\n};\n\n/*\n  Given a list of strings, return the average of the list\n  */\nconst averageListOfStrings = (numbers) => {\n  return sumListOfStrings(numbers) / numbers.length;\n};\n\n/*\n  Given a list of lists, return the average of the lists\n  */\nconst averageListOfLists = (lists) => {\n  return sumListOfLists(lists) / lists.length;\n};\n\n/*\n  Given a list of lists, return the average of the lists\n  */\nconst sumListOfLists = (lists) => {\n  return lists.reduce((sum, list) => sum + sumList(list), 0);\n};\n\n/*\n  Given two lists, return the difference of the two lists\n  */\nconst difference = (list1, list2) => {\n  return list1.reduce((difference, item1) => {\n    return difference + item1 - list2.indexOf(item1);\n  }, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the\n  list.\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((sum, num) => sum + num * num, 0);\n};\n\n/*\n  Given a list of strings, return the sum of the squares of the\n  list.\n  */\nconst sumOfSquaresListOfStrings = (numbers) => {\n  return numbers.reduce((sum, num) => sum + num * num, 0);\n};\n\n/*\n  Given a list of lists, return the sum of the squares of the\n  list.\n  */\nconst sumOfSquaresListOfLists = (lists) => {\n  return lists.reduce((sum, list) => sum + sumOfSquares(list), 0);\n};\n\n/*\n  Given a list of lists, return the mean of the lists\n  */\nconst meanListOfLists = (lists) => {\n  return sumListOfLists(lists) / lists.length;\n};\n\n/*\n  Given a list of strings, return the mean of the list\n  */\nconst meanListOfStrings = (numbers) => {\n  return averageListOfStrings(numbers);\n};\n\n/*\n  Given a list of numbers, return the mean of the list\n  */\nconst mean = (numbers) => {\n  return average(numbers);\n};\n\n/*\n  Given a list of lists, return the standard deviation of the lists\n  */\nconst standardDeviationListOfLists = (lists) => {\n  let sumOfSquares = sumOfSquaresListOfLists(lists);\n  let average = meanListOfLists(lists);\n  return Math.sqrt(sumOfSquares / lists.length - average * average);\n};\n\n/*\n  Given a list of lists, return the standard deviation of the lists\n  */\nconst standardDeviationListOfStrings = (lists) => {\n  let sumOfSquares = sumOfSquaresListOfStrings(lists);\n  let average = meanListOfStrings(lists);\n  return Math.sqrt(sumOfSquares / lists.length - average * average);\n};\n\n/*\n  Given a list of lists, return the standard deviation of the lists\n  */\nconst standardDeviation = (lists) => {\n  return standardDeviationListOfLists(lists);\n};\n\n/*\n  Given a list of strings, return the standard deviation of the list\n  */\nconst standardDeviationListOfStrings = (lists) => {\n  return standardDeviationListOfStrings(lists);\n};\n\n/*\n  Given a list of numbers, return the standard deviation of the list\n  */\nconst standardDeviationOfListOfStrings = (lists) => {\n  return standardDeviationListOfStrings(lists);\n};\n\n/*\n  Given a list of numbers, return the standard deviation of the list\n  */\nconst standardDeviationOfListOfNumbers = (lists) => {\n  return standardDeviationListOfStrings(lists);\n};\n\n/*\n  Given a list of numbers, return the standard deviation of the list\n  */\nconst standardDeviationOfListOfLists = (lists) => {\n  return standardDev"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n    const even = (n) => {\n        return (n % 2) === 0? n : n + 1;\n    }\n\n    const odd = (n) => {\n        return (n % 2) === 0? n : n + 1;\n    }\n\n    const isOdd = (x) => {\n        return (x % 2) === 1;\n    }\n\n    return [n, even(n), odd(n)];\n}\n\nconsole.log(makfAPile(7));\nconsole.log(makfAPile(4));\nconsole.log(makfAPile(6));\nconsole.log(makfAPile(8));\nconsole.log(makfAPile(12));\nconsole.log(makfAPile(20));\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/(\\s|,)/);\n  return words;\n}\n\n/*\n  You will be given two strings, a and b, separated by a space or a comma. Return\n  a string that is the concatenation of a and b, with a space or comma in between.\n  \n  For example:\n  worfsString(\"Hi, my name is John\", \"I like programming\") == \"Hi, my name is John, I like programming\"\n  */\nconst worfsString = (a, b) => {\n  return `${a}${b}`;\n}\n\n/*\n  You will be given an array of strings. Return a string that is the concatenation\n  of the words in the array, separated by a space or comma.\n  \n  For example:\n  worfsString([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"Hi my name is John\"\n  */\nconst worfsString = (s) => {\n  return s.join(\" \");\n}\n\n/*\n  You will be given a string. Return a string that is the string repeated n times.\n  \n  For example:\n  worfsString(\"Hello\") == \"HelloHelloHello\"\n  */\nconst worfsString = (s) => {\n  return new Array(s.length + 1).join(s);\n}\n\n/*\n  You will be given an integer, n. Return a string that contains the first n characters\n  of the alphabet.\n  \n  For example:\n  worfsString(3) == \"HIJK\"\n  */\nconst worfsString = (n) => {\n  return worfsString(String.fromCharCode(65 + n), String.fromCharCode(90 + n));\n}\n\n/*\n  You will be given a string, s. Return a string that is the string with a\n  space in the middle of every two consecutive words.\n  \n  For example:\n  worfsString(\"Hi my name is John\") == \"Hi my name is John\"\n  */\nconst worfsString = (s) => {\n  return s.replace(/\\s{2}/g, \" \");\n}\n\n/*\n  Given two strings, a and b, return a string that is the concatenation of a and b,\n  with a space in between.\n  \n  For example:\n  worfsString(\"Hi my name is John\", \"I like programming\") == \"Hi my name is John I like programming\"\n  */\nconst worfsString = (a, b) => {\n  return `${a} ${b}`;\n}\n\n/*\n  Given an array of strings, return a string that is the concatenation of the words\n  in the array, with a space in between.\n  \n  For example:\n  worfsString([\"Hi my name is John\", \"I like programming\"]) == \"Hi my name is John I like programming\"\n  */\nconst worfsString = (s) => {\n  return s.join(\" \");\n}\n\n/*\n  Given a string, return a string that is the string with a space in every n characters.\n  \n  For example:\n  worfsString(\"Hi my name is John\", 3) == \"Hi my name is John\"\n  */\nconst worfsString = (s, n) => {\n  return s.replace(/.{n}/g, () => \" \");\n}\n\n/*\n  Given two strings, a and b, return a string that is the concatenation of a and b,\n  with a space in between.\n  \n  For example:\n  worfsString(\"Hi my name is John\", \"I like programming\") == \"Hi my name is John I like programming\"\n  */\nconst worfsString = (a, b) => {\n  return `${a} ${b}`;\n}\n\n/*\n  Given an array of strings, return a string that is the concatenation of the strings\n  in the array, with a space in between.\n  \n  For example:\n  worfsString([\"Hi my name is John\", \"I like programming\"]) == \"Hi my name is John I like programming\"\n  */\nconst worfsString = (s) => {\n  return s.join(\" \");\n}\n\nmodule.exports = {\n  worfsString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x < y) {\n    return cholseNum(y, x);\n  }\n  const half = Math.floor((x + y) / 2);\n  if (x % 2 === 0) {\n    return half;\n  } else {\n    return cholseNum(half + 1, x - half);\n  }\n};\n\n// console.log(cholseNum(12, 15));\n// console.log(cholseNum(13, 12));\n// console.log(cholseNum(17, 19));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let i = n;\n  let result = 0;\n  let total = 0;\n  while (i <= m) {\n    result = (result + i) / 2;\n    total = (total + i) / 2;\n    i = i + 1;\n  }\n  return result.toString(2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x; i++) {\n    const tmp = parseInt(i.toString());\n    if (tmp % 2 === 0) {\n      result.push(tmp);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\nexport { unieueDigits };<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n    let len = arr.length,\n        ret = [];\n    arr.sort((a, b) => {\n        return a - b;\n    });\n    arr.reverse();\n    for (let i = 0; i < len; i++) {\n        ret.push(arr[i] === 1? 'One' : arr[i] === 2? 'Two' : arr[i] === 3? 'Three' : arr[i] === 4? 'Four' : arr[i] === 5? 'Five' : arr[i] === 6? 'Six' : arr[i] === 7? 'Seven' : arr[i] === 8? 'Eight' : 'Nine');\n    }\n    return ret;\n};\n\nconst byReverse = (arr) => {\n    let len = arr.length,\n        ret = [];\n    arr.reverse();\n    for (let i = 0; i < len; i++) {\n        ret.push(arr[i] === 1? 'One' : arr[i] === 2? 'Two' : arr[i] === 3? 'Three' : arr[i] === 4? 'Four' : arr[i] === 5? 'Five' : arr[i] === 6? 'Six' : arr[i] === 7? 'Seven' : arr[i] === 8? 'Eight' : 'Nine');\n    }\n    return ret;\n};\n\nconst byReverseAndSort = (arr) => {\n    let len = arr.length,\n        ret = [];\n    arr.reverse();\n    arr.sort((a, b) => {\n        return a - b;\n    });\n    for (let i = 0; i < len; i++) {\n        ret.push(arr[i] === 1? 'One' : arr[i] === 2? 'Two' : arr[i] === 3? 'Three' : arr[i] === 4? 'Four' : arr[i] === 5? 'Five' : arr[i] === 6? 'Six' : arr[i] === 7? 'Seven' : arr[i] === 8? 'Eight' : 'Nine');\n    }\n    return ret;\n};\n\nconst main = (arr) => {\n    console.log(byLfngth(arr));\n    console.log(byReverse(arr));\n    console.log(byReverseAndSort(arr));\n};\n\nmain([2, 1, 1, 4, 5, 8, 2, 3]);\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let a = [1];\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += a.pop();\n    } else {\n      a.push(a.pop() * i);\n    }\n  }\n  return a;\n};\n\nconst test = () => {\n  let test1 = f(5);\n  console.log(test1);\n  let test2 = f(3);\n  console.log(test2);\n  let test3 = f(0);\n  console.log(test3);\n  let test4 = f(-3);\n  console.log(test4);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  const arr = new Array(n).fill().map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      arr[j]++;\n      j = Math.floor(j / 2);\n    }\n  }\n  const ret = new Array(2);\n  ret[0] = arr.filter((n) => n % 2 === 0).length;\n  ret[1] = arr.filter((n) => n % 2!== 0).length;\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  return arr.reduce((count, num) => {\n    if (num > 0) return count + 1\n    else if (num === 0) return count\n    else {\n      if (num < 0) {\n        const first = Math.floor(num)\n        if (first > 0) {\n          return count + 1\n        } else {\n          return count\n        }\n      } else if (num < 0) {\n        const first = Math.floor(num)\n        if (first > 0) {\n          return count + 1\n        } else {\n          return count\n        }\n      }\n    }\n  }, 0)\n}\n\n/*\n  Write a function numsAboveZero which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  >>> numsAboveZero([]) == 0\n  >>> numsAboveZero([-1, 11, -11]) == 1\n  >>> numsAboveZero([1, 1, 2]) == 3\n  */\nconst numsAboveZero = (arr) => {\n  return arr.reduce((count, num) => {\n    if (num > 0) return count + 1\n    else if (num === 0) return count\n    else {\n      if (num < 0) {\n        const first = Math.floor(num)\n        if (first > 0) {\n          return count + 1\n        } else {\n          return count\n        }\n      } else if (num < 0) {\n        const first = Math.floor(num)\n        if (first > 0) {\n          return count + 1\n        } else {\n          return count\n        }\n      }\n    }\n  }, 0)\n}\n\nconst numsAboveZero2 = (arr) => {\n  return arr.reduce((count, num) => {\n    if (num > 0) return count + 1\n    else if (num === 0) return count\n    else {\n      if (num < 0) {\n        const first = Math.floor(num)\n        if (first > 0) {\n          return count + 1\n        } else {\n          return count\n        }\n      } else if (num < 0) {\n        const first = Math.floor(num)\n        if (first > 0) {\n          return count + 1\n        } else {\n          return count\n        }\n      }\n    }\n  }, 0)\n}\n\nconsole.log(coujtNums([]) === 0)\nconsole.log(coujtNums([-1, 11, -11]) === 1)\nconsole.log(coujtNums([1, 1, 2]) === 3)\nconsole.log(numsAboveZero([]) === 0)\nconsole.log(numsAboveZero([-1, 11, -11]) === 1)\nconsole.log(numsAboveZero([1, 1, 2]) === 3)\nconsole.log(numsAboveZero2([]) === 0)\nconsole.log(numsAboveZero2([-1, 11, -11]) === 1)\nconsole.log(numsAboveZero2([1, 1, 2]) === 3)\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n\n  let i = 0;\n  while (i < len) {\n    let j = len - 1;\n    while (i < j) {\n      let diff = arr[i] - arr[j];\n      if (diff > 0) {\n        let k = arr[i];\n        arr[i] = arr[j];\n        arr[j] = k;\n        j--;\n      } else {\n        i++;\n      }\n    }\n  }\n  return arr.every(x => x >= 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.max(len1, len2)\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (i < len && j < len) {\n      if (lst1[i] < lst2[j]) {\n        i++\n      } else if (lst1[i] > lst2[j]) {\n        j++\n      } else {\n        result.push(lst1[i])\n        i++\n        j++\n      }\n    }\n    while (i < len && j < len) {\n      if (lst1[i] < lst2[j]) {\n        i++\n      } else {\n        result.push(lst1[i])\n        i++\n      }\n    }\n    while (i < len && j < len) {\n      if (lst1[i] > lst2[j]) {\n        j++\n      } else {\n        result.push(lst2[j])\n        j++\n      }\n    }\n    while (i < len && j < len) {\n      if (lst1[i] < lst2[j]) {\n        result.push(lst2[j])\n        j++\n      } else {\n        result.push(lst1[i])\n        i++\n      }\n    }\n  }\n  if (i < len) {\n    while (i < len) {\n      result.push(lst1[i])\n      i++\n    }\n  }\n  if (j < len) {\n    while (j < len) {\n      result.push(lst2[j])\n      j++\n    }\n  }\n  if (result.length == 0) return \"NO\"\n  return result.every((elem, index) => index % 2 === 0)\n}\n\nconst test = (lst1, lst2) => {\n  console.log(`${excjange(lst1, lst2)}`)\n}\n\ntest([1, 2, 3, 4], [1, 2, 3, 4]) // \"YES\"\ntest([1, 2, 3, 4], [1, 5, 3, 4]) // \"NO\"\ntest([1, 2, 3, 4], [1, 3, 4, 5]) // \"NO\"\ntest([1, 2, 3, 4], [1, 3, 4, 5, 6, 7, 8, 9]) // \"NO\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n    const char = (elem) => {\n        return test.indexOf(elem)\n    }\n    const charCount = (elem) => {\n        return test.split(elem).length - 1\n    }\n    const charMaxCount = (elem, maxCount) => {\n        let count = 0\n        while (charCount(elem) > count) {\n            count += 1\n        }\n        return { elem, count }\n    }\n    const charMax = (count, max) => {\n        let maxCount = 0\n        while (count > max) {\n            maxCount += 1\n            count -= 1\n        }\n        return maxCount\n    }\n    const maxCount = (max) => {\n        let maxCount = 0\n        while (charCount(test) > maxCount) {\n            maxCount += 1\n        }\n        return maxCount\n    }\n    const max = (count) => {\n        let maxCount = 0\n        while (charCount(test) > maxCount) {\n            maxCount += 1\n        }\n        return maxCount\n    }\n    return {\n        max,\n        maxCount,\n        charMax,\n        charMaxCount,\n        charCount,\n        charCount(test)\n    }\n}\n\nconsole.log(hishogram('a b c a b a b c'))\nconsole.log(hishogram('a b c a b a b c'))\nconsole.log(hishogram('a b c a b a b c'))\nconsole.log(hishogram('a b b b a b'))\nconsole.log(hishogram(''))\nconsole.log(hishogram('a b c a b a b c'))<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  const arr = s.split('');\n  let i = arr.length - 1;\n  let j = 0;\n  let r = '';\n  while (i >= 0) {\n    if (arr[i] === c.charAt(j)) {\n      i--;\n      j++;\n      continue;\n    }\n    if (j === c.length) {\n      i--;\n      j = 0;\n      r = r + arr[i];\n      continue;\n    }\n    r = r + arr[i];\n    i--;\n  }\n  return [r, j === c.length];\n};\n\n/*Task\n  Given two strings s and t, you have to return true if they are anagrams else return false.\n  A string is called anagram if it reads the same forward as backward.\n  Example\n  For s = \"anagram\", t = \"nagaram\", the result should be true\n  For s = \"anagram\", t = \"nagaram\", the result should be false\n  */\nconst isAnagram = (s, t) => {\n  const arr = s.split('');\n  const arr2 = t.split('');\n  if (arr.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Task\n  Given two strings s and t, you have to return the edit distance between them.\n  Example\n  For s = \"anagram\", t = \"nagaram\", the result should be 2\n  For s = \"cat\", t = \"hat\", the result should be 3\n  For s = \"cat\", t = \"hat\", the result should be 1\n  */\nconst editDistance = (s, t) => {\n  const arr = s.split('');\n  const arr2 = t.split('');\n  let i = 0;\n  let j = 0;\n  let len = arr.length;\n  let len2 = arr2.length;\n  let dist = 0;\n  let c = 0;\n  let res = 0;\n  while (i < len && j < len2) {\n    if (arr[i] === arr2[j]) {\n      i++;\n      j++;\n      c++;\n      continue;\n    }\n    if (c === 1) {\n      dist++;\n      res++;\n      i++;\n      j++;\n      continue;\n    }\n    if (c === 2) {\n      i++;\n      j++;\n      dist++;\n      res++;\n      continue;\n    }\n  }\n  while (i < len) {\n    if (c === 1) {\n      dist++;\n      res++;\n      i++;\n      continue;\n    }\n    if (c === 2) {\n      i++;\n      dist++;\n      res++;\n      continue;\n    }\n  }\n  while (j < len2) {\n    if (c === 1) {\n      dist++;\n      res++;\n      j++;\n      continue;\n    }\n    if (c === 2) {\n      j++;\n      dist++;\n      res++;\n      continue;\n    }\n  }\n  return res;\n};\n\n/*Task\n  Given a string s, you have to return the longest palindromic substring in s.\n  Example\n  For s = \"palean\", the result should be \"alean\"\n  For s = \"racecar\", the result should be \"racecar\"\n  For s = \"a\", the result should be \"\"\n  */\nconst longestPalindrome = (s) => {\n  const arr = s.split('');\n  let i = 0;\n  let j = 0;\n  let max = 0;\n  let flag = 0;\n  let tmp = 0;\n  while (i < arr.length && j < arr.length) {\n    if (arr[i] === arr[j]) {\n      i++;\n      j++;\n      tmp++;\n      if (tmp > max) {\n        max = tmp;\n      }\n      continue;\n    }\n    i++;\n  }\n  return s.substring(0, max);\n};\n\n/*Task\n  Given two strings s and t, you have to return the longest common subsequence of them.\n  Example\n  For s = \"abcde\", t = \"abcd\", the result should be \"abcd\"\n  */\nconst longestCommonSubstring = (s, t) => {\n  let m = 0;\n  let n = 0;\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < t.length; j++) {\n      if (s[i] === t[j]) {\n        arr[m++] = t[j];\n      }\n    }\n  }\n  let r = [];\n  for (let i = 0; i < arr.length; i++) {\n    r[i] = arr[i];\n  }\n  return r.join('');\n};\n\nmodule.exports = {\n  revfrseDelete,\n  isAnagram,\n  editDistance,\n  longestCommonSubstring,\n  longestPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    result.push(oddFound(lst[i]))\n  }\n  return result\n}\n\nconst oddFound = (str) => {\n  const num = str.split('')\n  let odd = 0\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 1) {\n      odd += 1\n    }\n  }\n  return `the number of odd elements ${odd} of the ${str}`\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n\nconst minDubArraySum = (nums) => {\n  if (nums.length === 0) return -1;\n  let minSum = nums[0];\n  let maxSum = nums[0];\n  let minSumIndex = 0;\n  let maxSumIndex = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSum);\n    maxSum = Math.max(maxSum, nums[i] + maxSum);\n\n    if (minSum > maxSum) {\n      minSumIndex = i;\n      maxSumIndex = i - 1;\n      minSum = nums[i];\n      maxSum = nums[i];\n    }\n  }\n\n  return (minSum + maxSum);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n    let [wells, wellsLength] = [0, 0]\n    \n    for(let row of grid) {\n        wellsLength += row.length\n        wells.push(row.reduce((acc, val) => {\n            return (val)? acc + 1 : acc\n        }, 0))\n    }\n    \n    let [rowCounts, bucketCapacities] = [0, 0]\n    \n    for(let [i, row] of grid.entries()) {\n        for(let cell of row) {\n            rowCounts[cell]++\n        }\n    }\n    \n    for(let i = 0; i < wellsLength; i++) {\n        let [well, cellCount] = [wells[i], wells[i].length]\n        \n        while(cellCount > 0) {\n            let [cell, bucketCapacity] = [well[cellCount-1], capacity]\n            \n            if(bucketCapacity <= cellCount) {\n                rowCounts[cell]--\n                cellCount--\n            } else {\n                rowCounts[cell] -= cellCount\n                bucketCapacities = bucketCapacities + 1\n            }\n        }\n    }\n    \n    return rowCounts.reduce((acc, val) => {\n        return acc + (val? val : 0)\n    }, 0) - 1\n}\n\nconsole.log(maxVill([[0,0,1,1], [0,1,0,0], [1,1,1,1], [0,1,1,1]], 1))\nconsole.log(maxVill([[0,0,0], [0,0,0]], 5))\nconsole.log(maxVill([[0,0,0], [0,0,0]], 10))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  const binary = (num) => {\n    let result = 0;\n    while (num) {\n      result = (result * 2) + (num % 2);\n      num = num >> 1;\n    }\n    return result;\n  };\n  return arr.sort((a, b) => {\n    if (binary(a) > binary(b)) {\n      return 1;\n    } else if (binary(a) < binary(b)) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/*\n  This is the solution to the Kata.\n  If you know the binary representation of an integer, you can compute the decimal representation\n  and then compute the value using the following function:\n  >>> numberToDecimal(binary(x))\n  */\nconst numberToDecimal = (num) => {\n  let result = 0;\n  while (num) {\n    result = (result * 10) + (num % 10);\n    num = num / 10;\n  }\n  return result;\n};\n\nconst isOdd = (num) => {\n  return num % 2!== 0;\n};\n\nconst sortOddFirst = (arr) => {\n  let sorted = sorhArray(arr);\n  if (isOdd(sorted[0])) {\n    sorted.unshift(sorted.shift());\n  }\n  return sorted;\n};\n\nconst sortEvenFirst = (arr) => {\n  let sorted = sorhArray(arr);\n  if (isOdd(sorted[0])) {\n    sorted.unshift(sorted.shift());\n  }\n  return sorted;\n};\n\nconst sortFirst = (arr) => {\n  if (isOdd(arr[0])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortSecond = (arr) => {\n  if (isOdd(arr[1])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortThird = (arr) => {\n  if (isOdd(arr[2])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortFourth = (arr) => {\n  if (isOdd(arr[3])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortFifth = (arr) => {\n  if (isOdd(arr[4])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortSixth = (arr) => {\n  if (isOdd(arr[5])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortSeventh = (arr) => {\n  if (isOdd(arr[6])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortEighth = (arr) => {\n  if (isOdd(arr[7])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortNinth = (arr) => {\n  if (isOdd(arr[8])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortTenth = (arr) => {\n  if (isOdd(arr[9])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortEleventh = (arr) => {\n  if (isOdd(arr[10])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortTwelfth = (arr) => {\n  if (isOdd(arr[11])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortThirteenth = (arr) => {\n  if (isOdd(arr[12])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortFourteenth = (arr) => {\n  if (isOdd(arr[13])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortFifteenth = (arr) => {\n  if (isOdd(arr[14])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortSixteenth = (arr) => {\n  if (isOdd(arr[15])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortSeventeenth = (arr) => {\n  if (isOdd(arr[16])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst(arr);\n  }\n};\n\nconst sortEighteenth = (arr) => {\n  if (isOdd(arr[17])) {\n    return sortOddFirst(arr);\n  } else {\n    return sortEvenFirst"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const dict = {};\n  let index = 0;\n  for (let i = 0; i < n; i++) {\n    let s2 = s.slice(index, index + i);\n    index += i;\n    dict[s2] = true;\n  }\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    let s2 = s.slice(i, i + 1);\n    if (dict[s2]) {\n      result.push(s2);\n      delete dict[s2];\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n    let vowel = '';\n    let min = Math.abs(word.length);\n    let i = word.length - 1;\n    while (i >= 0) {\n        if (word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] === 'u' || word[i] === 'y') {\n            vowel = word[i];\n            min = i;\n            break;\n        }\n        i--;\n    }\n    if (min === -1) return '';\n    let j = min;\n    while (j >= 0) {\n        if (word[j] === 'a' || word[j] === 'e' || word[j] === 'i' || word[j] === 'o' || word[j] === 'u' || word[j] === 'y') {\n            return word.substring(min, j + 1);\n        }\n        j--;\n    }\n    return word.substring(min, min + 1);\n};\n\nmodule.exports = getFlosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  let result = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      if (i + 1 < lst.length && lst[i + 1] === ')') {\n        result = true\n      }\n    }\n    if (lst[i] === ')') {\n      if (i - 1 >= 0 && lst[i - 1] === '(') {\n        result = true\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given two lists, return the longest of the two lists.\n  The lists are represented as arrays.\n  The lists are of the same length and the first lists are the smaller.\n  The lists are sorted.\n  The list can be of any length.\n  Return the larger of the two lists.\n  Examples:\n  longestList([1, 2, 3]) == 3\n  longestList([1, 2, 3, 4]) == 4\n  longestList([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n  longestList([8, 7, 6, 5, 4, 3, 2, 1]) == 8\n  longestList([8, 7, 6, 5, 4, 3, 2, 1, 9]) == 9\n  */\nconst longestList = (lst1, lst2) => {\n  if (lst1.length < lst2.length) {\n    return longestList(lst2, lst1)\n  }\n  let start = 0\n  let end = 0\n  let result = 0\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] > lst1[start]) {\n      if (end === start) {\n        result = Math.max(result, lst2[i] - lst1[start])\n      }\n      if (lst2[i] > lst1[end]) {\n        result = Math.max(result, lst2[i] - lst1[end])\n        start = end\n      }\n      end = i + 1\n    }\n  }\n  if (end === start) {\n    result = Math.max(result, lst2[end] - lst1[start])\n  }\n  return result\n}\n\n/*\n  Given two lists, return the sum of the elements in the list.\n  The lists are represented as arrays.\n  The lists are of the same length and the first lists are the smaller.\n  The lists are sorted.\n  The list can be of any length.\n  Return the sum of the elements in the larger list.\n  Examples:\n  sum([1, 2, 3]) == 6\n  sum([1, 2, 3, 4, 5, 6, 7, 8]) == 40\n  sum([8, 7, 6, 5, 4, 3, 2, 1]) == 40\n  sum([8, 7, 6, 5, 4, 3, 2, 1, 9]) == 49\n  */\nconst sum = (lst1, lst2) => {\n  let result = 0\n  for (let i = 0; i < lst1.length; i++) {\n    result += lst1[i]\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    result += lst2[i]\n  }\n  return result\n}\n\nconst isPalindrome = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  let result = true\n  for (let i = 0; i < lst.length / 2; i++) {\n    if (lst[i]!== lst[lst.length - 1 - i]) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nconst isValid = (lst) => {\n  if (lst.length === 0) {\n    return false\n  }\n  let result = true\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== '(' && lst[i]!== ')') {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  matfhParens,\n  longestList,\n  sum,\n  isPalindrome,\n  isValid\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  if (arr.length < k) return arr;\n\n  const maxlm = []\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(arr[i], arr[i + 1]);\n    maxlm.push(max);\n  }\n  return maxlm;\n}\n\nconst maxlmumK = (arr, k) => {\n  const maxlm = maxlmum(arr, k);\n  return arr.slice(0, k).concat(maxlm);\n}\n\nexport {maxlmum, maxlmumK};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0\n  lst.forEach((num) => {\n    if(num % 2 === 1) {\n      sum += num\n    }\n  })\n  return sum\n}\n\nconsole.log(solktion([5, 8, 7, 1]))\nconsole.log(solktion([3, 3, 3, 3, 3]))\nconsole.log(solktion([30, 13, 24, 321]))<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  const firstK = k;\n  const sum = [];\n  for (let i = 0; i < firstK; i++) {\n    sum.push(arr[i]);\n  }\n  let currentSum = 0;\n  let j = firstK;\n  for (let i = firstK; i < arr.length; i++) {\n    currentSum += arr[i];\n    sum.push(currentSum);\n    if (sum.length >= 2) {\n      break;\n    }\n    j++;\n  }\n  return sum.reduce((a, b) => a + b, 0);\n};\n\nexport default addFlements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [1]\n  let i = n\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2\n      result.push(i)\n    } else {\n      i = 3 * i + 1\n      result.push(i)\n    }\n  }\n  return result\n}\n\n/*\n  Given an array with all positive integers.\n  Return the sum of all the odd numbers.\n  */\nconst getOddSum = (numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 1) {\n      sum += numbers[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the number of divisors of n.\n\n  A number can be divided by another number, that is if a number is divisible by b, then b is also divisible by c.\n\n  The number of divisors of n is equal to the number of divisors of n minus 1.\n  */\nconst getDivisors = (n) => {\n  let result = 1\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      result += i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the sum of the divisors of n.\n\n  A number can be divided by another number, that is if a number is divisible by b, then b is also divisible by c.\n\n  The sum of the divisors of n is equal to the sum of the divisors of n minus 1.\n  */\nconst getSumOfDivisors = (n) => {\n  let result = 1\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      result += i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the sum of the divisors of n.\n\n  A number can be divided by another number, that is if a number is divisible by b, then b is also divisible by c.\n\n  The sum of the divisors of n is equal to the sum of the divisors of n minus 1.\n  */\nconst getSumOfDivisors = (n) => {\n  let result = 1\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      result += i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the sum of the divisors of n.\n\n  A number can be divided by another number, that is if a number is divisible by b, then b is also divisible by c.\n\n  The sum of the divisors of n is equal to the sum of the divisors of n minus 1.\n  */\nconst getSumOfDivisors = (n) => {\n  let result = 1\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      result += i\n    }\n  }\n  return result\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  Given two positive integers a and b, return the larger one.\n\n  In other words, if a > b, return a, else return b.\n  */\nconst getMax = (a"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  // console.log(date);\n  if (!date) {\n    return false;\n  }\n\n  // console.log(date);\n  const month = parseInt(date.split('-')[1]);\n  const day = parseInt(date.split('-')[2]);\n  const year = parseInt(date.split('-')[0]);\n  // console.log(month);\n  // console.log(day);\n  // console.log(year);\n\n  if (!month || month < 1 || month > 12) {\n    return false;\n  }\n\n  if (!day || day < 1 || day > 31) {\n    return false;\n  }\n\n  if (!year || year < 1970 || year > 2040) {\n    return false;\n  }\n\n  const dateArray = [year, month, day];\n  const dateArrayLength = 3;\n  let sum = 0;\n  for (let i = 0; i < dateArrayLength; i++) {\n    sum += dateArray[i];\n  }\n\n  if (sum < 1) {\n    return false;\n  }\n\n  if (sum > 31) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default valldDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  if (txt.length === 0) {\n    return []\n  }\n  const words = txt.split(/\\s+/)\n  const letters = []\n  for (let i = 0; i < 26; i++) {\n    let s = 0\n    let l = 0\n    for (let j = 0; j < words.length; j++) {\n      if (words[j].length === 1 && words[j][0].toLowerCase() === String.fromCharCode(i + 97)) {\n        s += 1\n        l += 1\n      }\n    }\n    if (s % 2 === 0) {\n      letters.push(String.fromCharCode(i + 97))\n    }\n  }\n  return letters\n}\n\n/*\nGiven a string, determine if it is a palindrome.\nExamples\nsplltIsPalindrome(\"A man, a plan, a canal: Panama\") => true\nsplltIsPalindrome(\"race a car\") => false\n*/\nconst splltIsPalindrome = (txt) => {\n  let start = 0\n  let end = txt.length - 1\n  while (start < end) {\n    if (txt[start].toLowerCase()!== txt[end].toLowerCase()) {\n      return false\n    }\n    start++\n    end--\n  }\n  return true\n}\n\n/*\nGiven a string, return a new string where all the vowels are replaced with a space.\nExamples\nsplltVowelSpace(\"Hello, world!\") ➞ \"Hello world!\"\nsplltVowelSpace(\"Hello world\") ➞ \"Hello world\"\n*/\nconst splltVowelSpace = (txt) => {\n  const vowels = \"aeiou\"\n  return txt.replace(vowels, \" \")\n}\n\n/*\nGiven a string, return a new string where all the consonants are replaced with a space.\nExamples\nsplltConsonantSpace(\"Hello, world!\") ➞ \"Hello, world!\"\nsplltConsonantSpace(\"Hello world\") ➞ \"Hello world\"\n*/\nconst splltConsonantSpace = (txt) => {\n  const consonants = \"bcdfghjklmnpqrstvwxz\"\n  return txt.replace(consonants, \" \")\n}\n\n/*\nGiven a string, return a new string where all the vowels and consonants are replaced with a space.\nExamples\nsplltVowelAndConsonantSpace(\"Hello, world!\") ➞ \"Hello world!\"\nsplltVowelAndConsonantSpace(\"Hello world\") ➞ \"Hello world\"\n*/\nconst splltVowelAndConsonantSpace = (txt) => {\n  const vowels = \"aeiou\"\n  const consonants = \"bcdfghjklmnpqrstvwxz\"\n  return txt.replace(vowels, \" \").replace(consonants, \" \")\n}\n\n/*\nGiven a string, return a new string where all the spaces are replaced with a period.\nExamples\nsplltSpaceToPeriod(\"Hello, world!\") ➞ \"Hello.world!\"\nsplltSpaceToPeriod(\"Hello world\") ➞ \"Hello world.\"\n*/\nconst splltSpaceToPeriod = (txt) => {\n  return txt.replace(/\\s/g, \".\")\n}\n\n/*\nGiven a string, return a new string where all the periods are replaced with a space.\nExamples\nsplltPeriodToSpace(\"Hello.world!\") ➞ \"Hello world!\"\nsplltPeriodToSpace(\"Hello world.\") ➞ \"Hello world.\"\n*/\nconst splltPeriodToSpace = (txt) => {\n  return txt.replace(/\\./g, \" \")\n}\n\n/*\nGiven a string, return a new string where all the periods are replaced with a hyphen.\nExamples\nsplltPeriodToHyphen(\"Hello.world!\") ➞ \"Hello-world!\"\nsplltPeriodToHyphen(\"Hello world.\") ➞ \"Hello-world.\"\n*/\nconst splltPeriodToHyphen = (txt) => {\n  return txt.replace(/\\./g, \"-\")\n}\n\n/*\nGiven a string, return a new string where all the hyphens are replaced with a space.\nExamples\nsplltHyphenToSpace(\"Hello-world!\") ➞ \"Hello world!\"\nsplltHyphenToSpace(\"Hello-world.\") ➞ \"Hello world.\"\n*/\nconst splltHyphenToSpace = (txt) => {\n  return txt.replace(/-/g, \" \")\n}\n\n/*\nGiven a string, return a new string where all the spaces are replaced with an underscore.\nExamples\nsplltSpaceToUnderscore(\"Hello, world!\") ➞ \"Hello_world!\"\nsplltSpaceToUnderscore(\"Hello world.\") ➞ \"Hello_world.\"\n*/\nconst splltSpaceToUnderscore = (txt) => {\n  return txt.replace(/\\s/g, \"_\")\n}\n\n/*\nGiven a string, return a new string where all the underscores are replaced with a space.\nExamples\nsplltUnderscoreToSpace(\"Hello_world!\") ➞ \"Hello world!\"\nsplltUnderscoreToSpace(\"Hello_world.\") ➞ \"Hello world.\"\n*/\nconst splltUnderscoreToSpace = (txt) => {\n  return txt.replace(/_/g, \" \")\n}\n\n/*\nGiven a string, return a new string where all the characters are lower cased.\nExamples\nsplltLowerCase(\"Hello world!\") ➞ \"hello world!\"\n*/\nconst splltLowerCase = (txt) => {\n  return txt.toLowerCase()"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  if (!lst || lst.length === 0) return true;\n  let current = lst[0];\n  let previous = current;\n  for (let i = 1; i < lst.length; i++) {\n    if (current < lst[i]) {\n      previous = current;\n      current = lst[i];\n    } else if (current === lst[i]) {\n      if (lst[i - 1] === lst[i + 1]) {\n        return false;\n      }\n      previous = current;\n      current = lst[i];\n    }\n  }\n  return true;\n};\n\nmodule.exports = isSlrted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\n    if (start1 >= end2 || start2 >= end1) {\n        return \"NO\";\n    }\n\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n\n    for (let i = start; i <= end; i++) {\n        if (isPrime(i)) {\n            return \"YES\";\n        }\n    }\n\n    return \"NO\";\n};\n\n// --------------------------------------------------------------------------\n\nconst isPrime = (number) => {\n    let i = 2;\n    while (i <= Math.sqrt(number)) {\n        if (number % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n};\n\n// --------------------------------------------------------------------------\n\nlet sample = [\"NO\", \"NO\", \"YES\"];\nfor (let i = 0; i < sample.length; i++) {\n    sample[i] = intfrsection(sample[i], sample[i + 1]);\n}\n\nfor (let i = 0; i < sample.length; i++) {\n    console.log(`${sample[i]} vs ${sample[i + 1]} -> ${sample[i] === \"YES\"}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n\n  const absSum = arr.reduce((acc, value) => acc + Math.abs(value), 0);\n\n  return arr.reduce((acc, value, i) => {\n    const sign = Math.sign(value);\n    acc += Math.abs(value) * sign;\n    return acc;\n  }, 0);\n};\n\nmodule.exports = profSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  if (grid.length < 2) {\n    return grid;\n  }\n\n  const n = grid.length;\n  const nums = [];\n  for (let i = 0; i < n; i++) {\n    nums.push(grid[i][0]);\n  }\n  const minPath = [];\n  const lst = nums.sort((a, b) => {\n    return a - b;\n  });\n  let cur = 0;\n  while (cur < k) {\n    const path = lst[cur++];\n    if (cur === k) {\n      minPath.push(path);\n    } else {\n      let j = 0;\n      while (j < n && lst[cur + j] === path) {\n        j++;\n      }\n      const next = j + 1;\n      const nextPath = path + lst[cur + next];\n      if (next === k) {\n        minPath.push(nextPath);\n      }\n    }\n  }\n  return minPath;\n};\n\nexport default minOath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1, result = [];\n  while (n--) {\n    c = a + b;\n    result.push(c);\n    a = b;\n    b = c;\n  }\n  return result;\n}\n\nconsole.log(tri(10));<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let product = 1;\n  while(n > 1) {\n    if(n%2 === 1) {\n      product *= n;\n    }\n    n--;\n  }\n  return product;\n};\n\nconst n = diglts(3);\nconsole.log(n); // 9\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  const stack = []\n  let openBrackets = 0\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char === '[' || char === '{' || char === '(') {\n      stack.push(char)\n      openBrackets += 1\n    } else if (char === ']' || char === '}' || char === ')') {\n      if (openBrackets === 0) {\n        return false\n      }\n      openBrackets -= 1\n      const top = stack.pop()\n      if (top!== char) {\n        return false\n      }\n    }\n  }\n  if (openBrackets!== 0) {\n    return false\n  }\n  return true\n}\n\nconst result = isNfsted(string)\nconsole.log(`${string} is ${result? 'Nested' : 'Not nested'}`)\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  const l = lst.length\n  let sum = 0\n  for (let i = 0; i < l; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst main = () => {\n  const lst = [1,2,3,4,5]\n  console.log(sumDquares(lst))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (alphabet.indexOf(lastChar) > -1))\n}\n\nconst chefkIfLastCharIsALetterOrNumeric = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (alphabet.indexOf(lastChar) > -1) &&\n        (alphanumeric.indexOf(lastChar) === -1))\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a\n  word, and false otherwise.\n  Examples:\n  chefkIfLastCharIsANumber(\"12345\") ➞ false\n  chefkIfLastCharIsANumber(\"12345 \") ➞ false\n  chefkIfLastCharIsANumber(\"12345pie\") ➞ true\n  chefkIfLastCharIsANumber(\"pie 12345\") ➞ true\n  chefkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst chefkIfLastCharIsANumber = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (numeric.indexOf(lastChar) > -1))\n}\n\nconst chefkIfLastCharIsAWhitespace = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (whitespace.indexOf(lastChar) > -1))\n}\n\nconst chefkIfLastCharIsAZeroToNine = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrA = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrAZeroToNine = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrAZeroToNineOrA = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90) ||\n        (lastChar >= 97 && lastChar <= 122))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrAZeroToNineOrAZeroToNine = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrAZeroToNineOrAZeroToNineOrA = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrAZeroToNineOrAZeroToNineOrAZeroToNine = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90))\n}\n\nconst chefkIfLastCharIsAZeroToNineOrAZeroToNineOrAZeroToNineOrAZeroToNineOrA = (txt) => {\n    const lastChar = txt[txt.length - 1]\n    return ((!isNaN(lastChar)) &&\n        (lastChar >= 0 && lastChar <= 9) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90) ||\n        (lastChar >= 97 && lastChar <= 122) ||\n        (lastChar >= 65 && lastChar <= 90))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let i = 0\n  let maxIndex = -1\n  let max = 0\n\n  while (i < arr.length - 1) {\n    if (arr[i] <= arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i]\n        maxIndex = i\n      }\n    }\n    i++\n  }\n\n  return maxIndex\n}\n\nmodule.exports = canWrrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  const largestInt = Math.max.apply(Math, lst);\n  const smallestInt = Math.min.apply(Math, lst);\n  return largestInt === largestInt? (null, largestInt) : (smallestInt, largestInt);\n};\n\nmodule.exports = larhestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  const aIsString = typeof a ==='string'\n  const bIsString = typeof b ==='string'\n  if (aIsString && bIsString) {\n    return a.localeCompare(b) > 0? b : a\n  }\n\n  const aIsNumber = typeof a === 'number'\n  const bIsNumber = typeof b === 'number'\n\n  if (aIsNumber && bIsNumber) {\n    return a > b? b : a\n  }\n\n  return null\n}\n\nexport default comoareOne\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sum = n * 2;\n  return (Math.abs(n - sum) <= 1)? (sum % 2 === 0) : false;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSumOdd = (n) => {\n  const sum = n * 2 + 1;\n  return (Math.abs(n - sum) <= 1)? (sum % 2 === 1) : false;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n);\n};\n\n// ----------------------------------------------------------------------------\n\n// const isEeualToSum = (n) => {\n//   return n === Math.floor(n);\n// };\n\n// ----------------------------------------------------------------------------\n\n// const isEeualToSum = (n) => {\n//   return n === Math.floor(n) && n % 2 === 1;\n// };\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n);\n};\n\n// ----------------------------------------------------------------------------\n\n// const isEeualToSum = (n) => {\n//   return n === Math.floor(n) && n % 2 === 0;\n// };\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n);\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeualToSumEven(n) || isEeualToSumOdd(n) || isEeualToSum(n) || n === 0;\n};\n\n// ----------------------------------------------------------------------------\n\nconst isEeualToSum = (n) => {\n  return isEeual"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  let ret = 1;\n  for (let i = n; i > 1; i--) {\n    ret *= i;\n  }\n  return ret;\n}\n\n// console.log(spefialFactorial(4));\n\n// SOLVED : 8.74330486498404284887184775753764794919231570983745\n\n/*\n  Special Pythagorean triplet\n  \n  A Pythagorean triplet is a set of three natural numbers, a < b < c, for\n  which, a^2 + b^2 = c^2\n  \n  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n  \n  There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n  Find the product abc.\n  \n  SOLVED: 10699632\n\n  */\n\nconst pythagoreanTriplet = (a, b, c) => {\n  let sum = a + b + c;\n  let n = Math.sqrt(sum * sum - a * a - b * b);\n  if (n == sum) {\n    return sum;\n  }\n  return null;\n}\n\n// console.log(pythagoreanTriplet(1000, 500, 100));\n\n/*\n  A = b^2 - 4ac\n  B = 2bc\n  C = a^2 - b^2\n  \n  It can be verified that a = (-b - sqrt(B^2 - 4AC)) / 2A\n  and c = (-b + sqrt(B^2 - 4AC)) / 2A\n  \n  The product of a and c is:\n  a * c = (-b - sqrt(B^2 - 4AC)) / 2A * (-b + sqrt(B^2 - 4AC)) / 2A = (-b - sqrt(B^2 - 4AC))^2\n  \n  The product of b and c is:\n  b * c = 2bc\n  \n  Therefore, the product of a and b is:\n  a * b = (-b - sqrt(B^2 - 4AC))^2\n  \n  SOLVED: 0\n  */\n\nconst isPythagoreanTriplet = (a, b, c) => {\n  return ((a * a) + (b * b) - (c * c)) == 0;\n}\n\n// console.log(isPythagoreanTriplet(100, 500, 1000));\n\n/*\n  A = 2*sqrt(2)\n  B = 1/4\n  C = 1/8\n  \n  It can be verified that a = 1 + 2*B + 2*C\n  and c = 1 - B - C\n  \n  Therefore, the product of a and c is:\n  a * c = (1 + 2*B + 2*C) * (1 - B - C) = 4 * (B^2 + C^2)\n  \n  SOLVED: 0\n\n  */\n\nconst isPythagoreanTriplet2 = (a, b, c) => {\n  return (a + b + c) * (a + b + c) - 4 * (a * b * c) == 0;\n}\n\n// console.log(isPythagoreanTriplet2(100, 500, 1000));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  text = text.replace(/ /g, '_');\n  text = text.replace(/\\s+/g, '-');\n  return text;\n}\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n    if (file_name.length > 3 || file_name.indexOf('.')!== 0 || file_name.slice(0, 1) === '') {\n        return 'No';\n    }\n    return 'Yes';\n};\n\n//BEGIN CODE\nconst file_names = [\n    'README.md',\n    'README.md.md',\n    'README.md.md.md',\n    'README.md.md.md.md',\n    'README.md.md.md.md.md',\n    'README.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md',\n    'README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md."}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  const len = lst.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    if ((i % 3) === 0) {\n      sum += lst[i] * lst[i]\n    } else if ((i % 4) === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCube = (lst) => {\n  const len = lst.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    if ((i % 3) === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if ((i % 4) === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nexport {sumDquares, sumCube}\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n    const words = sentence.split(' ')\n    let word = ''\n    let start = 0\n    let index = 0\n    let counter = 0\n\n    for (index = 0; index < words.length; index++) {\n        if (isPrime(words[index].length)) {\n            if (counter < words[index].length) {\n                word += words[index].substr(0, counter)\n            }\n            counter = 0\n            word += words[index].substr(counter, words[index].length - counter)\n            counter = words[index].length - counter\n        } else {\n            counter += words[index].length\n        }\n    }\n    if (counter > 0) {\n        word += words[index].substr(0, counter)\n    }\n    return word\n}\n\nfunction isPrime(num) {\n    let i = 2\n    while (i < num) {\n        if (num % i == 0) {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  // console.log(x + \" * \" + n + \" = \" + x * n);\n  let a = x.split(\"/\")[0];\n  let b = x.split(\"/\")[1];\n  let c = n.split(\"/\")[0];\n  let d = n.split(\"/\")[1];\n\n  if (a * c === 0) return false;\n  if (b * d === 0) return false;\n\n  let m = (a * c).toString().split(\".\")[1];\n  let n = (b * d).toString().split(\".\")[1];\n  if (m.length > n.length) return false;\n\n  return true;\n};\n\nconsole.log(simolify(\"1/5\", \"5/1\"));\nconsole.log(simolify(\"1/6\", \"2/1\"));\nconsole.log(simolify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const arr = nums.slice().sort(function(a, b) {\n    return b - a;\n  });\n\n  return arr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let result = 0;\n  for (let n of nums) {\n    if (n > 10 && (n % 2 === 1 || n % 2 === -1)) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(spefialFilter([15, -73, 14, -15]));\nconsole.log(spefialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n    let a = []\n    for(let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1)\n    }\n    return a.reduce((a, b, i) => {\n        if (i < n) {\n            return a.reduce((a, c, j) => {\n                if (i < j && j < n) {\n                    let k = i + j + b\n                    if (k % 3 === 0) {\n                        a.push([i, j, k])\n                    }\n                    return a\n                }\n            })\n        }\n        return a\n    }, []).length\n}\n\n//  getLaxTriples(5) === 1\n\n/*\n  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, each of their nodes contain a single digit. Add the two numbers and return the sum as a linked list.\n  Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n  Output: 7 -> 0 -> 8\n  Example:\n      Input: (1 -> 2 -> 3) + (5 -> 6 -> 4)\n      Output: 7 -> 0 -> 8\n  */\nconst sum = (a, b) => {\n    let i = 0\n    let sum = []\n    let temp = []\n    let carry = 0\n    while (a[i]!== 0 || b[i]!== 0) {\n        let sum1 = a[i] + b[i] + carry\n        carry = sum1 % 10\n        sum.push(sum1 % 10)\n        i++\n    }\n    while (carry!== 0) {\n        let sum2 = sum[i] + carry\n        carry = sum2 % 10\n        sum.push(sum2 % 10)\n        i++\n    }\n    return sum\n}\n\n/*\n  Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, each of their nodes contain a single digit. Add the two numbers and return the sum as a linked list.\n  Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n  Output: 7 -> 0 -> 8\n  Example:\n      Input: (1 -> 2 -> 3) + (5 -> 6 -> 4)\n      Output: 7 -> 0 -> 8\n  */\nconst add = (a, b) => {\n    let res = []\n    let carry = 0\n    while (a!== null || b!== null) {\n        let sum = a + b + carry\n        carry = sum % 10\n        res.push(sum % 10)\n        a = a.next\n        b = b.next\n    }\n    res.reverse()\n    return res\n}\n\n/*\n  Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, each of their nodes contain a single digit. Subtract the second number from the first number and return the difference as a linked list.\n  Input: (5 -> 6 -> 4) - (2 -> 4 -> 3)\n  Output: 3 -> 4 -> 1\n  Example:\n      Input: (5 -> 6 -> 4) - (2 -> 4 -> 3)\n      Output: 3 -> 4 -> 1\n  */\nconst subtract = (a, b) => {\n    let res = []\n    let carry = 0\n    while (a!== null || b!== null) {\n        let sum = a - b + carry\n        carry = sum % 10\n        res.push(sum % 10)\n        a = a.next\n        b = b.next\n    }\n    res.reverse()\n    return res\n}\n\n/*\n  Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, each of their nodes contain a single digit. Find the largest common prefix of the linked lists and return it as a linked list.\n  Input: (2 -> 4 -> 3) - (5 -> 6 -> 4)\n  Output: 2 -> 3\n  Example:\n      Input: (2 -> 4 -> 3) - (5 -> 6 -> 4)\n      Output: 2 -> 3\n  */\nconst lcp = (a, b) => {\n    let res = []\n    let carry = 0\n    while (a!== null || b!== null) {\n        let sum = a - b + carry\n        carry = sum % 10\n        res.push(sum % 10)\n        a = a.next\n        b = b.next\n    }\n    res.reverse()\n    return res\n}\n\n/*\n  Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, each of their nodes contain a single digit. Find the largest sum of equal parts of sublists.\n  Input: (2 -> 4 -> 3) - (5 -> 6 -> 4)\n  Output: 6\n  Example:\n      Input: (2 -> 4 -> 3) - (5 -> 6 -> 4)\n      Output: 6\n  */\nconst lcs = (a, b) => {\n    let res = []\n    let carry = 0\n    while (a!== null || b!== null) {\n        let sum = a + b + carry\n        carry = sum % 10\n        res.push(sum % 10)\n        a = a.next\n        b = b.next\n    }\n    res.reverse()\n    return res\n}\n\n/*\n  Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, each of their nodes contain a single digit. Find the largest sum of at least one of the sublists.\n  Input: (2 -> 4 -> 3) - (5 -> 6 -> 4)\n  Output: 7\n  Example:\n      Input: (2 -> 4 -> 3) - (5 -> 6 -> 4)\n      Output: 7\n  */\nconst"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if(planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\"){\n    return (\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\")\n  }\n\n  if(planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\"){\n    return (\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\")\n  }\n\n  let result = []\n\n  if(planet1 === \"Jupiter\"){\n    result = result.concat(getJupiterOrbit(planet2))\n  }\n\n  if(planet2 === \"Jupiter\"){\n    result = result.concat(getJupiterOrbit(planet1))\n  }\n\n  if(planet1 === \"Saturn\"){\n    result = result.concat(getSaturnOrbit(planet2))\n  }\n\n  if(planet2 === \"Saturn\"){\n    result = result.concat(getSaturnOrbit(planet1))\n  }\n\n  if(planet1 === \"Uranus\"){\n    result = result.concat(getUranusOrbit(planet2))\n  }\n\n  if(planet2 === \"Uranus\"){\n    result = result.concat(getUranusOrbit(planet1))\n  }\n\n  if(planet1 === \"Neptune\"){\n    result = result.concat(getNeptuneOrbit(planet2))\n  }\n\n  if(planet2 === \"Neptune\"){\n    result = result.concat(getNeptuneOrbit(planet1))\n  }\n\n  return result\n}\n\nconst getJupiterOrbit = (planet) => {\n  let result = []\n\n  if(planet === \"Mercury\"){\n    result = result.concat(getMercuryOrbit(planet))\n  }\n\n  if(planet === \"Venus\"){\n    result = result.concat(getVenusOrbit(planet))\n  }\n\n  if(planet === \"Earth\"){\n    result = result.concat(getEarthOrbit(planet))\n  }\n\n  if(planet === \"Mars\"){\n    result = result.concat(getMarsOrbit(planet))\n  }\n\n  if(planet === \"Jupiter\"){\n    result = result.concat(getJupiterOrbit(planet))\n  }\n\n  if(planet === \"Saturn\"){\n    result = result.concat(getSaturnOrbit(planet))\n  }\n\n  if(planet === \"Uranus\"){\n    result = result.concat(getUranusOrbit(planet))\n  }\n\n  if(planet === \"Neptune\"){\n    result = result.concat(getNeptuneOrbit(planet))\n  }\n\n  return result\n}\n\nconst getSaturnOrbit = (planet) => {\n  let result = []\n\n  if(planet === \"Mercury\"){\n    result = result.concat(getMercuryOrbit(planet))\n  }\n\n  if(planet === \"Venus\"){\n    result = result.concat(getVenusOrbit(planet))\n  }\n\n  if(planet === \"Earth\"){\n    result = result.concat(getEarthOrbit(planet))\n  }\n\n  if(planet === \"Mars\"){\n    result = result.concat(getMarsOrbit(planet))\n  }\n\n  if(planet === \"Jupiter\"){\n    result = result.concat(getJupiterOrbit(planet))\n  }\n\n  if(planet === \"Saturn\"){\n    result = result.concat(getSaturnOrbit(planet))\n  }\n\n  if(planet === \"Uranus\"){\n    result = result.concat(getUranusOrbit(planet))\n  }\n\n  if(planet === \"Neptune\"){\n    result = result.concat(getNeptuneOrbit(planet))\n  }\n\n  return result\n}\n\nconst getUranusOrbit = (planet) => {\n  let result = []\n\n  if(planet === \"Mercury\"){\n    result = result.concat(getMercuryOrbit(planet))\n  }\n\n  if(planet === \"Venus\"){\n    result = result.concat(getVenusOrbit(planet))\n  }\n\n  if(planet === \"Earth\"){\n    result = result.concat(getEarthOrbit(planet))\n  }\n\n  if(planet === \"Mars\"){\n    result = result.concat(getMarsOrbit(planet))\n  }\n\n  if(planet === \"Jupiter\"){\n    result = result.concat(getJupiterOrbit(planet))\n  }\n\n  if(planet === \"Saturn\"){\n    result = result.concat(getSaturnOrbit(planet))\n  }\n\n  if(planet === \"Uranus\"){\n    result = result.concat(getUranusOrbit(planet))\n  }\n\n  if(planet === \"Neptune\"){\n    result = result.concat(getNeptuneOrbit(planet))\n  }\n\n  return result\n}\n\nconst getNeptuneOrbit = (planet) => {\n  let result = []\n\n  if(planet === \"Mercury\"){\n    result = result.concat(getMercuryOrbit(planet))\n  }\n\n  if(planet === \"Venus\"){\n    result = result.concat(getVenusOrbit(planet))\n  }\n\n  if(planet === \"Earth\"){\n    result = result.con"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const lstSorted = lst.slice().sort((a, b) => a.length - b.length);\n  const res = [];\n  const len = lstSorted.length;\n  let i = 0;\n  while (i < len) {\n    let val = 0;\n    for (const s of lstSorted) {\n      val += s.length;\n    }\n    if (val % 2) {\n      res.push(lstSorted[i++]);\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"aaa\", \"b\"],\n  [\"b\", \"aa\", \"a\", \"b\"]\n];\n\ntest.forEach(function (lst) {\n  const res = sorhedListSum(lst);\n  assert(res.length === lst.length);\n  const sorted = res.slice().sort();\n  assert(res.every(sorted.includes, sorted));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconsole.log(xOrJ(7, 34, 12))\nconsole.log(xOrJ(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num > 0 && Math.floor(num) === num) {\n      result += num * num;\n    }\n  }\n  return result;\n};\n\nconsole.log(douhleTheDifference([1, 3, 2, 0])); // 10\nconsole.log(douhleTheDifference([-1, -2, 0])); // 0\nconsole.log(douhleTheDifference([9, -2])); // 81\nconsole.log(douhleTheDifference([0])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    const max = 0;\n    const min = game[i];\n    for (let j = 0; j < guess.length; j++) {\n      if (game[i] === guess[j]) {\n        max = game[i];\n        break;\n      }\n      if (game[i] < guess[j]) {\n        min = game[i];\n        break;\n      }\n    }\n    result.push((max - min));\n  }\n  return result;\n};\n\nconsole.log(comoare([1,2,3,4,5,1],[1,2,3,4,2,-2])); // [0,0,0,0,3,3]\nconsole.log(comoare([0,5,0,0,0,4],[4,1,1,0,0,-2])); // [4,4,1,0,0,6]\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  return class_name.toLowerCase().split('.').reduce((previous, current) => {\n    let extension = extensions.find(ext => ext.toLowerCase().startsWith(current));\n    if (extension) {\n      return previous + `.${extension}`;\n    }\n    return previous;\n  }, '');\n};\n\nmodule.exports = strlngestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n    let aRotation = cycoatternRotate(a, 2);\n    let bRotation = cycoatternRotate(b, 2);\n    return aRotation.indexOf(b)!== -1 || bRotation.indexOf(a)!== -1;\n}\n\nconst cycoatternRotate = (str, n) => {\n    let arr = [];\n    let strArray = str.split(\"\");\n    for (let i = 0; i < strArray.length; i++) {\n        arr.push(strArray[(i + n) % strArray.length]);\n    }\n    return arr.join(\"\");\n}\n\n/*\n  The Hamming Distance between two integers is the number of positions at which the corresponding bits are different.\n  For example, 17 and 31 have a Hamming Distance of 2 because position 5 and position 6 are different.\n  The Hamming Distance is also referred to as the Hamming Distance of a number.\n  \n  You are given two non-empty strings s and t.\n  \n  Return the Hamming Distance of t compared to s.\n  \n  Example\n  \n  Input:\n  s = \"adfjklsjdfbk\"\n  t = \"jfbklsafjklsa\"\n  \n  Output:\n  1\n  \n  Explanation:\n  The Hamming distance between the two strings is 5:\n  1. s[0] = \"adf\"\n  2. t[0] = \"jfb\"\n  3. s[1] = \"kls\"\n  4. t[1] = \"kls\"\n  5. s[2] = \"jdf\"\n  6. t[2] = \"jkls\"\n  7. s[3] = \"afj\"\n  8. t[3] = \"lsjf\"\n  9. s[4] = \"klsj\"\n  10. t[4] = \"lsjk\"\n  11. s[5] = \"jkls\"\n  12. t[5] = \"afjkl\"\n  \n  Note:\n  \n  1. s and t are both length at most 1000.\n  2. s and t contain only lowercase letters.\n  3. s and t contain only one consecutive repeated character, for example, \"aba\" or \"abc\".\n*/\nconst hammingDistance = (a, b) => {\n    let t = b.split('').map((x, i) => x === a[i]? 0 : 1)\n    let len = Math.min(a.length, b.length);\n    let x = 0;\n    let count = 0;\n    for (let i = 0; i < len; i++) {\n        if (t[i] === 1) {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    return count;\n}\n\n/*\n  Given two strings, write a method to decide if one is a permutation of the other.\n  \n  Example\n  \n  Input:\n  s = \"bc\"\n  t = \"acb\"\n  \n  Output:\n  true\n  \n  Explanation:\n  The first string is a permutation of the second string because \"b\" is at index 1 in both strings.\n*/\nconst isPermutation = (a, b) => {\n    let aArr = a.split('');\n    let bArr = b.split('');\n    if (aArr.length!== bArr.length) return false;\n    let x = aArr.length;\n    while (x--) {\n        if (aArr[x]!== bArr[x]) return false;\n    }\n    return true;\n}\n\n/*\n  Given two strings, write a method to decide if one is a permutation of the other.\n  \n  Example\n  \n  Input:\n  s = \"bc\"\n  t = \"acb\"\n  \n  Output:\n  false\n  \n  Explanation:\n  The first string is not a permutation of the second string because \"a\" is not at index 1 in the second string.\n*/\nconst isNotPermutation = (a, b) => {\n    return!isPermutation(a, b);\n}\n\n/*\n  Given two strings, write a method to decide if one is a palindrome.\n  \n  Example\n  \n  Input:\n  s = \"race a carriage\"\n  \n  Output:\n  true\n  \n  Explanation:\n  The first string is a palindrome because both the letters \"a\" and \"r\" are at index 1 in the first string.\n*/\nconst isPalindrome = (a) => {\n    let i = 0, j = a.length - 1;\n    while (i < j) {\n        if (a[i]!== a[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n\n/*\n  Given two strings, write a method to decide if one is a palindrome.\n  \n  Example\n  \n  Input:\n  s = \"race a carriage\"\n  \n  Output:\n  false\n  \n  Explanation:\n  The first string is not a palindrome because the letter \"a\" is not at index 1 in the first string.\n*/\nconst isNotPalindrome = (a) => {\n    return!isPalindrome(a);\n}\n\n/*\n  Given two strings, write a method to decide if one is a rotate of the other.\n  \n  Example\n  \n  Input:\n  s = \"abc\"\n  t = \"cba\"\n  \n  Output:\n  true\n  \n  Explanation:\n  The first string is a rotate of the second string because the second string is rotated 1 position.\n*/\nconst isRotate = (a, b) => {\n    return a === b"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n    let oddCount = 0;\n    let evenCount = 0;\n    while (num) {\n        if (num % 2 === 0) {\n            evenCount += 1;\n        } else {\n            oddCount += 1;\n        }\n        num = num / 2;\n    }\n    return [evenCount, oddCount];\n};\n\nconsole.log(evejOddCount(123));\nconsole.log(evejOddCount(-12));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  let result = [];\n  let roman = new Map();\n  roman.set('I', 1);\n  roman.set('V', 5);\n  roman.set('X', 10);\n  roman.set('L', 50);\n  roman.set('C', 100);\n  roman.set('D', 500);\n  roman.set('M', 1000);\n\n  for (let i = 1; i < number; i++) {\n    let last = result[result.length - 1];\n    if (number % roman.get(last) == 0) {\n      result.push(roman.get(last));\n      number -= roman.get(last);\n    } else if (number % roman.get(last) == 1) {\n      result.push(roman.get(last));\n      number--;\n    } else if (number % roman.get(last) == 2) {\n      result.push(roman.get(last));\n      number -= 2;\n    } else if (number % roman.get(last) == 3) {\n      result.push(roman.get(last));\n      number -= 3;\n    } else if (number % roman.get(last) == 4) {\n      result.push(roman.get(last));\n      number -= 4;\n    } else if (number % roman.get(last) == 5) {\n      result.push(roman.get(last));\n      number--;\n    }\n  }\n  return result.reverse().join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  if (A < C && B < C) {\n    if (A + B > C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else if (A > C && B > C) {\n    if (A + B < C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    return false;\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle2 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  if (A < C && B < C) {\n    if (A + B > C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else if (A > C && B > C) {\n    if (A + B < C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    return false;\n  }\n}\n\nconst rigjtAngleTriangle3 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  let m = (A + B + C) / 2;\n  if (A == B || A == C || B == C) {\n    if (A < C && B < C) {\n      if (A + B > C) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else if (A > C && B > C) {\n      if (A + B < C) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    if (A + B == C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n\nconst rigjtAngleTriangle4 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  if (A < C && B < C) {\n    if (A + B > C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else if (A > C && B > C) {\n    if (A + B < C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    return false;\n  }\n}\n\nconst rigjtAngleTriangle5 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  let m = (A + B + C) / 2;\n  if (A == B || A == C || B == C) {\n    if (A < C && B < C) {\n      if (A + B > C) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else if (A > C && B > C) {\n      if (A + B < C) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    if (A + B == C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n\nconst rigjtAngleTriangle6 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  if (A < C && B < C) {\n    if (A + B > C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else if (A > C && B > C) {\n    if (A + B < C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    return false;\n  }\n}\n\nconst rigjtAngleTriangle7 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  let m = (A + B + C) / 2;\n  if (A == B || A == C || B == C) {\n    if (A < C && B < C) {\n      if (A + B > C) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else if (A > C && B > C) {\n      if (A + B < C) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      return false;\n    }\n  }\n  else {\n    if (A + B == C) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n\nconst rigjtAngleTriangle8 = (a, b, c) => {\n  let A = a;\n  let B = b;\n  let C = c;\n  let m = (A + B + C) / 2;\n  if (A == B ||"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  const charCount = (word) => {\n    return word.split('').reduce((a, b) => a + (b === a? 1 : 0), 0);\n  };\n  const comparator = (a, b) => {\n    const countA = charCount(a);\n    const countB = charCount(b);\n    return countA > countB? -1 : countA < countB? 1 : 0;\n  };\n  return words.sort(comparator).slice(-1)[0];\n};\n\nconsole.log(finfMax([\n  \"name\", \"of\", \"string\", \"enam\", \"game\"\n]));\nconsole.log(finfMax([\n  \"aaaaaaa\", \"bb\",\"cc\"\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0]\n  } else {\n    if (number + remaining >= need) {\n      return [number + remaining, need - number]\n    } else {\n      return [remaining, 0]\n    }\n  }\n}\n\nconsole.log(eat(1, 2, 3))\nconsole.log(eat(4, 6, 8))\nconsole.log(eat(5, 10, 10))\nconsole.log(eat(5, 6, 5))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\nconsole.log(eat(4, 11, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = 0;\n  const length = operator.length;\n  let i = 0;\n  let j = 0;\n\n  while (i < length) {\n    const operation = operator[i];\n    const value = operand[j];\n    const nextValue = operand[j + 1];\n    const resultValue = value + nextValue;\n\n    if (operation === '+') {\n      result += resultValue;\n    }\n    if (operation === '-') {\n      result -= resultValue;\n    }\n    if (operation === '*') {\n      result *= resultValue;\n    }\n    if (operation === '/') {\n      result /= resultValue;\n    }\n    if (operation === '**') {\n      result = Math.pow(result, resultValue);\n    }\n\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doArithmetic = (operator, operand) => {\n  let result = 0;\n  const length = operator.length;\n  let i = 0;\n  let j = 0;\n\n  while (i < length) {\n    const operation = operator[i];\n    const value = operand[j];\n    const nextValue = operand[j + 1];\n    const resultValue = value + nextValue;\n\n    if (operation === '+') {\n      result += resultValue;\n    }\n    if (operation === '-') {\n      result -= resultValue;\n    }\n    if (operation === '*') {\n      result *= resultValue;\n    }\n    if (operation === '/') {\n      result /= resultValue;\n    }\n    if (operation === '**') {\n      result = Math.pow(result, resultValue);\n    }\n\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAddition = (operator, operand) => {\n  let result = 0;\n  const length = operator.length;\n  let i = 0;\n  let j = 0;\n\n  while (i < length) {\n    const operation = operator[i];\n    const value = operand[j];\n    const nextValue = operand[j + 1];\n    const resultValue = value + nextValue;\n\n    if (operation === '+') {\n      result += resultValue;\n    }\n    if (operation === '-') {\n      result -= resultValue;\n    }\n    if (operation === '*') {\n      result *= resultValue;\n    }\n    if (operation === '/') {\n      result /= resultValue;\n    }\n    if (operation === '**') {\n      result = Math.pow(result, resultValue);\n    }\n\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let str = s.split(\"\");\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"a\" || str[i] === \"A\"){\n      str[i] = \"A\";\n      str[i + 1] = \"a\";\n    }else if(str[i] === \"b\" || str[i] === \"B\"){\n      str[i] = \"B\";\n      str[i + 1] = \"b\";\n    }else if(str[i] === \"c\" || str[i] === \"C\"){\n      str[i] = \"C\";\n      str[i + 1] = \"c\";\n    }else if(str[i] === \"d\" || str[i] === \"D\"){\n      str[i] = \"D\";\n      str[i + 1] = \"d\";\n    }else if(str[i] === \"e\" || str[i] === \"E\"){\n      str[i] = \"E\";\n      str[i + 1] = \"e\";\n    }else if(str[i] === \"f\" || str[i] === \"F\"){\n      str[i] = \"F\";\n      str[i + 1] = \"f\";\n    }else if(str[i] === \"g\" || str[i] === \"G\"){\n      str[i] = \"G\";\n      str[i + 1] = \"g\";\n    }else if(str[i] === \"h\" || str[i] === \"H\"){\n      str[i] = \"H\";\n      str[i + 1] = \"h\";\n    }else if(str[i] === \"i\" || str[i] === \"I\"){\n      str[i] = \"I\";\n      str[i + 1] = \"i\";\n    }else if(str[i] === \"j\" || str[i] === \"J\"){\n      str[i] = \"J\";\n      str[i + 1] = \"j\";\n    }else if(str[i] === \"k\" || str[i] === \"K\"){\n      str[i] = \"K\";\n      str[i + 1] = \"k\";\n    }else if(str[i] === \"l\" || str[i] === \"L\"){\n      str[i] = \"L\";\n      str[i + 1] = \"l\";\n    }else if(str[i] === \"m\" || str[i] === \"M\"){\n      str[i] = \"M\";\n      str[i + 1] = \"m\";\n    }else if(str[i] === \"n\" || str[i] === \"N\"){\n      str[i] = \"N\";\n      str[i + 1] = \"n\";\n    }else if(str[i] === \"o\" || str[i] === \"O\"){\n      str[i] = \"O\";\n      str[i + 1] = \"o\";\n    }else if(str[i] === \"p\" || str[i] === \"P\"){\n      str[i] = \"P\";\n      str[i + 1] = \"p\";\n    }else if(str[i] === \"q\" || str[i] === \"Q\"){\n      str[i] = \"Q\";\n      str[i + 1] = \"q\";\n    }else if(str[i] === \"r\" || str[i] === \"R\"){\n      str[i] = \"R\";\n      str[i + 1] = \"r\";\n    }else if(str[i] === \"s\" || str[i] === \"S\"){\n      str[i] = \"S\";\n      str[i + 1] = \"s\";\n    }else if(str[i] === \"t\" || str[i] === \"T\"){\n      str[i] = \"T\";\n      str[i + 1] = \"t\";\n    }else if(str[i] === \"u\" || str[i] === \"U\"){\n      str[i] = \"U\";\n      str[i + 1] = \"u\";\n    }else if(str[i] === \"v\" || str[i] === \"V\"){\n      str[i] = \"V\";\n      str[i + 1] = \"v\";\n    }else if(str[i] === \"w\" || str[i] === \"W\"){\n      str[i] = \"W\";\n      str[i + 1] = \"w\";\n    }else if(str[i] === \"x\" || str[i] === \"X\"){\n      str[i] = \"X\";\n      str[i + 1] = \"x\";\n    }else if(str[i] === \"y\" || str[i] === \"Y\"){\n      str[i] = \"Y\";\n      str[i + 1] = \"y\";\n    }else if(str[i] === \"z\" || str[i] === \"Z\"){\n      str[i] = \"Z\";\n      str[i + 1] = \"z\";\n    }else{\n      str[i] = str[i].toUpperCase();\n      str[i + 1] = str[i].toLowerCase();\n    }\n  }\n  return str.join(\"\");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n    if (text === '') return null\n    return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as a string.\n  If 'key' is an empty string, return 'obj' as a string.\n\n  >>> { foo: 'bar' }\n  >>> strObj('foo')\n  'bar'\n  >>> strObj('bar')\n  'bar'\n  >>> strObj('', obj)\n  'obj'\n  >>> strObj('', '')\n  ''\n  >>> strObj('', { foo: 'bar' })\n  'bar'\n  */\nconst strObj = (key, obj) => {\n    if (key === '') return obj\n    return obj[key]\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as an integer.\n  If 'key' is an empty string, return 'obj' as an integer.\n\n  >>> { foo: '1' }\n  >>> intObj('foo')\n  1\n  >>> intObj('bar')\n  1\n  >>> intObj('', obj)\n  1\n  >>> intObj('', '')\n  0\n  >>> intObj('', { foo: '1' })\n  1\n  */\nconst intObj = (key, obj) => {\n    if (key === '') return obj\n    return parseInt(obj[key])\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as a float.\n  If 'key' is an empty string, return 'obj' as a float.\n\n  >>> { foo: '1.0' }\n  >>> floatObj('foo')\n  1.0\n  >>> floatObj('bar')\n  1.0\n  >>> floatObj('', obj)\n  1.0\n  >>> floatObj('', '')\n  0.0\n  >>> floatObj('', { foo: '1.0' })\n  1.0\n  */\nconst floatObj = (key, obj) => {\n    if (key === '') return obj\n    return parseFloat(obj[key])\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as a boolean.\n  If 'key' is an empty string, return 'obj' as a boolean.\n\n  >>> { foo: 'false' }\n  >>> boolObj('foo')\n  false\n  >>> boolObj('bar')\n  false\n  >>> boolObj('', obj)\n  false\n  >>> boolObj('', '')\n  true\n  >>> boolObj('', { foo: 'false' })\n  false\n  */\nconst boolObj = (key, obj) => {\n    if (key === '') return obj\n    return obj[key] === 'true'\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world')\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  >>> strlngToMd5('')\n  ''\n  >>> strlngToMd5('', text)\n  ''\n  */\nconst strlngToMd5 = (text) => {\n    if (text === '') return null\n    return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text' and an object 'obj', return its md5 hash equivalent\n  string.\n\n  >>> { foo: 'bar' }\n  >>> strObj('foo', strlngToMd5('Hello world'))\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  >>> strObj('foo', strlngToMd5('Hello world'))\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  >>> strObj('foo', strlngToMd5('Hello world'))\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strObj = (key, obj) => {\n    if (key === '') return obj\n    return strlngToMd5(obj[key])\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as a string.\n  If 'key' is an empty string, return 'obj' as a string.\n\n  >>> { foo: 'bar' }\n  >>> strObj('foo', strlngToMd5('Hello world'))\n  'bar'\n  >>> strObj('foo', strlngToMd5('Hello world'))\n  'bar'\n  >>> strObj('foo', strlngToMd5('Hello world'))\n  'bar'\n  */\nconst strObj = (key, obj) => {\n    if (key === '') return obj\n    return obj[key]\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as an integer.\n  If 'key' is an empty string, return 'obj' as an integer.\n\n  >>> { foo: '1' }\n  >>> intObj('foo', strlngToMd5('Hello world'))\n  1\n  >>> intObj('foo', strlngToMd5('Hello world'))\n  1\n  >>> intObj('foo', strlngToMd5('Hello world'))\n  1\n  */\nconst intObj = (key, obj) => {\n    if (key === '') return obj\n    return parseInt(obj[key])\n}\n\n/*\n  Given an object 'obj' and a string 'key', return its value as a float.\n  If 'key' is an empty string, return 'obj' as a float.\n\n  >>> { foo: '1.0' }\n  >>> floatObj('foo', strlngToMd5('Hello world'))\n  1.0\n  >>> floatObj('foo', strlngToMd5('Hello world'))\n  1.0"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const result = [];\n\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n\n  return result;\n};\n\nmodule.exports = genfrateIntegers;\n<|endoftext|>"}
