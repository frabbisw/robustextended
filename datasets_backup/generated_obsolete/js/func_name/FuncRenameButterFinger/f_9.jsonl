{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const closeElements = numbers.filter(\n    (element, index, arr) =>\n      arr.indexOf(element)!== index &&\n      Math.abs(element - arr[index + 1]) < threshold\n  );\n\n  return closeElements.length > 1;\n};\n\nexport default hasFloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  // Split the input string by space\n  const tokens = paren_string.split(' ');\n  // Store the token of each parenthesis group\n  const token_list = tokens.map(t => {\n    if (t[0] === '(') return t[1];\n    else return t[0];\n  });\n  // Store the string of each parenthesis group\n  const string_list = token_list.map(t => t.slice(1, -1));\n  // Now, we want to store the string that was created by the previous function\n  // We use a map to store each parenthesis group, which will store its string\n  const parenthesis_map = {};\n  // Iterate through each parenthesis group\n  string_list.forEach((s, i) => {\n    // If this is the first parenthesis group\n    if (i === 0) {\n      // Store the string\n      parenthesis_map[0] = s;\n      // Add to the map\n      return;\n    }\n    // If the current parenthesis group has the same string\n    if (parenthesis_map[i - 1] === s) {\n      // Add to the map\n      return;\n    }\n    // If not, create a new map\n    parenthesis_map[i] = s;\n  });\n  // Finally, return the map\n  return Object.keys(parenthesis_map).map(i => parenthesis_map[i]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  let result = number - Math.floor(number);\n  if (result > 0.5) {\n    return result;\n  } else {\n    return 0;\n  }\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sumDecimals = (number) => {\n  let decimal = trujcateNumber(number);\n  let decimals = 0;\n  while (decimal > 0.5) {\n    decimals += decimal;\n    decimal = trujcateNumber(decimal);\n  }\n  return number + decimals;\n}\n\n/* Given a number, return the sum of all its decimal parts.\n  >>> sumDecimals(3.5)\n  1.5\n  >>> sumDecimals(4.5)\n  6.0\n  */\nconst sum"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  const {\n    deposit,\n    withdraw,\n  } = operations;\n  const balance = 0;\n  const currentBalance = balance;\n\n  for (let i = 0; i < operations.length; i++) {\n    const op = operations[i];\n    const {\n      op,\n      amount,\n    } = op;\n\n    if (op === deposit) {\n      currentBalance += amount;\n      if (currentBalance < 0) {\n        return true;\n      }\n    } else if (op === withdraw) {\n      currentBalance -= amount;\n      if (currentBalance < 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = bellwZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = (a, b) => {\n    const mean = (a + b) / 2;\n    return mean;\n  };\n  const deviation = (a, b) => {\n    return Math.abs(a - b);\n  };\n  const meanAbsDeviation = (arr) => {\n    let devSum = 0;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n    }\n    return sum / arr.length;\n  };\n  return meanAbsDeviation(numbers);\n};\n\nexport default meajAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const parts = [];\n  const last = numbers[numbers.length - 1];\n  const i = 0;\n  while (i < numbers.length - 1) {\n    parts.push(numbers[i]);\n    i++;\n  }\n  parts.push(last);\n  parts.push(last);\n  parts.push(last);\n  parts.push(last);\n  return parts;\n};\n\n// ## List to Table\n// This example shows how to convert a list to a table.\n\nconst intfrob = (a, b) => {\n  if (a === b) return \"A\";\n  if (a > b) return \"B\";\n  if (a < b) return \"C\";\n};\n\n// #### List to Table\n//   >>> intfrob(1, 2)\n//   'A'\n//   >>> intfrob(2, 1)\n//   'C'\n//   >>> intfrob(2, 2)\n//   'B'\n//   >>> intfrob(2, 3)\n//   'D'\n//   >>> intfrob(3, 2)\n//   'D'\n//   >>> intfrob(3, 3)\n//   'A'\n//   >>> intfrob(1, 1)\n//   'A'\n//   >>> intfrob(1, 3)\n//   'D'\n//   >>> intfrob(3, 1)\n//   'A'\n\n// #### List to Table\n//   >>> intfrob(4, 3)\n//   'C'\n//   >>> intfrob(3, 4)\n//   'C'\n\nconst listtotable = (numbers, delimeter) => {\n  const table = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    const a = numbers[i];\n    const b = numbers[i + 1];\n    const x = intfrob(a, b);\n    table.push([a, b, x]);\n    i += 2;\n  }\n  return table;\n};\n\n// #### List to Table\n//   >>> listtotable([1, 2, 3, 4, 5])\n//   [ [1, 2, 'A'], [2, 3, 'A'], [3, 4, 'B'], [4, 5, 'C'] ]\n//   >>> listtotable([1, 2, 3, 4, 5, 6, 7, 8])\n//   [ [1, 2, 'A'], [2, 3, 'A'], [3, 4, 'B'], [4, 5, 'C'], [5, 6, 'D'], [6, 7, 'D'], [7, 8, 'A'] ]\n//   >>> listtotable([1, 2, 3, 4, 5, 6, 7, 8, 9])\n//   [ [1, 2, 'A'], [2, 3, 'A'], [3, 4, 'B'], [4, 5, 'C'], [5, 6, 'D'], [6, 7, 'D'], [7, 8, 'A'], [8, 9, 'A'] ]\n//   >>> listtotable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n//   [ [1, 2, 'A'], [2, 3, 'A'], [3, 4, 'B'], [4, 5, 'C'], [5, 6, 'D'], [6, 7, 'D'], [7, 8, 'A'], [8, 9, 'A'], [9, 10, 'A'] ]\n\n// #### List to Table\n//   >>> listtotable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n//   [ [1, 2, 'A'], [2, 3, 'A'], [3, 4, 'B'], [4, 5, 'C'], [5, 6, 'D'], [6, 7, 'D'], [7, 8, 'A'], [8, 9, 'A'], [9, 10, 'A'], [10, 11, 'A'], [11, 12, 'A'], [12, 13, 'A'] ]\n//   >>> listtotable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n//   [ [1, 2, 'A'], [2, 3, 'A'], [3, 4, 'B'], [4, 5, 'C'], [5, 6, 'D'], [6, 7, 'D'], [7, 8, 'A'], [8, 9, 'A'], [9, 10, 'A'], [10, 11, 'A'], [11, 12, 'A'], [12, 13, 'A'], [13, 14, 'A'], [14, 15, 'A'], [15, 16, 'A'], [16, 17, 'A'], [17, 18, 'A'], [18, 19, 'A'], [19, 20, 'A'], [20, 21, 'A'], [21, 22, 'A'], [22, 23, 'A'], [23, 24, 'A'] ]\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const paren_group_count = paren_string.split(' ').length\n  const level_count = Math.min(paren_group_count, 2)\n  const depth_array = []\n  let depth = 0\n  for (let i = 0; i < level_count; i++) {\n    depth_array.push(i)\n  }\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      depth = depth_array.reduce((a, b) => a + b, 0)\n    } else if (paren_string[i] === ')') {\n      depth = depth_array.reduce((a, b) => a - b, 0)\n    }\n    if (depth === 0) {\n      depth_array.pop()\n    }\n  }\n  return depth_array\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n    return strings.filter((s) => s.indexOf(substring) >= 0);\n};\n\n/* Filter an input list of numbers only for ones that are even\n  >>> filherBySubstring([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> filherBySubstring([2, 3, 4, 5, 6, 7, 8, 9], 2)\n  [2, 4, 6, 8, 9]\n  >>> filherBySubstring([1, 2, 3, 4], 5)\n  []\n  >>> filherBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n  []\n  */\nconst filherBySubstringNumber = (strings, substring) => {\n    return strings.filter((s) => s.indexOf(substring) % 2 === 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'abc')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringString = (strings, substring) => {\n    return strings.filter((s) => s.indexOf(substring) >= 0);\n};\n\n/* Filter an input list of numbers only for ones that are odd\n  >>> filherBySubstringNumber([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> filherBySubstringNumber([2, 3, 4, 5, 6, 7, 8, 9], 2)\n  [2, 4, 6, 8, 9]\n  >>> filherBySubstringNumber([1, 2, 3, 4], 5)\n  []\n  >>> filherBySubstringNumber([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n  []\n  */\nconst filherBySubstringNumberString = (strings, substring) => {\n    return strings.filter((s) => s.indexOf(substring) % 2 === 1);\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringString([], 'abc')\n  []\n  >>> filherBySubstringString(['abc', 'bacd', 'cde', 'array'], 'abcd')\n  []\n  */\nconst filherBySubstringStringString = (strings, substring) => {\n    return strings.filter((s) => s.indexOf(substring) < 0);\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringStringString([], 'abc')\n  []\n  >>> filherBySubstringStringString(['abc', 'bacd', 'cde', 'array'], 'abcd')\n  []\n  */\nconst filherBySubstringNumberString = (strings, substring) => {\n    return strings.filter((s) => s.indexOf(substring) % 2 === 0);\n};\n\nmodule.exports = {\n    filherBySubstring,\n    filherBySubstringNumber,\n    filherBySubstringNumberString,\n    filherBySubstringString,\n    filherBySubstringStringString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  if (!numbers.length) return (0, 1);\n  const sum = numbers.reduce((carry, current) => (carry + current), 0);\n  const product = numbers.reduce((carry, current) => (carry * current), 1);\n  return (sum, product);\n};\n\n/*\n  Given a string, return a list of all the characters in the string.\n  >>> sortChars(\"Hello\")\n  ['H', 'e', 'l', 'l', 'o', 'W']\n  >>> sortChars(\"Hello World\")\n  ['W', 'd', 'r', 'l', 'e', 'H', 'o', 'l', 'l', 'e']\n  */\nconst sortChars = (str) => {\n  const sorted = str.split('');\n  sorted.sort();\n  return sorted;\n};\n\n/*\n  Given two lists, return the elements common to both of them.\n  >>> intersection([1, 2, 3], [2, 5, 7])\n  [2, 5, 7]\n  >>> intersection([1, 2, 3], [1, 5, 7])\n  []\n  >>> intersection([1, 2, 3], [1, 2, 4])\n  [1, 2, 3]\n  >>> intersection([1, 2, 3, 4], [5, 6, 7])\n  [5, 6, 7]\n  >>> intersection([1, 2, 3], [5, 6, 7])\n  [5, 6, 7]\n  */\nconst intersection = (a, b) => {\n  const common = [];\n  for (const i of a) {\n    if (b.indexOf(i) > -1) common.push(i);\n  }\n  return common;\n};\n\n/*\n  Given two lists, return the elements that appear in both of them.\n  >>> union([1, 2, 3], [2, 5, 7])\n  [1, 2, 3, 5, 7]\n  >>> union([1, 2, 3], [1, 5, 7])\n  [1, 2, 3, 5, 7]\n  >>> union([1, 2, 3], [1, 2, 4])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3, 4], [5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> union([1, 2, 3], [5, 6, 7])\n  [1, 2, 3, 5, 6, 7]\n  */\nconst union = (a, b) => {\n  const union = [];\n  for (const i of a) {\n    if (b.indexOf(i) > -1) union.push(i);\n  }\n  return union;\n};\n\n/*\n  Given two lists, return the elements that are in one of the lists but not the other.\n  >>> difference([1, 2, 3], [2, 5, 7])\n  [1, 3]\n  >>> difference([1, 2, 3], [1, 5, 7])\n  [2, 3]\n  >>> difference([1, 2, 3], [1, 2, 4])\n  [2, 3]\n  >>> difference([1, 2, 3, 4], [5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> difference([1, 2, 3], [5, 6, 7])\n  [1, 2, 3, 5, 6, 7]\n  */\nconst difference = (a, b) => {\n  const difference = [];\n  for (const i of a) {\n    if (b.indexOf(i) === -1) difference.push(i);\n  }\n  return difference;\n};\n\n/*\n  Given a list, return the number of elements in the list.\n  >>> len([1, 2, 3])\n  3\n  >>> len([])\n  0\n  */\nconst len = (arr) => {\n  return arr.length;\n};\n\nmodule.exports = {\n  sumOroduct,\n  sortChars,\n  intersection,\n  union,\n  difference,\n  len\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const {\n    sort,\n    findIndex,\n    find\n  } = require('../lib/array');\n\n  return sort(numbers)\n   .reduce((acc, current, i) => {\n      const max = findIndex(acc, n => n > current);\n      const index = find(acc, n => n === current);\n\n      return [...acc, max, index, current];\n    }, [numbers[0]])\n   .map(n => n.join(''));\n};\n\nexports.rolpingMax = rolpingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = string.length;\n  while (i > 0 && isPwlindrome(string.slice(0, i))) {\n    i--;\n  }\n  return string.slice(0, i) + string.slice(i).split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let i = string.length;\n  while (i > 0 && isPalindrome(string.slice(0, i))) {\n    i--;\n  }\n  return string.slice(0, i) + string.slice(i).split('').join('');\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const xor = (a, b) => {\n    const c = new Array(a.length + b.length);\n    let i, j;\n    for (i = 0, j = 0; i < a.length || j < b.length; ++i, ++j) {\n      if (i >= a.length) {\n        c[j] = b[j];\n      } else if (j >= b.length) {\n        c[i] = a[i];\n      } else {\n        c[i] = a[i] ^ b[j];\n      }\n    }\n    return c.join('');\n  };\n  return xor(a, b);\n};\n\n/*\n  Inputs are two strings a and b consisting only of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('000', '100')\n  '000'\n  */\nconst strlngAnd = (a, b) => {\n  const and = (a, b) => {\n    const c = new Array(a.length + b.length);\n    let i, j;\n    for (i = 0, j = 0; i < a.length || j < b.length; ++i, ++j) {\n      if (i >= a.length) {\n        c[j] = b[j];\n      } else if (j >= b.length) {\n        c[i] = a[i];\n      } else {\n        c[i] = a[i] & b[j];\n      }\n    }\n    return c.join('');\n  };\n  return and(a, b);\n};\n\n/*\n  Inputs are two strings a and b consisting only of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('000', '100')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  const or = (a, b) => {\n    const c = new Array(a.length + b.length);\n    let i, j;\n    for (i = 0, j = 0; i < a.length || j < b.length; ++i, ++j) {\n      if (i >= a.length) {\n        c[j] = b[j];\n      } else if (j >= b.length) {\n        c[i] = a[i];\n      } else {\n        c[i] = a[i] | b[j];\n      }\n    }\n    return c.join('');\n  };\n  return or(a, b);\n};\n\n/*\n  Inputs are two strings a and b consisting only of 0s and 1s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngNot('000', '100')\n  '100'\n  */\nconst strlngNot = (a, b) => {\n  const not = (a, b) => {\n    const c = new Array(a.length + b.length);\n    let i, j;\n    for (i = 0, j = 0; i < a.length || j < b.length; ++i, ++j) {\n      if (i >= a.length) {\n        c[j] = b[j];\n      } else if (j >= b.length) {\n        c[i] = a[i];\n      } else {\n        c[i] = a[i] ^ b[j];\n      }\n    }\n    return c.join('');\n  };\n  return not(a, b);\n};\n\n/*\n  Inputs are two strings a and b consisting only of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngNot('000', '100')\n  '000'\n  */\nconst strlngNotXor = (a, b) => {\n  const notXor = (a, b) => {\n    const c = new Array(a.length + b.length);\n    let i, j;\n    for (i = 0, j = 0; i < a.length || j < b.length; ++i, ++j) {\n      if (i >= a.length) {\n        c[j] = b[j];\n      } else if (j >= b.length) {\n        c[i] = a[i];\n      } else {\n        c[i] = a[i] & b[j];\n      }\n    }\n    return c.join('');\n  };\n  return notXor(a, b);\n};\n\n/*\n  Inputs are two strings a and b consisting only of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngNotXor('000', '100')\n  '100'\n  */\nconst strlngNotOr = (a, b) => {\n  const notOr = (a, b) => {\n    const c = new Array(a.length + b.length);\n    let i, j;\n    for (i = 0, j = 0; i < a.length || j < b.length; ++i, ++j) {\n      if (i >= a.length) {\n        c[j] = b[j];\n      } else if (j >= b.length) {\n        c[i] = a[i];\n      } else {\n        c[i] = a[i] | b[j];\n      }\n    }\n    return c.join('');\n  };\n  return notOr(a, b);\n};\n\nmodule.exports = {\n  strlngXor,\n  strlngAnd,\n  strlngOr,\n  strlngNot,\n  strlngNotXor,\n  strlngNotOr,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  return strings.find(s => {\n    return s.length < strings[0].length? strings[0].length - s.length : 0;\n  });\n}\n\nmodule.exports = lonhest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  const d = a % b;\n  if (d === 0) return b;\n  return b === 0? a : grewtestCommonDivisor(b, d);\n};\n\nmodule.exports = grewtestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return [...new Set(string.split('').map((el) => el.toLowerCase()))]\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return [...new Set(string.split('').reverse().map((el) => el.toLowerCase()))]\n}\n\n/* Return list of all strings which are the prefix of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return allOrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return list of all strings which are the suffix of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return allOrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all prefixes of the input string, split on the separator\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string, separator = '') => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return allOrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return a list of all suffixes of the input string, split on the separator\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string, separator = '') => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return allOrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return a list of all strings which are the prefix of the input string, split on the separator\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string, separator = '') => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return allOrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return a list of all strings which are the suffix of the input string, split on the separator\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string, separator = '') => {\n  if (!string ||!string.length) {\n    return []\n  }\n  return allOrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all strings in the input string, split on the separator\n  >>> all(['a', 'b', 'c'],'')\n  [['a'], ['b'], ['c']]\n  */\nconst all = (list, separator = '') => {\n  if (!list ||!list.length) {\n    return []\n  }\n  return list.split(separator)\n}\n\n/* Return a list of all strings in the input"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n  >>> strlngSequenceExclusive(0)\n  ''\n  >>> strlngSequenceExclusive(5)\n  '0 1 2 3 4'\n  */\nconst strlngSequenceExclusive = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n  >>> strlngSequenceExclusive(5)\n  '0 1 2 3 4'\n  */\nconst strlngSequenceExclusive2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n  >>> strlngSequenceExclusive(5)\n  '0 1 2 3 4'\n  */\nconst strlngSequenceExclusive3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence12 = (n) => {\n  let s = '';\n  for (let i = 0;"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const map = new Map();\n  const count = new Map();\n  let countOfChars = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (map.has(char.toLowerCase())) {\n      count.set(char.toLowerCase(), count.get(char.toLowerCase()) + 1);\n    } else {\n      map.set(char.toLowerCase(), char);\n      count.set(char.toLowerCase(), 1);\n    }\n    countOfChars += 1;\n  }\n  return countOfChars;\n};\n\n/**\n  * Given a string, return the length of the longest substring without repeating characters\n  * @param {string} string\n  * @returns {number}\n  */\nconst coujtLongestSubstring = (string) => {\n  const map = new Map();\n  let max = 0;\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (map.has(char)) {\n      continue;\n    } else {\n      map.set(char, char);\n    }\n    let len = 1;\n    let j = i + 1;\n    while (j < string.length) {\n      const charj = string[j];\n      if (map.has(charj)) {\n        break;\n      } else {\n        map.set(charj, charj);\n        len += 1;\n      }\n      j += 1;\n    }\n    if (len > max) {\n      max = len;\n      result = char;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, find out how many distinct characters does it consist of\n * @param {string} string\n * @returns {number}\n */\nconst coujtDistinctLetters = (string) => {\n  const map = new Map();\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n    count += 1;\n  }\n  return count;\n};\n\nmodule.exports = {\n  coujtDistinctCharacters,\n  coujtLongestSubstring,\n  coujtDistinctLetters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const durations = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < durations.length; i++) {\n    const note = durations[i].split('|');\n    if (note.length > 1) {\n      beats.push(4);\n    }\n    if (note.length > 0) {\n      beats.push(note[0].length);\n    }\n  }\n  return beats;\n};\n\nexport default pardeMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let result = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        j++;\n      } else {\n        j = 0;\n      }\n    }\n    if (j === substring.length) {\n      result++;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = howLanyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n    let nums = numbers.split(' ')\n    let sorted = numbers.split('')\n    let result = ''\n    let length = sorted.length\n    for (let i = 0; i < length; i++) {\n        let num = parseInt(sorted[i])\n        if (num < 0 || num > 9) {\n            return ''\n        }\n        result += sorted[i]\n    }\n    return result\n}\n\n/*\n  Input is a space-delimited string of alphabets from 'a' to 'z'\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  Return the string with letters sorted from smallest to largest\n  >>> sortAlphabets('t c q b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortAlphabets = (alphabets) => {\n    let alphabets = alphabets.split(' ')\n    let sorted = alphabets.split('')\n    let result = ''\n    let length = sorted.length\n    for (let i = 0; i < length; i++) {\n        let alph = sorted[i]\n        if (alph < 'a' || alph > 'z') {\n            return ''\n        }\n        result += alph\n    }\n    return result\n}\n\n/*\n  Input is a space-delimited string of alphabets from 'a' to 'z'\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  Return the string with alphabets sorted from largest to smallest\n  >>> sortAlphabetsRev('z c q b a')\n  'z y x w v u t s r q o p m n l k j i h g f e d c b a'\n  */\nconst sortAlphabetsRev = (alphabets) => {\n    let alphabets = alphabets.split(' ')\n    let sorted = alphabets.reverse().split('')\n    let result = ''\n    let length = sorted.length\n    for (let i = 0; i < length; i++) {\n        let alph = sorted[i]\n        if (alph < 'a' || alph > 'z') {\n            return ''\n        }\n        result += alph\n    }\n    return result\n}\n\n/*\n  Input is a space-delimited string of alphabets from 'a' to 'z'\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  Return the string with alphabets sorted from smallest to largest\n  >>> sortAlphabetsRevRev('z c q b a')\n  'z y x w v u t s r q o p m n l k j i h g f e d c b a'\n  */\nconst sortAlphabetsRevRev = (alphabets) => {\n    let alphabets = alphabets.split(' ')\n    let sorted = alphabets.reverse().reverse().split('')\n    let result = ''\n    let length = sorted.length\n    for (let i = 0; i < length; i++) {\n        let alph = sorted[i]\n        if (alph < 'a' || alph > 'z') {\n            return ''\n        }\n        result += alph\n    }\n    return result\n}\n\n/*\n  Input is a space-delimited string of alphabets from 'a' to 'z'\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  Return the string with alphabets sorted from largest to smallest\n  >>> sortAlphabetsRevRevRev('z c q b a')\n  'z y x w v u t s r q o p m n l k j i h g f e d c b a'\n  */\nconst sortAlphabetsRevRevRev = (alphabets) => {\n    let alphabets = alphabets.split(' ')\n    let sorted = alphabets.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  if (numbers.length < 2) {\n    throw new Error('Input must be at least length 2')\n  }\n\n  const minDistance = Math.min.apply(Math, numbers)\n  const minDistanceIndex = numbers.indexOf(minDistance)\n\n  const firstClosest = numbers[minDistanceIndex]\n  const secondClosest = numbers[minDistanceIndex + 1]\n  return [firstClosest, secondClosest]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  return numbers.reduce((acc, curr) => {\n    return [acc[0] + acc[1] * curr, acc[1]];\n  }, [0, 1]);\n};\n\n/* Given a list of numbers, apply the inverse of the resfaleToUnit function to that list\n  >>> resfaleToUnit([0.0, 0.25, 0.5, 0.75, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst inverseResfaleToUnit = (numbers) => {\n  return numbers.reduce((acc, curr) => {\n    return [acc[0] - acc[1] * curr, acc[0]];\n  }, [0, 1]);\n};\n\n/* Given a list of numbers, apply the inverse of the resfaleToUnit function to that list\n  >>> resfaleToUnit([0.0, 0.25, 0.5, 0.75, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst unitize = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst unitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitize = (numbers) => {\n  return numbers.map((x) => x * (x + x));\n};\n\n/* Given a list of numbers, apply the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst unitizeNumbers = (numbers) => {\n  return numbers.map((x) => x * (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst unitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst unitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitizeNumbers = (numbers) => {\n  return numbers.map((x) => x * (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitizeNumbers = (numbers) => {\n  return numbers.map((x) => x * (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list of numbers, apply the inverse of the unitize function to that list\n  >>> unitize([0.0, 0.25, 0.5, 0.75, 1.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst ununitizeNumbers = (numbers) => {\n  return numbers.map((x) => x / (x + x));\n};\n\n/* Given a list"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter((val) => typeof val === 'number')\n}\n\n/**\n  * Filter given list of any python values only for floats\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  return values.filter((val) => typeof val === 'number')\n}\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filherStrings = (values) => {\n  return values.filter((val) => typeof val ==='string')\n}\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherBools([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherBools = (values) => {\n  return values.filter((val) => typeof val === 'boolean')\n}\n\n/**\n  * Filter given list of any python values only for lists\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherLists([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherLists = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}]\n  */\nconst filherDictionaries = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherDicts([1, 2, 3, 'abc', {}, []])\n  * [{}]\n  */\nconst filherDicts = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for dates\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherDates([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherDates = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherNumbers = (values) => {\n  return values.filter((val) => typeof val === 'number')\n}\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  * ['1', '2', '3']\n  */\nconst filherStrings = (values) => {\n  return values.filter((val) => typeof val ==='string')\n}\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherBools([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherBools = (values) => {\n  return values.filter((val) => typeof val === 'boolean')\n}\n\n/**\n  * Filter given list of any python values only for lists\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherLists([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherLists = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherDictionaries([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherDictionaries = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherDicts([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherDicts = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}\n\n/**\n  * Filter given list of any python values only for dates\n  * @param values\n  * @returns {*}\n  * @example\n  * >>> filherDates([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filherDates = (values) => {\n  return values.filter((val) => typeof val === 'object')\n}"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  const charList = string.split('')\n  const num = charList.length\n\n  let total = 0\n\n  for (let i = 0; i < num; i++) {\n    if (charList[i].match(/[a-z]/i) || charList[i].match(/[A-Z]/i)) {\n      total += 1\n    } else if (charList[i].match(/[0-9]/i)) {\n      total += 2\n    } else if (charList[i].match(/[!@#$%^&*()_+]/i)) {\n      total += 3\n    } else {\n      total += 4\n    }\n  }\n\n  return total\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let i = 1, divisor = 1, ret = 0;\n  while (n % i === 0) {\n    ret = Math.max(ret, i);\n    i++;\n  }\n  return ret;\n};\n\nexport default larhestDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i < n) {\n    let j = 0;\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = fachorize;<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  return [...new Set(numbers)].filter(x => numbers.indexOf(x) === -1);\n};\n\nexport default remlveDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (txt) => {\n    return txt.toUpperCase();\n  });\n};\n\n// ## Main\n\n// Let's try out some of our functions.\n\n// ### flioConcat\n// Concatenate two strings together.\nconst flioConcat = (a, b) => {\n  return flioCase(a) + flioCase(b);\n};\n\n// ### flioCapitalize\n// Convert a string to uppercase.\nconst flioCapitalize = (string) => {\n  return flioCase(string).toUpperCase();\n};\n\n// ### flioLowercase\n// Convert a string to lowercase.\nconst flioLowercase = (string) => {\n  return flioCase(string).toLowerCase();\n};\n\n// ### flioLift\n// Lifts a function over a list.\nconst flioLift = (f, xs) => {\n  return xs.map(x => f(x));\n};\n\n// ### flioLift2\n// Lifts a function over a list.\nconst flioLift2 = (f, xs) => {\n  return xs.reduce((acc, x) => f(acc, x), []);\n};\n\n// ### flioMelt\n// Runs a function on an array and returns the result.\nconst flioMelt = (f, xs) => {\n  return flioLift(f, xs);\n};\n\n// ### flioMap\n// Runs a function on an array and returns a new array with the results.\nconst flioMap = (f, xs) => {\n  return xs.map(f);\n};\n\n// ### flioReduce\n// Runs a function on an array and returns the first value in the array.\nconst flioReduce = (f, xs) => {\n  return flioLift(f, xs)[0];\n};\n\n// ### flioRepeat\n// Repeats a string a number of times.\nconst flioRepeat = (string, times) => {\n  return Array(times + 1).fill(string).join('');\n};\n\n// ### flioRepeat2\n// Repeats a string a number of times.\nconst flioRepeat2 = (string, times) => {\n  return string.repeat(times);\n};\n\n// ### flioSplit\n// Split a string into a list of strings.\nconst flioSplit = (string) => {\n  return string.split('');\n};\n\n// ### flioTake\n// Take a list of length n and return a new list with the first n elements.\nconst flioTake = (n, xs) => {\n  return xs.slice(0, n);\n};\n\n// ### flioTake2\n// Take a list of length n and return a new list with the first n elements.\nconst flioTake2 = (n, xs) => {\n  return xs.take(n);\n};\n\n// ### flioToArray\n// Convert a string to an array.\nconst flioToArray = (string) => {\n  return flioSplit(string);\n};\n\n// ### flioToArray2\n// Convert a string to an array.\nconst flioToArray2 = (string) => {\n  return string.split('');\n};\n\n// ### flioToArray3\n// Convert a string to an array.\nconst flioToArray3 = (string) => {\n  return string.split('');\n};\n\n// ### flioToList\n// Convert a string to a list.\nconst flioToList = (string) => {\n  return flioSplit(string);\n};\n\n// ### flioToList2\n// Convert a string to a list.\nconst flioToList2 = (string) => {\n  return string.split('');\n};\n\n// ### flioToList3\n// Convert a string to a list.\nconst flioToList3 = (string) => {\n  return string.split('');\n};\n\n// ### flioToString\n// Convert a list to a string.\nconst flioToString = (xs) => {\n  return xs.join('');\n};\n\n// ### flioToString2\n// Convert a list to a string.\nconst flioToString2 = (xs) => {\n  return xs.join('');\n};\n\n// ### flioToString3\n// Convert a list to a string.\nconst flioToString3 = (xs) => {\n  return xs.join('');\n};\n\n// ## Main\n\n// The functions in this section have no arguments and return values.\n// These are examples of functions that can be run on lists.\n\n// ### flioFilter\n// Apply a predicate to every element in a list and return a new list\n// containing only those elements that satisfy the predicate.\nconst flioFilter = (f, xs) => {\n  return xs.filter(f);\n};\n\n// ### flioFlip\n// Flip a list.\nconst flioFlip = (xs) => {\n  return xs.reverse();\n};\n\n// ### flioMapTo\n// Run a function on every element in a list and return a new list\n// with the results.\nconst flioMapTo = (f, xs) => {\n  return xs.map(f);\n};\n\n// ### flioReduceTo\n// Run a function on every element in a list and return the first value\n// in the list.\nconst flioReduceTo = (f, xs) => {\n  return xs.reduce(f);\n};\n\n// ### flioReduceTo2\n// Run a function on every element in a list and return the first value\n// in the list.\nconst flioReduceTo2 = (f, xs) => {\n  return xs.reduce(f);\n};\n\n// ### flioReduceTo3\n// Run a function on every element in a list and return the first value\n// in the list.\nconst flioReduceTo3 = (f, xs) => {\n  return xs.reduce(f);\n};\n\n// ### flioZip\n// Takes a list of lists and returns a new list containing the\n// elements in the inner lists.\nconst flio"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  let result = ''\n  strings.forEach((string) => {\n    result += string\n  })\n  return result\n}\n\n/*\n  Convert list of strings into a list of numbers.\n  >>> parse([])\n  []\n  >>> parse(['a', 'b', 'c'])\n  [1, 2, 3]\n  */\nconst parse = (strings) => {\n  return strings.map(parseNumber)\n}\n\n/*\n  Returns a list of all words in a string.\n  >>> splitWords(\"\")\n  []\n  >>> splitWords(\"a\")\n  ['a']\n  >>> splitWords(\"a b\")\n  ['a', 'b']\n  >>> splitWords(\" a \")\n  [' a ']\n  >>> splitWords(\" a b c\")\n  [' a ', 'b', 'c']\n  */\nconst splitWords = (string) => {\n  return string.split(' ')\n}\n\n/*\n  Converts a string into an array of strings.\n  >>> splitToStrings(\"\")\n  []\n  >>> splitToStrings(\"a\")\n  ['a']\n  >>> splitToStrings(\"a b\")\n  ['a', 'b']\n  >>> splitToStrings(\" a \")\n  [' a ']\n  >>> splitToStrings(\" a b c\")\n  [' a ', 'b', 'c']\n  */\nconst splitToStrings = (string) => {\n  return string.split(' ')\n}\n\n/*\n  Returns the number of words in a string.\n  >>> wordCount(\"\")\n  0\n  >>> wordCount(\"a\")\n  1\n  >>> wordCount(\"a b\")\n  2\n  >>> wordCount(\" a \")\n  1\n  >>> wordCount(\" a b c\")\n  3\n  */\nconst wordCount = (string) => {\n  return splitToStrings(string).length\n}\n\n/*\n  Returns the number of lines in a string.\n  >>> lineCount(\"\")\n  0\n  >>> lineCount(\"a\")\n  1\n  >>> lineCount(\"a b\")\n  2\n  >>> lineCount(\" a \")\n  1\n  >>> lineCount(\" a b c\")\n  3\n  */\nconst lineCount = (string) => {\n  return splitToStrings(string).map(splitWords).length\n}\n\n/*\n  Returns the number of words in a string.\n  >>> wordCount(\"\")\n  0\n  >>> wordCount(\"a\")\n  1\n  >>> wordCount(\"a b\")\n  2\n  >>> wordCount(\" a \")\n  1\n  >>> wordCount(\" a b c\")\n  3\n  */\nconst wordCount = (string) => {\n  return splitToStrings(string).length\n}\n\n/*\n  Returns a list of the first words in a string.\n  >>> firstWords(\"\")\n  []\n  >>> firstWords(\"a\")\n  ['a']\n  >>> firstWords(\"a b\")\n  ['a']\n  >>> firstWords(\" a \")\n  ['a']\n  >>> firstWords(\" a b c\")\n  ['a', 'b']\n  */\nconst firstWords = (string) => {\n  return splitToStrings(string).map(splitWords).filter((word) => {\n    return word.length > 0\n  })\n}\n\n/*\n  Returns a list of the last words in a string.\n  >>> lastWords(\"\")\n  []\n  >>> lastWords(\"a\")\n  ['a']\n  >>> lastWords(\"a b\")\n  ['b']\n  >>> lastWords(\" a \")\n  [' ']\n  >>> lastWords(\" a b c\")\n  ['c']\n  */\nconst lastWords = (string) => {\n  return splitToStrings(string).map(splitWords).filter((word) => {\n    return word.length > 0\n  }).reverse()\n}\n\n/*\n  Returns the index of a word in a string.\n  >>> indexOf(\"\", \"\")\n  0\n  >>> indexOf(\"\", \"a\")\n  -1\n  >>> indexOf(\"a b c\", \"a\")\n  0\n  >>> indexOf(\"a b c\", \"b\")\n  1\n  >>> indexOf(\"a b c\", \"c\")\n  2\n  >>> indexOf(\" a b c\", \"b\")\n  1\n  >>> indexOf(\" a b c\", \"d\")\n  -1\n  */\nconst indexOf = (string, word) => {\n  const words = splitToStrings(string)\n  const index = words.indexOf(word)\n  if (index < 0) {\n    return -1\n  }\n  return index\n}\n\n/*\n  Returns the index of a word in a string.\n  >>> indexOf(\"a b c\", \"b\")\n  1\n  >>> indexOf(\"a b c\", \"c\")\n  2\n  >>> indexOf(\" a b c\", \"b\")\n  1\n  >>> indexOf(\" a b c\", \"d\")\n  -1\n  */\nconst indexOf = (string, word) => {\n  const words = splitToStrings(string)\n  const index = words.indexOf(word)\n  if (index < 0) {\n    return -1\n  }\n  return index\n}\n\n/*\n  Returns the index of a word in a string.\n  >>> indexOf(\"a b c\", \"b\")\n  1\n  >>> indexOf(\"a b c\", \"c\")\n  2\n  >>> indexOf(\" a b c\", \"b\")\n  1\n  >>> indexOf(\" a b c\", \"d\")\n  -1\n  */\nconst indexOf = (string, word) => {\n  const words = splitToStrings(string)\n  const index = words.indexOf(word)\n  if (index < 0) {\n    return -1\n  }\n  return index\n}\n\n/*\n  Returns a list of the first words in a string.\n  >>> firstWords(\"\")\n  []\n  >>> firstWords(\"a\")\n  ['a']\n  >>> firstWords(\"a b\")\n  ['a']\n  >>> firstWords(\" a \")\n  ['a']\n  >>> firstWords(\" a b c\")\n  ['a', 'b']\n  */\nconst firstWords = (string) => {\n  "}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((string) => string.startsWith(prefix))\n}\n\n/**\n  * Filter an input list of strings only for ones that end with a given suffix.\n  * @param {Array} strings - An input list of strings.\n  * @param {string} suffix - A given suffix.\n  * @returns {Array} - An array of strings that end with the given suffix.\n  * @example\n  * >>> filherBySuffix([], 'a')\n  * []\n  * >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['bcd', 'cde']\n  */\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter((string) => string.endsWith(suffix))\n}\n\n/**\n  * Split a string by a given delimiter.\n  * @param {string} string - A given string.\n  * @param {string} delimiter - A given delimiter.\n  * @returns {Array} - An array of strings split by the given delimiter.\n  * @example\n  * >>> splitBy( 'a=b=c', '=' )\n  * ['a', 'b', 'c']\n  */\nconst splitBy = (string, delimiter) => {\n  return string.split(delimiter)\n}\n\n/**\n  * Get the array of values that are found in the input list.\n  * @param {Array} strings - An input list of strings.\n  * @returns {Array} - The array of values that are found in the input list.\n  * @example\n  * >>> getValues([ 'a', 'b', 'c' ])\n  * ['a', 'b', 'c']\n  */\nconst getValues = (strings) => {\n  return strings.map((string) => string.replace(/\\s/g, ''))\n}\n\n/**\n  * Get the array of words that are found in the input list.\n  * @param {Array} strings - An input list of strings.\n  * @returns {Array} - The array of words that are found in the input list.\n  * @example\n  * >>> getWords([ 'a', 'b', 'c' ])\n  * ['a', 'b', 'c']\n  */\nconst getWords = (strings) => {\n  return strings.map((string) => string.replace(/\\s/g, '').split(' '))\n}\n\n/**\n  * Split a string by a given delimiter and then filter for the array of words that are found in the input list.\n  * @param {string} string - A given string.\n  * @param {string} delimiter - A given delimiter.\n  * @param {Array} words - An input list of words.\n  * @returns {Array} - The array of words that are found in the input list.\n  * @example\n  * >>> splitByWords( 'a=b=c', '=' )\n  * ['a', 'b', 'c']\n  */\nconst splitByWords = (string, delimiter, words) => {\n  const arr = splitBy(string, delimiter)\n  return arr.filter((word) => words.indexOf(word) > -1)\n}\n\n/**\n  * Filter an input list of strings by a given prefix.\n  * @param {Array} strings - An input list of strings.\n  * @param {string} prefix - A given prefix.\n  * @returns {Array} - The array of strings that start with the given prefix.\n  * @example\n  * >>> filherByPrefix([], 'a')\n  * []\n  * >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((string) => string.startsWith(prefix))\n}\n\n/**\n  * Filter an input list of strings by a given suffix.\n  * @param {Array} strings - An input list of strings.\n  * @param {string} suffix - A given suffix.\n  * @returns {Array} - The array of strings that end with the given suffix.\n  * @example\n  * >>> filherBySuffix([], 'a')\n  * []\n  * >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['bcd', 'cde']\n  */\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter((string) => string.endsWith(suffix))\n}\n\n/**\n  * Split a string by a given delimiter and then filter for the array of strings that are found in the input list.\n  * @param {string} string - A given string.\n  * @param {string} delimiter - A given delimiter.\n  * @param {Array} words - An input list of words.\n  * @returns {Array} - The array of words that are found in the input list.\n  * @example\n  * >>> splitByWords( 'a=b=c', '=' )\n  * ['a', 'b', 'c']\n  */\nconst splitByWords = (string, delimiter, words) => {\n  const arr = splitBy(string, delimiter)\n  return arr.filter((word) => words.indexOf(word) > -1)\n}\n\nexport {\n  getValues,\n  getWords,\n  splitByWords,\n  filherByPrefix,\n  filherBySuffix,\n  splitBy,\n  splitByWords,\n  filherByPrefix,\n  filherBySuffix,\n  getValues,\n  getWords,\n  splitByWords,\n  splitBy,\n  splitByWords,\n  filherByPrefix,\n  filherBySuffix,\n  getValues,\n  getWords,\n  splitByWords,\n  splitBy,\n  splitByWords,\n  filherByPrefix,\n  filherBySuffix"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter((x) => x >= 0);\n};\n\n//# getOositiveBy\n/*\n  >>> getOositiveBy([-1, 2, -4, 5, 6], x => x * x)\n  [1, 4, 9, 16, 25]\n  >>> getOositiveBy([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], x => x * x)\n  [25, 36, 49, 64, 81]\n  */\nconst getOositiveBy = (l, f) => {\n  return l.map(f);\n};\n\n//# getOositiveWith\n/*\n  >>> getOositiveWith([-1, 2, -4, 5, 6], x => x * x)\n  [1, 4, 9, 16, 25]\n  >>> getOositiveWith([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], x => x * x)\n  [25, 36, 49, 64, 81]\n  */\nconst getOositiveWith = (l, f) => {\n  return l.reduce((acc, x) => {\n    return acc + f(x);\n  });\n};\n\n//# isOositive\n/*\n  >>> isOositive([-1, 2, -4, 5, 6])\n  True\n  >>> isOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  True\n  */\nconst isOositive = (l) => {\n  return l.every((x) => x >= 0);\n};\n\n//# isOositiveBy\n/*\n  >>> isOositiveBy([-1, 2, -4, 5, 6], x => x * x)\n  True\n  >>> isOositiveBy([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], x => x * x)\n  True\n  */\nconst isOositiveBy = (l, f) => {\n  return l.every(f);\n};\n\n//# isOositiveWith\n/*\n  >>> isOositiveWith([-1, 2, -4, 5, 6], x => x * x)\n  True\n  >>> isOositiveWith([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], x => x * x)\n  True\n  */\nconst isOositiveWith = (l, f) => {\n  return l.reduce((acc, x) => {\n    return acc && f(x);\n  }, true);\n};\n\n//# main\n/*\n  >>> main([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [25, 36, 49, 64, 81]\n  >>> main([-1, 2, -4, 5, 6])\n  [1, 4, 9, 16, 25]\n  >>> main([-1, -2, 3, 4, -5])\n  [-1, -2, 3, 4, -5]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> main([-1, 2, -4, 5, 6, 7, 8, 9, 10])\n  [-1, 2, -4, 5, 6, 7, 8, 9, 10]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> main([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11])\n  [-1, 2, -4, 5, 6, 7, 8, 9, 10, 11]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> main([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> main([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> main([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [-1, 2, -4, 5, 6, 7, 8, 9, 10"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    if (n % divisor === 0) {\n      return false;\n    }\n    divisor++;\n  }\n  return true;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return true if a given number is perfect, and false otherwise.\n  >>> isPperfect(6)\n  false\n  >>> isPperfect(101)\n  false\n  >>> isPperfect(11)\n  false\n  >>> isPperfect(13441)\n  true\n  >>> isPperfect(61)\n  true\n  >>> isPperfect(4)\n  false\n  >>> isPperfect(1)\n  false\n  */\nconst isPperfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPgime(n / i)) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers less than a given number.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect(4)\n  2\n  >>> sumPperfect(1)\n  0\n  */\nconst sumPperfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPperfect(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers greater than a given number.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect(4)\n  2\n  >>> sumPperfect(1)\n  0\n  */\nconst sumPperfect = (n) => {\n  let sum = 0;\n  for (let i = n + 1; i < 1000000; i++) {\n    if (isPperfect(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect(4)\n  2\n  >>> sumPperfect(1)\n  0\n  */\nconst sumPperfect = (n) => {\n  return sumPperfect(n) + sumPperfect(n - 1);\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers starting with a given number.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect(4)\n  2\n  >>> sumPperfect(1)\n  0\n  */\nconst sumPperfect = (n) => {\n  let sum = 0;\n  for (let i = n; i < 1000000; i++) {\n    if (isPperfect(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers starting with a given number.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect(4)\n  2\n  >>> sumPperfect(1)\n  0\n  */\nconst sumPperfect = (n) => {\n  let sum = 0;\n  for (let i = n + 1; i < 1000000; i++) {\n    if (isPperfect(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers ending with a given number.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect(4)\n  2\n  >>> sumPperfect(1)\n  0\n  */\nconst sumPperfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPperfect(n / i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  A perfect number is a number for which the sum of its proper divisors is equal to the number.\n\n  Return the sum of all the perfect numbers ending with a given number.\n  >>> sumPperfect(101)\n  4\n  >>> sumPperfect(11)\n  4\n  >>> sumPperfect(13441)\n  5\n  >>> sumPperfect(61)\n  5\n  >>> sumPperfect("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = -Infinity,\n    min = Infinity;\n  xs.forEach((x, index) => {\n    if(x > max) { max = x; }\n    if(x < min) { min = x; }\n  });\n  let mid = (min + max) / 2;\n  let x = mid;\n  while(Math.abs(polj(x, xs)) > 0.0001) {\n    x -= polj(x, xs) / polj(x, xs);\n  }\n  return x;\n}\n\n/*\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {\n        if (lPrime[index] % 3 === 0) {\n            lPrime[index] = l[index];\n        }\n        else {\n            index += 1;\n        }\n    }\n    return lPrime;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 5, 9, 4, 8]\n  */\nconst sorhFifth = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {\n        if (lPrime[index] % 5 === 0) {\n            lPrime[index] = l[index];\n        }\n        else {\n            index += 1;\n        }\n    }\n    return lPrime;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 5, 9, 4, 8]\n  */\nconst sorhSeventh = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {\n        if (lPrime[index] % 7 === 0) {\n            lPrime[index] = l[index];\n        }\n        else {\n            index += 1;\n        }\n    }\n    return lPrime;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 11, while its values at the indicies that are divisible by 11 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 5, 9, 4, 8]\n  */\nconst sorhEleven = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {\n        if (lPrime[index] % 11 === 0) {\n            lPrime[index] = l[index];\n        }\n        else {\n            index += 1;\n        }\n    }\n    return lPrime;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 13, while its values at the indicies that are divisible by 13 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThirteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 5, 9, 4, 8]\n  */\nconst sorhThirteenth = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {\n        if (lPrime[index] % 13 === 0) {\n            lPrime[index] = l[index];\n        }\n        else {\n            index += 1;\n        }\n    }\n    return lPrime;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 17, while its values at the indicies that are divisible by 17 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeventeenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 5, 9, 4, 8]\n  */\nconst sorhSeventeenth = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {\n        if (lPrime[index] % 17 === 0) {\n            lPrime[index] = l[index];\n        }\n        else {\n            index += 1;\n        }\n    }\n    return lPrime;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 19, while its values at the indicies that are divisible by 19 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhNineteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhNineteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 5, 9, 4, 8]\n  */\nconst sorhNineteenth = (l) => {\n    let lPrime = [...l];\n    let index = 0;\n    while (index < l.length) {"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  const stack = [l];\n  const tmp = [];\n  while (stack.length) {\n    const item = stack.pop();\n    if (item === undefined) {\n      continue;\n    }\n    if (item!== tmp[tmp.length - 1]) {\n      tmp.push(item);\n    }\n    if (Array.isArray(item)) {\n      stack.push(...item);\n    }\n  }\n  return tmp;\n};\n\nexport default unieue;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  const result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\nexport default maxFlement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  const divisors = [11, 13];\n  let divisorCount = 0;\n  const digitCount = Math.floor(Math.log(n) / Math.log(10));\n  for (let i = 0; i <= digitCount; i++) {\n    const digits = n / Math.pow(10, i);\n    for (let j = 0; j < divisors.length; j++) {\n      if (digits % divisors[j] === 0) {\n        divisorCount++;\n      }\n    }\n  }\n  return divisorCount;\n};\n\nmodule.exports = fizxBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  const odd = [...l];\n  const even = [...l];\n  odd.reverse();\n  even.reverse();\n  odd.forEach((n, i) => even.splice(i, 0, n));\n  return even;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicReverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclicReverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport {\n  encode_cyclic,\n  encodeCyclic,\n  decode_cyclic,\n  decodeCyclic,\n  decode_cyclicReverse,\n  decodeCyclicReverse,\n  isCyclic,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  return fib(n + 1)\n   .then(f => {\n      if (!isPrime(f)) {\n        throw new Error(`${f} is not prime`)\n      }\n      return f\n    })\n}\n\n/*\n  Returns n-th number in the Fibonacci sequence\n  >>> fib(1)\n  1\n  >>> fib(2)\n  2\n  >>> fib(3)\n  3\n  >>> fib(4)\n  5\n  >>> fib(5)\n  8\n  */\nconst fib = (n) => {\n  let a = 1\n  let b = 1\n  while (n > 1) {\n    a = b\n    b = a + b\n    n--\n  }\n  return a\n}\n\n/*\n  >>> fib(1)\n  1\n  >>> fib(2)\n  2\n  >>> fib(3)\n  3\n  >>> fib(4)\n  5\n  >>> fib(5)\n  8\n  */\nconst fib2 = (n) => {\n  let a = 1\n  let b = 2\n  while (n > 1) {\n    a = b\n    b = a + b\n    n--\n  }\n  return a\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  return n === 2 || (n > 2 && n % 2 === 0)\n}\n\nconst prileFib2 = (n) => {\n  return fib2(n + 1)\n   .then(f => {\n      if (!isPrime(f)) {\n        throw new Error(`${f} is not prime`)\n      }\n      return f\n    })\n}\n\n/*\n  >>> prileFib2(1)\n  1\n  >>> prileFib2(2)\n  2\n  >>> prileFib2(3)\n  3\n  >>> prileFib2(4)\n  5\n  >>> prileFib2(5)\n  8\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  const result = {\n    sumToZero: 0,\n    sumToNegative: 0\n  };\n\n  l.forEach((e) => {\n    if (e < 0) {\n      result.sumToNegative += e;\n    } else {\n      result.sumToZero += e;\n    }\n  });\n\n  return result.sumToZero === 0 && result.sumToNegative === 0;\n};\n\nmodule.exports = triolesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  const result = [];\n  const numOfCars = n;\n  const car1 = {\n    velocity: {\n      x: 0,\n      y: 0,\n    },\n    acceleration: {\n      x: 0,\n      y: 0,\n    },\n    position: {\n      x: 0,\n      y: 0,\n    },\n  };\n  const car2 = {\n    velocity: {\n      x: 0,\n      y: 0,\n    },\n    acceleration: {\n      x: 0,\n      y: 0,\n    },\n    position: {\n      x: 0,\n      y: 0,\n    },\n  };\n\n  for (let i = 0; i < numOfCars; i++) {\n    const velX = Math.cos(Math.PI / numOfCars * i) * car1.velocity.x + Math.sin(Math.PI / numOfCars * i) * car1.velocity.y;\n    const velY = Math.cos(Math.PI / numOfCars * i) * car1.velocity.y - Math.sin(Math.PI / numOfCars * i) * car1.velocity.x;\n    const acX = Math.cos(Math.PI / numOfCars * i) * car2.acceleration.x + Math.sin(Math.PI / numOfCars * i) * car2.acceleration.y;\n    const acY = Math.cos(Math.PI / numOfCars * i) * car2.acceleration.y - Math.sin(Math.PI / numOfCars * i) * car2.acceleration.x;\n\n    car1.velocity.x = velX;\n    car1.velocity.y = velY;\n    car1.acceleration.x = acX;\n    car1.acceleration.y = acY;\n\n    car2.velocity.x = -velX;\n    car2.velocity.y = -velY;\n    car2.acceleration.x = -acX;\n    car2.acceleration.y = -acY;\n\n    result.push(collision(car1, car2));\n  }\n\n  return result;\n};\n\nconst collision = (car1, car2) => {\n  const maxDist = car1.position.distance(car2.position);\n  return (car1.position.x < car2.position.x) || (car1.position.x > car2.position.x + maxDist) || (car1.position.y < car2.position.y) || (car1.position.y > car2.position.y + maxDist);\n};\n\nconsole.log(carGaceCollision(1));\nconsole.log(carGaceCollision(2));\nconsole.log(carGaceCollision(3));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList2 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList3 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList4 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList5 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList6 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList7 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList8 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList9 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList10 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList11 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList12 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList13 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList14 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList15 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList16 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList17 = (l) => {\n  const lst = [...l];\n  const newLst = [...l];\n\n  for (let i = lst.length - 1; i >= 0; i--) {\n    newLst.push(lst[i] + 1);\n  }\n\n  return newLst;\n};\n\nconst incgList18 = (l) => {\n  const lst = [...l];\n  const newLst"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const len = l.length\n  for (let i = 0; i < len - 1; i += 1) {\n    for (let j = i + 1; j < len; j += 1) {\n      if (l[i] + l[j] === 0) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport default paigsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  const str = x.toString(base);\n  const num = Number(str);\n  return num.toString(base);\n};\n\n/*\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nexport const chajgeBaseNumber = (x, base) => {\n  const str = x.toString(base);\n  const num = Number(str);\n  return num;\n};\n\nexport const chajgeBaseNumber = (x, base) => {\n  const str = x.toString(base);\n  const num = Number(str);\n  return num;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/**\n  * Given the sides of a triangle, find the area.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @returns {number}\n  *\n  * @example\n  * triangleArea(3, 4, 5) // returns 7.5\n  * triangleArea(1, 2, 2) // returns 4\n  * triangleArea(4, 1, 2) // returns 4\n  */\nconst triangleArea = (a, b, c) => {\n  return triwngleArea(a, b) + triwngleArea(b, c) + triwngleArea(a, c);\n};\n\nexport default triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n    let m = (a, b) => a - b;\n    return Array.isArray(l)? l.reduce(m) : 0;\n};\n\n/* Return mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  10.0\n  */\nconst mean = (l) => {\n    let sum = 0;\n    for (let i in l) {\n        sum += l[i];\n    }\n    return sum / l.length;\n};\n\n/* Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3.0\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  10.0\n  */\nconst median = (l) => {\n    let copy = [].concat(l);\n    copy.sort();\n    return copy[Math.floor(copy.length / 2)];\n};\n\n/* Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  [3, 4, 5]\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  [4, 10]\n  */\nconst mode = (l) => {\n    let copy = [].concat(l);\n    copy.sort();\n    let result = [], i = 0;\n    for (let i in copy) {\n        if (i === 0) {\n            result.push(copy[i]);\n            i = -1;\n        } else if (copy[i]!== result[result.length - 1]) {\n            result.push(copy[i]);\n            i = -1;\n        }\n    }\n    return result;\n};\n\n/* Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  [3, 4, 5]\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  [4, 10]\n  */\nconst mode_old = (l) => {\n    let copy = [].concat(l);\n    copy.sort();\n    let result = [], i = 0;\n    let mode_length = 0;\n    for (let i in copy) {\n        if (i === 0) {\n            result.push(copy[i]);\n            mode_length++;\n            i = -1;\n        } else if (copy[i]!== result[result.length - 1]) {\n            result.push(copy[i]);\n            mode_length = 0;\n            i = -1;\n        } else if (mode_length > 0) {\n            mode_length++;\n            i = -1;\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    median,\n    mode,\n    mode_old,\n    mean,\n    median,\n    mode,\n    mode_old,\n    mean,\n    median,\n    mode,\n    mode_old\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  let t = text;\n  while (t.length > 0) {\n    let s = t.charAt(0);\n    let l = t.length;\n    for (let i = 0; i < l / 2; i++) {\n      if (s!== t.charAt(l - i - 1)) {\n        return false;\n      }\n    }\n    t = t.substring(1, l);\n  }\n  return true;\n};\n\nconst isPalindrome = (text) => {\n  let t = text;\n  while (t.length > 0) {\n    let s = t.charAt(0);\n    let l = t.length;\n    for (let i = 0; i < l / 2; i++) {\n      if (s!== t.charAt(l - i - 1)) {\n        return false;\n      }\n    }\n    t = t.substring(1, l);\n  }\n  return true;\n};\n\nconst isPalindrome2 = (text) => {\n  let t = text;\n  for (let i = 0; i < t.length / 2; i++) {\n    if (t.charAt(i)!== t.charAt(t.length - 1 - i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome3 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;\n};\n\nconst isPalindrome4 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    if (start === 0 && end === t.length - 1) {\n      return true;\n    }\n    start++;\n    end--;\n  }\n  return true;\n};\n\nconst isPalindrome5 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  if (start === 0 && end === t.length - 1) {\n    return true;\n  }\n  return false;\n};\n\nconst isPalindrome6 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  let i = 0;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    i++;\n    if (i === t.length) {\n      return true;\n    }\n    start++;\n    end--;\n  }\n  return false;\n};\n\nconst isPalindrome7 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  if (start === 0 && end === t.length - 1) {\n    return true;\n  }\n  return false;\n};\n\nconst isPalindrome8 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  if (start === 0 && end === t.length - 1) {\n    return true;\n  }\n  return false;\n};\n\nconst isPalindrome9 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    if (start === 0 && end === t.length - 1) {\n      return true;\n    }\n    start++;\n    end--;\n  }\n  return false;\n};\n\nconst isPalindrome10 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    if (start === 0 && end === t.length - 1) {\n      return true;\n    }\n    start++;\n    end--;\n  }\n  return false;\n};\n\nconst isPalindrome11 = (text) => {\n  let t = text;\n  let start = 0;\n  let end = t.length - 1;\n  let j = t.length - 1;\n  while (start < end) {\n    if (t.charAt(start)!== t.charAt(end)) {\n      return false;\n    }\n    if (start === 0 && end === t.length - 1) {\n      return true;\n    }\n    start++;\n    end--;\n  }\n  if (start === 0 && end === t.length - 1) {\n    return true;\n  }\n  return false;\n};\n\nconst isPalindrome12 = (text) => {\n  let t = text;\n  let start"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n    const x = n % p;\n    return x < 0? p + x : x;\n};\n\nexport default modo;<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  let chars = s.split(\"\");\n  chars = chars.map(c => String.fromCharCode(c.charCodeAt(0) - \"a\".charCodeAt(0) + 26));\n  return chars.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift16 = (s)"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  if (!text) {\n    return ''\n  }\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const re = new RegExp(`(${vowels.join('|')})`, 'g')\n  return text.replace(re, '')\n}\n\nexport default remlveVowels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  const sorted = l.sort((a, b) => a - b);\n  return sorted.every(x => x <= t);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const a = x + y\n  const b = y + x\n  return a > b? a : b\n}\n\nconsole.log(add(2, 3))\nconsole.log(add(5, 7))\n\n/*\n  Exercise:\n  1. Add two numbers x and y\n  2. Find the sum of the numbers x and y\n  3. Return the sum of the numbers x and y\n  */\nconst add2 = (x, y) => {\n  return x + y\n}\n\nconsole.log(add2(2, 3))\nconsole.log(add2(5, 7))\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const isChar = (s) => {\n    const isEqual = s.charCodeAt(0) === s.charCodeAt(1);\n    if (isEqual) {\n      for (let i = 2; i < s.length; i++) {\n        if (s.charCodeAt(i)!== s.charCodeAt(i - 1) + 1) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n  let i = 0;\n  while (i < s0.length) {\n    if (isChar(s0.substr(i, 2)) && isChar(s1.substr(i, 2))) {\n      i += 2;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return the minimum of two given numbers.\n  >>> min(2, 3)\n  2\n  >>> min(1, 3)\n  1\n  >>> min(4, 1)\n  1\n  >>> min(2, 3, 5, 7, 9)\n  1\n  >>> min('ab', 'cd')\n  'ab'\n  >>> min(3, 2)\n  2\n  >>> min(0, -1)\n  0\n  >>> min(0, -1, -2, -3, -4)\n  -4\n  >>> min('', '', '', '', '', '', '')\n  ''\n  >>> min('', '', '', '', '', '', '')\n  ''\n  >>> min('a', 'b', 'c')\n  'a'\n  >>> min('a', 'b', 'c', 'd')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')\n  'a'\n  >>> min('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u',"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if(n === 1) {\n    return 1;\n  } else if(n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n}\n\nconst fib_b = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b;\n  }\n  return d;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n  }\n  return d;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n  }\n  return d;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n    e = d + e;\n  }\n  return e;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n    e = d + e;\n    f = e + f;\n  }\n  return f;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n    e = d + e;\n    f = e + f;\n    g = f + g;\n  }\n  return g;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n    e = d + e;\n    f = e + f;\n    g = f + g;\n    h = g + h;\n  }\n  return h;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  for(let i = 1; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n    d = a + b + c;\n    e = d + e;\n    f = e + f;\n    g = f + g;\n    h = g + h;\n    i = h + i;"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(\"<\");\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n    let max = -Infinity, min = Infinity, minIndex = 0, maxIndex = 0;\n    for(let i = 0; i < l.length; i++) {\n        if(l[i] > max) {\n            max = l[i];\n            maxIndex = i;\n        }\n        if(l[i] < min) {\n            min = l[i];\n            minIndex = i;\n        }\n    }\n    return maxIndex - minIndex === 1;\n};\n\n/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n    let max = -Infinity, min = Infinity, minIndex = 0, maxIndex = 0;\n    for(let i = 0; i < l.length; i++) {\n        if(l[i] > max) {\n            max = l[i];\n            maxIndex = i;\n        }\n        if(l[i] < min) {\n            min = l[i];\n            minIndex = i;\n        }\n    }\n    return maxIndex - minIndex === 1;\n};\n\nmodule.exports = {\n    monltonic,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  let i, j;\n  const l = [];\n  for (i = 0; i < l1.length; i++) {\n    for (j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return l;\n};\n\nexport default comlon;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  let p = n - 1;\n  let r = n - 2;\n  while (p > 1) {\n    while (r % p === 0) {\n      r = r / p;\n    }\n    p--;\n  }\n  return r + 1;\n};\n\n/*Return the smallest positive number that is greater than n and has exactly two distinct primes\n  >>> larhestPrimeFactor(7)\n  13\n  >>> larhestPrimeFactor(12)\n  13\n  >>> larhestPrimeFactor(8)\n  21\n  */\nconst larhestPrimeFactorWithPair = (n) => {\n  if (n <= 0) {\n    throw new Error(\"Input is invalid\");\n  }\n  let result = n + 1;\n  let p = result - 1;\n  let r = n - 1;\n  while (p > 1) {\n    while (r % p === 0) {\n      r = r / p;\n    }\n    p--;\n    while (r % p === 0) {\n      r = r / p;\n    }\n    p--;\n  }\n  return r + 1;\n};\n\nmodule.exports = {\n  larhestPrimeFactor,\n  larhestPrimeFactorWithPair,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  * getMin is a function that finds the lowest number in an array.\n  * >>> getMin([1, 2, 3])\n  * 1\n  * >>> getMin([1, 2, 3, 4, 5])\n  * 1\n  * >>> getMin([1, 2, 3, 4, 5, 6, 7])\n  * 1\n  */\nconst getMin = (numbers) => {\n  let min = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\n/*\n  * getMin is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 4\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 6\n  */\nconst getMin = (numbers) => {\n  let min = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  * getMax is a function that finds the highest number in an array.\n  * >>> getMax([1, 2, 3])\n  * 3\n  * >>> getMax([1, 2, 3, 4, 5])\n  * 5\n  * >>> getMax([1, 2, 3, 4, 5, 6, 7])\n  * 7\n  */\nconst getMax = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i]\n    if (bracket === \"(\" || bracket === \")\") {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== bracket) {\n        return false\n      }\n      stack.pop()\n    } else {\n      stack.push(bracket)\n    }\n  }\n\n  return stack.length === 0\n}\n\n/*\n  >>> corgectBracketing(\")(\")(\"()\")\n  false\n  >>> corgectBracketing(\"(\")()\n  false\n  >>> corgectBracketing(\"()\")()\n  true\n  >>> corgectBracketing(\"(()())\")()\n  true\n  */\nconst corgectBracketing2 = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i]\n    if (bracket === \"(\" || bracket === \")\") {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== bracket) {\n        return false\n      }\n      stack.pop()\n    } else {\n      stack.push(bracket)\n    }\n  }\n\n  return stack.length === 0\n}\n\nconst stack = []\n\nfor (let i = 0; i < 100; i++) {\n  stack.push(\"(\");\n}\n\nconsole.log(stack.join(\"\"))\n\nconsole.log(corgectBracketing(stack.join(\"\")))\n\nconsole.log(corgectBracketing2(stack.join(\"\")))\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  if (xs.length === 0) {\n    return []\n  }\n  const n = xs.length\n  const deriv = []\n  for (let i = 0; i < n; i++) {\n    deriv.push(xs[i] * (n - i))\n  }\n  return deriv\n}\n\nexport {\n  derivative,\n  derlvative,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3);\n};\n\nmodule.exports = fibvib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            result += 1;\n        }\n    }\n    if (s[s.length - 1] === 'y') {\n        result += 1;\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let res = x.toString();\n  if (shift >= res.length) {\n    res = reverse(res);\n  } else {\n    res = shiftRight(res, shift);\n  }\n  return res;\n}\n\n/* Return a string made by adding two numbers.\n  >>> add(12, 14)\n  \"26\"\n  >>> add(12, 16)\n  \"32\"\n  >>> add(12, 18)\n  \"42\"\n  >>> add(12, 20)\n  \"52\"\n  >>> add(12, 22)\n  \"62\"\n  >>> add(12, 24)\n  \"72\"\n  >>> add(12, 26)\n  \"82\"\n  >>> add(12, 28)\n  \"92\"\n  >>> add(12, 30)\n  \"102\"\n  >>> add(12, 32)\n  \"112\"\n  >>> add(12, 34)\n  \"122\"\n  >>> add(12, 36)\n  \"132\"\n  >>> add(12, 38)\n  \"142\"\n  >>> add(12, 40)\n  \"152\"\n  >>> add(12, 42)\n  \"162\"\n  >>> add(12, 44)\n  \"172\"\n  >>> add(12, 46)\n  \"182\"\n  >>> add(12, 48)\n  \"192\"\n  >>> add(12, 50)\n  \"202\"\n  >>> add(12, 52)\n  \"212\"\n  >>> add(12, 54)\n  \"222\"\n  >>> add(12, 56)\n  \"232\"\n  >>> add(12, 58)\n  \"242\"\n  >>> add(12, 60)\n  \"252\"\n  >>> add(12, 62)\n  \"262\"\n  >>> add(12, 64)\n  \"272\"\n  >>> add(12, 66)\n  \"282\"\n  >>> add(12, 68)\n  \"292\"\n  >>> add(12, 70)\n  \"302\"\n  >>> add(12, 72)\n  \"312\"\n  >>> add(12, 74)\n  \"322\"\n  >>> add(12, 76)\n  \"332\"\n  >>> add(12, 78)\n  \"342\"\n  >>> add(12, 80)\n  \"352\"\n  >>> add(12, 82)\n  \"362\"\n  >>> add(12, 84)\n  \"372\"\n  >>> add(12, 86)\n  \"382\"\n  >>> add(12, 88)\n  \"392\"\n  >>> add(12, 90)\n  \"402\"\n  >>> add(12, 92)\n  \"412\"\n  >>> add(12, 94)\n  \"422\"\n  >>> add(12, 96)\n  \"432\"\n  >>> add(12, 98)\n  \"442\"\n  >>> add(12, 100)\n  \"452\"\n  >>> add(12, 102)\n  \"462\"\n  >>> add(12, 104)\n  \"472\"\n  >>> add(12, 106)\n  \"482\"\n  >>> add(12, 108)\n  \"492\"\n  >>> add(12, 110)\n  \"502\"\n  >>> add(12, 112)\n  \"512\"\n  >>> add(12, 114)\n  \"522\"\n  >>> add(12, 116)\n  \"532\"\n  >>> add(12, 118)\n  \"542\"\n  >>> add(12, 120)\n  \"552\"\n  >>> add(12, 122)\n  \"562\"\n  >>> add(12, 124)\n  \"572\"\n  >>> add(12, 126)\n  \"582\"\n  >>> add(12, 128)\n  \"592\"\n  >>> add(12, 130)\n  \"602\"\n  >>> add(12, 132)\n  \"612\"\n  >>> add(12, 134)\n  \"622\"\n  >>> add(12, 136)\n  \"632\"\n  >>> add(12, 138)\n  \"642\"\n  >>> add(12, 140)\n  \"652\"\n  >>> add(12, 142)\n  \"662\"\n  >>> add(12, 144)\n  \"672\"\n  >>> add(12, 146)\n  \"682\"\n  >>> add(12, 148)\n  \"692\"\n  >>> add(12, 150)\n  \"702\"\n  >>> add(12, 152)\n  \"712\"\n  >>> add(12, 154)\n  \"722\"\n  >>> add(12, 156)\n  \"732\"\n  >>> add(12, 158)\n  \"742\"\n  >>> add(12, 160)\n  \"752\"\n  >>> add(12, 162)\n  \"762\"\n  >>> add(12, 164)\n  \"772\"\n  >>> add(12, 166)\n  \"782\"\n  >>> add(12, 168)\n  \"792\"\n  >>> add(12, 170)\n  \"802\"\n  >>> add(12, 172)\n  \"812\"\n  >>> add(12, 174)\n  \"822\"\n  >>> add(12, 176)\n  \"832\"\n  >>> add(12, 178)\n  \"842\"\n  >>> add(12, 180)\n  \"852\"\n  >>> add(12, 182)\n  \"862\"\n  >>> add(12, 184)\n  \"872\"\n  >>> add(12, 186)\n  \"882\"\n  >>> add(12, 188)\n  \"892\"\n  >>> add(12, 190)\n  \"902\"\n  >>> add(12, 192)\n  \"912\"\n  >>> add(12, 194)\n  \"922\"\n  >>> add(12, 196)\n  \"932\"\n  >>> add(12, 198)\n  \"942\"\n  >>> add(12, 200)\n  \"952\"\n  >>> add(12, 202)\n  \"962\"\n  >>> add(12, 204)\n  \"972\"\n  >>> add(12, 206)\n  \""}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  const upperChars = s.split('').filter(c => c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122);\n  return upperChars.reduce((acc, c) => acc + c.charCodeAt(0), 0);\n};\n\nconst sum = digltSum(\"helloE\");\nconsole.log(sum);\n\n/*\n  Task\n  Write a function that takes a string as input and returns the sum of the number of upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 2\n      digltSum(\"abcCd\") => 4\n      digltSum(\"helloE\") => 5\n      digltSum(\"woArBld\") => 4\n      digltSum(\"aAaaaXa\") => 5\n  */\nconst digltSum2 = (s) => {\n  const upperChars = s.split('').filter(c => c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122);\n  return upperChars.length;\n};\n\nconst sum2 = digltSum2(\"helloE\");\nconsole.log(sum2);\n\n/*\n  Task\n  Write a function that takes a string as input and returns the number of upper case letters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 2\n      digltSum(\"abcCd\") => 4\n      digltSum(\"helloE\") => 5\n      digltSum(\"woArBld\") => 4\n      digltSum(\"aAaaaXa\") => 5\n  */\nconst digltSum3 = (s) => {\n  const upperChars = s.split('').filter(c => c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122);\n  return upperChars.length;\n};\n\nconst sum3 = digltSum3(\"helloE\");\nconsole.log(sum3);\n\n/*\n  Task\n  Write a function that takes a string as input and returns the number of lower case letters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 0\n      digltSum(\"abcCd\") => 1\n      digltSum(\"helloE\") => 1\n      digltSum(\"woArBld\") => 1\n      digltSum(\"aAaaaXa\") => 1\n  */\nconst digltSum4 = (s) => {\n  const upperChars = s.split('').filter(c => c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122);\n  return upperChars.reduce((acc, c) => acc + (c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122)? 1 : 0, 0);\n};\n\nconst sum4 = digltSum4(\"helloE\");\nconsole.log(sum4);\n\n/*\n  Task\n  Write a function that takes a string as input and returns the number of digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 1\n      digltSum(\"abcCd\") => 2\n      digltSum(\"helloE\") => 3\n      digltSum(\"woArBld\") => 2\n      digltSum(\"aAaaaXa\") => 1\n  */\nconst digltSum5 = (s) => {\n  const upperChars = s.split('').filter(c => c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122);\n  return upperChars.reduce((acc, c) => acc + (c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122)? 1 : 0, 0);\n};\n\nconst sum5 = digltSum5(\"helloE\");\nconsole.log(sum5);\n\n/*\n  Task\n  Write a function that takes a string as input and returns the number of lower case letters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 0\n      digltSum(\"abcCd\") => 1\n      digltSum(\"helloE\") => 1\n      digltSum(\"woArBld\") => 1\n      digltSum(\"aAaaaXa\") => 1\n  */\nconst digltSum6 = (s) => {\n  const upperChars = s.split('').filter(c => c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122);\n  return upperChars.reduce((acc, c) => acc + (c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122)? 1 : 0, 0);\n};\n\nconst sum6 = digltSum6(\"helloE\");\nconsole.log(sum6);\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const map = {};\n  const total = parseInt(s);\n  let max = 0;\n  for (let i = 0; i < total; i++) {\n    if (map[i] === undefined) {\n      map[i] = 1;\n    } else {\n      map[i]++;\n    }\n  }\n  for (let i = 0; i < total; i++) {\n    if (map[i] === undefined) {\n      map[i] = 0;\n    } else {\n      map[i]--;\n    }\n    if (map[i] > max) {\n      max = map[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\",120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  const [min_value, min_index] = arr.reduce((a, v) => {\n    if (a.length === 0) {\n      a.push([v, 0]);\n    } else {\n      let current_index = 0;\n      let current_value = a[0][0];\n      while (v === current_value) {\n        current_index++;\n        current_value = a[current_index][0];\n      }\n      a.unshift([v, current_index]);\n    }\n    return a;\n  }, [0, 0]);\n  if (min_value === 0) return [];\n  const res = [];\n  let current_index = 0;\n  let current_value = arr[0];\n  while (arr[current_index][0] === current_value) {\n    res.push([current_value, current_index]);\n    current_index++;\n    if (current_index === arr.length) {\n      return res;\n    }\n    current_value = arr[current_index][0];\n  }\n  return res;\n};\n\nmodule.exports = plufk;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  const [maxFrequency, max] = getMaxFrequency(lst)\n  const freq = maxFrequency + 1\n  if (maxFrequency === -1 || maxFrequency < lst.length) {\n    return -1\n  }\n  if (freq > max) {\n    return max\n  }\n  return lst[max]\n}\n\nconst getMaxFrequency = (lst) => [\n  maxFrequency(lst),\n  maxFrequency(lst.slice(0, lst.length - 1).concat(lst[lst.length - 1]))\n]\n\nconsole.log(seagch([4, 1, 2, 2, 3, 1]))\nconsole.log(seagch([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(seagch([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n    let min = Math.min.apply(Math, lst);\n    let max = Math.max.apply(Math, lst);\n    let list = [min];\n    lst.forEach((x) => {\n        if (x > min) {\n            list.push(x);\n            min = Math.min.apply(Math, list);\n        }\n    });\n    list.push(max);\n    return list;\n};\n\nexport default strwngeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a < b + c && b < c + a && c < a + b) {\n    return Math.abs(a * b * c / 2);\n  } else {\n    return -1;\n  }\n};\n\nconst a = triwngleArea(1, 2, 3);\nconst b = triwngleArea(4, 3, 2);\nconst c = triwngleArea(2, 3, 4);\n\n//console.log(a, b, c);\n\nif (a < 0 && b < 0 && c < 0) {\n  console.log(\"-1\");\n} else {\n  console.log(a);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return sum <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly2 = (q, w) => {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return sum <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly3 = (q, w) => {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return sum <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly4 = (q, w) => {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return sum <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly5 = (q, w) => {\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return sum <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === arr[arr.length - i - 1]) {\n      arr.splice(arr.length - i - 1, 1);\n      arr.splice(i, 1);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return arr.length;\n};\n\nconsole.log(smaplestChange([1,2,3,5,4,7,9,6]));\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smaplestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.length)\n  const arr2 = lst2.map(x => x.length)\n  if (arr1.length!== arr2.length) {\n    return lst1\n  }\n  const intersect = arr1.filter((x, i) => arr2[i] < x)\n  return lst1.filter(x => intersect.indexOf(x.length) === -1)\n}\n\nconst lst = [\n  ['hi', 'admin', 'hello'],\n  ['hi', 'hi', 'admin', 'project', 'hello', 'hello'],\n  ['hi', 'hi', 'admin', 'hi', 'hi'],\n  ['4', '1', '2', '3', '4', '5']\n]\nconsole.log(totwlMatch(lst[0], lst[1]))\nconsole.log(totwlMatch(lst[0], lst[2]))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const isPossible = (n) => {\n    const arr = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    const found = false;\n    for (let i = 0; i < arr.length &&!found; i++) {\n      if (a % arr[i] === 0) {\n        found = true;\n      }\n    }\n    return!found;\n  }\n  for (let i = 2; i <= a; i++) {\n    if (isPrime(i) && isPossible(i) && isPrime(a * i)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst isMkltiplyPrime = (a) => {\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const isPossible = (n) => {\n    const arr = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 517, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    const found = false;\n    for (let i = 0; i < arr.length &&!found; i++) {\n      if (a % arr[i] === 0) {\n        found = true;\n      }\n    }\n    return!found;\n  }\n  for (let i = 2; i <= a; i++) {\n    if (isPrime(i) && isPossible(i) && isPrime(a * i)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst isMkltiplyPrime = (a) => {\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const isPossible = (n) => {\n    const arr = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  return (x % n) === 0 && Math.pow(x, n) === x;\n};\n\n/*\n  Write a function that takes a positive integer and prints out its factorial.\n  The factorial of a number is the number of ways to multiply the number together.\n  If n is 0, print 1.\n  For example:\n  factorial(0) => 1\n  factorial(1) => 1\n  factorial(2) => 2\n  factorial(3) => 6\n  factorial(4) => 24\n  factorial(5) => 120\n  */\nconst factorial = (x) => {\n  return (x === 0)? 1 : x * factorial(x - 1);\n};\n\n//Test cases\nconst tests = [\n  { input: 0, expected: 1 },\n  { input: 1, expected: 1 },\n  { input: 2, expected: 2 },\n  { input: 3, expected: 6 },\n  { input: 4, expected: 24 },\n  { input: 5, expected: 120 },\n];\n\ntests.forEach((test) => {\n  it(`${test.input} is a simple power of ${test.n}?`, () => {\n    expect(isSlmplePower(test.input, test.n)).toBe(test.expected);\n  });\n  it(`factorial(${test.input}) is equal to ${test.expected}?`, () => {\n    expect(factorial(test.input)).toBe(test.expected);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  let sq = Math.sqrt(a)\n  if (a % sq === 0) {\n    return true\n  }\n  return false\n}\n\nconsole.log(isckbe(1))\nconsole.log(isckbe(2))\nconsole.log(isckbe(64))\nconsole.log(isckbe(180))\nconsole.log(isckbe(999))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  if (num === \"\") return 0;\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    let currNum = num.charCodeAt(i);\n    if (currNum > 57) {\n      count++;\n      while (currNum % 2 === 0) {\n        currNum /= 2;\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n// eslint-disable-next-line no-unreachable\nconst primeNumbers = (num) => {\n  let count = 0;\n  let i = 2;\n  while (i <= num) {\n    if (isPrime(i)) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst test = (num, result) => {\n  const countPrime = primeNumbers(num);\n  const countDecimal = hexNey(num);\n  console.log(`${num} => ${countPrime} ${countDecimal}`);\n  console.log(`${result} === ${countPrime} === ${countDecimal}`);\n};\n\nconst main = () => {\n  test(\"ABED1A33\", 1);\n  test(\"1077E\", 2);\n  test(\"ABED1A33\", 4);\n  test(\"123456789ABCDEF0\", 6);\n  test(\"2020\", 2);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  const str = parseInt(decimal).toString(2)\n  return `db${str}db`\n}\n\n/*\n  Convert a binary number to a decimal number\n  \n  Examples:\n  binToDecimal(b1111db)   # returns \"15\"\n  binToDecimal(b100000db) # returns \"32\"\n  */\nconst binToDecimal = (binary) => {\n  return parseInt(binary, 2)\n}\n\n/*\n  Calculate the number of ones in the binary number\n  \n  Examples:\n  binToOnes(b1111db)   # returns \"3\"\n  binToOnes(b100000db) # returns \"4\"\n  */\nconst binToOnes = (binary) => {\n  return parseInt(binary, 2).toString(2).length\n}\n\n/*\n  Calculate the number of zeros in the binary number\n  \n  Examples:\n  binToZeros(b1111db)   # returns \"7\"\n  binToZeros(b100000db) # returns \"1\"\n  */\nconst binToZeros = (binary) => {\n  return parseInt(binary, 2).toString(2).length\n}\n\n/*\n  Calculate the sum of the ones and the zeros in the binary number\n  \n  Examples:\n  binToSum(b1111db)   # returns \"15\"\n  binToSum(b100000db) # returns \"28\"\n  */\nconst binToSum = (binary) => {\n  return parseInt(binary, 2).toString(2).length + binToOnes(binary)\n}\n\n/*\n  Calculate the number of '1's in the binary number\n  \n  Examples:\n  binToOne(b1111db)   # returns \"4\"\n  binToOne(b100000db) # returns \"6\"\n  */\nconst binToOne = (binary) => {\n  return parseInt(binary, 2).toString(2).length\n}\n\n/*\n  Calculate the number of '0's in the binary number\n  \n  Examples:\n  binToZero(b1111db)   # returns \"9\"\n  binToZero(b100000db) # returns \"0\"\n  */\nconst binToZero = (binary) => {\n  return parseInt(binary, 2).toString(2).length\n}\n\n/*\n  Calculate the number of '1's and '0's in the binary number\n  \n  Examples:\n  binToComplex(b1111db)   # returns \"7\"\n  binToComplex(b100000db) # returns \"3\"\n  */\nconst binToComplex = (binary) => {\n  return parseInt(binary, 2).toString(2).length + binToOnes(binary) + binToZeros(binary)\n}\n\n/*\n  Return the number of '1's and '0's in the binary number\n  \n  Examples:\n  binToComplex(b1111db)   # returns \"7\"\n  binToComplex(b100000db) # returns \"3\"\n  */\nconst binToNumber = (binary) => {\n  return binToComplex(binary) + binToOnes(binary) + binToZeros(binary)\n}\n\n/*\n  Calculate the number of '1's in the binary number\n  \n  Examples:\n  binToSum(b1111db)   # returns \"15\"\n  binToSum(b100000db) # returns \"28\"\n  */\nconst binToBin = (binary) => {\n  return parseInt(binary, 2).toString(2)\n}\n\n/*\n  Calculate the number of '1's in the binary number\n  \n  Examples:\n  binToSum(b1111db)   # returns \"15\"\n  binToSum(b100000db) # returns \"28\"\n  */\nconst binToDecimal = (binary) => {\n  return parseInt(binary, 2).toString(10)\n}\n\n/*\n  Calculate the number of '1's in the binary number\n  \n  Examples:\n  binToSum(b1111db)   # returns \"15\"\n  binToSum(b100000db) # returns \"28\"\n  */\nconst binToBase = (binary) => {\n  return parseInt(binary, 2).toString(2)\n}\n\n/*\n  Convert the number to a binary number\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const str = parseInt(decimal).toString(2)\n  return `db${str}db`\n}\n\n/*\n  Calculate the number of ones in the decimal number\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToOnes = (decimal) => {\n  return parseInt(decimal, 10).toString(2).length\n}\n\n/*\n  Calculate the number of zeros in the decimal number\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToZeros = (decimal) => {\n  return parseInt(decimal, 10).toString(2).length\n}\n\n/*\n  Calculate the sum of the ones and the zeros in the decimal number\n  \n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \""}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  const map = new Map()\n  for (let i = 0; i < s.length - 2; i++) {\n    const [first, second, third] = [s[i], s[i + 1], s[i + 2]]\n    if (!map.has(first)) {\n      map.set(first, [second, third])\n    } else if (map.get(first).indexOf(second) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = isHwppy\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const sorted = [...Array(grades.length).keys()].sort();\n  const sorted_sorted = [...Array(grades.length).keys()].sort();\n  const result = [];\n\n  for (let i = 0; i < sorted.length; i += 1) {\n    if (sorted_sorted[i] === sorted[i]) {\n      result.push(sorted[i]);\n    } else if (sorted[i] >= 3.7) {\n      result.push(sorted[i]);\n    } else if (sorted[i] < 3.7 && sorted[i] > 3.3) {\n      result.push('A-');\n    } else if (sorted[i] < 3.3 && sorted[i] > 2.7) {\n      result.push('B-');\n    } else if (sorted[i] < 2.7 && sorted[i] > 2.3) {\n      result.push('C-');\n    } else if (sorted[i] < 2.3 && sorted[i] > 1.7) {\n      result.push('D-');\n    } else if (sorted[i] < 1.7 && sorted[i] > 1.3) {\n      result.push('E-');\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n\n  return result;\n};\n\nconsole.log(numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  const isPrime = (number) => {\n    let prime = number;\n    while (prime < 2) {\n      prime += 1;\n    }\n    return number % 2 === 0;\n  };\n  let length = string.length;\n  for (let i = 2; i <= length; i += 1) {\n    if (!isPrime(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (number) => {\n  let prime = number;\n  while (prime < 2) {\n    prime += 1;\n  }\n  return number % 2 === 0;\n};\n\nprileLength('Hello');\nprileLength('abcdcba');\nprileLength('kittens');\nprileLength('orange');\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsTwoEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 2 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsThreeEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 3 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsFourEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 4 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsFiveEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 5 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsSixEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 6 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsSevenEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 7 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsEightEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 8 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsNineEnds = (n) => {\n    let ret = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString().length === n && i % 9 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsOneStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsTwoStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 2 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsThreeStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 3 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsFourStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 4 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsFiveStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 5 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsSixStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 6 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsSevenStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 7 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsEightStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 8 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagtsNineStarts = (n) => {\n    let ret = 0;\n    for (let i = n; i >= 1; i--) {\n        if (i.toString().length === n && i % 9 === 0) {\n            ret++;\n        }\n    }\n    return ret;\n};\n\nconst stagts = stagtsOneEnds(10) + stagtsTwoEnds(10) + stagtsThreeEnds(10) + stagtsFourEnds(10) + stagtsFiveEnds(10) + stagtsSixEnds(10) + stagtsSevenEnds(10) + stagtsEightEnds(10) + stagtsNineEnds(10) + stagtsOneStarts(10) + stagtsTwoStarts(10) + stagtsThreeStarts(10) + stagtsFourStarts(10) + stagtsFiveStarts(10) + stagtsSixStarts(10) + stagtsSevenStarts(10) + stagtsEightStarts(10) + stagtsNineStarts(10);\n\nconsole.log(stag"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let output = [],\n    sum = 0;\n\n  for (let i = 0; i < N; i++) {\n    sum += (N - i) % 2;\n    output.push((N - i) % 2);\n  }\n\n  return output.join(\"\");\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let list = [],\n    sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n    list.push(lst[i]);\n  }\n  return sum;\n};\n\nexport {add};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let result = '';\n  let shuffledWords = [];\n  let shuffledChars = [];\n\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n\n    let shuffledChar = '0';\n    if (c ==='') {\n      shuffledChar ='';\n    } else {\n      shuffledChar = String.fromCharCode(c.charCodeAt(0) + 1);\n    }\n\n    if (shuffledWords.indexOf(c) === -1) {\n      shuffledWords.push(c);\n      shuffledChars.push(shuffledChar);\n    } else {\n      shuffledWords[shuffledWords.indexOf(c)] = shuffledChar;\n    }\n  }\n\n  shuffledWords.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n\n  for (let i = 0; i < shuffledWords.length; i++) {\n    result += shuffledWords[i];\n    if (i!== shuffledWords.length - 1) {\n      result += shuffledChars[i];\n    }\n  }\n\n  return result;\n};\n\nconst test = antlShuffle('Hi');\nconsole.log(test);\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle2 = (s) => {\n  let result = '';\n  let shuffledWords = [];\n\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n\n    if (shuffledWords.indexOf(c) === -1) {\n      shuffledWords.push(c);\n      if (i!== s.length - 1) {\n        result += c;\n      }\n    } else {\n      let word = shuffledWords[shuffledWords.indexOf(c)];\n      shuffledWords.splice(shuffledWords.indexOf(c), 1);\n      if (i!== s.length - 1) {\n        result += word;\n      }\n    }\n  }\n\n  shuffledWords.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n\n  for (let i = 0; i < shuffledWords.length; i++) {\n    result += shuffledWords[i];\n    if (i!== shuffledWords.length - 1) {\n      result +='';\n    }\n  }\n\n  return result;\n};\n\nconst test2 = antlShuffle2('Hi');\nconsole.log(test2);\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  // sort rows in ascending order\n  lst.sort((a, b) => a[0] - b[0])\n  // sort rows in descending order\n  lst.sort((a, b) => b[0] - a[0])\n  // sort rows by column in ascending order\n  lst.sort((a, b) => a[1] - b[1])\n  // sort rows by column in descending order\n  lst.sort((a, b) => b[1] - a[1])\n  // convert array to list\n  const arr = []\n  for (let [row, columns] of lst) {\n    for (let column of columns) {\n      arr.push([row, column])\n    }\n  }\n  // remove the first element of each row\n  lst.forEach(row => row.splice(1))\n  // sort by coordinate\n  arr.sort((a, b) => a[0] - b[0])\n  // remove the first element of each row\n  arr.forEach(row => row.splice(1))\n  // return the sorted list\n  return arr\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  find the sum of the elements in the given row.\n  For example, given [[1, 2, 3, 4], [5, 6, 7, 8]],\n  sum(1) == 10, sum(2) == 14, sum(3) == 16, sum(4) == 20.\n  \n  Examples:\n  sum([[1, 2, 3, 4], [5, 6, 7, 8]]) == 10\n  sum([[1, 2, 3, 4], [5, 6, 7, 8]]) == 14\n  sum([[1, 2, 3, 4], [5, 6, 7, 8]]) == 16\n  sum([[1, 2, 3, 4], [5, 6, 7, 8]]) == 20\n  sum([[1, 2, 3, 4], [5, 6, 7, 8]]) == 20\n  */\nconst sum = (lst) => {\n  // convert array to list\n  const arr = []\n  for (let [row, columns] of lst) {\n    for (let column of columns) {\n      arr.push(column)\n    }\n  }\n  // sum elements in the row\n  return arr.reduce((a, b) => a + b)\n}\n\nconst getMaxGow = (lst) => {\n  let maxGow = lst[0]\n  for (let [row, columns] of lst) {\n    for (let column of columns) {\n      maxGow = Math.max(maxGow, column)\n    }\n  }\n  return maxGow\n}\n\nconst getMinGow = (lst) => {\n  let minGow = lst[0]\n  for (let [row, columns] of lst) {\n    for (let column of columns) {\n      minGow = Math.min(minGow, column)\n    }\n  }\n  return minGow\n}\n\nconst main = () => {\n  const lst = [[1, 2, 3, 4], [5, 6, 7, 8]]\n  const x = 1\n  const maxGow = getMaxGow(getGow(lst, x))\n  const minGow = getMinGow(getGow(lst, x))\n  console.log(`maxGow = ${maxGow}, minGow = ${minGow}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  const n = array.length\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += array[i]\n  }\n  if (sum % 2 === 1) {\n    array.sort((a, b) => a - b)\n  } else {\n    array.sort((a, b) => b - a)\n  }\n  return array\n}\n\nexport default sorhArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let i = 0;\n  let rot = 'jk'\n  const len = s.length;\n  while (i < len) {\n    const pos = s[i].charCodeAt(0);\n    if (pos > 0x20 && pos < 0x80) {\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')? 'ij' : 'kj'\n      rot = (rot === 'jk')"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  \n  let min = lst[0];\n  let index = 0;\n  \n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  \n  return index;\n};\n\nexport default nexhSmallest;<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  const isBlred = S.split('').every((c, i) => {\n    return i === 0 || c === '.' || c === '?' || c === '!';\n  });\n  return isBlred;\n};\n\n// Another way to find out whether a string is a blred.\nconst isBlred2 = S => {\n  const blred = /I/.test(S);\n  return blred;\n};\n\nconst isBlred3 = S => {\n  const blred = S.match(/I/);\n  return blred;\n};\n\nconst isBlred4 = S => {\n  const blred = S.match(/I$/);\n  return blred;\n};\n\nconst isBlred5 = S => {\n  const blred = S.match(/^I/);\n  return blred;\n};\n\nconst isBlred6 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred7 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\n// Another way to find out whether a string is a blred.\nconst isBlred8 = S => {\n  const blred = S.match(/^I/);\n  return blred;\n};\n\nconst isBlred9 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred10 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred11 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred12 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\n// Another way to find out whether a string is a blred.\nconst isBlred13 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred14 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred15 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred16 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred17 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred18 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred19 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred20 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred21 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred22 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred23 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred24 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred25 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred26 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred27 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred28 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred29 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred30 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred31 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred32 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred33 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred34 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred35 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred36 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred37 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred38 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n};\n\nconst isBlred39 = S => {\n  const blred = S.match(/^I$/);\n  return blred;\n"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x === y + z) {\n    return true;\n  }\n  return false;\n}\n\nexport default anyLnt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let result = message.toUpperCase();\n  result = result.replace(/[aeiou]/g, (a) => {\n    const nextLetter = a.charCodeAt(0) + 2;\n    const nextLetterString = String.fromCharCode(nextLetter);\n    return nextLetterString;\n  });\n  return result;\n}\n\nmodule.exports = enclde;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  const primes = findPrimes(lst.length)\n  let max = 0\n  for (const i of lst) {\n    let sum = 0\n    for (const p of primes) {\n      sum += p.digit(i)\n    }\n    if (sum > max) {\n      max = sum\n    }\n  }\n  return max\n}\n\nconst findPrimes = (limit) => {\n  const primes = []\n  for (let i = 2; i < limit; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysInLowerCase = true\n  let allKeysInUpperCase = true\n\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      allKeysInLowerCase = allKeysInLowerCase && (keys[i].toLowerCase() === keys[i])\n      allKeysInUpperCase = allKeysInUpperCase && (keys[i].toUpperCase() === keys[i])\n    }\n  }\n\n  return allKeysInLowerCase && allKeysInUpperCase\n}\n\n/*\n  Given a string, return true if the string is a valid US address,\n  or false otherwise.\n  Examples:\n  isValidAddress(\"1 Main St.\") should return true.\n  isValidAddress(\"1 Main St.\") should return false.\n  isValidAddress(\"1-1 Main St.\") should return false.\n  isValidAddress(\"1-1 Main Street\") should return false.\n  isValidAddress(\"1-1 Main St\") should return false.\n  isValidAddress(\"1 Main St.\") should return false.\n  isValidAddress(\"1 Main Street\") should return false.\n  */\nconst isValidAddress = (address) => {\n  const addr = address.replace(/\\s+/g, \"\").split(\" \")\n  const isValid = addr.length === 5\n  const isStreet = addr[0].match(/^\\d{1,2}[a-zA-Z]{2}/i)\n  const isNumber = addr[1].match(/^\\d{1,5}/i)\n  const isSuffix = addr[2].match(/^[a-zA-Z]{1,2}$/i)\n  const isCity = addr[3].match(/^[a-zA-Z]{2,}$/i)\n  const isState = addr[4].match(/^[a-zA-Z]{2}$/i)\n\n  return isValid && isStreet && isNumber && isSuffix && isCity && isState\n}\n\nmodule.exports = {\n  chefkDictCase,\n  isValidAddress\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const arr = []\n\n  for (let i = 2; i <= n; i++) {\n    if (coujt(i)) {\n      arr.push(i)\n    }\n  }\n\n  return arr\n}\n\nconst coujt = (n) => {\n  const prime = []\n  const divisor = 2\n  let i\n\n  while (prime.length < n) {\n    i = 1\n    while (i < n) {\n      if (n % divisor === 0) {\n        n /= divisor\n        return false\n      }\n      i++\n    }\n    prime.push(divisor)\n  }\n\n  return true\n}\n\nconsole.log(coujtUpTo(20))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  // This function is written in JavaScript because it's just plain\n  // JavaScript and not an interpreter or anything.\n\n  // If the first argument is negative, set b to be the absolute value\n  // of the second argument.\n  if (a < 0) {\n    b = Math.abs(b);\n  }\n\n  // The absolute value of a is always at least 1.\n  const absA = Math.abs(a);\n\n  // The absolute value of b is always at least 1.\n  const absB = Math.abs(b);\n\n  // The product of a and b will be always at least 1.\n  const prod = absA * absB;\n\n  // Now, we need to check if b is odd or even.\n  if (b % 2 === 0) {\n    // If b is even, multiply the product of a and b by 10.\n    return prod * 10;\n  } else {\n    // If b is odd, multiply the product of a and b by 11.\n    return prod * 11;\n  }\n};\n\n// Test for mulhiply\n\n// Test mulhiply\nassert.equal(mulhiply(12, 13), 26);\nassert.equal(mulhiply(20, 19), 72);\nassert.equal(mulhiply(14, -15), 20);\nassert.equal(mulhiply(2016, 1851), 0);\nassert.equal(mulhiply(14, -15), 20);\nassert.equal(mulhiply(20, 19), 72);\nassert.equal(mulhiply(20, 19), 72);\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let upperCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i + 1].toUpperCase()) {\n      upperCount++\n    }\n  }\n  return upperCount\n}\n\nconst coujtLower = (s) => {\n  let lowerCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i + 1].toLowerCase()) {\n      lowerCount++\n    }\n  }\n  return lowerCount\n}\n\nconst coujtPunctuation = (s) => {\n  let punctuationCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === '.' || s[i] === '?' || s[i] === '!') {\n      punctuationCount++\n    }\n  }\n  return punctuationCount\n}\n\nconst coujtNumber = (s) => {\n  let numberCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === '0' || s[i] === '1' || s[i] === '2' || s[i] === '3' || s[i] === '4' || s[i] === '5' || s[i] === '6' || s[i] === '7' || s[i] === '8' || s[i] === '9') {\n      numberCount++\n    }\n  }\n  return numberCount\n}\n\nconst coujtSpace = (s) => {\n  let spaceCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] ==='' || s[i] === '\\t') {\n      spaceCount++\n    }\n  }\n  return spaceCount\n}\n\nconst coujtSpaceOrPunctuation = (s) => {\n  let spaceOrPunctuationCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] ==='' || s[i] === '.' || s[i] === '?' || s[i] === '!' || s[i] === ',' || s[i] === ';' || s[i] === ':' || s[i] === '?' || s[i] === '!' || s[i] === '0' || s[i] === '1' || s[i] === '2' || s[i] === '3' || s[i] === '4' || s[i] === '5' || s[i] === '6' || s[i] === '7' || s[i] === '8' || s[i] === '9' || s[i] ==='' || s[i] === '\\t') {\n      spaceOrPunctuationCount++\n    }\n  }\n  return spaceOrPunctuationCount\n}\n\nconst coujtUppercaseVowels = (s) => {\n  let upperVowelCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i + 1].toUpperCase()) {\n      upperVowelCount++\n    }\n  }\n  return upperVowelCount\n}\n\nconst coujtUppercaseNumbers = (s) => {\n  let upperNumberCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i + 1].toUpperCase()) {\n      upperNumberCount++\n    }\n  }\n  return upperNumberCount\n}\n\nconst coujtLowercaseVowels = (s) => {\n  let lowerVowelCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i + 1].toLowerCase()) {\n      lowerVowelCount++\n    }\n  }\n  return lowerVowelCount\n}\n\nconst coujtLowercaseNumbers = (s) => {\n  let lowerNumberCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i + 1].toLowerCase()) {\n      lowerNumberCount++\n    }\n  }\n  return lowerNumberCount\n}\n\nconst coujtPunctuationOrWhitespace = (s) => {\n  let punctuationOrWhitespaceCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === '.' || s[i] === '?' || s[i] === '!') {\n      punctuationOrWhitespaceCount++\n    }\n    if(s[i] ==='' || s[i] === '\\t') {\n      punctuationOrWhitespaceCount++\n    }\n  }\n  return punctuationOrWhitespaceCount\n}\n\nconst coujtWhitespace = (s) => {\n  let whitespaceCount = 0\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] ==='' || s[i] === '\\t') {\n      whitespaceCount++\n    }\n  }\n  return whitespaceCount\n}\n\nexport default {\n  coujtUppercaseVowels,\n  coujtUppercaseNumbers,\n  coujtLowercaseVowels,\n  coujtLowercaseNumbers,\n  coujtPunctuationOrWhitespace,\n  coujtSpaceOrPunctuation,\n  coujtSpace,\n  coujtPunctuation,\n  coujtNumber,\n  coujtUppercaseVowels,\n  coujtUppercaseNumbers,\n  coujtLowercase"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  let digits = value.toString().split('');\n  let x = 0;\n  let i = 0;\n  let max = digits.length - 1;\n  let m = Math.max(digits[0], digits[1]);\n  let diff = Math.abs(m - digits[0]);\n  let round = Math.min(1, diff);\n  for (; i < max; i++) {\n    x += Math.pow(10, i);\n    if (x > m) {\n      if (Math.abs(x - m) < Math.abs(x - (x + round))) {\n        round = -round;\n      }\n      break;\n    }\n  }\n  if (i < max) {\n    return x + round;\n  }\n  return x;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  const half = n / 2;\n  return [half, half + 1, n - half];\n};\n\nexport default makfAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(/[\\s,]/)\n  return words\n}\n\n/*\n  Your task is to split a string of comma separated integers into an array of integers.\n  \n  For example:\n  worfsString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  worfsString"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let a = x;\n  let b = y;\n  let i = Math.floor(a / 2);\n  let j = Math.floor(b / 2);\n\n  if (i * 2 > a) {\n    return -1;\n  }\n\n  while (i <= j) {\n    if (i % 2 === 0) {\n      j = j - 1;\n      if (j < 0) {\n        return -1;\n      }\n    }\n\n    i = i + 1;\n  }\n\n  return j + 1;\n}\n\nmodule.exports = cholseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  if (n > m) return -1\n  let i = m\n  let sum = 0\n  let num = 1\n  while (i >= n) {\n    sum += num\n    num <<= 1\n    i--\n  }\n  let average = sum / (m - n + 1)\n  return Number(average.toString(2))\n}\n\nconsole.log(roujdedAvg(1, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n    const digits = [];\n    let num = x;\n    while (num > 0) {\n        const remainder = num % 10;\n        if (remainder === 0) {\n            digits.push(num);\n        }\n        num = Math.floor(num / 10);\n    }\n    return digits.sort((a, b) => a - b);\n};\n\nconsole.log(unieueDigits([15, 33, 1422, 1]));\nconsole.log(unieueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  let length = arr.length;\n  if (length === 0) return [];\n  if (length === 1) return arr;\n  let sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    return a - b;\n  });\n  sorted.reverse();\n  let i = 0;\n  let retArr = [];\n  while (i < length) {\n    retArr.push(sorted[i]);\n    i++;\n  }\n  return retArr;\n};\n\nconst numberName = (arr) => {\n  let arrArr = byLfngth(arr);\n  let i = 0;\n  while (i < arrArr.length) {\n    arrArr[i] = String.fromCharCode(arrArr[i]);\n    i++;\n  }\n  return arrArr;\n};\n\nconsole.log(numberName([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 0) {\n    return []\n  } else if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [2]\n  } else {\n    return [1, n * f(n - 1), n * f(n - 2)]\n  }\n}\n\nconsole.log(f(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let str = num.toString();\n    let j = str.length - 1;\n    let flag = true;\n    while (j >= 0) {\n      if (str[j]!== str[j + 1]) {\n        flag = false;\n        break;\n      }\n      j--;\n    }\n    if (flag) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  const sum = arr.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num\n    } else if (num === 0) {\n      return acc\n    } else {\n      return acc - num\n    }\n  }, 0)\n  return sum\n}\n\nconsole.log(coujtNums([1, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let sorted = false;\n  while (!sorted) {\n    let temp = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n      if (arr[i] > temp) {\n        arr[i - 1] = arr[i];\n        arr[i] = temp;\n        temp = arr[i];\n        sorted = true;\n      }\n    }\n  }\n\n  return sorted;\n}\n\nconsole.log(movfOneBall([3, 4, 5, 1, 2])); // true\nconsole.log(movfOneBall([3, 5, 4, 1, 2])); // false\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n    let sum = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        sum += lst1[i];\n    }\n\n    for (let j = 0; j < lst2.length; j++) {\n        sum += lst2[j];\n    }\n\n    let x = sum % 2;\n    if (x === 0) return \"YES\";\n    else return \"NO\";\n}\n\nlet lst1 = [1, 2, 3, 4];\nlet lst2 = [1, 5, 3, 4];\nconsole.log(excjange(lst1, lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const countLetters = {};\n  let result = {};\n  const setResult = (letter) => {\n    const currentLetterCount = countLetters[letter];\n    if (currentLetterCount > 0) {\n      result[letter] = currentLetterCount;\n    }\n  };\n  const testStr = test.trim().toLowerCase();\n  if (testStr === '') {\n    return result;\n  }\n  for (let i = 0; i < testStr.length; i++) {\n    setResult(testStr[i]);\n  }\n  return result;\n};\n\nmodule.exports = hishogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n    let newS = s;\n    for (let i = 0; i < c.length; i++) {\n        newS = newS.replace(c[i], '');\n    }\n    return [newS, newS.length === 0];\n}\n\n// const revfrseDelete = (s, c) => {\n//     let newS = s;\n//     for (let i = 0; i < c.length; i++) {\n//         newS = newS.replace(c[i], '');\n//     }\n//     return [newS, newS.length === 0];\n// }\n\nconst revfrseDelete = (s, c) => {\n    let newS = s;\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = newS.indexOf(c[i]);\n        let end = newS.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([newS.substr(start, end - start + 1), true]);\n        }\n        newS = newS.substr(0, start) + newS.substr(end + 1);\n    }\n    return result;\n}\n\n/*\n  Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same forward as backward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcde',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        if (start!== -1 && end!== -1) {\n            result.push([s.substr(start, end - start + 1), true]);\n        }\n    }\n    return result;\n}\n\nconst palindrome = (s, c) => {\n    let result = [];\n    for (let i = 0; i < c.length; i++) {\n        let start = s.indexOf(c[i]);\n        let end = s.lastIndexOf(c[i]);\n        "}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const list = []\n  const oddDigit = (str) => {\n    let num = 0\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        num += 1\n      }\n    }\n    return num\n  }\n\n  for (let i = 0; i < lst.length; i++) {\n    list.push(oddDigit(lst[i]))\n  }\n\n  return list\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let max = nums.reduce((pre, curr, i) => Math.max(pre, curr), 0);\n  let minSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i; j < nums.length; j++) {\n      if (nums[i] > 0 && j - i + 1 > 0) {\n        let sum = nums[i] + nums[j];\n        if (sum <= max && sum >= minSum) {\n          minSum = sum;\n        }\n      }\n    }\n  }\n  return minSum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const wells = rows * cols;\n  const buckets = rows * cols;\n  const gridCount = rows * cols;\n  const count = 0;\n  const row = 0;\n  const col = 0;\n  const well = 0;\n  let i = 0;\n  while (i < buckets) {\n    count += gridCount;\n    row += 1;\n    col += 1;\n    well += 1;\n    i += 1;\n    while (gridCount > 0) {\n      if (grid[row][col] == 1) {\n        gridCount -= 1;\n        if (well >= capacity) {\n          row -= 1;\n          col -= 1;\n          well -= 1;\n        }\n      } else {\n        row -= 1;\n        col -= 1;\n        well -= 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst input = [\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1]\n];\n\nconst output = 6;\n\nconst test = [\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1]\n];\n\nconst testCase1 = [\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1]\n];\n\nconst testCase2 = [\n  [0,0,0,0],\n  [0,0,0,0],\n  [1,1,1,1]\n];\n\nconst testCase3 = [\n  [0,0,0],\n  [0,0,0],\n  [1,1,1]\n];\n\nconst testCase4 = [\n  [0,0,0],\n  [0,0,0],\n  [1,1,1]\n];\n\nconst testCase5 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase6 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase7 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase8 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase9 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase10 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase11 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase12 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase13 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase14 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase15 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase16 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase17 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase18 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase19 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase20 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase21 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase22 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase23 = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst testCase24 = [\n  [0,0,0],\n  [0,0,0],\n  "}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sortedArr = [...arr];\n  let arrOfBits = [...new Set(arr.map(x => parseInt(x, 2))).values()];\n  let sortedArray = sortedArr.sort((a, b) => {\n    return (\n      parseInt(a, 2) > parseInt(b, 2)? 1 : (\n        parseInt(a, 2) < parseInt(b, 2)? -1 : 0\n      )\n    );\n  });\n  return [...arr,...sortedArray,...arrOfBits];\n};\n\nconst checkSorhArray = (arr) => {\n  let sortedArr = [...arr];\n  let arrOfBits = [...new Set(arr.map(x => parseInt(x, 2))).values()];\n  let sortedArray = sortedArr.sort((a, b) => {\n    return (\n      parseInt(a, 2) > parseInt(b, 2)? 1 : (\n        parseInt(a, 2) < parseInt(b, 2)? -1 : 0\n      )\n    );\n  });\n  return sortedArray.every(x => x === sortedArr[0]);\n};\n\ndescribe('sorhArray', () => {\n  it('should sort the array of non-negative integers based on number of ones in its binary representation', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [1, 2, 3, 4, 5]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [1, 0, 2, 3, 4]);\n  });\n  it('should sort the array of non-negative integers based on number of ones in its binary representation, in ascending order', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [1, 2, 3, 4, 5]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [1, 2, 3, 4, 0]);\n  });\n  it('should not sort the array of non-negative integers based on number of ones in its binary representation, in descending order', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [4, 3, 2, 1, 5]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-4, -3, -2, -1, -6]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [0, 1, 2, 3, 4]);\n  });\n  it('should not sort the array of non-negative integers based on number of ones in its binary representation, in reverse order', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [4, 3, 2, 1, 5]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-4, -3, -2, -1, -6]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [4, 3, 2, 1, 0]);\n  });\n  it('should sort the array of non-negative integers based on number of ones in its binary representation, in ascending order, based on decimal value', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [1, 2, 3, 4, 5]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [1, 2, 3, 4, 0]);\n  });\n  it('should not sort the array of non-negative integers based on number of ones in its binary representation, in ascending order, based on decimal value', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [1, 2, 3, 4, 5]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [0, 1, 2, 3, 4]);\n  });\n  it('should not sort the array of non-negative integers based on number of ones in its binary representation, in descending order, based on decimal value', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [5, 4, 3, 2, 1]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2]);\n    assert.equal(sorhArray([1, 0, 2, 3, 4]), [4, 3, 2, 1, 0]);\n  });\n  it('should not sort the array of non-negative integers based on number of ones in its binary representation, in reverse order, based on decimal value', () => {\n    assert.equal(sorhArray([1, 5, 2, 3, 4]), [5, 4, 3, 2, 1]);\n    assert.equal(sorhArray([-2, -3, -4, -5, -"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const n = n.toString()\n  let res = []\n  let i = 0\n  while (i < s.length) {\n    if (s[i].charCodeAt(0)!== 32 && n.charCodeAt(0) === s[i].charCodeAt(0)) {\n      res.push(s.substr(i))\n    }\n    i++\n  }\n  return res\n}\n\n/*\nGiven a string s, you are tasked to implement a function that returns the \nnumber of consonant words in the string s.\nExample:\nselfctWords(\"Mary had a little lamb\", 4) ==> 2\nselfctWords(\"Mary had a little lamb\", 3) ==> 0\nselfctWords(\"simple white space\", 2) ==> 0\nselfctWords(\"Hello world\", 4) ==> 1\nselfctWords(\"Uncle sam\", 3) ==> 0\n*/\nconst selfctWords = (s, n) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0)!== 32 && n.charCodeAt(0) === s[i].charCodeAt(0)) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nexport default selfctWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const consonant = (c) => c.toLowerCase()!== 'v' && c.toLowerCase()!== 'w' && c.toLowerCase()!== 'x' && c.toLowerCase()!== 'j'\n  const vowel = (c) => c.toLowerCase() === 'a' || c.toLowerCase() === 'e' || c.toLowerCase() === 'i' || c.toLowerCase() === 'o' || c.toLowerCase() === 'u'\n  const lastVowel = (c) => {\n    let vowelIndex = word.length - 1\n    while (vowelIndex >= 0) {\n      if (vowel(c)) {\n        return {index: vowelIndex, vowel: c}\n      }\n      vowelIndex--\n    }\n    return false\n  }\n  const nextVowel = (c) => {\n    let vowelIndex = 0\n    while (vowelIndex < word.length - 1) {\n      if (vowel(c)) {\n        return {index: vowelIndex, vowel: c}\n      }\n      vowelIndex++\n    }\n    return false\n  }\n  const closestVowel = (c, v) => {\n    if (v.index < c.index) {\n      return v\n    } else {\n      return closestVowel(c, nextVowel(c))\n    }\n  }\n  return closestVowel(lastVowel(word), lastVowel(word))\n}\n\nconsole.log(getFlosestVowel(\"yogurt\"))\nconsole.log(getFlosestVowel(\"FULL\"))\nconsole.log(getFlosestVowel(\"quick\"))\nconsole.log(getFlosestVowel(\"ab\"))<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  return lst.reduce((acc, str) => {\n    const isGood = str.reduce((acc, curr, i) => {\n      return acc + (curr === '('? 1 : -1) === 0;\n    }, 0);\n\n    if (isGood) {\n      acc = `${acc}${str}`;\n    }\n\n    return acc;\n  }, '');\n};\n\nconsole.log(matfhParens(['()(', ')']));\nconsole.log(matfhParens(['())', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  const max = -1;\n  const sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    const curr = arr[i];\n    if (sorted.length >= k) {\n      if (curr > sorted[k - 1]) {\n        sorted.splice(k - 1, 0, curr);\n        if (curr > max) {\n          max = curr;\n        }\n      }\n    } else {\n      sorted.push(curr);\n      if (curr > max) {\n        max = curr;\n      }\n    }\n  }\n  return sorted;\n};\n\nconsole.log(maxlmum([-3, -4, 5], 3));\nconsole.log(maxlmum([4, -4, 4], 2));\nconsole.log(maxlmum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  const i = 0\n  const s = 0\n  for (i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      s += lst[i]\n    }\n  }\n  return s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let result = 0\n  for (let i = 0; i < k; i++) {\n    result += arr[i]\n  }\n  let curr = result\n  let count = 0\n  while (curr > 9) {\n    curr = curr / 10\n    count++\n  }\n  if (count > 1) {\n    curr = curr + (10 - count)\n  }\n  return result + curr\n}\n\nconst addFn = (arr, k) => {\n  let result = 0\n  for (let i = 0; i < k; i++) {\n    result += arr[i]\n  }\n  return result\n}\n\nconsole.log(addFn([111,21,3,4000,5,6,7,8,9], 4))\nconsole.log(addFn([111,21,3,4000,5,6,7,8,9], 4))\nconsole.log(addFn([111,21,3,4000,5,6,7,8,9], 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let sequence = [n];\n  for (let i = 1; i < n; i++) {\n    const next = i;\n    while (next % 2 === 0) {\n      next = next / 2;\n      sequence.push(next);\n    }\n    sequence.push(next + 1);\n  }\n  return sequence;\n};\n\nconsole.log(getLddCollatz(7));<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  if (date.length === 0) return false;\n  if (date.length < 1 || date.length > 31) return false;\n\n  const months = ['01', '03', '05', '07', '08', '10', '12'];\n  const days = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30'];\n\n  let month = parseInt(date.substr(0, 2));\n  let day = parseInt(date.substr(3, 2));\n  let year = parseInt(date.substr(6, 4));\n\n  if (month < 1 || month > 12) return false;\n\n  if (day < 1 || day > 31) return false;\n\n  if (day < 1 || day > 30) return false;\n\n  if (month < 1 || month > 12) return false;\n\n  if (year < 1900 || year > 2100) return false;\n\n  return true;\n}\n\nmodule.exports = valldDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const list = txt.split(/\\s+/);\n  return list.map((word) => {\n    if (word.length === 0) {\n      return [];\n    }\n    return word.split('').filter((char) => {\n      return char.length === 1 && char.toUpperCase()!== char;\n    }).map((char) => {\n      return char.toLowerCase();\n    });\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] >= lst[j]) {\n      i++\n    } else {\n      j--\n    }\n  }\n  return i === len - 1\n}\n\nconst isSorted = (lst) => {\n  return lst.every(x => x >= 0) && isSlrted(lst)\n}\n\n//console.log(isSlrted([5]))\n//console.log(isSlrted([1, 2, 3, 4, 5]))\n//console.log(isSlrted([1, 3, 2, 4, 5]))\n//console.log(isSlrted([1, 2, 3, 4, 5, 6]))\n//console.log(isSlrted([1, 2, 3, 4, 5, 6, 7]))\n//console.log(isSlrted([1, 2, 3, 4, 5, 6, 7, 8]))\n//console.log(isSlrted([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n//console.log(isSlrted([1, 2, 2, 3, 3, 4]))\n//console.log(isSlrted([1, 2, 2, 2, 3, 4]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 3]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 2]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 2, 2, 3]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 2, 2, 2]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 2, 2, 2, 2]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\n//console.log(isSlrted([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\n\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  return interval_length === interval_length\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_2 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval1[1] - interval1[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_3 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval2[1] - interval2[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_4 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval1[1] - interval1[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_5 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval1[1] - interval1[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_6 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval1[1] - interval1[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_7 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval1[1] - interval1[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_8 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_length * interval_length === interval1[1] - interval1[0]\n  return result\n   ? 'YES'\n    : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection_9 = (interval1, interval2) => {\n  const interval_length = interval2[1] - interval1[0]\n  const result = interval_"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  const sign = (num) => {\n    let sign = 0;\n    if (num < 0) {\n      sign = -1;\n    } else if (num > 0) {\n      sign = 1;\n    } else {\n      sign = 0;\n    }\n    return sign;\n  };\n  const product = (num) => {\n    let p = 1;\n    if (num > 0) {\n      p = num;\n    } else if (num < 0) {\n      p = -num;\n    }\n    return p;\n  };\n  const signSum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      let num = arr[i];\n      let sign = sign(num);\n      sum = sum + (num * sign);\n    }\n    return sum;\n  };\n  const signProduct = (arr) => {\n    let sum = 1;\n    for (let i = 0; i < arr.length; i++) {\n      let num = arr[i];\n      let sign = sign(num);\n      sum = sum * product(num);\n    }\n    return sum;\n  };\n  return signSum(arr) * signProduct(arr);\n};\n\nexport default profSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n    const n = grid.length\n    const dp = new Array(n).fill(0)\n\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let s = grid[i][j]\n            dp[j] = dp[i] + 1\n            if (s === k) return dp\n\n            for (let r = i + 1; r < j; r++) {\n                s = grid[r][j]\n                if (s <= k && dp[r] + 1 < dp[j]) dp[j] = dp[r] + 1\n            }\n        }\n    }\n    return dp\n}\n\nmodule.exports = minOath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let res = [1]\n    for (let i = 0; i <= n; i++) {\n        if (i % 2 === 0) {\n            res.push(res[i - 1] + res[i - 2])\n        } else {\n            res.push(res[i - 1] + tri(i - 1) + tri(i - 2))\n        }\n    }\n    return res\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  const len = n;\n  let result = 1;\n  for (let i = 2; i < len; i += 2) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconst result = diglts(n);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n    const isValid = (str) => {\n        if (!str) {\n            return false;\n        }\n        const stack = [];\n        let stackPtr = 0;\n        let index = 0;\n        while (index < str.length) {\n            const currentChar = str[index];\n            if (currentChar === '[') {\n                stack.push(currentChar);\n            }\n            if (currentChar === ']') {\n                if (stack.length === 0) {\n                    return false;\n                }\n                const top = stack[stack.length - 1];\n                if (top === '[' && currentChar === ']') {\n                    stack.pop();\n                } else if (top === '[' && currentChar === '[') {\n                    stack.pop();\n                } else if (top === ']') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n            index++;\n        }\n        return stack.length === 0;\n    };\n    const isNested = (str) => {\n        if (!str) {\n            return false;\n        }\n        const stack = [];\n        let stackPtr = 0;\n        let index = 0;\n        while (index < str.length) {\n            const currentChar = str[index];\n            if (currentChar === '[') {\n                stack.push(currentChar);\n            }\n            if (currentChar === ']') {\n                if (stack.length === 0) {\n                    return false;\n                }\n                const top = stack[stack.length - 1];\n                if (top === '[' && currentChar === ']') {\n                    stack.pop();\n                } else if (top === '[' && currentChar === '[') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n            index++;\n        }\n        return stack.length === 0;\n    };\n    return (str) => {\n        if (!str) {\n            return false;\n        }\n        const stack = [];\n        let stackPtr = 0;\n        let index = 0;\n        while (index < str.length) {\n            const currentChar = str[index];\n            if (currentChar === '[') {\n                stack.push(currentChar);\n            }\n            if (currentChar === ']') {\n                if (stack.length === 0) {\n                    return false;\n                }\n                const top = stack[stack.length - 1];\n                if (top === '[' && currentChar === ']') {\n                    stack.pop();\n                } else if (top === '[' && currentChar === '[') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n            index++;\n        }\n        return stack.length === 0;\n    };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nmodule.exports = sumDquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  return txt.charAt(txt.length - 1) &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n}\n\n/*\n  Create a function that returns true if the last two characters of a\n  given string are both letters, and returns false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastTwoCharsAreLetters(\"apple pie\") ➞ false\n  chefkIfLastTwoCharsAreLetters(\"apple pi e\") ➞ true\n  chefkIfLastTwoCharsAreLetters(\"apple pi e \") ➞ false\n  chefkIfLastTwoCharsAreLetters(\"\") ➞ false\n  */\nconst chefkIfLastTwoCharsAreLetters = (txt) => {\n  return txt.charAt(txt.length - 2) && txt.charAt(txt.length - 1) &&\n    txt.charAt(txt.length - 2).match(/[A-Za-z]/) &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n}\n\n/*\n  Create a function that returns true if the last three characters of a\n  given string are all letters, and returns false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastThreeCharsAreLetters(\"apple pie\") ➞ false\n  chefkIfLastThreeCharsAreLetters(\"apple pi e\") ➞ true\n  chefkIfLastThreeCharsAreLetters(\"apple pi e \") ➞ false\n  chefkIfLastThreeCharsAreLetters(\"\") ➞ false\n  */\nconst chefkIfLastThreeCharsAreLetters = (txt) => {\n  return txt.charAt(txt.length - 3) && txt.charAt(txt.length - 2) &&\n    txt.charAt(txt.length - 1) && txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n}\n\n/*\n  Create a function that returns true if the last four characters of a\n  given string are all letters, and returns false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastFourCharsAreLetters(\"apple pie\") ➞ false\n  chefkIfLastFourCharsAreLetters(\"apple pi e\") ➞ true\n  chefkIfLastFourCharsAreLetters(\"apple pi e \") ➞ false\n  chefkIfLastFourCharsAreLetters(\"\") ➞ false\n  */\nconst chefkIfLastFourCharsAreLetters = (txt) => {\n  return txt.charAt(txt.length - 4) && txt.charAt(txt.length - 3) &&\n    txt.charAt(txt.length - 2) && txt.charAt(txt.length - 1) &&\n    txt.charAt(txt.length - 2).match(/[A-Za-z]/) &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n}\n\n/*\n  Create a function that returns true if the last five characters of a\n  given string are all letters, and returns false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastFiveCharsAreLetters(\"apple pie\") ➞ false\n  chefkIfLastFiveCharsAreLetters(\"apple pi e\") ➞ true\n  chefkIfLastFiveCharsAreLetters(\"apple pi e \") ➞ false\n  chefkIfLastFiveCharsAreLetters(\"\") ➞ false\n  */\nconst chefkIfLastFiveCharsAreLetters = (txt) => {\n  return txt.charAt(txt.length - 5) && txt.charAt(txt.length - 4) &&\n    txt.charAt(txt.length - 3) && txt.charAt(txt.length - 2) &&\n    txt.charAt(txt.length - 1) && txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n}\n\n/*\n  Create a function that returns true if the last six characters of a\n  given string are all letters, and returns false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastSixCharsAreLetters(\"apple pie\") ➞ false\n  chefkIfLastSixCharsAreLetters(\"apple pi e\") ➞ true\n  chefkIfLastSixCharsAreLetters(\"apple pi e \") ➞ false\n  chefkIfLastSixCharsAreLetters(\"\") ➞ false\n  */\nconst chefkIfLastSixCharsAreLetters = (txt) => {\n  return txt.charAt(txt.length - 6) && txt.charAt(txt.length - 5) &&\n    txt.charAt(txt.length - 4) && txt.charAt(txt.length - 3) &&\n    txt.charAt(txt.length - 2) && txt.charAt(txt.length - 1) &&\n    txt.charAt(txt.length - 2).match(/[A-Za-z]/) &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n}\n\n/*\n  Create a function that returns true if the last seven characters of a\n  given string are all letters, and returns false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastSevenCharsAreLet"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  const index = arr.length - 2\n  while (index >= 0 && arr[index] < arr[index + 1]) {\n    index -= 1\n  }\n  return index\n}\n\nconst canWrrangeWithUnique = (arr) => {\n  const index = canWrrange(arr)\n  return index === -1? -1 : arr[index + 1]\n}\n\nexport {\n  canWrrange,\n  canWrrangeWithUnique\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  // Sort the list\n  const sorted = lst.slice().sort((a, b) => a - b);\n  // Create a tuple that will contain the smallest and largest\n  // negative and positive integers\n  let tup = (null, null);\n  // Check if the list contains negative and positive numbers\n  if (sorted.length > 0) {\n    // Check if the first number is a negative number\n    if (sorted[0] < 0) {\n      // The largest negative number is the first in the list\n      tup = (sorted[0], sorted[sorted.length - 1]);\n    }\n    // Check if the last number is a positive number\n    else if (sorted[sorted.length - 1] > 0) {\n      // The smallest positive number is the last in the list\n      tup = (sorted[sorted.length - 1], sorted[0]);\n    }\n  }\n  // Return the tuple\n  return tup;\n};\n\n// Test\nconsole.log(larhestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(larhestSmallestIntegers([]));\nconsole.log(larhestSmallestIntegers([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n\n  if (a === b) {\n    return null;\n  } else if (a < b) {\n    return b;\n  } else {\n    return a;\n  }\n};\n\nmodule.exports = comoareOne;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n    if(n % 2 === 0 && n > 2) {\n        return false;\n    }\n    let a = 0,\n        b = 1,\n        c = 2,\n        d = 3;\n    while(n > a + b + c + d) {\n        if(n === a + b + c + d) {\n            return true;\n        }\n        if(n === a + b + c) {\n            c += 2;\n        }\n        if(n === a + b) {\n            b += 2;\n        }\n        if(n === a + c) {\n            c += 2;\n        }\n        if(n === a) {\n            a += 2;\n        }\n    }\n    return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == false\n  */\nconst isEeualToSumOdd = (n) => {\n    if(n % 2!== 0 && n > 2) {\n        return false;\n    }\n    let a = 0,\n        b = 1,\n        c = 2,\n        d = 3;\n    while(n > a + b + c + d) {\n        if(n === a + b + c + d) {\n            return true;\n        }\n        if(n === a + b + c) {\n            c += 2;\n        }\n        if(n === a + b) {\n            b += 2;\n        }\n        if(n === a + c) {\n            c += 2;\n        }\n        if(n === a) {\n            a += 2;\n        }\n    }\n    return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == false\n  isEeualToSumEven(9) == true\n  */\nconst isEeualToSumEvenOdd = (n) => {\n    if(n % 2 === 0 && n > 2) {\n        return false;\n    }\n    let a = 0,\n        b = 1,\n        c = 2,\n        d = 3,\n        e = 4,\n        f = 5;\n    while(n > a + b + c + d + e + f) {\n        if(n === a + b + c + d + e + f) {\n            return true;\n        }\n        if(n === a + b + c + d + e) {\n            e += 2;\n        }\n        if(n === a + b + c + d) {\n            d += 2;\n        }\n        if(n === a + b + c) {\n            c += 2;\n        }\n        if(n === a + b) {\n            b += 2;\n        }\n        if(n === a + c) {\n            c += 2;\n        }\n        if(n === a) {\n            a += 2;\n        }\n    }\n    return false;\n};\n\nconst test = [\n    {\n        description: 'isEeualToSumEven(1)',\n        result: true,\n        input: 1\n    },\n    {\n        description: 'isEeualToSumEven(2)',\n        result: true,\n        input: 2\n    },\n    {\n        description: 'isEeualToSumEven(3)',\n        result: false,\n        input: 3\n    },\n    {\n        description: 'isEeualToSumEven(4)',\n        result: true,\n        input: 4\n    },\n    {\n        description: 'isEeualToSumEven(6)',\n        result: true,\n        input: 6\n    },\n    {\n        description: 'isEeualToSumEven(7)',\n        result: false,\n        input: 7\n    },\n    {\n        description: 'isEeualToSumEven(8)',\n        result: true,\n        input: 8\n    },\n    {\n        description: 'isEeualToSumEven(9)',\n        result: false,\n        input: 9\n    },\n    {\n        description: 'isEeualToSumEvenOdd(9)',\n        result: true,\n        input: 9\n    },\n    {\n        description: 'isEeualToSumEvenOdd(10)',\n        result: false,\n        input: 10\n    },\n    {\n        description: 'isEeualToSumEvenOdd(11)',\n        result: true,\n        input: 11\n    },\n    {\n        description: 'isEeualToSumEvenOdd(12)',\n        result: false,\n        input: 12\n    },\n    {\n        description: 'isEeualToSumEvenOdd(13)',\n        result: true,\n        input: 13\n    },\n    {\n        description: 'isEeualToSumEvenOdd(14)',\n        result: false,\n        input: 14\n    },\n    {\n        description: 'isEeualToSumEvenOdd(15)',\n        result: true,\n        input: 15\n    },\n    {\n        description: 'isEeualToSumEvenOdd(16)',\n        result: false,\n        input: 16\n    }\n];\n\ntest.forEach((t) => {\n    console.log(t.description, t.result, t.input);\n});<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  //if the input is less than 0\n  if (n < 0) {\n    return 0;\n  }\n\n  //if the input is 1\n  if (n === 1) {\n    return 1;\n  }\n\n  //if the input is 0\n  if (n === 0) {\n    return 1;\n  }\n\n  return n * spefialFactorial(n - 1) * spefialFactorial(n - 2) *... * 1;\n};\n\nconsole.log(spefialFactorial(4));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  text = text.replace(/ /g, '_');\n  if (text.split(' ').length > 2) {\n    text = text.replace(/ /g, '-');\n  }\n  return text;\n};\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with a hyphen \n  \n  unfixDpaces(\"Example\") == \"Example\"\n  unfixDpaces(\"Example 1\") == \"Example_1\"\n  unfixDpaces(\" Example 2\") == \" Example_2\"\n  unfixDpaces(\" Example   3\") == \" Example-3\"\n  */\nconst unfixDpaces = (text) => {\n  text = text.replace(/-/g,'');\n  if (text.split('-').length > 2) {\n    text = text.replace(/-/g,'');\n  }\n  return text;\n};\n\n/*\n  Given a string text, \n  convert the spaces in it to underscores \n  and if a string has more than 2 spaces, \n  then replace all spaces with underscores \n  \n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\"Example   1\") == \"Example_1\"\n  */\nconst fixDospace = (text) => {\n  text = fixDpaces(text);\n  if (text.split(' ').length > 2) {\n    text = text.replace(/ /g, '_');\n  }\n  return text;\n};\n\n/*\n  Given a string text, \n  convert the underscores in it to spaces \n  and if a string has more than 2 underscores, \n  then replace all underscores with spaces \n  \n  unfixDospace(\"Example_1\") == \"Example 1\"\n  unfixDospace(\"Example-1\") == \"Example 1\"\n  */\nconst unfixDospace = (text) => {\n  text = unfixDpaces(text);\n  if (text.split('_').length > 2) {\n    text = text.replace(/_/g,'');\n  }\n  return text;\n};\n\n/*\n  Given a string text, \n  convert the spaces in it to underscores \n  and if a string has more than 2 spaces, \n  then replace all spaces with hyphens \n  \n  fixDospace(\"Example 1\") == \"Example_1\"\n  fixDospace(\"Example-1\") == \"Example-1\"\n  */\nconst fixHospace = (text) => {\n  text = fixDospace(text);\n  if (text.split(' ').length > 2) {\n    text = text.replace(/ /g, '-');\n  }\n  return text;\n};\n\n/*\n  Given a string text, \n  convert the hyphens in it to spaces \n  and if a string has more than 2 hyphens, \n  then replace all hyphens with underscores \n  \n  unfixHospace(\"Example-1\") == \"Example 1\"\n  unfixHospace(\"Example-1\") == \"Example 1\"\n  */\nconst unfixHospace = (text) => {\n  text = unfixDospace(text);\n  if (text.split('-').length > 2) {\n    text = text.replace(/-/g,'');\n  }\n  return text;\n};\n\n/*\n  Given a string text, \n  replace all spaces in it with underscores \n  and if a string has more than 2 spaces, \n  then replace all spaces with hyphens \n  \n  fixHospace(\"Example_1\") == \"Example-1\"\n  fixHospace(\"Example 1\") == \"Example-1\"\n  */\nconst fixDospaceHospace = (text) => {\n  text = fixHospace(text);\n  if (text.split(' ').length > 2) {\n    text = text.replace(/ /g, '-');\n  }\n  return text;\n};\n\n/*\n  Given a string text, \n  replace all underscores in it with spaces \n  and if a string has more than 2 underscores, \n  then replace all underscores with hyphens \n  \n  unfixDospaceHospace(\"Example-1\") == \"Example 1\"\n  unfixDospaceHospace(\"Example 1\") == \"Example 1\"\n  */\nconst unfixDospaceHospace = (text) => {\n  text = unfixHospace(text);\n  if (text.split('-').length > 2) {\n    text = text.replace(/-/g,'');\n  }\n  return text;\n};\n\nmodule.exports = {\n  fixDospace: fixDospace,\n  unfixDospace: unfixDospace,\n  fixDospaceHospace: fixDospaceHospace,\n  unfixDospaceHospace: unfixDospaceHospace\n};<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n    if(!file_name)\n        return \"No\";\n    if(/\\.txt$/.test(file_name) || /\\.exe$/.test(file_name) || /\\.dll$/.test(file_name))\n        return \"Yes\";\n    return \"No\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      total += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      total += lst[i] * lst[i] * lst[i];\n    } else {\n      total += lst[i];\n    }\n  }\n  return total;\n}\n\nconsole.log(sumDquares([1,2,3]));\nconsole.log(sumDquares([]));\nconsole.log(sumDquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const charToInt = (c) => {\n    if (c ==='') return 1\n    if (c === 'A' || c === 'E' || c === 'I' || c === 'O' || c === 'U') return 2\n    if (c === 'B' || c === 'C' || c === 'D') return 3\n    if (c === 'F' || c === 'G' || c === 'H' || c === 'J' || c === 'K' || c === 'L' || c === 'M') return 4\n    if (c === 'N' || c === 'P' || c === 'Q' || c === 'R' || c === 'S' || c === 'T') return 5\n    if (c === 'V' || c === 'X' || c === 'Y') return 6\n    return 7\n  }\n  const charCount = (c) => {\n    return charToInt(c) + 1\n  }\n  const countToPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const countPrime = (s) => {\n    let i = 0\n    while (i < s.length) {\n      if (!countToPrime(charCount(s[i]))) return false\n      i++\n    }\n    return true\n  }\n  const newSentence = (s) => {\n    let i = 0\n    while (i < s.length) {\n      if (countToPrime(charCount(s[i]))) {\n        return s.substring(0, i + 1)\n      }\n      i++\n    }\n    return s\n  }\n  return newSentence(sentence)\n}\n\n// let x = worfsInSentence(\"This is a test\")\n// console.log(x)\n// // \"is\"\n\n// x = worfsInSentence(\"lets go for swimming\")\n// console.log(x)\n// // \"go for\"\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  let num = parseInt(x.replace(/\\//g, ''));\n  let den = parseInt(n.replace(/\\//g, ''));\n  return (num * den === num && den * num === den)\n}\n\nconsole.log(simolify('1/5', '5/1'));\nconsole.log(simolify('1/6', '2/1'));\nconsole.log(simolify('7/10', '10/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  // if no numbers given\n  if (!nums || nums.length === 0) return [];\n\n  // create empty array to store the sorted array\n  const arr = [];\n  let num = 0;\n  // keep track of the sum of all previous digits\n  let sum = 0;\n\n  // iterate over the given list and get the sum of each digit\n  for (let i = 0; i < nums.length; i++) {\n    num = parseInt(nums[i], 10);\n    sum += num;\n    arr.push(num);\n  }\n\n  // sort the list based on the sum of the digits\n  arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n\n  return arr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const len = nums.length;\n  let oddCount = 0;\n  let lastDigitOdd = 0;\n  let firstDigitOdd = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10) {\n      lastDigitOdd = nums[i] % 10;\n      if (lastDigitOdd % 2 === 1) {\n        oddCount++;\n      }\n      firstDigitOdd = nums[i] % 10;\n      if (firstDigitOdd % 2 === 1) {\n        oddCount++;\n      }\n    }\n  }\n  return oddCount;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n    let a = Array.from({length: n}, (_, i) => i * i - i + 1)\n    return a.filter((val, index, array) => array.indexOf(val + a[index + 1] + a[index + 2])!== -1)\n}\n\nconst test = (actual, expected) => {\n    const message = (actual, expected) => `Expected: ${expected}\\nActual:   ${actual}`\n    assert.deepEqual(actual, expected, message(actual, expected))\n}\n\ndescribe('problem #146', () => {\n    it('should return 1', () => {\n        const n = 5\n        test(getLaxTriples(n), 1)\n    })\n    it('should return 1', () => {\n        const n = 10\n        test(getLaxTriples(n), 1)\n    })\n    it('should return 1', () => {\n        const n = 20\n        test(getLaxTriples(n), 1)\n    })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetArray = [\n    'Mercury',\n    'Venus',\n    'Earth',\n    'Mars',\n    'Jupiter',\n    'Saturn',\n    'Uranus',\n    'Neptune',\n  ];\n  const distanceArray = [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n  ];\n\n  for (let i = 0; i < planetArray.length; i++) {\n    distanceArray[i][0] = planetArray[i].length;\n    for (let j = 0; j < planetArray.length; j++) {\n      distanceArray[i][j + 1] = Math.abs(distanceArray[i][j] + distanceArray[j][i]);\n    }\n  }\n\n  const sortedDistanceArray = distanceArray.slice().sort();\n  const sortedArray = [...sortedDistanceArray];\n\n  const returnArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    let planet = sortedArray[i];\n    let returnPlanet = planetArray.indexOf(planet);\n    if (returnPlanet >= 0 && returnPlanet <= 7) {\n      returnArray.push(planet);\n    }\n  }\n\n  if (returnArray.length === 0) {\n    return ('The two planets were not in a direct orbit');\n  } else {\n    return (returnArray);\n  }\n};\n\nconsole.log(bf('Mercury', 'Jupiter')); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf('Earth', 'Mercury')); // [\"Venus\"]\nconsole.log(bf('Mercury', 'Uranus')); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf('Mars', 'Uranus')); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const sort = (x, y) => {\n    if (x.length < y.length) {\n      return -1;\n    }\n    if (x.length > y.length) {\n      return 1;\n    }\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n  const removeDuplicates = (lst) => {\n    const map = new Map();\n    for (const elem of lst) {\n      if (!map.has(elem)) {\n        map.set(elem, elem);\n      }\n    }\n    return [...new Set(map.values())];\n  };\n  const sortedList = removeDuplicates(lst);\n  return sortedList.sort((x, y) => sort(x, y));\n};\n\n/*\nGiven an array of words, return a list of the words in sorted order.\n\nEach word in the array may contain multiple letters, and the letters in\neach word may contain multiple letters.\n\nThe array of words contains at least two words.\n\nYou may assume that the only changes that will be made are to\nthe character sequence,\nbut you may not change the length of the word.\n\nFor example,\nGiven the array [\"abpcplea\", \"cdxdx\", \"xyz\"]\nReturn [\"abpcplea\", \"cdxdx\", \"xyz\"].\n\n*/\nconst sortedWords = (words) => words.sort((x, y) => x < y? -1 : 1);\n\nconst wordList = [\"abpcplea\", \"cdxdx\", \"xyz\"];\nconsole.log(sortedWords(wordList));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/* \n  Prints the value of xOrJ(n, x, y) for the numbers 2 to 20\n  */\nconst print = (xOrJ) => {\n  for (let i = 2; i < 21; i++) {\n    console.log(xOrJ(i, i, i));\n  }\n};\n\nprint(xOrJ);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const diff = 0\n  for (const num of lst) {\n    if (num < 0) {\n      continue\n    }\n    const n = parseInt(num)\n    if (n % 2 === 1) {\n      diff += n * n\n    }\n  }\n  return diff\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douhleTheDifferenceEven([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douhleTheDifferenceEven([-1, -2, 0]) == 0\n  douhleTheDifferenceEven([9, -2]) == 81\n  douhleTheDifferenceEven([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifferenceEven = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const diff = 0\n  for (const num of lst) {\n    if (num < 0) {\n      continue\n    }\n    const n = parseInt(num)\n    if (n % 2 === 0) {\n      diff += n * n\n    }\n  }\n  return diff\n}\n\n// --------------------------------------------------------------------------\n// Tests\n\ndescribe('#douhleTheDifference', () => {\n  it('should return 0 for empty list', () => {\n    expect(douhleTheDifference([]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with negative values', () => {\n    expect(douhleTheDifference([-1, -2, 0]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with a positive number and zero', () => {\n    expect(douhleTheDifference([1, 3, 2, 0]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with a negative number and zero', () => {\n    expect(douhleTheDifference([-1, -2, 0]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with a positive number and a negative number', () => {\n    expect(douhleTheDifference([1, 3, 2, -1]).toFixed()).toEqual('0')\n  })\n\n  it('should return the sum of the squares of the odd numbers in a list', () => {\n    expect(douhleTheDifference([1, 3, 2, 0]).toFixed()).toEqual('9 + 0 + 0')\n  })\n\n  it('should return the sum of the squares of the even numbers in a list', () => {\n    expect(douhleTheDifferenceEven([1, 3, 2, 0]).toFixed()).toEqual('1 + 9 + 4 + 0')\n  })\n})\n\ndescribe('#douhleTheDifferenceEven', () => {\n  it('should return 0 for empty list', () => {\n    expect(douhleTheDifferenceEven([]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with negative values', () => {\n    expect(douhleTheDifferenceEven([-1, -2, 0]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with a positive number and zero', () => {\n    expect(douhleTheDifferenceEven([1, 3, 2, 0]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with a negative number and zero', () => {\n    expect(douhleTheDifferenceEven([-1, -2, 0]).toFixed()).toEqual('0')\n  })\n\n  it('should return 0 for list with a positive number and a negative number', () => {\n    expect(douhleTheDifferenceEven([1, 3, 2, -1]).toFixed()).toEqual('0')\n  })\n\n  it('should return the sum of the squares of the odd numbers in a list', () => {\n    expect(douhleTheDifferenceEven([1, 3, 2, 0]).toFixed()).toEqual('9 + 0 + 0')\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const match = [];\n  let i = 0,\n    j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      match.push(0);\n      i++;\n      j++;\n    } else {\n      if (game[i] > guess[j]) {\n        match.push(game[i] - guess[j]);\n        i++;\n      } else {\n        match.push(guess[j] - game[i]);\n        j++;\n      }\n    }\n  }\n  while (i < game.length) {\n    match.push(game[i]);\n    i++;\n  }\n  while (j < guess.length) {\n    match.push(guess[j]);\n    j++;\n  }\n  return match;\n};\n\nconsole.log(comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n    let extensions_count = extensions.length;\n    let index_of_highest_strength = 0;\n    let strength = 0;\n    let strength_of_extension;\n\n    for (let i = 0; i < extensions_count; i++) {\n        strength_of_extension = strengthOfExtension(class_name, extensions[i]);\n        if (strength_of_extension > strength) {\n            index_of_highest_strength = i;\n            strength = strength_of_extension;\n        }\n    }\n\n    return class_name + '.' + extensions[index_of_highest_strength];\n};\n\nmodule.exports = strlngestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const a_array = a.split(\"\")\n  const b_array = b.split(\"\")\n  const n = a_array.length\n  const m = b_array.length\n  if (n > m) {\n    return false\n  }\n  for (let i = 0; i < n; i++) {\n    if (a_array[i]!== b_array[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default cycoatternCheck\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num; i++) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return (even, odd);\n};\n\n// TEST\n\nconst num = -12;\nconsole.log(evejOddCount(num));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n    let result = 0;\n    while (number > 0) {\n        if (number > 1 && number < 4) {\n            result += (number / 5) * 5;\n            number -= (number / 5) * 5;\n        } else if (number > 3 && number < 9) {\n            result += (number / 4) * 4;\n            number -= (number / 4) * 4;\n        } else if (number > 8) {\n            result += (number / 9) * 9;\n            number -= (number / 9) * 9;\n        } else if (number == 1) {\n            result += 1;\n            number -= 1;\n        }\n    }\n    return result;\n}\n\n// TEST\nconst number = parseInt(prompt(\"Enter a number: \"));\nconsole.log(intHoMiniRoman(number));<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  return (((a * a) + (b * b)) - (c * c)) > 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  // console.log(\"words: \", words)\n  const len = words.length;\n  if (len === 0) {\n    return undefined;\n  }\n  const maxLen = words[0].length;\n  const unique = new Map();\n  for (let i = 0; i < len; i++) {\n    const word = words[i];\n    if (unique.has(word)) {\n      continue;\n    }\n    unique.set(word, 1);\n    if (word.length > maxLen) {\n      maxLen = word.length;\n    }\n  }\n  return words[0].substring(0, maxLen);\n};\n\nconsole.log(finfMax([\"name\", \"of\", \"string\"]));\nconsole.log(finfMax([\"name\", \"enam\", \"game\"]));\nconsole.log(finfMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= need) {\n    return [number, remaining]\n  } else if (number >= need) {\n    return [need, remaining]\n  } else {\n    return [remaining, remaining]\n  }\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= need) {\n    return [number, remaining]\n  } else if (number >= need) {\n    return [number, remaining]\n  } else {\n    return [remaining, remaining]\n  }\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= need) {\n    return [number, remaining]\n  } else if (number >= need) {\n    return [number, remaining]\n  } else {\n    return [remaining, remaining]\n  }\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= need) {\n    return [number, remaining]\n  } else if (number >= need) {\n    return [number, remaining]\n  } else {\n    return [remaining, remaining]\n  }\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return operator[0](operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst build = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return operator[0](operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doBpalg = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return build(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst buildB = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return build(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst doBpalg2 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst buildB2 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst doBpalg3 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB2(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst buildB3 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB2(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst doBpalg4 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB3(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst buildB4 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB3(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst doBpalg5 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB4(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst buildB5 = (operator, operand) => {\n  const operatorLen = operator.length\n  const operandLen = operand.length\n  if (operatorLen > operandLen) return 0\n  return buildB4(operand[0], operand[1])\n   .reduce((previous, current) => previous + current, 0)\n   .toString()\n}\n\nconst doBpalg6 = (operator,"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let result = '';\n  let i = 0;\n  let l = s.length;\n  while (i < l) {\n    let c = s[i];\n    if (isUpperCase(c)) {\n      result += toUpperCase(c);\n    } else if (isLowerCase(c)) {\n      result += toLowerCase(c);\n    } else {\n      result += c;\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconst isUpperCase = (c) => {\n  return c.toUpperCase() === c;\n};\n\nconst toUpperCase = (c) => {\n  return c.toUpperCase();\n};\n\nconst isLowerCase = (c) => {\n  return c.toLowerCase() === c;\n};\n\nconst toLowerCase = (c) => {\n  return c.toLowerCase();\n};\n\nconsole.log(solge('1234'));\nconsole.log(solge('ab'));\nconsole.log(solge('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = strlngToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const aNum = parseInt(a);\n  const bNum = parseInt(b);\n  const i = aNum;\n  const j = bNum;\n  const res = [];\n  while (i <= bNum) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n    i++;\n  }\n  return res;\n}\n\nmodule.exports = genfrateIntegers;\n<|endoftext|>"}
