{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  return _.some(numbers, (n) => {\n    return _.some(numbers, (nn) => {\n      return Math.abs(n - nn) < threshold;\n    });\n  });\n};\n\n/**\n  * @function\n  * @name has_close_numbers\n  * @description\n  *\n  * Return true if given list of numbers contains at least two elements,\n  * which are close to each other.\n  *\n  * @param {Array} numbers\n  * @param {Number} threshold\n  *\n  * @example\n  * has_close_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // => true\n  */\nconst has_close_numbers = (numbers, threshold) => {\n  return _.some(numbers, (n) => {\n    return _.some(numbers, (nn) => {\n      return Math.abs(n - nn) < threshold;\n    });\n  });\n};\n\n/**\n  * @function\n  * @name has_close_numbers_in_list\n  * @description\n  *\n  * Return true if given list of numbers contains at least two elements,\n  * which are close to each other.\n  *\n  * @param {Array} numbers\n  * @param {Number} threshold\n  *\n  * @example\n  * has_close_numbers_in_list([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // => true\n  */\nconst has_close_numbers_in_list = (numbers, threshold) => {\n  return _.some(numbers, (n) => {\n    return _.some(numbers, (nn) => {\n      return Math.abs(n - nn) < threshold;\n    });\n  });\n};\n\n/**\n  * @function\n  * @name has_close_numbers_in_list_of_lists\n  * @description\n  *\n  * Return true if given list of lists contains at least two elements,\n  * which are close to each other.\n  *\n  * @param {Array} numbers\n  * @param {Number} threshold\n  *\n  * @example\n  * has_close_numbers_in_list_of_lists([[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], 0.3)\n  * // => true\n  */\nconst has_close_numbers_in_list_of_lists = (numbers, threshold) => {\n  return _.some(numbers, (n) => {\n    return _.some(numbers, (nn) => {\n      return Math.abs(n - nn) < threshold;\n    });\n  });\n};\n\n/**\n  * @function\n  * @name has_close_numbers_in_list_of_lists_of_lists\n  * @description\n  *\n  * Return true if given list of lists contains at least two elements,\n  * which are close to each other.\n  *\n  * @param {Array} numbers\n  * @param {Number} threshold\n  *\n  * @example\n  * has_close_numbers_in_list_of_lists_of_lists([[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], 0.3)\n  * // => true\n  */\nconst has_close_numbers_in_list_of_lists_of_lists = (numbers, threshold) => {\n  return _.some(numbers, (n) => {\n    return _.some(numbers, (nn) => {\n      return Math.abs(n - nn) < threshold;\n    });\n  });\n};\n\nexport {\n  has_close_elements,\n  has_close_numbers,\n  has_close_numbers_in_list,\n  has_close_numbers_in_list_of_lists,\n  has_close_numbers_in_list_of_lists_of_lists\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  // Base case\n  if (paren_string === '') return [];\n  // Initialize the stack\n  let stack = [paren_string];\n  // Iterate through the string\n  for (let i = 0; i < paren_string.length; i++) {\n    // Get the current character\n    let current_char = paren_string[i];\n    // If it's not a paren, push it to the stack\n    if (current_char!== '(') {\n      stack.push(current_char);\n    } else {\n      // If it is a paren, pop the stack and see if it is a balanced paren\n      const popped_char = stack.pop();\n      if (popped_char === '(') {\n        // Push the character and the popped character back to the stack\n        stack.push(popped_char);\n        stack.push(current_char);\n      } else {\n        // If the popped character is not a paren, then we are done with this group\n        stack.push(popped_char);\n        stack.push(current_char);\n      }\n    }\n  }\n  // Return the stack\n  return stack;\n};\n\n// Testing\nconst test_strings = ['()', '(())', '(()())', '()((()()))'];\nconst test_results = test_strings.map(separate_paren_groups);\nconsole.log(test_results);\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return decimal;\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers truncated to integers.\n  >>> truncate_list([3.5, 6.7, 12.1])\n  [3, 6, 12]\n  */\nconst truncate_list = (list) => {\n  return list.map((num) => truncate_number(num));\n};\n\n/* Given a number of numbers, return a new list of the same length with the\n  corresponding numbers truncated to integers.\n  >>> truncate_list(5, 2, 3, 7, 8)\n  [5, 8]\n  */\nconst truncate_list_with_args = (...args) => {\n  return truncate_list(args);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers divided by the given divisor.\n  >>> divide_list([1, 2, 3])\n  [1, 2, 3]\n  >>> divide_list([1, 2, 3], 3)\n  [1/3, 2/3, 3/3]\n  */\nconst divide_list = (list, divisor) => {\n  return list.map((num) => truncate_number(num) / divisor);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers divided by the given divisor.\n  >>> divide_list_with_args([1, 2, 3], 3)\n  [1/3, 2/3, 3/3]\n  */\nconst divide_list_with_args = (...args) => {\n  return divide_list(args);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers rounded to the nearest integer.\n  >>> round_list([1.5, 3.7, 12.1])\n  [1, 4, 13]\n  >>> round_list([1.5, 3.7, 12.1], 3)\n  [1.0, 4.0, 13.0]\n  */\nconst round_list = (list, num) => {\n  return list.map((num) => truncate_number(num));\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers rounded to the nearest integer.\n  >>> round_list_with_args([1.5, 3.7, 12.1])\n  [1.0, 4.0, 13.0]\n  >>> round_list_with_args([1.5, 3.7, 12.1], 3)\n  [1.0, 4.0, 13.0]\n  */\nconst round_list_with_args = (...args) => {\n  return round_list(args);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers added together.\n  >>> add_list([1, 2, 3])\n  [1, 2, 3]\n  >>> add_list([1, 2, 3], 2)\n  [3, 4, 5]\n  */\nconst add_list = (list, num) => {\n  return list.map((num) => truncate_number(num) + num);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers added together.\n  >>> add_list_with_args([1, 2, 3])\n  [3, 4, 5]\n  >>> add_list_with_args([1, 2, 3], 2)\n  [3, 4, 5]\n  */\nconst add_list_with_args = (...args) => {\n  return add_list(args);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers subtracted from the previous value.\n  >>> subtract_list([1, 2, 3])\n  [1, 2, 3]\n  >>> subtract_list([1, 2, 3], 2)\n  [1, 1, 1]\n  */\nconst subtract_list = (list, num) => {\n  return list.map((num) => truncate_number(num) - num);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers subtracted from the previous value.\n  >>> subtract_list_with_args([1, 2, 3])\n  [1, 1, 1]\n  >>> subtract_list_with_args([1, 2, 3], 2)\n  [1, 1, 1]\n  */\nconst subtract_list_with_args = (...args) => {\n  return subtract_list(args);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers multiplied by the given multiplier.\n  >>> multiply_list([1, 2, 3])\n  [1, 2, 3]\n  >>> multiply_list([1, 2, 3], 2)\n  [2, 4, 6]\n  */\nconst multiply_list = (list, num) => {\n  return list.map((num) => truncate_number(num) * num);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers multiplied by the given multiplier.\n  >>> multiply_list_with_args([1, 2, 3])\n  [2, 4, 6]\n  >>> multiply_list_with_args([1, 2, 3], 2)\n  [2, 4, 6]\n  */\nconst multiply_list_with_args = (...args) => {\n  return multiply_list(args);\n};\n\n/* Given a list of numbers, return a new list of the same length with the\n  corresponding numbers divided by the given divisor.\n  >>> divide_list([1, 2, 3])\n  [1, 2, 3]\n  >>> divide_list([1, 2,"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n    let result = false;\n    let balance = 0;\n\n    for (let i = 0; i < operations.length; i++) {\n        if (operations[i] === -1) {\n            balance = 0;\n        } else {\n            balance += operations[i];\n        }\n        if (balance < 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n};\n\nexport { below_zero };\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((total, num) => total + num, 0) / numbers.length\n  const deviation = (numbers.map(num => Math.abs(num - mean)))\n  return deviation.reduce((total, num) => total + num, 0) / numbers.length\n}\n\n/**\n  * Calculate the range of a list of numbers.\n  * The range is the difference between the largest and smallest number in\n  * the list.\n  * For a given list of input numbers, calculate Range\n  * Range = maximum(x) - minimum(x)\n  * >>> range([1,2,3,4])\n  * 4\n  * >>> range([1,2,3])\n  * 3\n  */\nconst range = (numbers) => {\n  return Math.max(...numbers) - Math.min(...numbers)\n}\n\n/**\n  * Calculate the standard deviation of a list of numbers.\n  * The standard deviation is the square root of the average of the squares\n  * of the differences between each element and the mean.\n  * For a given list of input numbers, calculate Standard Deviation\n  * Standard Deviation = sqrt(average(|x - x_mean|^2))\n  * >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  * 1.7320508075688772\n  * >>> standard_deviation([1.0, 2.0, 3.0])\n  * 1.7320508075688772\n  */\nconst standard_deviation = (numbers) => {\n  return Math.sqrt(mean_absolute_deviation(numbers))\n}\n\n/**\n  * Calculate the skewness of a list of numbers.\n  * The skewness is the ratio of the average of the squares of the differences\n  * between each number and the mean to the average of the squares of the\n  * differences between each number and the mean to the standard deviation.\n  * For a given list of input numbers, calculate Skewness\n  * Skewness = average(|x - x_mean|^2) / (standard_deviation * average(|x - x_mean|^2))\n  * >>> skewness([1.0, 2.0, 3.0, 4.0])\n  * 0.99951527881591787\n  * >>> skewness([1.0, 2.0, 3.0])\n  * 0.99951527881591787\n  */\nconst skewness = (numbers) => {\n  return mean_absolute_deviation(numbers) / standard_deviation(numbers)\n}\n\n/**\n  * Calculate the kurtosis of a list of numbers.\n  * The kurtosis is the ratio of the average of the squares of the differences\n  * between each number and the mean to the average of the squares of the\n  * differences between each number and the mean to the standard deviation.\n  * For a given list of input numbers, calculate Kurtosis\n  * Kurtosis = average(|x - x_mean|^2) / (standard_deviation * average(|x - x_mean|^2))\n  * >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  * 3.2527240858763817\n  * >>> kurtosis([1.0, 2.0, 3.0])\n  * 3.2527240858763817\n  */\nconst kurtosis = (numbers) => {\n  return mean_absolute_deviation(numbers) / standard_deviation(numbers)\n}\n\nexport {\n  mean_absolute_deviation,\n  range,\n  standard_deviation,\n  skewness,\n  kurtosis\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = []\n  for (let i = 0, len = numbers.length; i < len; i += 1) {\n    if (i === 0) {\n      output.push(numbers[i])\n    } else {\n      output.push(delimeter)\n      output.push(numbers[i])\n    }\n  }\n  return output\n}\n\n/* Return the difference between two numbers.\n  >>> diff(2, 1)\n  1\n  >>> diff(1, 1)\n  0\n  >>> diff(2, 4)\n  3\n  >>> diff(5, -5)\n  10\n  >>> diff(3, -5)\n  -2\n  >>> diff(0, 0)\n  0\n  >>> diff(3, 2)\n  1\n  >>> diff(5, 5)\n  0\n  */\nconst diff = (firstNumber, secondNumber) => {\n  let num = secondNumber - firstNumber\n  if (num < 0) {\n    num = num * -1\n  }\n  return num\n}\n\n/* Return the sum of all elements in an array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([])\n  0\n  */\nconst sum = (array) => {\n  let total = 0\n  for (let i = 0, len = array.length; i < len; i += 1) {\n    total += array[i]\n  }\n  return total\n}\n\n/* Return the largest number in an array.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([1, 2, 3])\n  3\n  >>> largest([])\n  0\n  */\nconst largest = (array) => {\n  let max = array[0]\n  for (let i = 1, len = array.length; i < len; i += 1) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  return max\n}\n\n/* Return the smallest number in an array.\n  >>> smallest([1, 2, 3, 4, 5])\n  1\n  >>> smallest([1, 2, 3])\n  1\n  >>> smallest([])\n  0\n  */\nconst smallest = (array) => {\n  let min = array[0]\n  for (let i = 1, len = array.length; i < len; i += 1) {\n    if (array[i] < min) {\n      min = array[i]\n    }\n  }\n  return min\n}\n\n/* Return a random number between two numbers.\n  >>> random(1, 5)\n  4\n  >>> random(1, 3)\n  2\n  >>> random(2, 5)\n  3\n  >>> random(1, 1)\n  1\n  >>> random(2, 2)\n  1\n  */\nconst random = (min, max) => {\n  let range = max - min\n  let randomNumber = Math.random() * range\n  return min + randomNumber\n}\n\n/* Return the difference between the highest and lowest numbers in an array.\n  >>> diff(1, 5)\n  4\n  >>> diff(1, 3)\n  2\n  >>> diff(5, 1)\n  4\n  >>> diff(1, 1)\n  0\n  >>> diff(1, 2)\n  1\n  */\nconst difference = (highest, lowest) => {\n  return largest(intersperse(diff(highest, lowest), ''))\n}\n\n/* Return the average of all elements in an array.\n  >>> average([1, 2, 3, 4, 5])\n  3.5\n  >>> average([1, 2, 3])\n  2\n  >>> average([])\n  0\n  */\nconst average = (array) => {\n  let total = sum(array)\n  let average = total / array.length\n  return average\n}\n\n/* Return the product of all elements in an array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  >>> product([1, 2, 3])\n  6\n  >>> product([])\n  1\n  */\nconst product = (array) => {\n  let product = 1\n  for (let i = 0, len = array.length; i < len; i += 1) {\n    product *= array[i]\n  }\n  return product\n}\n\n/* Return the greatest product of all elements in an array.\n  >>> greatestProduct([1, 2, 3, 4, 5])\n  120\n  >>> greatestProduct([1, 2, 3])\n  6\n  >>> greatestProduct([])\n  1\n  */\nconst greatestProduct = (array) => {\n  let max = 1\n  for (let i = 0, len = array.length; i < len; i += 1) {\n    max *= array[i]\n  }\n  return max\n}\n\n/* Return the smallest product of all elements in an array.\n  >>> smallestProduct([1, 2, 3, 4, 5])\n  1\n  >>> smallestProduct([1, 2, 3])\n  2\n  >>> smallestProduct([])\n  1\n  */\nconst smallestProduct = (array) => {\n  let min = 1\n  for (let i = 0, len = array.length; i < len; i += 1) {\n    min *= array[i]\n  }\n  return min\n}\n\n/* Return a random element from an array.\n  >>> randomElement(['A', 'B', 'C', 'D'])\n  'C'\n  >>> randomElement([])\n  0\n  */\nconst randomElement = (array) => {\n  let randomIndex = Math.floor(Math.random() * array.length)\n  return array[randomIndex]\n}\n\n/* Return the smallest of all elements in an array.\n  >>> smallest(['A', 'B', 'C', 'D'])\n  'A'\n  >>> smallest([])\n  0\n  */\nconst smallest = (array) => {\n  let min = array[0]\n  for (let i = 1, len = array.length; i < len"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n    let stack = [];\n    let num_levels = 0;\n    let output = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n        if (char === '(') {\n            stack.push(num_levels);\n            num_levels += 1;\n        }\n        else if (char === ')') {\n            num_levels -= 1;\n            while (stack.length > 0 && stack[stack.length - 1] >= num_levels) {\n                stack.pop();\n            }\n        }\n    }\n    return output;\n};\n\n// console.log(parse_nested_parens('((()()()())(()()()))()'))\n// console.log(parse_nested_parens('((()()()()))()'))\n// console.log(parse_nested_parens('(()())(()()()))'))\n// console.log(parse_nested_parens('((()()()())(()()()()))()'))\n// console.log(parse_nested_parens('((()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()()()())(())()()))'))\n// console.log(parse_nested_parens('((()()()()()()"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const result = [];\n  strings.forEach(s => {\n    if (s.includes(substring)) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'b')\n  []\n  */\nconst filter_by_substring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(s => {\n    if (s.indexOf(substring) >= 0) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'b')\n  []\n  */\nconst filter_by_substring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(s => {\n    if (s.indexOf(substring) >= 0) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'b')\n  []\n  */\nconst filter_by_substring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(s => {\n    if (s.indexOf(substring) >= 0) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'b')\n  []\n  */\nconst filter_by_substring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(s => {\n    if (s.indexOf(substring) >= 0) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  filter_by_substring,\n  filter_by_substring2,\n  filter_by_substring3,\n  filter_by_substring4,\n  filter_by_substring5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n    const n = numbers.length;\n    const sum = numbers.reduce((sum, num) => sum + num, 0);\n    const product = numbers.reduce((product, num) => product * num, 1);\n    return [sum, product];\n}\n\nexport { sum_product };\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max = numbers[0];\n  const rollingMax = [max];\n  let prev = max;\n  const stack = [];\n\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > prev) {\n      prev = n;\n      rollingMax.push(n);\n    } else if (n === prev) {\n      stack.push(n);\n    }\n  }\n\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\n// console.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n\n// const stack = [];\n// const rollingMax = (numbers) => {\n//   const max = numbers[0];\n//   stack.push(max);\n//   for (let i = 1; i < numbers.length; i++) {\n//     const n = numbers[i];\n//     if (n > max) {\n//       max = n;\n//       stack.push(n);\n//     } else if (n === max) {\n//       stack.push(n);\n//     }\n//   }\n//   return stack.reduce((max, n) => {\n//     return n > max? n : max;\n//   }, max);\n// };\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  stack.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    const n = numbers[i];\n    if (n > max) {\n      max = n;\n      stack.push(n);\n    } else if (n === max) {\n      stack.push(n);\n    }\n  }\n  return stack.reduce((max, n) => {\n    return n > max? n : max;\n  }, max);\n};\n\nconst stack = [];\n"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = findLongestPrefix(string);\n  const palindromic_suffix = findLongestSuffix(string);\n  return prefix + palindromic_suffix.split('').reverse().join('');\n}\n\n/* Return the longest prefix of a string that is a palindrome */\nconst findLongestPrefix = (string) => {\n  let longest_prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    let is_palindrome = is_palindrome(string.slice(i));\n    if (is_palindrome) {\n      longest_prefix = i;\n      break;\n    }\n  }\n  return longest_prefix;\n}\n\n/* Return the longest suffix of a string that is a palindrome */\nconst findLongestSuffix = (string) => {\n  let longest_suffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let is_palindrome = is_palindrome(string.slice(string.length - i - 1));\n    if (is_palindrome) {\n      longest_suffix = string.slice(string.length - i - 1);\n      break;\n    }\n  }\n  return longest_suffix;\n}\n\nmodule.exports = {\n  makePalindrome,\n  findLongestPrefix,\n  findLongestSuffix\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  return (a + b)\n   .split('')\n   .map((v, i) => {\n      if (i % 2 === 0) {\n        return v;\n      }\n      return v === '1'? '0' : '1';\n    })\n   .join('');\n};\n\n/*\n  The input string has only 1s and 0s. Find out the number of 1s in the string.\n  >>> string_count('001101101000010100100')\n  3\n  */\nconst string_count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '1') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  The input string has only 1s and 0s. Find out the number of 1s in the string.\n  >>> string_count('1100100101')\n  3\n  */\nconst string_count_2 = (str) => {\n  let count = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === '1') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  The input string has only 1s and 0s. Find out the number of 1s in the string.\n  >>> string_count_3('110001101')\n  3\n  */\nconst string_count_3 = (str) => {\n  let count = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === '1') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov('101')\n  'XXOOXX'\n  */\nconst string_to_markov = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result += string_array[i];\n    } else {\n      result += 'X';\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov('110001101')\n  'XXOOXOOOXX'\n  */\nconst string_to_markov_2 = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result += string_array[i];\n    } else {\n      result += 'X';\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov_3('110001101')\n  'XXOOXOOOXX'\n  */\nconst string_to_markov_3 = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result += string_array[i];\n    } else {\n      result += 'X';\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov_4('1100100101')\n  'XXOOOXOOXOOOXOOXOO'\n  */\nconst string_to_markov_4 = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result += string_array[i];\n    } else {\n      result += 'X';\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov_5('1100100101')\n  'XXOOOXOOXOOOXOOXOO'\n  */\nconst string_to_markov_5 = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result += string_array[i];\n    } else {\n      result += 'X';\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov_6('1100100101')\n  'XXOOOXOOXOOOXOOXOO'\n  */\nconst string_to_markov_6 = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result += string_array[i];\n    } else {\n      result += 'X';\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string consisting of 'X's and 'O's.\n  >>> string_to_markov_7('1100100101')\n  'XXOOOXOOXOOOXOOXOO'\n  */\nconst string_to_markov_7 = (str) => {\n  let string_array = str.split('');\n  let result = '';\n  for (let i = 0; i < string_array.length; i++) {\n    if (i % 2 === 0) {\n      result"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  let longest_length = 0\n  strings.forEach((str) => {\n    if (str.length > longest_length) {\n      longest = str\n      longest_length = str.length\n    }\n  })\n  return longest\n}\n\nmodule.exports = longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n    let temp = Math.abs(b);\n    while (temp) {\n        if (temp === 1) {\n            return a;\n        }\n        if (temp === a) {\n            return b;\n        }\n        temp = temp - a;\n    }\n    return a;\n};\n\nexport {\n    greatest_common_divisor,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  return string.split('').reduce((a, b) => {\n    if (a.length === 0) {\n      a.push(b);\n    } else {\n      if (a[a.length - 1]!== b) {\n        a.push(b);\n      }\n    }\n    return a;\n  });\n};\n\n// https://codility.com/demo/results/training-a5n4-q6h-j0x/\n\n// # BEGIN SOLUTION\nconst solution = (string) => {\n  const list = all_prefixes(string);\n  const result = [];\n\n  for (let i = 0; i < list.length; i += 1) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n// # END SOLUTION\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    ret.push(`${i}`)\n  }\n  return ret.join(' ')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string(3)\n  '321'\n  >>> reverse_string(5)\n  '53245'\n  */\nconst reverse_string = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    ret.push(String.fromCharCode(n - i - 1))\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string(5)\n  '53245'\n  >>> reverse_string(3)\n  '321'\n  */\nconst reverse_string_without_0 = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    ret.push(String.fromCharCode(n - i - 1))\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string_without_0(3)\n  '321'\n  >>> reverse_string_without_0(5)\n  '53245'\n  */\nconst reverse_string_without_0_numeric = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    ret.push(String.fromCharCode(n - i - 1))\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string_without_0_numeric(3)\n  '321'\n  >>> reverse_string_without_0_numeric(5)\n  '53245'\n  */\nconst reverse_string_without_0_numeric_with_numbers = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    if (i % 3 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else if (i % 5 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else {\n      ret.push(String.fromCharCode(n - i - 1))\n    }\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string_without_0_numeric_with_numbers(3)\n  '321'\n  >>> reverse_string_without_0_numeric_with_numbers(5)\n  '53245'\n  */\nconst reverse_string_without_0_numeric_with_numbers_in_letters = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    if (i % 3 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else if (i % 5 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else {\n      ret.push(String.fromCharCode(n - i - 1))\n    }\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string_without_0_numeric_with_numbers_in_letters(3)\n  '321'\n  >>> reverse_string_without_0_numeric_with_numbers_in_letters(5)\n  '53245'\n  */\nconst reverse_string_without_0_numeric_with_numbers_in_letters_with_numbers = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    if (i % 3 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else if (i % 5 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else {\n      ret.push(String.fromCharCode(n - i - 1))\n    }\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string_without_0_numeric_with_numbers_in_letters_with_numbers(3)\n  '321'\n  >>> reverse_string_without_0_numeric_with_numbers_in_letters_with_numbers(5)\n  '53245'\n  */\nconst reverse_string_without_0_numeric_with_numbers_in_letters_with_numbers_in_letters = (n) => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    if (i % 3 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else if (i % 5 === 0) {\n      ret.push(String.fromCharCode(n - i - 1))\n    } else {\n      ret.push(String.fromCharCode(n - i - 1))\n    }\n  }\n  return ret.reverse().join('')\n}\n\n/*\n  Given a number, return a string with the digits in a reverse order.\n  >>> reverse_string_without_0_numeric_with_numbers_in_letters_with_numbers_in_letters(3)\n  '321'\n  >>> reverse_string_without_0_numeric_with_numbers_in_letters_with_numbers_in_letters(5)\n  '53245'\n  */\nconst reverse_string_without_0_"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n    let counter = {};\n    for (let char of string) {\n        if (counter[char] === undefined) {\n            counter[char] = 1;\n        } else {\n            counter[char] += 1;\n        }\n    }\n    return Object.keys(counter).length;\n};\n\n// BEGIN EXERCISE\n\n/* Given a string, return a list of all the possible words in the string,\n  where two words are different only in case.\n  >>> count_distinct_words('xyzXYZ')\n  ['xyz', 'XYZ']\n  >>> count_distinct_words('Jerry')\n  ['Jerry', 'Jerry', 'jerry', 'jerry']\n  */\nconst count_distinct_words = (string) => {\n    let words = [];\n    for (let char of string) {\n        words = words.concat(string.split('').map(c => c.toLowerCase()));\n    }\n    return words.filter(x => x.length > 1);\n};\n\n// END EXERCISE\n\n/*\n  TODO: Given a string, count the number of characters that are not a number.\n  (e.g. \"123abc\" => 2, \"xyz\" => 1, \"xyz1\" => 1)\n  >>> count_non_numbers('123abc')\n  2\n  >>> count_non_numbers('xyz')\n  1\n  >>> count_non_numbers('xyz1')\n  1\n  */\nconst count_non_numbers = (string) => {\n    let n = 0;\n    for (let char of string) {\n        if (!isNaN(char)) {\n            n += 1;\n        }\n    }\n    return n;\n};\n\n// BEGIN EXERCISE\n\n/* Given a string, return a list of all the words in the string, where\n  the length of the word is not more than 3.\n  >>> count_words_length_less_than_three('xyzXYZ')\n  ['xyz', 'xyz1', 'xyz2']\n  >>> count_words_length_less_than_three('XYZ')\n  []\n  >>> count_words_length_less_than_three('xyz')\n  ['xyz']\n  */\nconst count_words_length_less_than_three = (string) => {\n    let words = [];\n    for (let word of string.split(' ')) {\n        if (word.length < 3) {\n            words.push(word);\n        }\n    }\n    return words;\n};\n\n// END EXERCISE\n\n/*\n  TODO: Given a string, return a list of all the words in the string, where\n  the word does not contain a space character.\n  >>> count_words_no_spaces('xyzXYZ')\n  ['xyz', 'xyz1', 'xyz2', 'xyzXYZ']\n  >>> count_words_no_spaces('XYZ')\n  []\n  >>> count_words_no_spaces('xyz')\n  ['xyz']\n  */\nconst count_words_no_spaces = (string) => {\n    let words = [];\n    for (let word of string.split(' ')) {\n        if (!word.includes(' ')) {\n            words.push(word);\n        }\n    }\n    return words;\n};\n\n// BEGIN EXERCISE\n\n/* Given a string, return a list of all the words in the string, where\n  the word is not a substring of the previous word.\n  >>> count_words_no_substrings('xyzXYZ')\n  ['xyz', 'xyz1', 'xyz2', 'XYZ']\n  >>> count_words_no_substrings('XYZ')\n  []\n  >>> count_words_no_substrings('xyz')\n  ['xyz']\n  */\nconst count_words_no_substrings = (string) => {\n    let words = [];\n    for (let word of string.split(' ')) {\n        if (word.indexOf(word.slice(0, -1)) === -1) {\n            words.push(word);\n        }\n    }\n    return words;\n};\n\n// END EXERCISE\n\n/*\n  TODO: Given a string, return a list of all the words in the string, where\n  the word is not a substring of the previous word, or the previous word is\n  not a substring of the next word.\n  >>> count_words_no_substrings_no_spaces('xyzXYZ')\n  ['xyz', 'xyz1', 'xyz2', 'XYZ']\n  >>> count_words_no_substrings_no_spaces('XYZ')\n  ['XYZ']\n  >>> count_words_no_substrings_no_spaces('xyz')\n  ['xyz']\n  */\nconst count_words_no_substrings_no_spaces = (string) => {\n    let words = [];\n    for (let word of string.split(' ')) {\n        if (word.indexOf(word.slice(0, -1)) === -1 || word.indexOf(word.slice(1)) === -1) {\n            words.push(word);\n        }\n    }\n    return words;\n};\n\n// BEGIN EXERCISE\n\n/* Given a string, return a list of all the words in the string, where\n  the word is not a substring of the previous word, or the previous word is\n  not a substring of the next word.\n  >>> count_words_no_substrings_no_spaces_no_spaces('xyzXYZ')\n  ['xyz', 'xyz1', 'xyz2', 'XYZ']\n  >>> count_words_no_substrings_no_spaces_no_spaces('XYZ')\n  ['XYZ']\n  >>> count_words_no_substrings_no_spaces_no_spaces('xyz')\n  ['xyz']\n  */\nconst count_words_no_substrings_no_spaces_no_spaces = (string) => {\n    let words = [];"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  let beats = [];\n  let last_beat = false;\n\n  // Split the string into a list of individual notes\n  music_string.split(/[|.]/).forEach((note) => {\n    // Determine if the note is a whole note or a half note\n    if (note.charAt(0) === 'o') {\n      last_beat = false;\n    } else {\n      last_beat = true;\n    }\n\n    // Add the note to the list\n    beats.push(last_beat);\n  });\n\n  return beats;\n};\n\nexport default parse_music;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n    const count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === substring[0]) {\n            count++;\n            for (let j = 1; j < substring.length; j++) {\n                if (string[i + j] === substring[j]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nmodule.exports = how_many_times;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n    let digits = parseInt(numbers, 10);\n    let string = '';\n    let lastDigit = 0;\n    let currentDigit = 0;\n    for (let i = 0; i < digits.length; i++) {\n        currentDigit = digits[i];\n        if (i === 0) {\n            string += currentDigit;\n        } else {\n            if (currentDigit > lastDigit) {\n                string += currentDigit;\n            } else if (currentDigit < lastDigit) {\n                string = string.substring(0, string.length - 1) + currentDigit + string.substring(string.length - 1, string.length);\n            }\n        }\n        lastDigit = currentDigit;\n    }\n    return string;\n}\n\n/*\n  Input is a space-delimited string of digits from '0' to '9'.\n  Return the string with digits sorted from smallest to largest\n  >>> sort_digits('three one five')\n  'three one five'\n  */\nconst sort_digits = (digits) => {\n    let string = '';\n    let lastDigit = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let currentDigit = parseInt(digits[i], 10);\n        if (i === 0) {\n            string += currentDigit;\n        } else {\n            if (currentDigit > lastDigit) {\n                string += currentDigit;\n            } else if (currentDigit < lastDigit) {\n                string = string.substring(0, string.length - 1) + currentDigit + string.substring(string.length - 1, string.length);\n            }\n        }\n        lastDigit = currentDigit;\n    }\n    return string;\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed\n  >>> remove_spaces('a b c')\n  'abc'\n  */\nconst remove_spaces = (text) => {\n    return text.replace(/\\s+/g, '');\n}\n\n/*\n  Input is a string.\n  Return the string with all punctuation removed\n  >>> remove_punctuation('a b c')\n  'abc'\n  */\nconst remove_punctuation = (text) => {\n    return text.replace(/[^\\w\\s]+/g, '');\n}\n\n/*\n  Input is a string.\n  Return the string with all lowercase letters removed\n  >>> remove_lowercase('a b c')\n  'ABC'\n  */\nconst remove_lowercase = (text) => {\n    return text.replace(/[a-z]+/g, '');\n}\n\n/*\n  Input is a string.\n  Return the string with all uppercase letters removed\n  >>> remove_uppercase('a b c')\n  'ABC'\n  */\nconst remove_uppercase = (text) => {\n    return text.replace(/[A-Z]+/g, '');\n}\n\n/*\n  Input is a string.\n  Return the string with all digits removed\n  >>> remove_digits('a b c')\n  'ABC'\n  */\nconst remove_digits = (text) => {\n    return text.replace(/\\d+/g, '');\n}\n\n/*\n  Input is a string.\n  Return the string with all characters in upper case\n  >>> upper_case('a b c')\n  'ABC'\n  */\nconst upper_case = (text) => {\n    return text.toUpperCase();\n}\n\n/*\n  Input is a string.\n  Return the string with all characters in lower case\n  >>> lower_case('a b c')\n  'abc'\n  */\nconst lower_case = (text) => {\n    return text.toLowerCase();\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed,\n  converted to upper case, and all punctuation removed\n  >>> normalize_text('a b c')\n  'ABC'\n  */\nconst normalize_text = (text) => {\n    return remove_spaces(upper_case(remove_punctuation(remove_lowercase(text))));\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed,\n  converted to lower case, and all punctuation removed\n  >>> lower_case('a b c')\n  'abc'\n  */\nconst lower_case_text = (text) => {\n    return remove_spaces(lower_case(remove_punctuation(remove_lowercase(text))));\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed,\n  converted to upper case, and all punctuation removed\n  >>> upper_case('a b c')\n  'ABC'\n  */\nconst upper_case_text = (text) => {\n    return remove_spaces(upper_case(remove_punctuation(remove_lowercase(text))));\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed,\n  converted to lower case, and all digits removed\n  >>> remove_digits('a b c')\n  'ABC'\n  */\nconst remove_digits_text = (text) => {\n    return remove_spaces(lower_case(remove_digits(upper_case(text))));\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed,\n  converted to lower case, and all punctuation removed\n  >>> remove_punctuation('a b c')\n  'ABC'\n  */\nconst remove_punctuation_text = (text) => {\n    return remove_spaces(lower_case(remove_punctuation(upper_case(text))));\n}\n\n/*\n  Input is a string.\n  Return the string with all spaces removed,\n  converted to upper case, and all punctuation removed\n  >>> remove_punctuation('a b c')"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    throw new Error('list must contain at least two elements')\n  }\n  const smaller = numbers.shift()\n  const larger = numbers.shift()\n  return [\n    numbers[numbers.indexOf(smaller)],\n    numbers[numbers.indexOf(larger)]\n  ]\n}\n\n/**\n  Given a list of objects, returns the object with the highest value in the list.\n  >>> find_max_value([1, 2, 3])\n  3\n  >>> find_max_value([3, 2, 1])\n  3\n  >>> find_max_value([1, 2, 3, 4])\n  4\n  */\nconst find_max_value = (numbers) => {\n  return Math.max.apply(Math, numbers)\n}\n\n/**\n  Given a list of objects, returns the object with the lowest value in the list.\n  >>> find_min_value([1, 2, 3])\n  1\n  >>> find_min_value([3, 2, 1])\n  1\n  >>> find_min_value([1, 2, 3, 4])\n  1\n  */\nconst find_min_value = (numbers) => {\n  return Math.min.apply(Math, numbers)\n}\n\n/**\n  Given a list of objects, returns the object that has the highest difference\n  between it and the largest in the list.\n  >>> find_max_delta([1, 2, 3])\n  2\n  >>> find_max_delta([3, 2, 1])\n  2\n  >>> find_max_delta([1, 2, 3, 4])\n  2\n  */\nconst find_max_delta = (numbers) => {\n  const max = find_max_value(numbers)\n  return Math.max.apply(Math, [...numbers, max]\n   .map(n => n - max)\n   .filter(n => n!== 0)\n  )\n}\n\nmodule.exports = {\n  find_closest_elements,\n  find_max_delta,\n  find_max_value,\n  find_min_delta,\n  find_min_value\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const max_number = Math.max(...numbers);\n  const min_number = Math.min(...numbers);\n  return [...numbers].map(number => number - min_number)\n   .map(number => number / max_number);\n};\n\n/* Given list of numbers, remove the smallest one and return the remaining list.\n  >>> remove_smallest([1.0, 2.0, 3.0, 4.0, 5.0])\n  [2.0, 3.0, 4.0, 5.0]\n  >>> remove_smallest([1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [2.0, 3.0, 4.0, 5.0]\n  */\nconst remove_smallest = (numbers) => {\n  return numbers.filter(number => number!== numbers[0]);\n};\n\n/* Given list of numbers, remove the largest one and return the remaining list.\n  >>> remove_largest([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> remove_largest([1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst remove_largest = (numbers) => {\n  return numbers.filter(number => number!== numbers[numbers.length - 1]);\n};\n\n/* Given list of numbers, remove the smallest two and return the remaining list.\n  >>> remove_smallest_two([1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [2.0, 3.0, 4.0, 5.0]\n  >>> remove_smallest_two([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst remove_smallest_two = (numbers) => {\n  return remove_largest(numbers.slice(1));\n};\n\n/* Given list of numbers, return a new list of numbers, where the first one has\n  been removed and the second one has been added.\n  >>> add_number(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> add_number(1.0, [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0, 1.0]\n  */\nconst add_number = (number, numbers) => {\n  return [...numbers, number];\n};\n\n/* Given list of numbers, return a new list of numbers, where the first two have\n  been removed and the second two have been added.\n  >>> add_number_two(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> add_number_two(1.0, [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0, 1.0]\n  */\nconst add_number_two = (number, numbers) => {\n  return [...numbers.slice(1, 3), number,...numbers.slice(3)];\n};\n\n/* Given list of numbers, return a new list of numbers, where the first three\n  have been removed and the second three have been added.\n  >>> add_number_three(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> add_number_three(1.0, [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0, 1.0]\n  */\nconst add_number_three = (number, numbers) => {\n  return [...numbers.slice(1, 4), number,...numbers.slice(4)];\n};\n\n/* Given list of numbers, return a new list of numbers, where the first four\n  have been removed and the second four have been added.\n  >>> add_number_four(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> add_number_four(1.0, [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0, 1.0]\n  */\nconst add_number_four = (number, numbers) => {\n  return [...numbers.slice(1, 5), number,...numbers.slice(5)];\n};\n\n/* Given list of numbers, return a new list of numbers, where the first five\n  have been removed and the second five have been added.\n  >>> add_number_five(1.0, [1.0, 2.0, 3.0, 4.0, 5.0, 1.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> add_number_five(1.0, [1.0, 2.0, 3.0, 4.0,"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  const result = [];\n  const values_array = Array.isArray(values)? values : [values];\n  values_array.forEach((value) => {\n    if (typeof value === 'number' &&!isNaN(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n// Filter list of objects that are not python types\nconst filter_non_python_objects = (objects) => {\n  const result = [];\n  const objects_array = Array.isArray(objects)? objects : [objects];\n  objects_array.forEach((object) => {\n    if (typeof object!== 'object' || object === null) {\n      result.push(object);\n    }\n  });\n  return result;\n};\n\nconst flatten = (list) => {\n  const result = [];\n  const flatten_list = (list) => {\n    if (Array.isArray(list)) {\n      list.forEach((item) => {\n        if (Array.isArray(item)) {\n          flatten_list(item);\n        } else {\n          result.push(item);\n        }\n      });\n    }\n  };\n  flatten_list(list);\n  return result;\n};\n\nmodule.exports = {\n  filter_integers,\n  filter_non_python_objects,\n  flatten\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return substring of given string\n  >>> substr('abcdef', 0)\n  'abcdef'\n  >>> substr('abcdef', 1)\n  'bcdef'\n  >>> substr('abcdef', 2)\n  'cdef'\n  >>> substr('abcdef', 3)\n  'def'\n  >>> substr('abcdef', 4)\n  'ef'\n  >>> substr('abcdef', 5)\n  'f'\n  >>> substr('abcdef', -3)\n  'cde'\n  >>> substr('abcdef', -4)\n  'bcde'\n  >>> substr('abcdef', -5)\n  'abcde'\n  >>> substr('abcdef', -6)\n  'abcdef'\n  >>> substr('abcdef', -7)\n  'abcdef'\n  */\nconst substr = (string, start) => {\n  if (start >= strlen(string)) return ''\n  const sub = string.slice(start)\n  return sub.length > 0? sub : string\n}\n\n/* Convert string to uppercase\n  >>> upper('abcdef')\n  'ABCDEF'\n  */\nconst upper = (string) => {\n  return string.toUpperCase()\n}\n\n/* Convert string to lowercase\n  >>> lower('ABCDEF')\n  'abcdef'\n  */\nconst lower = (string) => {\n  return string.toLowerCase()\n}\n\n/* Reverse string\n  >>> rev('abcdef')\n  'fedcba'\n  >>> rev('ABCDEF')\n  'FEDCBA'\n  */\nconst rev = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/* Trim whitespace\n  >>> trim(' abc ')\n  'abc'\n  >>> trim('  abc ')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  >>> trim('  abc')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.trim()\n}\n\n/*\n  >>> join(['a', 'b', 'c'],'')\n  'a b c'\n  >>> join(['a', 'b', 'c'], '')\n  'abc'\n  >>> join(['a', 'b', 'c'], 'x')\n  'axbxc'\n  >>> join(['a', 'b', 'c'],'')\n  'a b c'\n  >>> join([])\n  ''\n  >>> join([])\n  ''\n  >>> join([])\n  ''\n  >>> join([])\n  ''\n  */\nconst join = (array, sep) => {\n  return array.join(sep)\n}\n\n/*\n  >>> is_empty('')\n  true\n  >>> is_empty('  ')\n  true\n  >>> is_empty('a')\n  false\n  >>> is_empty('a ')\n  false\n  >>> is_empty('a b')\n  false\n  */\nconst is_empty = (string) => {\n  return string.length === 0\n}\n\n/*\n  >>> is_numeric('123')\n  true\n  >>> is_numeric('abc')\n  false\n  >>> is_numeric('a1')\n  false\n  >>> is_numeric('1a')\n  false\n  >>> is_numeric('2.3')\n  true\n  >>> is_numeric('1.23')\n  true\n  >>> is_numeric('0.0')\n  true\n  >>> is_numeric('123.0')\n  true\n  >>> is_numeric('0.123')\n  true\n  >>> is_numeric('-123.0')\n  true\n  >>> is_numeric('-0.123')\n  true\n  >>> is_numeric('-0.0')\n  true\n  >>> is_numeric('0.0')\n  true\n  */\nconst is_numeric = (string) => {\n  return string.match(/^[0-9]+(?:\\.[0-9]+)?$/)\n}\n\n/*\n  >>> is_alphabetic('a')\n  true\n  >>> is_alphabetic('a1')\n  false\n  >>> is_alphabetic('1a')\n  false\n  >>> is_alphabetic('2.3')\n  false\n  >>> is_alphabetic('1.23')\n  false\n  >>> is_alphabetic('0.0')\n  false\n  >>> is_alphabetic('123.0')\n  false\n  >>> is_alphabetic('0.123')\n  false\n  >>> is_alphabetic('-123.0')\n  false\n  >>> is_alphabetic('-0.123')\n  false\n  >>> is_alphabetic('-0.0')\n  false\n  >>> is_alphabetic('0.0')\n  false\n  */\nconst is_alphabetic = (string) => {\n  return string.match(/^[a-zA-Z]{1}[a-zA-Z0-9]*$/)\n}\n\n/*\n  >>> is_alpha('a')\n  true\n  >>> is_alpha('a1')\n  false\n  >>> is_alpha('1a')\n  false\n  >>> is_alpha('2.3')\n  false\n  >>> is_alpha('1.23')\n  false\n  >>> is_alpha('0.0')\n  false\n  >>> is_alpha('123.0')\n  false\n  >>> is_alpha('0.123')\n  false\n  >>> is_alpha('-123.0')\n  false\n  >>> is_alpha('-0.123')\n  false\n  >>> is_alpha('-0.0')\n  false\n  >>> is_alpha('0.0')\n  false\n  */\nconst is_alpha = (string) => {\n  return string.match(/^[a-zA-Z]+$/)\n}\n\nmodule.exports = {\n  strlen,\n  upper,\n  lower,\n  rev,\n  trim,\n  join,\n  is_empty,\n  is_numeric,\n  is_alphabetic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  const divisors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return largest_divisor_from_array(divisors);\n};\n\n/* Find the largest number that divides n evenly, smaller than n, given an array\n  >>> largest_divisor_from_array([4, 8, 16, 32])\n  4\n  >>> largest_divisor_from_array([5, 7, 9, 11])\n  5\n  >>> largest_divisor_from_array([4, 7, 9, 11, 13])\n  9\n  */\nconst largest_divisor_from_array = (arr) => {\n  if (arr.length === 1) {\n    return arr[0];\n  }\n  return largest_divisor_from_array(arr.slice(1));\n};\n\n/* Find the largest number that divides n evenly, smaller than n, given an array\n  >>> largest_divisor_from_array([4, 8, 16, 32])\n  4\n  >>> largest_divisor_from_array([5, 7, 9, 11])\n  5\n  >>> largest_divisor_from_array([4, 7, 9, 11, 13])\n  9\n  */\nconst largest_divisor_from_list = (arr) => {\n  const max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/* Find the largest number that divides n evenly, smaller than n, given an array\n  >>> largest_divisor_from_array([4, 8, 16, 32])\n  4\n  >>> largest_divisor_from_array([5, 7, 9, 11])\n  5\n  >>> largest_divisor_from_array([4, 7, 9, 11, 13])\n  9\n  */\nconst largest_divisor_from_list_array = (arr) => {\n  const max = largest_divisor_from_list(arr);\n  const nums = arr.map(n => n - max);\n  return largest_divisor_from_list(nums);\n};\n\n/*\n  >>> largest_divisor(15)\n  5\n  >>> largest_divisor(16)\n  2\n  >>> largest_divisor(17)\n  7\n  >>> largest_divisor(18)\n  3\n  >>> largest_divisor(21)\n  3\n  >>> largest_divisor(31)\n  11\n  >>> largest_divisor(40)\n  10\n  >>> largest_divisor(48)\n  12\n  >>> largest_divisor(55)\n  13\n  >>> largest_divisor(99)\n  11\n  >>> largest_divisor(200)\n  13\n  >>> largest_divisor(800)\n  29\n  >>> largest_divisor(900)\n  45\n  >>> largest_divisor(1000)\n  47\n  >>> largest_divisor(2000)\n  97\n  >>> largest_divisor(2000)\n  97\n  >>> largest_divisor(3000)\n  251\n  >>> largest_divisor(5000)\n  251\n  >>> largest_divisor(8000)\n  251\n  >>> largest_divisor(10000)\n  251\n  >>> largest_divisor(15000)\n  751\n  >>> largest_divisor(25000)\n  751\n  >>> largest_divisor(5001)\n  751\n  >>> largest_divisor(99999)\n  751\n  >>> largest_divisor(999999)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1000000)\n  751\n  >>> largest_divisor(1"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    const factors = []\n    let currFactor = 1\n    for (let i = 0; i < primes.length; i++) {\n        while (n % primes[i] === 0) {\n            factors.push(currFactor)\n            n = n / primes[i]\n        }\n        currFactor *= primes[i]\n    }\n    if (n!== 1) {\n        factors.push(n)\n    }\n    return factors\n}\n\n/* Return prime factorization of a given integer in the form of an array of factors.\n  Note: Only the first factorization of the given integer will be returned\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeInt = (n) => {\n    let factors = factorize(n)\n    let i = 0\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    let p = 1\n    while (i < factors.length) {\n        if (factors[i] < p) {\n            p *= primes[i]\n        } else {\n            break\n        }\n        i += 1\n    }\n    return p\n}\n\nmodule.exports = {\n    factorize,\n    factorizeInt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const result = []\n  const seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = true\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\nexport default flip_case;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((a, b) => a + b);\n};\n\n/*\n  * Return true if all strings in list are of equal length\n  * and contain the same characters\n  * Return false if any of the strings in list are not equal length\n  * or contain different characters\n  * Note: this function is slow.\n  *\n  * Examples:\n  *\n  *  >>> sameLength([])\n  *  true\n  *  >>> sameLength(['a'])\n  *  true\n  *  >>> sameLength(['a', 'b', 'c'])\n  *  true\n  *  >>> sameLength(['a', 'b', 'd'])\n  *  false\n  */\nconst sameLength = (strings) => {\n  const [length] = strings.map((s) => s.length);\n  const [lengthCount] = strings.map((s) => s.length);\n  return (lengthCount.every((n) => n === length));\n};\n\nmodule.exports = {\n  concatenate,\n  sameLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.slice(0, prefix.length) === prefix;\n  });\n};\n\n// Filters a list of strings for ones that start with a given prefix and then contain a given string.\n// The prefix must be in the front of the string.\nconst filter_by_prefix_and_contains = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// Filter a list of strings for ones that start with a given prefix and then contain a given string.\n// The prefix must be in the front of the string.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'array']\nconst filter_by_prefix_and_contains_2 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_3 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// Filters a list of strings for ones that start with a given prefix and then contain a given string.\n// The prefix must be in the front of the string.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_4 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_5 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_6 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_7 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_8 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_9 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes(contains));\n};\n\n// The idea of this filter is to return a list of strings that contain a given string,\n// but also start with a given prefix.\n// Ex: ['abc', 'bcd', 'cde', 'array', 'bob'], 'a', 'array' -> ['abc', 'bcd', 'cde', 'array', 'bob']\nconst filter_by_prefix_and_contains_10 = (strings, prefix, contains) => {\n  return filter_by_prefix(strings, prefix)\n   .map(string => string.slice(prefix.length))\n   .filter(string => string.includes"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return [...new Set(l.filter((v) => v > 0))];\n};\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  []\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst get_negative = (l) => {\n  return [...new Set(l.filter((v) => v < 0))];\n};\n\n/*\n  >>> get_odd([1, 2, 4, 5, 6])\n  [1, 3, 5]\n  >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [1, 3, 5, 9, 123, 1]\n  */\nconst get_odd = (l) => {\n  return [...new Set(l.filter((v) => v % 2 === 1))];\n};\n\n/*\n  >>> get_even([1, 2, 4, 5, 6])\n  []\n  >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 4, 6]\n  */\nconst get_even = (l) => {\n  return [...new Set(l.filter((v) => v % 2 === 0))];\n};\n\n/*\n  >>> get_unique([1, 2, 4, 5, 6])\n  [1, 2, 4, 5, 6]\n  >>> get_unique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_unique = (l) => {\n  return [...new Set(l)];\n};\n\nmodule.exports = {\n  get_positive,\n  get_negative,\n  get_odd,\n  get_even,\n  get_unique\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  const m = Math.floor(Math.sqrt(n));\n  for (let i = 2; i <= m; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default is_prime;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const size = xs.length\n  const zero = (x) => {\n    const isZero = xs.every((item) => item === 0)\n    if (isZero) return x\n    return 0\n  }\n  const maxValue = (x) => {\n    const maxValue = xs.reduce((prev, item) => {\n      return Math.max(prev, item)\n    }, 0)\n    return maxValue\n  }\n  const x = 0\n  const lastX = xs[size - 1]\n  while (true) {\n    if (zero(x)) {\n      return x\n    }\n    x += lastX\n  }\n}\n\n/*\n  >>> round(findZero([0, 1]), 2)\n  -1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2)\n  1.0\n  >>> round(findZero([1, 2, 3]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7]), 2)\n  0.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5]), 2)\n  1.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8]), 2)\n  0.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6]), 2)\n  1.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 2)\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]), 2)\n  1.0\n  >>> round(findZero([-6, 11"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  return l.sort((a, b) => {\n    return a % 3!= b % 3;\n  })\n}\n\n/**\n  * @param {number[]} numbers\n  * @return {number[]}\n  * \n  * This function returns a new array consisting of the sorted elements of the input array in non-decreasing order\n  */\nconst sort_asc = (numbers) => {\n  return sort_third(numbers.concat(numbers))\n}\n\n/**\n  * @param {number[]} numbers\n  * @return {number[]}\n  * \n  * This function returns a new array consisting of the sorted elements of the input array in non-increasing order\n  */\nconst sort_desc = (numbers) => {\n  return sort_third(numbers.concat(numbers)).reverse()\n}\n\n/**\n  * @param {number[]} numbers\n  * @return {number[]}\n  * \n  * This function returns a new array consisting of the sorted elements of the input array in non-decreasing order\n  */\nconst sort_asc_desc = (numbers) => {\n  return sort_desc(sort_asc(numbers))\n}\n\n/**\n  * @param {number[]} numbers\n  * @return {number[]}\n  * \n  * This function returns a new array consisting of the sorted elements of the input array in non-increasing order\n  */\nconst sort_third_asc_desc = (numbers) => {\n  return sort_desc(sort_third(numbers))\n}\n\n// _______________________________________________\n// Tests:\n\nconst test_sort_third = () => {\n  assert.deepEqual(sort_third([1, 2, 3]), [1, 2, 3],'sort_third([1, 2, 3])')\n  assert.deepEqual(sort_third([5, 6, 3, 4, 8, 9, 2]), [2, 6, 3, 4, 8, 9, 5],'sort_third([5, 6, 3, 4, 8, 9, 2])')\n}\n\nconst test_sort_asc = () => {\n  assert.deepEqual(sort_asc([1, 2, 3]), [1, 2, 3],'sort_asc([1, 2, 3])')\n  assert.deepEqual(sort_asc([5, 6, 3, 4, 8, 9, 2]), [2, 6, 3, 4, 8, 9, 5],'sort_asc([5, 6, 3, 4, 8, 9, 2])')\n}\n\nconst test_sort_desc = () => {\n  assert.deepEqual(sort_desc([1, 2, 3]), [3, 2, 1],'sort_desc([1, 2, 3])')\n  assert.deepEqual(sort_desc([5, 6, 3, 4, 8, 9, 2]), [9, 8, 5, 4, 3, 2, 6],'sort_desc([5, 6, 3, 4, 8, 9, 2])')\n}\n\nconst test_sort_asc_desc = () => {\n  assert.deepEqual(sort_asc_desc([1, 2, 3]), [1, 2, 3],'sort_asc_desc([1, 2, 3])')\n  assert.deepEqual(sort_asc_desc([5, 6, 3, 4, 8, 9, 2]), [5, 6, 3, 4, 2, 9, 8],'sort_asc_desc([5, 6, 3, 4, 8, 9, 2])')\n}\n\nconst test_sort_third_asc_desc = () => {\n  assert.deepEqual(sort_third_asc_desc([1, 2, 3]), [1, 2, 3],'sort_third_asc_desc([1, 2, 3])')\n  assert.deepEqual(sort_third_asc_desc([5, 6, 3, 4, 8, 9, 2]), [2, 6, 3, 4, 9, 8, 5],'sort_third_asc_desc([5, 6, 3, 4, 8, 9, 2])')\n}\n\n// _______________________________________________\n\n/*\n  This comment is required by JSHint.\n  It is not a test, but a useful fact.\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const length = l.length;\n  if (length === 0) {\n    throw new Error(\"The list is empty.\");\n  }\n  let max = l[0];\n  for (let i = 1; i < length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if ((n % i === 0) && (i % 11 === 0 || i % 13 === 0)) {\n      count++\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const len = l.length\n  if (len % 2 === 0) {\n    return l\n  }\n  return [...l,...l.sort()]\n}\n\n/**\n  * Takes a list l and returns a list l' such that\n  * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  * to the values of the even indicies of l, but sorted.\n  * \n  * Example:\n  * \n  *   sort_odd([1, 2, 3])\n  *   => [1, 2, 3]\n  *\n  *   sort_odd([5, 6, 3, 4])\n  *   => [5, 6, 3, 4]\n  * \n  * @param {Array} l The list to sort.\n  * @return {Array} The sorted list.\n  * @example\n  * sort_odd([1, 2, 3])\n  * => [1, 2, 3]\n  * \n  * sort_odd([5, 6, 3, 4])\n  * => [5, 6, 3, 4]\n  */\nconst sort_odd = (l) => {\n  const len = l.length\n  if (len % 2!== 0) {\n    return l\n  }\n  return [...l,...l.sort()]\n}\n\nexport default {\n  sort_even,\n  sort_odd\n}<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var decoded = [], decoded2 = [];\n  for (let i = 0; i < s.length; i++) {\n    decoded.push(s.slice(i, i + 3));\n    decoded2.push(s.slice(i, i + 4));\n  }\n  return decoded.join('') + decoded2.join('');\n}\n\nconst decode = (s) => {\n  if (s.length == 0)\n    return '';\n  if (s.length == 1)\n    return decodeCyclic(s);\n  if (s.length > 3)\n    return s.slice(1, -1);\n  return decodeCyclic(s);\n}\n\n/*\n  encodes string by applying the base-26 algorithm.\n  */\nconst encode = (s) => {\n  var encoded = [], encoded2 = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let d = c - 'A';\n    if (d < 0)\n      d = 26 + d;\n    encoded.push(d.toString());\n    if (i < s.length - 1) {\n      let e = s[i + 1];\n      let f = e - 'A';\n      if (f < 0)\n        f = 26 + f;\n      encoded2.push(f.toString());\n    }\n  }\n  return encoded.join('') + encoded2.join('');\n}\n\nexport {\n  encode,\n  decode,\n  decodeCyclic,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  const fib = fibonacci(n);\n  const prime = (n) => {\n    for (let i = 0; i < fib.length; i++) {\n      if (fib[i] % 2 === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return prime(n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const sum = 0\n  for (let i = 0; i < l.length; i++) {\n    const element = l[i]\n    const sub_sum = element - sum\n    sum += element\n    if (sub_sum!== 0 && i < l.length - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default triples_sum_to_zero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n    let collision_count = 0;\n    const car = new Array(n);\n    for(let i = 0; i < n; i++) {\n        car[i] = {\n            left: false,\n            right: false\n        };\n    }\n\n    for(let i = 0; i < n; i++) {\n        if(car[i].left) {\n            for(let j = i; j < n - 1; j++) {\n                if(car[j].right) {\n                    collision_count++;\n                    car[i].left = false;\n                    car[j].right = false;\n                }\n            }\n        }\n\n        if(car[i].right) {\n            for(let j = i; j < n - 1; j++) {\n                if(car[j].left) {\n                    collision_count++;\n                    car[i].right = false;\n                    car[j].left = false;\n                }\n            }\n        }\n    }\n\n    return collision_count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const list = l.slice();\n  list.push(l[l.length - 1] + 1);\n  return list;\n};\n\n/**\n  * Return list with elements decremented by 1.\n  * @param {Array} l - list\n  * @returns {Array}\n  * @example\n  *\n  *   decr_list([1, 2, 3])\n  *   // => [1, 2, 3]\n  *\n  *   decr_list([1, 2, 3, 4])\n  *   // => [1, 2, 3]\n  *\n  *   decr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  *   // => [6, 4, 6, 3, 4, 4, 9, 1, 123]\n  */\nconst decr_list = (l) => {\n  const list = l.slice();\n  list.pop();\n  list.push(l[l.length - 1] - 1);\n  return list;\n};\n\n/**\n  * Return list with elements removed with the specified number of elements.\n  * @param {Array} l - list\n  * @param {Number} n - number of elements to be removed\n  * @returns {Array}\n  * @example\n  *\n  *   remove_list([1, 2, 3, 4], 2)\n  *   // => [1, 3]\n  *\n  *   remove_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  *   // => [1, 2, 5, 6, 7, 8, 9, 10]\n  */\nconst remove_list = (l, n) => {\n  const list = l.slice();\n  list.splice(n, l.length - n);\n  return list;\n};\n\n/**\n  * Return list with elements removed with the specified index.\n  * @param {Array} l - list\n  * @param {Number} index - index of elements to be removed\n  * @returns {Array}\n  * @example\n  *\n  *   remove_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  *   // => [1, 2, 4, 5, 6, 7, 8, 9, 10]\n  *\n  *   remove_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n  *   // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst remove_list_index = (l, index) => {\n  const list = l.slice();\n  list.splice(index, l.length - index);\n  return list;\n};\n\n/**\n  * Return list with elements inserted at the specified index.\n  * @param {Array} l - list\n  * @param {Number} index - index of elements to be removed\n  * @returns {Array}\n  * @example\n  *\n  *   insert_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  *   // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3]\n  *\n  *   insert_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9)\n  *   // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9]\n  */\nconst insert_list_index = (l, index) => {\n  const list = l.slice();\n  list.splice(index, 0, l[index]);\n  return list;\n};\n\n/**\n  * Return list with elements reversed.\n  * @param {Array} l - list\n  * @returns {Array}\n  * @example\n  *\n  *   reverse_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  *   // => [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst reverse_list = (l) => {\n  const list = l.slice();\n  for (let i = 0, len = list.length / 2; i < len; i++) {\n    const t = list[i];\n    list[i] = list[list.length - i - 1];\n    list[list.length - i - 1] = t;\n  }\n  return list;\n};\n\nexport default {\n  incr_list,\n  decr_list,\n  remove_list,\n  remove_list_index,\n  insert_list_index,\n  reverse_list\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sorted = l.sort();\n  let left = 0;\n  let right = sorted.length - 1;\n\n  while (left < right) {\n    if (sorted[left] + sorted[right] < 0) {\n      return false;\n    }\n\n    let diff = sorted[left] - sorted[right];\n    if (diff === 0) {\n      left += 1;\n      right -= 1;\n    } else if (diff > 0) {\n      right -= 1;\n    } else {\n      left += 1;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = pairs_sum_to_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const num = Number(x);\n  const output = num.toString(base);\n  const output_len = output.length;\n  const output_len_diff = output_len - num.toString(10).length;\n  const zeros = new Array(output_len_diff).fill('0');\n  return zeros.concat(output);\n};\n\n/**\n  * Convert the base of a number to the base of a number\n  * @param  {number} input the number\n  * @param  {number} base the base of the number\n  * @return {number}      the number converted to the base\n  * @example\n  * convert_base(10, 3)\n  * // => 3\n  * convert_base(10, 2)\n  * // => 6\n  */\nconst convert_base = (input, base) => {\n  const num = Number(input);\n  return num.toString(base);\n};\n\nexport {\n  change_base,\n  convert_base,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  const b = (a * h) / 2\n  return (Math.sqrt(a * a + b * b) - a) / 2\n}\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance(triangle([1, 2, 3]), [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => {\n  const a = p[0] - triangle[0]\n  const b = p[1] - triangle[1]\n  const c = p[2] - triangle[2]\n  const s = (a * a + b * b + c * c) ** 0.5\n  return Math.sqrt(s)\n}\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the area of the triangle\n  formed by the three points.\n  >>> triangle_area([1, 2, 3], [2, 3, 4])\n  7.5\n  */\nconst triangle_area = (triangle, p) => triangle_area(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and a point p, find the distance of p to the triangle.\n  >>> triangle_distance([1, 2, 3], [2, 3, 4])\n  2\n  */\nconst triangle_distance = (triangle, p) => triangle_distance(triangle[0], triangle[1], triangle[2])\n\n/*\n  Given a triangle and"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 0\n    } else if (n === 2) {\n        return 2\n    } else if (n === 3) {\n        return 0\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\n/*\n  *  The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 1\n  fib5(2) -> 1\n  fib5(3) -> 2\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5) + fib5(n-6) + fib5(n-7) + fib5(n-8) + fib5(n-9) + fib5(n-10) + fib5(n-11) + fib5(n-12) + fib5(n-13) + fib5(n-14) + fib5(n-15) + fib5(n-16) + fib5(n-17) + fib5(n-18) + fib5(n-19) + fib5(n-20) + fib5(n-21) + fib5(n-22) + fib5(n-23) + fib5(n-24) + fib5(n-25) + fib5(n-26) + fib5(n-27) + fib5(n-28) + fib5(n-29) + fib5(n-30) + fib5(n-31) + fib5(n-32) + fib5(n-33) + fib5(n-34) + fib5(n-35) + fib5(n-36) + fib5(n-37) + fib5(n-38) + fib5(n-39) + fib5(n-40) + fib5(n-41) + fib5(n-42) + fib5(n-43) + fib5(n-44) + fib5(n-45) + fib5(n-46) + fib5(n-47) + fib5(n-48) + fib5(n-49) + fib5(n-50) + fib5(n-51) + fib5(n-52) + fib5(n-53) + fib5(n-54) + fib5(n-55) + fib5(n-56) + fib5(n-57) + fib5(n-58) + fib5(n-59) + fib5(n-60) + fib5(n-61) + fib5(n-62) + fib5(n-63) + fib5(n-64) + fib5(n-65) + fib5(n-66) + fib5(n-67) + fib5(n-68) + fib5(n-69) + fib5(n-70) + fib5(n-71) + fib5(n-72) + fib5(n-73) + fib5(n-74) + fib5(n-75) + fib5(n-76) + fib5(n-77) + fib5(n-78) + fib5(n-79) + fib5(n-80) + fib5(n-81) + fib5(n-82) + fib5(n-83) + fib5(n-84) + fib5(n-85) + fib5(n-86) + fib5(n-87) + fib5(n-88) + fib5(n-89) + fib5(n-90) + fib5(n-91) + fib5(n-92) + fib5(n-93) + fib5(n-94) + fib5(n-95) + fib5(n-96) + fib5(n-97) + fib5(n-98) + fib5(n-99) + fib5(n-100) + fib5(n-101) + fib5(n-102) + fib5(n-103) + fib5(n-104) + fib5(n-105) + fib5(n-106) + fib5(n-107) + fib5(n-108) + fib5(n-109) + fib5(n-110) + fib5(n-111) + fib5(n-112) + fib5(n-113) + fib5(n-114) + fib5(n-115) + fib5(n-116) + fib5(n-117) + fib5(n-118) + fib5(n-119) + fib5(n-120) + fib5(n-121) + fib5(n-122) + fib5(n-123) + fib5(n-124) + fib5(n-125) + fib5(n-126) + fib5(n-127) + fib5(n-128) + fib5(n-129) + fib5(n-130) + fib5(n-131) + fib5(n-132) + fib5(n-133) + fib5(n-134) + fib5(n-135) + fib5(n-136) + fib5(n-137) + fib5(n-138) + fib5(n-139) + fib5(n-140) + fib5(n-141) + fib5(n-142) + fib5(n-143) + fib5(n-144) + fib5(n-145) + fib5(n-146) + fib5(n-147) + fib"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length\n  let i = 0\n  let j = n - 1\n  let t = 0\n  while (i < j) {\n    const t = (l[i] + l[j]) / 2\n    if (l[i] < t) {\n      i++\n    } else if (l[j] < t) {\n      j--\n    } else {\n      return t\n    }\n  }\n  if (l[i] < l[j]) {\n    return l[i]\n  } else {\n    return l[j]\n  }\n}\n\nexport { median }\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  if (text.length === 0) return true\n  const text = text.split('')\n  return text.every(x => x === text[text.length - 1 - x])\n}\n\nmodule.exports = {\n  is_palindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const t = n % p\n  return (t >= p / 2)? t - p : t\n}\n\n/**\n  * Returns the sum of the first n natural numbers.\n  *\n  * @param {number} n the number of natural numbers to sum\n  * @return {number} the sum of the first n natural numbers\n  *\n  * @example\n  *\n  *   sumN(1) // 1\n  *   sumN(2) // 3\n  *   sumN(3) // 6\n  *   sumN(4) // 10\n  *   sumN(5) // 15\n  *   sumN(6) // 21\n  *   sumN(7) // 28\n  */\nconst sumN = (n = 1) => {\n  const sum = 1\n  for (let i = 2; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n natural numbers.\n  *\n  * @param {number} n the number of natural numbers to sum\n  * @return {number} the sum of the first n natural numbers\n  *\n  * @example\n  *\n  *   sumN(1) // 1\n  *   sumN(2) // 3\n  *   sumN(3) // 6\n  *   sumN(4) // 10\n  *   sumN(5) // 15\n  *   sumN(6) // 21\n  *   sumN(7) // 28\n  */\nconst sumNp = (n = 1) => {\n  const sum = 1\n  for (let i = 2; i <= n; i++) {\n    sum += i * i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n natural numbers.\n  *\n  * @param {number} n the number of natural numbers to sum\n  * @return {number} the sum of the first n natural numbers\n  *\n  * @example\n  *\n  *   sumN(1) // 1\n  *   sumN(2) // 3\n  *   sumN(3) // 6\n  *   sumN(4) // 10\n  *   sumN(5) // 15\n  *   sumN(6) // 21\n  *   sumN(7) // 28\n  */\nconst sumNpp = (n = 1) => {\n  const sum = 1\n  for (let i = 2; i <= n; i++) {\n    sum += i * i * i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n natural numbers.\n  *\n  * @param {number} n the number of natural numbers to sum\n  * @return {number} the sum of the first n natural numbers\n  *\n  * @example\n  *\n  *   sumN(1) // 1\n  *   sumN(2) // 3\n  *   sumN(3) // 6\n  *   sumN(4) // 10\n  *   sumN(5) // 15\n  *   sumN(6) // 21\n  *   sumN(7) // 28\n  */\nconst sumNppp = (n = 1) => {\n  const sum = 1\n  for (let i = 2; i <= n; i++) {\n    sum += i * i * i * i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n natural numbers.\n  *\n  * @param {number} n the number of natural numbers to sum\n  * @return {number} the sum of the first n natural numbers\n  *\n  * @example\n  *\n  *   sumN(1) // 1\n  *   sumN(2) // 3\n  *   sumN(3) // 6\n  *   sumN(4) // 10\n  *   sumN(5) // 15\n  *   sumN(6) // 21\n  *   sumN(7) // 28\n  */\nconst sumNpppp = (n = 1) => {\n  const sum = 1\n  for (let i = 2; i <= n; i++) {\n    sum += i * i * i * i * i\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let i = 0;\n  let k = 0;\n  let enc = encode_shift(s);\n  let dec = \"\";\n\n  while (i < enc.length) {\n    k = ((k + 1) % 26) + \"a\".charCodeAt(0);\n    dec += String.fromCharCode(\n      (((k - enc.charCodeAt(i)) % 26) + \"a\".charCodeAt(0)) % 26\n    );\n    i += 1;\n  }\n  return dec;\n}\n\n/*\n  takes as input string to be encoded.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string to be decoded.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n    if (!text) {\n        return '';\n    }\n    text = text.toUpperCase();\n    const vowels = ['A','E','I','O','U','Y','A','E','I','O','U','Y'];\n    const result = text.replace(/[AEIOUY]/g, '');\n    return result;\n};\n\nmodule.exports = remove_vowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  const t_minus_l = t - l\n  return l < t? l < t_minus_l : false\n}\n\n/*\n  Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold = (l, t) => {\n  const t_minus_l = t - l\n  return l < t? l <= t_minus_l : false\n}\n\n/*\n  Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  const t_minus_l = t - l\n  return l < t? l > t_minus_l : false\n}\n\n/*\n  Return the average of the numbers in the list l.\n  >>> average([1, 2, 4, 10])\n  5.0\n  >>> average([1, 20, 4, 10])\n  20.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length\n}\n\n/*\n  Return the median of the numbers in the list l.\n  >>> median([1, 2, 4, 10])\n  4.0\n  >>> median([1, 20, 4, 10])\n  10.0\n  */\nconst median = (l) => {\n  const half = l.length / 2\n  const first = l[half]\n  const second = l[half + 1]\n  return (first + second) / 2\n}\n\n/*\n  Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 4, 10])\n  10\n  >>> mode([1, 20, 4, 10])\n  4\n  */\nconst mode = (l) => {\n  const max = max_value(l)\n  const min = min_value(l)\n  let mode = l[0]\n  let count = 0\n  l.forEach(val => {\n    if (val === max) {\n      count += 1\n      mode = val\n    }\n  })\n  return count > 1? mode : mode + 1\n}\n\n/*\n  Return the maximum number in the list l.\n  >>> max_value([1, 2, 4, 10])\n  10\n  >>> max_value([1, 20, 4, 10])\n  20\n  */\nconst max_value = (l) => {\n  return Math.max.apply(Math, l)\n}\n\n/*\n  Return the minimum number in the list l.\n  >>> min_value([1, 2, 4, 10])\n  1\n  >>> min_value([1, 20, 4, 10])\n  1\n  */\nconst min_value = (l) => {\n  return Math.min.apply(Math, l)\n}\n\n/*\n  Return the sum of the numbers in the list l.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 20, 4, 10])\n  44\n  */\nconst sum = (l) => {\n  return l.reduce((previous, current) => previous + current, 0)\n}\n\n/*\n  Return the variance of the numbers in the list l.\n  >>> variance([1, 2, 4, 10])\n  28.0\n  >>> variance([1, 20, 4, 10])\n  60.0\n  */\nconst variance = (l) => {\n  return sum(l) / l.length - average(l) ** 2\n}\n\n/*\n  Return the standard deviation of the numbers in the list l.\n  >>> std_dev([1, 2, 4, 10])\n  4.0\n  >>> std_dev([1, 20, 4, 10])\n  6.0\n  */\nconst std_dev = (l) => {\n  return Math.sqrt(variance(l))\n}\n\n/*\n  Return the range of the numbers in the list l.\n  >>> range([1, 2, 4, 10])\n  [1, 2, 4, 10]\n  >>> range([1, 20, 4, 10])\n  [1, 4, 10]\n  */\nconst range = (l) => {\n  return [min_value(l), max_value(l)]\n}\n\n/*\n  Return the skewness of the numbers in the list l.\n  >>> skewness([1, 2, 4, 10])\n  0.0\n  >>> skewness([1, 20, 4, 10])\n  -0.5\n  */\nconst skewness = (l) => {\n  const mean = average(l)\n  const sum = 0\n  l.forEach(val => {\n    sum += (val - mean) ** 3\n  })\n  return sum / l.length\n}\n\n/*\n  Return the kurtosis of the numbers in the list l.\n  >>> kurtosis([1, 2, 4, 10])\n  0.0\n  >>> kurtosis([1, 20, 4, 10])\n  -1.2\n  */\nconst kurtosis = (l) => {\n  const mean = average(l)\n  const sum = 0\n  l.forEach(val => {\n    sum += (val - mean) ** 4\n  })\n  return sum / l.length\n}\n\nmodule.exports = {\n  sum,\n  average,\n  median,\n  mode,\n  max_value,\n  min_value,\n  std_dev,\n  variance,\n  range,\n  skewness,\n  kurtosis\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Returns a random number between 1 and 100\n  >>> rand(1, 100)\n  1\n  >>> rand(1, 99)\n  2\n  >>> rand(1, 100)\n  98\n  >>> rand(1, 101)\n  99\n  >>> rand(100, 1)\n  98\n  >>> rand(99, 100)\n  1\n  >>> rand(100, 101)\n  98\n  */\nconst rand = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/*\n  Returns a random string of length N\n  >>> randstr(3)\n  'jqm'\n  >>> randstr(5)\n  'jqmn'\n  >>> randstr(4)\n  'jqmnu'\n  >>> randstr(4)\n  'jqmnul'\n  */\nconst randstr = (n) => {\n  let s = \"\";\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(rand(65, 90));\n  }\n  return s;\n};\n\n/*\n  Returns a random number in [0, N)\n  >>> randnum(3)\n  2\n  >>> randnum(5)\n  4\n  >>> randnum(4)\n  5\n  >>> randnum(4)\n  5\n  */\nconst randnum = (N) => {\n  return Math.floor(Math.random() * N);\n};\n\n/*\n  Returns a random number in [0, 1)\n  >>> randfrac(3)\n  0.5\n  >>> randfrac(5)\n  0.75\n  >>> randfrac(4)\n  0.25\n  */\nconst randfrac = (N) => {\n  return Math.random();\n};\n\nmodule.exports = {\n  add,\n  rand,\n  randstr,\n  randnum,\n  randfrac\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  const char_arr = s0.split('')\n  const char_arr2 = s1.split('')\n  if (char_arr.length!== char_arr2.length) {\n    return false\n  }\n  for (let i = 0; i < char_arr.length; i++) {\n    if (char_arr[i]!== char_arr2[i]) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n === 1) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n};\n\n/*Return n-th Catalan number.\n  >>> catalan(10)\n  131074\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  40320\n  */\nconst catalan = (n) => {\n    if (n === 1) {\n        return 1;\n    } else {\n        return catalan(n - 1) + catalan(n - 2);\n    }\n};\n\nmodule.exports = {\n    fib,\n    catalan\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  if (!brackets) return false\n\n  const brackets_string = brackets.split('')\n  const brackets_length = brackets_string.length\n  let bracket_counter = 0\n  for (let i = 0; i < brackets_length; i++) {\n    if (brackets_string[i] === '<') {\n      bracket_counter++\n    } else if (brackets_string[i] === '>') {\n      bracket_counter--\n      if (bracket_counter < 0) return false\n    }\n  }\n  return bracket_counter === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    if(!Array.isArray(l)) return false;\n    const a = l.slice();\n    for(let i = 1; i < a.length; i++) {\n        if(a[i - 1] >= a[i]) return true;\n    }\n    return false;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const list1 = l1.slice();\n    const list2 = l2.slice();\n    const result = [];\n    const l1Len = list1.length;\n    const l2Len = list2.length;\n    const i = 0;\n    const j = 0;\n    const commonLen = 0;\n    while (i < l1Len && j < l2Len) {\n        if (list1[i] === list2[j]) {\n            result.push(list1[i]);\n            commonLen++;\n            i++;\n            j++;\n        } else if (list1[i] < list2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result.slice(0, commonLen);\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n    let prime = 2;\n    while (prime * prime < n) {\n        if (n % prime === 0) {\n            return prime;\n        }\n        prime += 1;\n    }\n    return n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  const sum = 1\n  while (sum <= n) {\n    sum += sum\n  }\n  return sum - 1\n}\n\n/*\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n  30\n  >>> sum_to_n(20)\n  65\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(1)\n  1\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(15)\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  if (!brackets || brackets.length === 0) {\n    return false;\n  }\n  let last = brackets[0];\n  for (let i = 1; i < brackets.length; i++) {\n    if (brackets[i]!== '(') {\n      return false;\n    }\n    last = brackets[i];\n  }\n  return brackets.indexOf(last)!== -1;\n};\n\nexport { correct_bracketing };\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if(xs.length === 1) {\n    return xs\n  }\n  let derivative = xs.slice(1)\n  for(let i = 0; i < derivative.length; i++) {\n    derivative[i] = xs[i] * (xs[i] + 1)\n  }\n  return derivative\n}\n\n/**\n  * @description Given a list of numbers, return the sum of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Sum of all numbers\n  */\nconst sum = (xs) => {\n  return xs.reduce((a, b) => a + b)\n}\n\n/**\n  * @description Given a list of numbers, return the sum of the squares\n  * of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Sum of all squares\n  */\nconst sumOfSquares = (xs) => {\n  return xs.reduce((a, b) => a + b * b)\n}\n\n/**\n  * @description Given a list of numbers, return the difference between the\n  * sum of the numbers and the sum of the squares\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Difference between sum of numbers and sum of squares\n  */\nconst difference = (xs) => {\n  return sum(xs) - sumOfSquares(xs)\n}\n\n/**\n  * @description Given a list of numbers, return the product of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Product of all numbers\n  */\nconst product = (xs) => {\n  return xs.reduce((a, b) => a * b)\n}\n\n/**\n  * @description Given a list of numbers, return the difference between the\n  * product of the numbers and the sum of the squares\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Difference between product of numbers and sum of squares\n  */\nconst differenceProduct = (xs) => {\n  return product(xs) - productOfSquares(xs)\n}\n\n/**\n  * @description Given a list of numbers, return the sum of the squares of the\n  * differences between the numbers and the product of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Sum of squares of difference between numbers and product of numbers\n  */\nconst differenceSquared = (xs) => {\n  return sumOfSquares(derivative(xs)) - productOfSquares(xs)\n}\n\n/**\n  * @description Given a list of numbers, return the difference between the\n  * product of the numbers and the sum of the squares of the differences between the\n  * numbers and the product of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Difference between product of numbers and sum of squares of difference between numbers and product of numbers\n  */\nconst differenceSquaredProduct = (xs) => {\n  return productOfSquares(derivative(xs)) - sumOfSquares(derivative(xs))\n}\n\n/**\n  * @description Given a list of numbers, return the difference between the\n  * product of the numbers and the sum of the squares of the differences between the\n  * numbers and the product of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Difference between product of numbers and sum of squares of difference between numbers and product of numbers\n  */\nconst differenceProductSquared = (xs) => {\n  return differenceSquared(derivative(xs)) - differenceSquaredProduct(xs)\n}\n\n/**\n  * @description Given a list of numbers, return the difference between the\n  * sum of the squares of the differences between the numbers and the product of the numbers\n  * @param {Array} xs - Array of numbers\n  * @return {Number} - Difference between sum of squares of difference between numbers and product of numbers\n  */\nconst differenceProductSquaredDifference = (xs) => {\n  return sumOfSquares(derivative(derivative(xs))) - productOfSquares(xs)\n}\n\nexport {\n  sum,\n  sumOfSquares,\n  difference,\n  differenceProduct,\n  differenceSquared,\n  differenceSquaredProduct,\n  differenceProductSquared,\n  differenceProductSquaredDifference\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib_rec = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib_rec(n - 1) + fib_rec(n - 2)\n}\n\nconst fib_seq = (n) => {\n  const fib_seq_seq = []\n  for (let i = 0; i <= n; i++) {\n    fib_seq_seq[i] = fib_seq(i)\n  }\n  return fib_seq_seq\n}\n\nconst test_fib = (n) => {\n  return fib(n)\n}\n\nconst test_fib_rec = (n) => {\n  return fib_rec(n)\n}\n\nconst test_fib_seq = (n) => {\n  return fib_seq(n)\n}\n\nconst test_fib_seq_rec = (n) => {\n  return fib_seq_rec(n)\n}\n\nconst test_fibfib = (n) => {\n  return fibfib(n)\n}\n\nconst test_fibfib_rec = (n) => {\n  return fibfib_rec(n)\n}\n\nconst test_fibfib_seq = (n) => {\n  return fibfib_seq(n)\n}\n\nconst test_fibfib_seq_rec = (n) => {\n  return fibfib_seq_rec(n)\n}\n\nconst test_fibfibfib = (n) => {\n  return fibfibfib(n)\n}\n\nconst test_fibfibfib_rec = (n) => {\n  return fibfibfib_rec(n)\n}\n\nconst test_fibfibfib_seq = (n) => {\n  return fibfibfib_seq(n)\n}\n\nconst test_fibfibfib_seq_rec = (n) => {\n  return fibfibfib_seq_rec(n)\n}\n\nconst test_fibfibfibfib = (n) => {\n  return fibfibfibfib(n)\n}\n\nconst test_fibfibfibfib_rec = (n) => {\n  return fibfibfibfib_rec(n)\n}\n\nconst test_fibfibfibfib_seq = (n) => {\n  return fibfibfibfib_seq(n)\n}\n\nconst test_fibfibfibfib_seq_rec = (n) => {\n  return fibfibfibfib_seq_rec(n)\n}\n\nconst test_fibfibfibfibfib = (n) => {\n  return fibfibfibfibfib(n)\n}\n\nconst test_fibfibfibfibfib_rec = (n) => {\n  return fibfibfibfibfib_rec(n)\n}\n\nconst test_fibfibfibfibfib_seq = (n) => {\n  return fibfibfibfibfib_seq(n)\n}\n\nconst test_fibfibfibfibfib_seq_rec = (n) => {\n  return fibfibfibfibfib_seq_rec(n)\n}\n\nconst test_fibfibfibfibfibfib = (n) => {\n  return fibfibfibfibfibfib(n)\n}\n\nconst test_fibfibfibfibfibfib_rec = (n) => {\n  return fibfibfibfibfibfib_rec(n)\n}\n\nconst test_fibfibfibfibfibfib_seq = (n) => {\n  return fibfibfibfibfibfib_seq(n)\n}\n\nconst test_fibfibfibfibfibfib_seq_rec = (n) => {\n  return fibfibfibfibfibfib_seq_rec(n)\n}\n\nconst test_fibfibfibfibfibfibfib = (n) => {\n  return fibfibfibfibfibfibfib(n)\n}\n\nconst test_fibfibfibfibfibfibfib_rec = (n) => {\n  return fibfibfibfibfibfibfib_rec(n)\n}\n\nconst test_fibfibfibfibfibfibfib_seq = (n) => {\n  return fibfibfibfibfibfibfib_seq(n)\n}\n\nconst test_fibfibfibfibfibfibfib_seq_rec = (n) => {\n  return fibfibfibfibfibfibfib_seq_rec(n)\n}\n\nconst test_fibfibfibfibfibfibfibfib = (n) => {\n  return fibfibfibfibfibfibfibfib(n)\n}\n\nconst test_fibfibfibfibfibfibfibfib_rec ="}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let len = s.length;\n  let vowels = [...new Set(['a', 'e', 'i', 'o', 'u', 'y']),...new Set(['y'])];\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(vowels_count(\"abcde\"));\nconsole.log(vowels_count(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n    let i = x.length - shift;\n    let s = x.slice();\n    s.reverse();\n    s.splice(i, 0,...s);\n    return s.join('');\n}\n\n// Reverse digits of a number\nconst reverse = (n) => {\n    let s = '';\n    while (n) {\n        s = n % 10 + s;\n        n = n / 10;\n    }\n    return s;\n}\n\n// Reverse digits of a string\nconst reverse_str = (s) => {\n    return s.split('').reverse().join('');\n}\n\n// Print a circular shift\nconst show_shift = (x, shift) => {\n    let result = '(' + x + ')'+ circular_shift(x, shift);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_shift = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + circular_shift(x, shift);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_shift = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + circular_shift(x, shift);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse_shift = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + circular_shift(x, shift);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse_reverse = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse_reverse_shift = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + circular_shift(x, shift);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse_reverse_reverse = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse_reverse_reverse_shift = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + circular_shift(x, shift);\n    if (shift > 0) {\n        let r = reverse(x);\n        result +='' + r +'' + reverse_str(r);\n    }\n    return result;\n}\n\n// Print a circular shift\nconst show_reverse_reverse_reverse_reverse_reverse_reverse = (x, shift) => {\n    let result = '(' + x + ')'+ reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x) +'' + reverse(x);\n    if (shift > 0) {\n        let r = reverse("}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n    const digits = s.split('')\n    let sum = 0\n\n    for (let i = 0; i < digits.length; i++) {\n        sum += parseInt(digits[i], 10)\n    }\n\n    return sum\n}\n\nconsole.log(digit_sum('abAB'))\nconsole.log(digit_sum('abcCd'))\nconsole.log(digit_sum('helloE'))\nconsole.log(digit_sum('woArBld'))\nconsole.log(digit_sum('aAaaaXa'))<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n    let n_apples = s.split(\" \")[0];\n    let n_oranges = s.split(\" \")[1];\n    let n_mango = n - n_apples - n_oranges;\n    return n_mango;\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution_v2 = (s, n) => {\n    let n_apples = Number(s.split(\" \")[0]);\n    let n_oranges = Number(s.split(\" \")[1]);\n    let n_mango = Number(n) - n_apples - n_oranges;\n    return n_mango;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const index = (arr.length === 0)? -1 : arr.reduce((acc, node, i) => {\n    if (node % 2 === 0) {\n      if (acc === -1) {\n        return i;\n      } else {\n        return Math.min(acc, i);\n      }\n    }\n    return acc;\n  }, -1);\n  return (index!== -1)? [arr[index], index] : [];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search2 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search3 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search4 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search5 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search6 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search7 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search8 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search9 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search10 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search11 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search12 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search13 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search14 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search15 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search16 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search17 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search18 = (lst) => {\n  const count = lst.reduce((acc, el) => (acc + (el > 0? el : 0)), 0)\n  return lst.reduce((acc, el) => (el > 0? el : (count > el? count : el)), -1)\n}\n\nconst search19 = (lst"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => a - b);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(Math.min(list[i], new_list[new_list.length - 1]));\n  }\n  return new_list;\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sorted sorting, is when you start with the maximum value,\n  then minimum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sorted_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sorted_sort_list([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sorted_sort_list([]) == []\n  */\nconst sorted_sort_list = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => b - a);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(Math.max(list[i], new_list[new_list.length - 1]));\n  }\n  return new_list;\n}\n\n/*\n  Given list of integers, return list in sorted order, with largest first.\n\n  Examples:\n  sorted_largest_first_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sorted_largest_first_sort_list([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sorted_largest_first_sort_list([]) == []\n  */\nconst sorted_largest_first_sort_list = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => b - a);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(list[i]);\n  }\n  return new_list;\n}\n\n/*\n  Given list of integers, return list in sorted order, with smallest first.\n\n  Examples:\n  sorted_smallest_first_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sorted_smallest_first_sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sorted_smallest_first_sort_list([]) == []\n  */\nconst sorted_smallest_first_sort_list = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => a - b);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(list[i]);\n  }\n  return new_list;\n}\n\n/*\n  Given list of integers, return list in sorted order, with largest first.\n\n  Examples:\n  sorted_largest_first_sort_list_2([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sorted_largest_first_sort_list_2([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sorted_largest_first_sort_list_2([]) == []\n  */\nconst sorted_largest_first_sort_list_2 = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => b - a);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(list[i]);\n  }\n  return new_list;\n}\n\n/*\n  Given list of integers, return list in sorted order, with smallest first.\n\n  Examples:\n  sorted_smallest_first_sort_list_2([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sorted_smallest_first_sort_list_2([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sorted_smallest_first_sort_list_2([]) == []\n  */\nconst sorted_smallest_first_sort_list_2 = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => a - b);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(list[i]);\n  }\n  return new_list;\n}\n\n/*\n  Given list of integers, return list in sorted order, with smallest first.\n\n  Examples:\n  sorted_smallest_first_sort_list_3([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sorted_smallest_first_sort_list_3([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sorted_smallest_first_sort_list_3([]) == []\n  */\nconst sorted_smallest_first_sort_list_3 = (lst) => {\n  let list = lst.slice(0);\n  list.sort((a, b) => a - b);\n  let new_list = [list[0]];\n  for (let i = 1; i < list.length; i++) {\n    new_list.push(list[i]);\n  }\n  return new_list;\n}\n\nexport {\n  strange_sort_list,\n"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const a_len = a + b + c;\n  const b_len = b + c;\n  const c_len = c + a;\n  if (a_len <= b_len && b_len <= c_len) {\n    return ((a * b) / 2 + (b * c) / 2 + (c * a) / 2) / 2;\n  }\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  let sum = 0;\n  q.forEach(n => {\n    sum += n;\n  });\n  return sum <= w;\n};\n\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([3, 2, 3], 5));\nconsole.log(will_it_fly([3, 2, 3], 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n    const new_arr = [];\n    const length = arr.length;\n    const new_length = length;\n    for (let i = 0; i < length; i++) {\n        const current_index = arr.indexOf(arr[i]);\n        const new_index = length - i - 1;\n        const diff = current_index - new_index;\n        const current_element = arr[i];\n        if (diff > 0) {\n            new_arr.push(current_element);\n            new_length -= diff;\n        } else if (diff < 0) {\n            new_arr.unshift(current_element);\n            new_length += diff;\n        } else {\n            new_arr.push(current_element);\n            new_length -= 1;\n        }\n    }\n    return new_length;\n};\n\nmodule.exports = smallest_change;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const total_length = lst1.length + lst2.length\n\n  const lst = []\n  for (let i = 0; i < total_length; i++) {\n    lst.push(i < lst1.length? lst1[i] : lst2[i - lst1.length])\n  }\n  return lst\n}\n\nmodule.exports = total_match\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const is_prime = prime_sieve(a)\n  return is_prime(a)\n}\n\nconst is_prime = prime_sieve(10000)\n\nconsole.log(is_prime(7))\nconsole.log(is_prime(11))\nconsole.log(is_prime(13))\nconsole.log(is_prime(19))\nconsole.log(is_prime(31))\nconsole.log(is_prime(37))\nconsole.log(is_prime(41))\nconsole.log(is_prime(43))\nconsole.log(is_prime(47))\nconsole.log(is_prime(53))\nconsole.log(is_prime(59))\nconsole.log(is_prime(61))\nconsole.log(is_prime(67))\nconsole.log(is_prime(71))\nconsole.log(is_prime(73))\nconsole.log(is_prime(79))\nconsole.log(is_prime(83))\nconsole.log(is_prime(89))\nconsole.log(is_prime(97))\nconsole.log(is_prime(101))\nconsole.log(is_prime(103))\nconsole.log(is_prime(107))\nconsole.log(is_prime(109))\nconsole.log(is_prime(113))\nconsole.log(is_prime(127))\nconsole.log(is_prime(131))\nconsole.log(is_prime(137))\nconsole.log(is_prime(139))\nconsole.log(is_prime(149))\nconsole.log(is_prime(151))\nconsole.log(is_prime(157))\nconsole.log(is_prime(163))\nconsole.log(is_prime(167))\nconsole.log(is_prime(173))\nconsole.log(is_prime(179))\nconsole.log(is_prime(181))\nconsole.log(is_prime(191))\nconsole.log(is_prime(193))\nconsole.log(is_prime(197))\nconsole.log(is_prime(199))\nconsole.log(is_prime(211))\nconsole.log(is_prime(223))\nconsole.log(is_prime(227))\nconsole.log(is_prime(229))\nconsole.log(is_prime(233))\nconsole.log(is_prime(239))\nconsole.log(is_prime(241))\nconsole.log(is_prime(251))\nconsole.log(is_prime(257))\nconsole.log(is_prime(263))\nconsole.log(is_prime(269))\nconsole.log(is_prime(271))\nconsole.log(is_prime(277))\nconsole.log(is_prime(281))\nconsole.log(is_prime(283))\nconsole.log(is_prime(293))\nconsole.log(is_prime(307))\nconsole.log(is_prime(311))\nconsole.log(is_prime(313))\nconsole.log(is_prime(317))\nconsole.log(is_prime(331))\nconsole.log(is_prime(337))\nconsole.log(is_prime(347))\nconsole.log(is_prime(349))\nconsole.log(is_prime(353))\nconsole.log(is_prime(359))\nconsole.log(is_prime(367))\nconsole.log(is_prime(373))\nconsole.log(is_prime(379))\nconsole.log(is_prime(383))\nconsole.log(is_prime(389))\nconsole.log(is_prime(397))\nconsole.log(is_prime(401))\nconsole.log(is_prime(409))\nconsole.log(is_prime(419))\nconsole.log(is_prime(421))\nconsole.log(is_prime(431))\nconsole.log(is_prime(433))\nconsole.log(is_prime(439))\nconsole.log(is_prime(443))\nconsole.log(is_prime(449))\nconsole.log(is_prime(457))\nconsole.log(is_prime(461))\nconsole.log(is_prime(463))\nconsole.log(is_prime(467))\nconsole.log(is_prime(479))\nconsole.log(is_prime(487))\nconsole.log(is_prime(491))\nconsole.log(is_prime(499))\nconsole.log(is_prime(503))\nconsole.log(is_prime(509))\nconsole.log(is_prime(521))\nconsole.log(is_prime(523))\nconsole.log(is_prime(541))\nconsole.log(is_prime(547))\nconsole.log(is_prime(557))\nconsole.log(is_prime(563))\nconsole.log(is_prime(569))\nconsole.log(is_prime(571))\nconsole.log(is_prime(577))\nconsole.log(is_prime(587))\nconsole.log(is_prime(593))\nconsole.log(is_prime(599))\nconsole.log(is_prime(601))\nconsole.log(is_prime(607))\nconsole.log(is_prime(613))\nconsole.log(is_prime(617))\nconsole.log(is_prime(619))\nconsole.log(is_prime(631))\nconsole.log(is_prime(641))\nconsole.log(is_prime(643))\nconsole.log(is_prime(647))\nconsole.log(is_prime(653))\nconsole.log(is_prime(659))\nconsole.log(is_prime(661))\nconsole.log(is_prime(673))\nconsole.log(is_prime(677))\nconsole.log(is_prime(683))\nconsole.log(is_prime(691))\nconsole.log(is_prime(701))\nconsole.log(is_prime(709))\nconsole.log(is_prime(719))\nconsole.log(is_prime(727))\nconsole.log(is_prime(733))\nconsole.log(is_prime(739))\nconsole.log(is_prime(743))\nconsole.log(is_prime(751))\nconsole.log(is_prime("}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n    let i = 1;\n    while (x!== 1) {\n        if (x % n!== 0) {\n            return false;\n        }\n        x = x / n;\n        i++;\n    }\n    return true;\n};\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return Math.floor(Math.pow(a, 1.0 / 3.0)) === a;\n}\n\nexport { iscube };\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const key = new Set();\n  const decimal = num.charCodeAt(0);\n  const hex = `${decimal.toString(16)}`;\n  for (let i = 0; i < hex.length; i++) {\n    key.add(hex.charCodeAt(i));\n  }\n  return key.size;\n};\n\nconst check = (num) => {\n  const key = new Set();\n  const decimal = num.charCodeAt(0);\n  const hex = `${decimal.toString(16)}`;\n  for (let i = 0; i < hex.length; i++) {\n    key.add(hex.charCodeAt(i));\n  }\n  return key.size >= 2 && key.size <= 6;\n};\n\nconst count_prime = (num) => {\n  let key = new Set();\n  let prime = 0;\n  for (let i = 0; i < num.length; i++) {\n    key.add(num.charCodeAt(i));\n  }\n  for (let i = 2; i < (Math.pow(num.length, 2) - 1); i++) {\n    if (key.has(i)) {\n      prime++;\n      key.delete(i);\n    }\n  }\n  return prime;\n};\n\nconsole.log(count_prime(hex_key('A')));\nconsole.log(count_prime(hex_key('AB')));\nconsole.log(count_prime(hex_key('1077E')));\nconsole.log(count_prime(hex_key('ABED1A33')));\nconsole.log(count_prime(hex_key('123456789ABCDEF0')));\nconsole.log(count_prime(hex_key('2020')));\nconsole.log(count_prime(hex_key('FFFF')));\nconsole.log(count_prime(hex_key('FFFFF')));\nconsole.log(count_prime(hex_key('FFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log(count_prime(hex_key('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')));\nconsole.log"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  if (decimal === 0) {\n    return '0';\n  }\n  if (decimal < 0) {\n    throw new Error('Decimal number can\\'t be negative');\n  }\n  var binary = '';\n  var decimals = decimal;\n  while (decimals >= 1) {\n    binary = (decimals % 2)? '1' : '0' + binary;\n    decimals = Math.floor(decimals / 2);\n  }\n  binary = '1' + binary;\n  return 'db' + binary + 'db';\n};\n\nmodule.exports = decimal_to_binary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let length = s.length\n  if (length < 3) {\n    return false\n  }\n\n  let map = new Map()\n  for (let i = 0; i < length; i++) {\n    if (!map.has(s[i])) {\n      map.set(s[i], 1)\n    } else {\n      map.set(s[i], map.get(s[i]) + 1)\n    }\n  }\n\n  for (let i = 0; i < length; i++) {\n    if (i < length - 2 && map.get(s[i]) === map.get(s[i + 1]) && map.get(s[i]) === map.get(s[i + 2])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport {is_happy}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const {\n    length: {\n      grade: {\n        0: number,\n        1: number,\n      },\n    },\n  } = grades;\n  const result = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i].grade.0 >= 3.7) {\n      result.push('A');\n    } else if (grades[i].grade.0 >= 3.3) {\n      result.push('A-');\n    } else if (grades[i].grade.0 >= 3.0) {\n      result.push('B+');\n    } else if (grades[i].grade.0 >= 2.7) {\n      result.push('B');\n    } else if (grades[i].grade.0 >= 2.3) {\n      result.push('B-');\n    } else if (grades[i].grade.0 >= 2.0) {\n      result.push('C+');\n    } else if (grades[i].grade.0 >= 1.7) {\n      result.push('C');\n    } else if (grades[i].grade.0 >= 1.3) {\n      result.push('C-');\n    } else if (grades[i].grade.0 >= 1.0) {\n      result.push('D+');\n    } else if (grades[i].grade.0 >= 0.7) {\n      result.push('D');\n    } else if (grades[i].grade.0 >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n};\n\n/*\n  Given a list of GPA values, this function returns a list of\n  letter grades, given the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade_2 = (grades) => {\n  const {\n    length: {\n      grade: {\n        0: number,\n        1: number,\n      },\n    },\n  } = grades;\n  const result = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i].grade.0 >= 3.7) {\n      result.push('A');\n    } else if (grades[i].grade.0 >= 3.3) {\n      result.push('A-');\n    } else if (grades[i].grade.0 >= 3.0) {\n      result.push('B+');\n    } else if (grades[i].grade.0 >= 2.7) {\n      result.push('B');\n    } else if (grades[i].grade.0 >= 2.3) {\n      result.push('B-');\n    } else if (grades[i].grade.0 >= 2.0) {\n      result.push('C+');\n    } else if (grades[i].grade.0 >= 1.7) {\n      result.push('C');\n    } else if (grades[i].grade.0 >= 1.3) {\n      result.push('C-');\n    } else if (grades[i].grade.0 >= 1.0) {\n      result.push('D+');\n    } else if (grades[i].grade.0 >= 0.7) {\n      result.push('D');\n    } else if (grades[i].grade.0 >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n};\n\nconst gpa = [4.0, 3, 1.7, 2, 3.5];\n\nconsole.log(numerical_letter_grade(gpa));\n\nconst gpa2 = [4.0, 3, 1.7, 2, 3.5];\n\nconsole.log(numerical_letter_grade_2(gpa2));\n\n// console.log(numerical_letter_grade_2(gpa));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n    var prime = true;\n    for(var i = 1; i < string.length; i++){\n        if(string.charAt(i) == string.charAt(i - 1)){\n            prime = false;\n        }\n    }\n    return prime;\n}\n\n// Write a function that takes a string and returns a new string with all\n// the characters converted to upper case\nconst toUpperCase = (string) => {\n    var new_string = string.toUpperCase();\n    return new_string;\n}\n\n// Write a function that takes a string and returns a new string with all\n// the characters converted to lower case\nconst toLowerCase = (string) => {\n    var new_string = string.toLowerCase();\n    return new_string;\n}\n\n// Write a function that takes a string and returns a new string with all\n// the characters in upper case\nconst toUpperCaseOnly = (string) => {\n    var new_string = string.toUpperCase();\n    return new_string;\n}\n\n// Write a function that takes a string and returns a new string with all\n// the characters in lower case\nconst toLowerCaseOnly = (string) => {\n    var new_string = string.toLowerCase();\n    return new_string;\n}\n\n// Write a function that takes two strings and returns the string if one\n// string is longer than the other.\nconst longer = (string1, string2) => {\n    if(string1.length > string2.length){\n        return string1;\n    }\n    else{\n        return string2;\n    }\n}\n\n// Write a function that takes two strings and returns the string if one\n// string is shorter than the other.\nconst shorter = (string1, string2) => {\n    if(string1.length < string2.length){\n        return string1;\n    }\n    else{\n        return string2;\n    }\n}\n\n// Write a function that takes two strings and returns the string if one\n// string is a permutation of the other.\nconst permutation = (string1, string2) => {\n    var permutation = false;\n    var permutation_string = '';\n    for(var i = 0; i < string1.length; i++){\n        for(var j = 0; j < string2.length; j++){\n            if(string1.charAt(i) == string2.charAt(j)){\n                permutation = true;\n                permutation_string = permutation_string + string1.charAt(i);\n            }\n        }\n    }\n    return permutation_string;\n}\n\n// Write a function that takes two strings and returns the string if one\n// string is a permutation of the other in order.\nconst permutation_in_order = (string1, string2) => {\n    var permutation = false;\n    var permutation_string = '';\n    for(var i = 0; i < string1.length; i++){\n        for(var j = 0; j < string2.length; j++){\n            if(string1.charAt(i) == string2.charAt(j)){\n                permutation = true;\n                permutation_string = permutation_string + string1.charAt(i);\n            }\n        }\n    }\n    return permutation_string;\n}\n\n// Write a function that takes two strings and returns the string if one\n// string is a permutation of the other in reverse order.\nconst permutation_reverse = (string1, string2) => {\n    var permutation = false;\n    var permutation_string = '';\n    for(var i = string1.length - 1; i >= 0; i--){\n        for(var j = string2.length - 1; j >= 0; j--){\n            if(string1.charAt(i) == string2.charAt(j)){\n                permutation = true;\n                permutation_string = permutation_string + string1.charAt(i);\n            }\n        }\n    }\n    return permutation_string;\n}\n\n// Write a function that takes two strings and returns true if one string is\n// a permutation of the other, in order.\nconst permutation_in_order_equal = (string1, string2) => {\n    var permutation = false;\n    var permutation_string = '';\n    for(var i = 0; i < string1.length; i++){\n        for(var j = 0; j < string2.length; j++){\n            if(string1.charAt(i) == string2.charAt(j)){\n                permutation = true;\n                permutation_string = permutation_string + string1.charAt(i);\n            }\n        }\n    }\n    return permutation;\n}\n\n// Write a function that takes two strings and returns true if one string is\n// a permutation of the other, in reverse order.\nconst permutation_reverse_equal = (string1, string2) => {\n    var permutation = false;\n    var permutation_string = '';\n    for(var i = string1.length - 1; i >= 0; i--){\n        for(var j = string2.length - 1; j >= 0; j--){\n            if(string1.charAt(i) == string2.charAt(j)){\n                permutation = true;\n                permutation_string = permutation_string + string1.charAt(i);\n            }\n        }\n    }\n    return permutation;\n}\n\n// Write a function that takes two strings and returns true if one string is\n// a permutation of the other, in order.\nconst permutation_in_order_equal = (string1, string2) => {\n    var permutation = false;\n    var permutation_string = '';\n    for(var i = 0; i < string1.length; i++){\n        for(var j = 0; j < string2.length; j++){\n            if(string1.charAt(i) == string2.charAt(j)){\n                permutation = true;\n                permutation_string = perm"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n\n    let counts = [0, 0];\n    for (let i = 1; i < n; i++) {\n        counts[i % 2] += i;\n    }\n    return counts[1];\n};\n\n// Test\nlet t = starts_one_ends(100);\nconsole.log(t);\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let total = 0;\n  \n  while (N) {\n    total += N % 2;\n    N = N / 2;\n  }\n  \n  return total.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(147));\nconsole.log(solve(9000));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    let index = 0;\n    while (index < lst.length) {\n        sum += lst[index];\n        if (index % 2 === 1) {\n            sum += lst[index];\n        }\n        index += 1;\n    }\n    return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n\n/*Given a non-empty list of strings str. return the longest string in the list.\n\n  Example:\n      longest(\"abc\", \"def\") ==> \"abc\"\n  */\nconst longest = (str1, str2) => {\n    let max = 0;\n    let index = 0;\n    while (index < str1.length) {\n        if (str1.length > max) {\n            max = str1.length;\n        }\n        index += 1;\n    }\n    index = 0;\n    while (index < str2.length) {\n        if (str2.length > max) {\n            max = str2.length;\n        }\n        index += 1;\n    }\n    return str1.substr(0, max);\n};\n\nconsole.log(longest(\"abc\", \"def\"));\n\n/*Given two lists of strings str1 and str2. return the intersection of strings.\n\n  Example:\n      intersection(\"abc\", \"def\") ==> \"\"\n  */\nconst intersection = (str1, str2) => {\n    let index = 0;\n    let intersection = [];\n    while (index < str1.length) {\n        if (str2.indexOf(str1[index])!== -1) {\n            intersection.push(str1[index]);\n        }\n        index += 1;\n    }\n    return intersection;\n};\n\nconsole.log(intersection(\"abc\", \"def\"));\n\n/*Given two lists of strings str1 and str2, return the union of strings.\n\n  Example:\n      union(\"abc\", \"def\") ==> \"abcdef\"\n  */\nconst union = (str1, str2) => {\n    let index = 0;\n    let union = [];\n    while (index < str1.length) {\n        union.push(str1[index]);\n        index += 1;\n    }\n    index = 0;\n    while (index < str2.length) {\n        union.push(str2[index]);\n        index += 1;\n    }\n    return union;\n};\n\nconsole.log(union(\"abc\", \"def\"));\n\n/*Given a non-empty list of strings str, return a list of strings where the first string in the list has all the characters in alphabet that appear at least once in the second string.\n\n  Example:\n      letterCombine(\"abc\", \"acb\") ==> \"acb\"\n  */\nconst letterCombine = (str1, str2) => {\n    let index = 0;\n    let letterCombine = [];\n    while (index < str1.length) {\n        if (str2.indexOf(str1[index])!== -1) {\n            letterCombine.push(str1[index]);\n        }\n        index += 1;\n    }\n    return letterCombine;\n};\n\nconsole.log(letterCombine(\"abc\", \"acb\"));\n\n/*Given a non-empty list of strings str, return a list of strings where the first string in the list has all the characters in alphabet that do not appear in the second string.\n\n  Example:\n      letterRemove(\"abc\", \"acb\") ==> \"abc\"\n  */\nconst letterRemove = (str1, str2) => {\n    let index = 0;\n    let letterRemove = [];\n    while (index < str1.length) {\n        if (str2.indexOf(str1[index]) === -1) {\n            letterRemove.push(str1[index]);\n        }\n        index += 1;\n    }\n    return letterRemove;\n};\n\nconsole.log(letterRemove(\"abc\", \"acb\"));\n\n/*Given a string s and a dictionary of words dict, return the shortest string in the dictionary that is a substring of s. If there is more than one shortest string in the dictionary, return any of them.\n\n  Example:\n      longestSubstring(\"abc\", \"a\") ==> \"a\"\n      longestSubstring(\"abc\", \"ab\") ==> \"ab\"\n      longestSubstring(\"abc\", \"bc\") ==> \"bc\"\n      longestSubstring(\"abc\", \"abcd\") ==> \"abcd\"\n  */\nconst longestSubstring = (str, dict) => {\n    let index = 0;\n    let max = 0;\n    let maxIndex = 0;\n    while (index < str.length) {\n        let word = str.substr(index, str.length - index);\n        if (dict.indexOf(word)!== -1) {\n            if (word.length > max) {\n                max = word.length;\n                maxIndex = index;\n            }\n        }\n        index += 1;\n    }\n    return str.substr(index - maxIndex, maxIndex - index);\n};\n\nconsole.log(longestSubstring(\"abc\", \"a\"));\n\n/*Given a string s, return a string where all the characters of s have been replaced by the ASCII of the character. For example, \"cat\" -> \"67\".\n\n  Example:\n      asciify(\"cat\") ==> \"67\"\n  */\nconst asciify = (str) => {\n    let index = 0;\n    let asciify = \"\";\n    while (index < str.length) {\n        asciify += str[index].charCodeAt(0);\n        index += 1;\n    }\n    return asciify;\n};\n\nconsole.log(asciify(\"cat\"));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const array = s.split(' ');\n  const sorted = array.sort((a, b) => {\n    const a_val = a.charCodeAt(0);\n    const b_val = b.charCodeAt(0);\n\n    return a_val - b_val;\n  });\n\n  return sorted.join(' ');\n};\n\nconsole.log(anti_shuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const lst_copy = shallow(lst);\n  const lst_rows = [];\n  let cur_row = 0;\n  const row_length = lst_copy.length;\n  \n  while(cur_row < row_length) {\n    lst_rows.push(lst_copy.map(v => {\n      if(v.length === 1) {\n        return [x, cur_row];\n      } else {\n        const cur_col = v.length - 1;\n        return [x, cur_row, cur_col];\n      }\n    }));\n    cur_row++;\n  }\n  \n  lst_rows.sort((a, b) => {\n    if(a[0] > b[0]) return 1;\n    if(a[0] < b[0]) return -1;\n    return a[1] - b[1];\n  });\n  \n  return lst_rows;\n}\n\n// const get_row = (lst, x) => {\n//   const lst_copy = shallow(lst);\n//   const lst_rows = [];\n//   let cur_row = 0;\n//   const row_length = lst_copy.length;\n//   \n//   while(cur_row < row_length) {\n//     lst_rows.push(lst_copy.map(v => {\n//       if(v.length === 1) {\n//         return [x, cur_row];\n//       } else {\n//         const cur_col = v.length - 1;\n//         return [x, cur_row, cur_col];\n//       }\n//     }));\n//     cur_row++;\n//   }\n//   \n//   return lst_rows;\n// }\n\nconst get_row = (lst, x) => {\n  const lst_copy = shallow(lst);\n  const lst_rows = [];\n  let cur_row = 0;\n  const row_length = lst_copy.length;\n  \n  while(cur_row < row_length) {\n    lst_rows.push(lst_copy.map(v => {\n      if(v.length === 1) {\n        return [x, cur_row];\n      } else {\n        const cur_col = v.length - 1;\n        return [x, cur_row, cur_col];\n      }\n    }));\n    cur_row++;\n  }\n  \n  return lst_rows;\n}\n\nexport default get_row;<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const length = array.length\n  const new_array = array.slice(0)\n  const sorted_array = new Array(length)\n  let last_index = length - 1\n\n  while (last_index >= 0) {\n    const current_sum = array[last_index] + array[last_index + 1]\n    if (current_sum % 2 === 1) {\n      sorted_array[last_index] = array[last_index]\n      last_index -= 1\n    } else {\n      sorted_array[last_index] = array[last_index + 1]\n      last_index -= 1\n    }\n  }\n  return sorted_array\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]))\nconsole.log(sort_array([5, 2, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let r = ''\n  for (let i = 0; i < s.length; i++) {\n    r = r + s[i]\n  }\n  return r\n}\n\nconst decrypt = (s) => {\n  let r = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    r = r + s[i]\n  }\n  return r\n}\n\nconst rotate = (alphabet, times) => {\n  let r = ''\n  for (let i = 0; i < times; i++) {\n    for (let j = 0; j < alphabet.length; j++) {\n      r = r + alphabet[j]\n    }\n  }\n  return r\n}\n\nconst rotater = (alphabet, times) => {\n  let r = ''\n  for (let i = 0; i < times; i++) {\n    r = r + rotate(alphabet, times)\n  }\n  return r\n}\n\nconst encryptR = (s) => {\n  let r = ''\n  for (let i = 0; i < s.length; i++) {\n    r = r + rotater(s[i], times)\n  }\n  return r\n}\n\nconst decryptR = (s) => {\n  let r = ''\n  for (let i = 0; i < s.length; i++) {\n    r = r + rotater(s[i], times)\n  }\n  return r\n}\n\nconst rotateTimes = (alphabet, times) => {\n  let r = ''\n  for (let i = 0; i < times; i++) {\n    r = r + rotate(alphabet, times)\n  }\n  return r\n}\n\nconst rotateTimesR = (s, times) => {\n  let r = ''\n  for (let i = 0; i < times; i++) {\n    r = r + rotateTimes(s, times)\n  }\n  return r\n}\n\nmodule.exports = {\n  rotateTimesR: rotateTimesR,\n  rotateTimes: rotateTimes,\n  rotater: rotater,\n  rotate: rotate,\n  rotateTimes: rotateTimes,\n  encrypt: encrypt,\n  decrypt: decrypt,\n  encryptR: encryptR,\n  decryptR: decryptR\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let next = null;\n  if (lst.length > 0) {\n    next = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n      if (next < lst[i]) {\n        next = lst[i];\n      }\n    }\n  }\n  return next;\n};\n\nconst next_smallest_example = () => {\n  const lst = [1, 2, 3, 4, 5];\n  return next_smallest(lst);\n};\n\nmodule.exports = next_smallest_example;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let res = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S.substr(i, 2) === \"I \") {\n      res++\n    }\n  }\n  return res\n}\n\nconsole.log(is_bored(\"Hello world\"))\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(is_bored(\"Hello world. Hello world. Hello world.\"))\nconsole.log(is_bored(\"Hello world? Hello world? Hello world?\"))\nconsole.log(is_bored(\"Hello world. Hello world. Hello world? Hello world?\"))\nconsole.log(is_bored(\"Hello world. Hello world. Hello world? Hello world? Hello world?\"))\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  return false\n}\n\n/**\n  *\n  * Return the difference between the first number and the sum of the other two numbers.\n  *\n  * @param {number} x\n  * @param {number} y\n  * @param {number} z\n  * @return {number}\n  *\n  *\n  *\n  * */\nconst difference = (x, y, z) => {\n  return x - y - z\n}\n\nconst any_int_and_difference = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_2 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\n// any_int_and_difference(5, 2, 7)\n// // true\n\n// any_int_and_difference(3, 2, 2)\n// // false\n\n// any_int_and_difference(3, -2, 1)\n// // true\n\n// any_int_and_difference(3.6, -2.2, 2)\n// // false\n\nconst any_int_and_difference_3 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_4 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_5 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_6 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_7 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_8 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_9 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_10 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_11 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_12 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_13 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_14 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_15 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_16 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_17 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_18 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_19 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_20 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_21 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_22 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_23 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_24 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_difference_25 = (x, y, z) => {\n  return any_int(x, y, z) && difference(x, y, z)\n}\n\nconst any_int_and_diff"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let messageArray = message.toLowerCase().split('');\n  messageArray.forEach((letter) => {\n    let letterIndex = messageArray.indexOf(letter);\n    let nextLetter = messageArray[letterIndex + 2];\n    if (letter === nextLetter) {\n      messageArray[letterIndex + 2] = letter.toUpperCase();\n      messageArray[letterIndex + 1] = letter.toLowerCase();\n    } else {\n      messageArray[letterIndex + 2] = letter.toUpperCase();\n    }\n  });\n  return messageArray.join('');\n};\n\nconst decode = (message) => {\n  let messageArray = message.toLowerCase().split('');\n  messageArray.forEach((letter, index) => {\n    if (index % 2 === 1) {\n      messageArray[index] = letter.toUpperCase();\n    } else {\n      messageArray[index] = letter.toLowerCase();\n    }\n  });\n  return messageArray.join('');\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const largestPrime = largestPrime(lst);\n  let result = 0;\n  for (let i = 0; i < largestPrime; i++) {\n    result += largestPrime - largestPrime % largestPrime;\n  }\n  return result;\n};\n\nconst largestPrime = (lst) => {\n  let result = 1;\n  for (let i = 0; i < lst.length; i++) {\n    result = largestPrimePrime(result);\n    if (result === 0) {\n      break;\n    }\n  }\n  return result;\n};\n\nconst largestPrimePrime = (n) => {\n  if (n < 2) {\n    return 1;\n  } else if (n % 2 === 0) {\n    return n;\n  } else {\n    let result = largestPrimePrime(n / 2);\n    return largestPrimePrime(result * result + 1);\n  }\n};\n\nexport { largestPrime, largestPrimePrime, skjkasdkd };\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  if (dict.length === 0) return false;\n  let keys = Object.keys(dict);\n  let result = true;\n  keys.forEach((key) => {\n    if (typeof key!=='string') return;\n    result = result && (key.toUpperCase() === key.toLowerCase());\n  });\n  return result;\n};\n\n/*\n  Given a dictionary, return a new dictionary with all keys\n  converted to lower case.\n  Examples:\n  check_dict_case({a:\"apple\", b:\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"}.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"state\":\"nc\", \"zip\":\"12345\" }.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  let new_dict = {};\n  keys.forEach((key) => {\n    if (typeof key!=='string') return;\n    new_dict[key.toLowerCase()] = dict[key];\n  });\n  return new_dict;\n};\n\n/*\n  Given a dictionary, return a new dictionary with all keys\n  converted to upper case.\n  Examples:\n  check_dict_case({a:\"apple\", b:\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"APPLE\", \"A\":\"BANANA\", \"b\":\"BANANA\"}.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\", \"A\":\"BANANA\", \"b\":\"BANANA\"}.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"STATE\":\"NC\", \"ZIP\":\"12345\" }.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  let new_dict = {};\n  keys.forEach((key) => {\n    if (typeof key!=='string') return;\n    new_dict[key.toUpperCase()] = dict[key];\n  });\n  return new_dict;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n    const result = [];\n    let i = 2;\n    let k = 0;\n    while (k < n) {\n        if (isPrime(i)) {\n            result.push(i);\n            k++;\n        }\n        i++;\n    }\n    return result;\n};\n\n//console.log(count_up_to(0));\n//console.log(count_up_to(1));\n//console.log(count_up_to(2));\n//console.log(count_up_to(3));\n//console.log(count_up_to(4));\n//console.log(count_up_to(5));\n//console.log(count_up_to(6));\n//console.log(count_up_to(7));\n//console.log(count_up_to(8));\n//console.log(count_up_to(9));\n//console.log(count_up_to(10));\n//console.log(count_up_to(11));\n//console.log(count_up_to(12));\n//console.log(count_up_to(13));\n//console.log(count_up_to(14));\n//console.log(count_up_to(15));\n//console.log(count_up_to(16));\n//console.log(count_up_to(17));\n//console.log(count_up_to(18));\n//console.log(count_up_to(19));\n//console.log(count_up_to(20));\n//console.log(count_up_to(21));\n//console.log(count_up_to(22));\n//console.log(count_up_to(23));\n//console.log(count_up_to(24));\n//console.log(count_up_to(25));\n//console.log(count_up_to(26));\n//console.log(count_up_to(27));\n//console.log(count_up_to(28));\n//console.log(count_up_to(29));\n//console.log(count_up_to(30));\n//console.log(count_up_to(31));\n//console.log(count_up_to(32));\n//console.log(count_up_to(33));\n//console.log(count_up_to(34));\n//console.log(count_up_to(35));\n//console.log(count_up_to(36));\n//console.log(count_up_to(37));\n//console.log(count_up_to(38));\n//console.log(count_up_to(39));\n//console.log(count_up_to(40));\n//console.log(count_up_to(41));\n//console.log(count_up_to(42));\n//console.log(count_up_to(43));\n//console.log(count_up_to(44));\n//console.log(count_up_to(45));\n//console.log(count_up_to(46));\n//console.log(count_up_to(47));\n//console.log(count_up_to(48));\n//console.log(count_up_to(49));\n//console.log(count_up_to(50));\n//console.log(count_up_to(51));\n//console.log(count_up_to(52));\n//console.log(count_up_to(53));\n//console.log(count_up_to(54));\n//console.log(count_up_to(55));\n//console.log(count_up_to(56));\n//console.log(count_up_to(57));\n//console.log(count_up_to(58));\n//console.log(count_up_to(59));\n//console.log(count_up_to(60));\n//console.log(count_up_to(61));\n//console.log(count_up_to(62));\n//console.log(count_up_to(63));\n//console.log(count_up_to(64));\n//console.log(count_up_to(65));\n//console.log(count_up_to(66));\n//console.log(count_up_to(67));\n//console.log(count_up_to(68));\n//console.log(count_up_to(69));\n//console.log(count_up_to(70));\n//console.log(count_up_to(71));\n//console.log(count_up_to(72));\n//console.log(count_up_to(73));\n//console.log(count_up_to(74));\n//console.log(count_up_to(75));\n//console.log(count_up_to(76));\n//console.log(count_up_to(77));\n//console.log(count_up_to(78));\n//console.log(count_up_to(79));\n//console.log(count_up_to(80));\n//console.log(count_up_to(81));\n//console.log(count_up_to(82));\n//console.log(count_up_to(83));\n//console.log(count_up_to(84));\n//console.log(count_up_to(85));\n//console.log(count_up_to(86));\n//console.log(count_up_to(87));\n//console.log(count_up_to(88));\n//console.log(count_up_to(89));\n//console.log(count_up_to(90));\n//console.log(count_up_to(91));\n//console.log(count_up_to"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  let i = a < 0? -a : a;\n  while (i) {\n    if (i & 1) {\n      product += b;\n    }\n    i >>= 1;\n    b <<= 1;\n  }\n  return product;\n};\n\nconsole.log(multiply(9, -5));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  return (s.split('').map((el, i) => el.toUpperCase()).join('')).length;\n}\n\nconst is_valid_input = (s) => {\n  const str = count_upper(s);\n  if (str.length === 0) {\n    return false;\n  } else if (str.length === 1) {\n    return false;\n  }\n  return true;\n}\n\nconst count_upper_valid = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : true;\n}\n\nconst count_upper_valid_s = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).length === 1? false : true;\n}\n\nconst count_upper_valid_s_b = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).length === 1? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === 0? false : true;\n}\n\nconst count_upper_valid_s_c = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).length === 1? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === 0? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : true;\n}\n\nconst count_upper_valid_s_d = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).length === 1? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === 0? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 2)? false : true;\n}\n\nconst count_upper_valid_s_e = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).length === 1? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === 0? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 2)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 2)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 3)? false : true;\n}\n\nconst count_upper_valid_s_f = (s) => {\n  const str = count_upper(s);\n  return (str.length === 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).length === 1? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === 0? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 1)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 2)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase()) === (str.length - 2)? false : (str.split('').map((el, i) => el.toUpperCase()).join('')).indexOf(el.toUpperCase"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n    if(isNaN(value)) {\n        return value;\n    }\n    const num = parseFloat(value);\n    if(isNaN(num)) {\n        return value;\n    }\n    if(num < 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer_no_rounding(\"10\")\n  10\n  >>> closest_integer_no_rounding(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer_no_rounding(\"14.5\")\n  should return 15 and closest_integer_no_rounding(\"-14.5\") should\n  return -15.\n  */\nconst closest_integer_no_rounding = (value) => {\n    if(isNaN(value)) {\n        return value;\n    }\n    const num = parseFloat(value);\n    if(isNaN(num)) {\n        return value;\n    }\n    if(num < 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer_with_rounding(\"10\")\n  10\n  >>> closest_integer_with_rounding(\"15.3\")\n  15\n  >>> closest_integer_with_rounding(\"-14.5\")\n  -15\n  >>> closest_integer_with_rounding(\"1.6\")\n  2\n  >>> closest_integer_with_rounding(\"-1.6\")\n  -2\n  >>> closest_integer_with_rounding(\"-10.6\")\n  -10\n  >>> closest_integer_with_rounding(\"-9.6\")\n  -10\n  >>> closest_integer_with_rounding(\"-11.6\")\n  -11\n  >>> closest_integer_with_rounding(\"-10.6\")\n  -10\n  >>> closest_integer_with_rounding(\"-9.6\")\n  -10\n  >>> closest_integer_with_rounding(\"-9.6\")\n  -10\n  >>> closest_integer_with_rounding(\"-11.6\")\n  -11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\"9.6\")\n  10\n  >>> closest_integer_with_rounding(\"11.6\")\n  11\n  >>> closest_integer_with_rounding(\"10.6\")\n  10\n  >>> closest_integer_with_rounding(\""}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const is_odd = (x) => x % 2!== 0;\n  const num_of_odd_levels = Math.ceil(n / 2);\n  const num_of_even_levels = Math.ceil(n / 2);\n  return [\n   ...Array(num_of_odd_levels).fill(n),\n   ...Array(num_of_even_levels).fill(n).filter(is_odd),\n  ];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_again = (n) => {\n  const is_odd = (x) => x % 2!== 0;\n  const num_of_odd_levels = Math.ceil(n / 2);\n  const num_of_even_levels = Math.ceil(n / 2);\n  return [\n   ...Array(num_of_odd_levels).fill(n),\n   ...Array(num_of_even_levels).fill(n).filter(is_odd),\n  ];\n};\n\nconst make_a_pile_again_2 = (n) => {\n  const is_odd = (x) => x % 2!== 0;\n  const num_of_odd_levels = Math.ceil(n / 2);\n  const num_of_even_levels = Math.ceil(n / 2);\n  return [\n   ...Array(num_of_odd_levels).fill(n),\n   ...Array(num_of_even_levels).fill(n).filter(is_odd),\n  ];\n};\n\nmodule.exports = {\n  make_a_pile,\n  make_a_pile_again,\n  make_a_pile_again_2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  let split = s.split(/\\s*,\\s*/)\n  return split\n}\n\n/*\n  This method takes an array of words and returns a string of the words separated by\n  the given delimiter.\n  \n  For example:\n  words_array([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"Hi, my, name, is, John\"\n  words_array([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n  */\nconst words_array = (s) => {\n  let array = s.split(/\\s*,\\s*/)\n  let result = \"\"\n  for (let i = 0; i < array.length; i++) {\n    if (i!= 0) {\n      result += \",\"\n    }\n    result += array[i]\n  }\n  return result\n}\n\n/*\n  This method takes a string and returns the number of characters in the string.\n  \n  For example:\n  length_string(\"Hi, my name is John\") == 14\n  length_string(\"One, two, three, four, five, six\") == 21\n  */\nconst length_string = (s) => {\n  return s.length\n}\n\n/*\n  This method takes a string and returns a string with each letter replaced with\n  the letter preceded by the number of times the letter appears in the original\n  string. For example, \"Hello, world\" becomes \"Hello1, world2\".\n  \n  For example:\n  letter_count_string(\"Hello, world\") == \"Hello1, world2\"\n  letter_count_string(\"Hello, world\") == \"Hello, world\"\n  */\nconst letter_count_string = (s) => {\n  let result = \"\"\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i]\n    let count = 0\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] == letter) {\n        count += 1\n      }\n    }\n    result += \"\" + count + letter\n  }\n  return result\n}\n\n/*\n  This method takes a string and returns a string with each letter replaced with\n  the letter followed by the number of times the letter appears in the original\n  string. For example, \"Hello, world\" becomes \"Hello1, world2\".\n  \n  For example:\n  letter_count_string(\"Hello, world\") == \"Hello1, world2\"\n  letter_count_string(\"Hello, world\") == \"Hello, world\"\n  */\nconst letter_count_reverse_string = (s) => {\n  let result = \"\"\n  for (let i = s.length - 1; i >= 0; i--) {\n    let letter = s[i]\n    let count = 0\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] == letter) {\n        count += 1\n      }\n    }\n    result += \"\" + count + letter\n  }\n  return result\n}\n\n/*\n  This method takes a string and returns a string with each character repeated\n  the given number of times. For example, \"Hello, world\" becomes \"HelloHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello, worldHello, worldHello, worldHello,\n  worldHello, worldHello, worldHello, worldHello,"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x === y) return x;\n  if (x === y - 1) return x;\n  if (x < y) return choose_num(x + 1, y);\n  if (x > y) return choose_num(x, y - 1);\n  if (x % 2 === 0) {\n    return x;\n  } else {\n    return choose_num(x + 1, y);\n  }\n};\n\nmodule.exports = choose_num;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  const avg = (n + m) / 2;\n  const rounded_avg_int = Math.round(avg);\n  const rounded_avg_int_bin = parseInt(rounded_avg_int, 2);\n  return rounded_avg_int_bin;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  if (x.length === 0) {\n    return []\n  }\n\n  const map = {}\n  const nums = x.slice()\n  const sorted = sorted_array(nums)\n\n  sorted.forEach(elem => {\n    if (map.hasOwnProperty(elem)) {\n      return\n    }\n\n    let d = elem % 10\n    let s = elem - d\n\n    while (s) {\n      if (map.hasOwnProperty(s)) {\n        return\n      }\n\n      map[s] = d\n      s = s / 10\n    }\n  })\n\n  return sorted.filter(elem =>!map.hasOwnProperty(elem))\n}\n\nexport default unique_digits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  let digits = [...new Set(arr.map(Number))]\n  arr.forEach(digit => {\n    if (!digits.includes(digit)) {\n      digits.push(digit)\n    }\n  })\n  let sorted_arr = digits.sort()\n  sorted_arr.reverse()\n  sorted_arr.forEach(digit => {\n    arr.splice(arr.indexOf(digit), 1, digit)\n  })\n  return arr.map(digit => {\n    if (digit === 1) {\n      return \"One\"\n    } else if (digit === 2) {\n      return \"Two\"\n    } else if (digit === 3) {\n      return \"Three\"\n    } else if (digit === 4) {\n      return \"Four\"\n    } else if (digit === 5) {\n      return \"Five\"\n    } else if (digit === 6) {\n      return \"Six\"\n    } else if (digit === 7) {\n      return \"Seven\"\n    } else if (digit === 8) {\n      return \"Eight\"\n    } else if (digit === 9) {\n      return \"Nine\"\n    }\n  })\n}\n\n/*\n  Given an array of words, return the words that can be sorted.\n  For example:\n    arr = [\"One\", \"Three\", \"Two\", \"Three\"]\n    arr = [\"One\", \"Two\", \"Three\", \"Two\"]\n    arr = [\"Two\", \"Three\", \"Two\", \"One\"]\n    arr = [\"Two\", \"Three\", \"One\", \"Two\"]\n    arr = [\"Two\", \"One\", \"Three\", \"Two\"]\n    arr = [\"Three\", \"Two\", \"One\", \"Two\"]\n    arr = [\"Three\", \"One\", \"Two\", \"Two\"]\n    arr = [\"One\", \"Two\", \"Three\", \"Two\"]\n  \n    The algorithm will give the following answer:\n    arr = [\"One\", \"Two\", \"Three\", \"Two\"]\n  */\nconst sort_words = (arr) => {\n  let result = arr.filter(word => {\n    let result_words = word.split(\" \")\n    return result_words.every(word => {\n      return word.length > 0\n    })\n  })\n  return result.sort()\n}\n\n/*\n  Given an array of names, return the names that can be sorted.\n  For example:\n    arr = [\"One\", \"Two\", \"Three\", \"Two\"]\n    arr = [\"One\", \"Two\", \"Three\", \"One\"]\n    arr = [\"Two\", \"Three\", \"Two\", \"One\"]\n    arr = [\"Three\", \"Two\", \"One\", \"Two\"]\n    arr = [\"One\", \"Two\", \"Three\", \"Three\"]\n    arr = [\"One\", \"Two\", \"Three\", \"One\"]\n    arr = [\"One\", \"Two\", \"Three\", \"Two\"]\n    arr = [\"Two\", \"One\", \"Three\", \"Two\"]\n    arr = [\"Three\", \"One\", \"Two\", \"Two\"]\n  \n    The algorithm will give the following answer:\n    arr = [\"One\", \"Two\", \"Three\", \"One\"]\n  */\nconst sort_names = (arr) => {\n  let result = arr.filter(name => {\n    return name.length > 0\n  })\n  return result.sort()\n}\n\n/*\n  Given an array of numbers, return the array with the largest and the smallest\n  numbers from the array.\n  For example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  \n    The algorithm will give the following answer:\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst find_largest_and_smallest = (arr) => {\n  let smallest = arr.reduce((a, b) => {\n    return a < b? a : b\n  })\n  let largest = arr.reduce((a, b) => {\n    return a > b? a : b\n  })\n  return [largest, smallest]\n}\n\nexport {\n  by_length,\n  sort_words,\n  sort_names,\n  find_largest_and_smallest\n}<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return Array.from({ length: n + 1 }).map((_, i) => {\n    if (i % 2 === 0) {\n      return 1;\n    }\n    return (1 + i);\n  });\n};\n\n/*\n  Given a function f, implement the function f2 that takes n as a parameter,\n  and returns the number of elements in the array returned by f(n).\n  The function f2 is used in the exercise.\n  */\nconst f2 = (n) => {\n  return f(n).length;\n};\n\n/*\n  Given a list of integers, implement a function sumN that returns the sum of all elements in the list.\n  The function sumN is used in the exercise.\n  */\nconst sumN = (numbers) => {\n  return numbers.reduce((accumulator, current) => {\n    return accumulator + current;\n  });\n};\n\n/*\n  Given a list of integers, implement a function sumN2 that returns the sum of all elements in the list.\n  The function sumN2 is used in the exercise.\n  */\nconst sumN2 = (numbers) => {\n  return numbers.reduce((accumulator, current) => {\n    return accumulator + current;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function minN that returns the smallest number in the list.\n  The function minN is used in the exercise.\n  */\nconst minN = (numbers) => {\n  return numbers.reduce((accumulator, current) => {\n    return current < accumulator? current : accumulator;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function maxN that returns the largest number in the list.\n  The function maxN is used in the exercise.\n  */\nconst maxN = (numbers) => {\n  return numbers.reduce((accumulator, current) => {\n    return current > accumulator? current : accumulator;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function avgN that returns the average number in the list.\n  The function avgN is used in the exercise.\n  */\nconst avgN = (numbers) => {\n  return sumN(numbers) / numbers.length;\n};\n\n/*\n  Given a list of numbers, implement a function avgN2 that returns the average number in the list.\n  The function avgN2 is used in the exercise.\n  */\nconst avgN2 = (numbers) => {\n  return sumN2(numbers) / numbers.length;\n};\n\n/*\n  Given a list of numbers, implement a function avgN3 that returns the average number in the list.\n  The function avgN3 is used in the exercise.\n  */\nconst avgN3 = (numbers) => {\n  return sumN2(numbers) / numbers.length;\n};\n\n/*\n  Given a list of numbers, implement a function sumNFromN that returns the sum of all numbers in the list\n  starting from N (e.g. sumNFromN(5) returns sumN(5, 6, 7, 8, 9, 10).\n  The function sumNFromN is used in the exercise.\n  */\nconst sumNFromN = (n) => {\n  return numbers.reduce((accumulator, current) => {\n    return accumulator + current;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function sumNFromN2 that returns the sum of all numbers in the list\n  starting from N (e.g. sumNFromN(5) returns sumN(5, 6, 7, 8, 9, 10).\n  The function sumNFromN2 is used in the exercise.\n  */\nconst sumNFromN2 = (n) => {\n  return numbers.reduce((accumulator, current) => {\n    return accumulator + current;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function sumNFromN3 that returns the sum of all numbers in the list\n  starting from N (e.g. sumNFromN(5) returns sumN(5, 6, 7, 8, 9, 10).\n  The function sumNFromN3 is used in the exercise.\n  */\nconst sumNFromN3 = (n) => {\n  return numbers.reduce((accumulator, current) => {\n    return accumulator + current;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function minNFromN that returns the smallest number in the list\n  starting from N (e.g. minNFromN(5) returns minN(5, 6, 7, 8, 9, 10).\n  The function minNFromN is used in the exercise.\n  */\nconst minNFromN = (n) => {\n  return numbers.reduce((accumulator, current) => {\n    return current < accumulator? current : accumulator;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function maxNFromN that returns the largest number in the list\n  starting from N (e.g. maxNFromN(5) returns maxN(5, 6, 7, 8, 9, 10).\n  The function maxNFromN is used in the exercise.\n  */\nconst maxNFromN = (n) => {\n  return numbers.reduce((accumulator, current) => {\n    return current > accumulator? current : accumulator;\n  });\n};\n\n/*\n  Given a list of numbers, implement a function avgNFromN that returns the average number in the list\n  starting from N (e.g. avgNFromN(5) returns avgN(5, 6, 7, 8, 9, 10).\n  The function avgNFromN is used in the exercise.\n  */\nconst avgNFromN = (n) => {\n  return sumNFromN(n) / n;\n};\n\n/*\n  Given a list of numbers, implement a function avgNFromN2 that returns the average number in the list\n  "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  let result = 0;\n  const is_palindrome = (n) => {\n    return n.toString().split('').reverse().join('') === n.toString();\n  };\n  for (let i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      result++;\n      if (result % 2 === 0) {\n        return [result, result + 1];\n      }\n    }\n  }\n  return [result, result];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const result = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n\n    if (num > 0) {\n      result += 1;\n    } else {\n      const digit = num % 10;\n      const n = (num - digit) / 10;\n\n      if (n > 0) {\n        result += 1;\n      }\n    }\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  const max = arr.length - 1\n  let i = 0\n  let j = max\n  while (i < j) {\n    const m = (i + j) / 2\n    const k = arr[m]\n    if (k <= arr[i]) {\n      i = m + 1\n    } else {\n      j = m\n    }\n  }\n  if (i === j) {\n    return true\n  }\n  return false\n}\n\nmove_one_ball([3, 4, 5, 1, 2])\nmove_one_ball([3, 5, 4, 1, 2])\nmove_one_ball([3, 5, 4, 2, 1])\nmove_one_ball([3, 5, 4, 2, 1, 3])\nmove_one_ball([3, 5, 4, 2, 1, 3, 5])\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const diff = Math.abs(lst1[0] - lst2[0]);\n  return lst1[0] % 2 === 0 && lst2[0] % 2 === 0 && lst1.length === lst2.length\n   ? `YES`\n    : `NO`;\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const [n, s] = test.split(' ')\n  const [count, letter, total] = n.split(' ')\n\n  const histogram = {\n    [letter]: count,\n    total: total\n  }\n  return histogram\n}\n\n/*\n  Given a list of strings, return a list of the strings sorted in\n  increasing order.\n  \n  Example:\n  sort('aa bb cc') == ['aa', 'bb', 'cc']\n  sort(['a', 'b', 'c']) == ['a', 'b', 'c']\n  sort(['c', 'a', 'b']) == ['a', 'b', 'c']\n  sort(['a', 'b', 'a']) == ['a', 'a', 'b']\n  sort(['b', 'a', 'b']) == ['a', 'b', 'b']\n  sort(['b', 'a', 'a']) == ['a', 'a', 'b']\n  sort(['a', 'b', 'b', 'a', 'a']) == ['a', 'a', 'b', 'b', 'a']\n  sort(['b', 'a', 'b', 'a', 'a']) == ['a', 'a', 'b', 'b', 'a']\n  sort(['a', 'b', 'b', 'a', 'a']) == ['a', 'a', 'b', 'b', 'a']\n  sort(['a', 'b', 'b', 'a', 'b']) == ['a', 'a', 'b', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a']) == ['a', 'a', 'b', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a']) == ['a', 'a', 'b', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['a', 'b', 'b', 'a', 'b']) == ['a', 'a', 'b', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a']) == ['a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort(['b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b']\n  sort("}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n    let [s2, c2] = [s, c];\n    for (let i = 0; i < s2.length; i++) {\n        if (s2[i] === c2[i]) {\n            s2 = s2.substr(0, i) + s2.substr(i + 1);\n        }\n    }\n    return [s2, s2 === s? false : true];\n};\n\n// Task 2\nconst check_palindrome = (s) => {\n    let [s2, isPalindrome] = reverse_delete(s, s);\n    return [s2, isPalindrome];\n};\n\nconst reverse_words = (s) => {\n    let words = s.split(' ');\n    words = words.map((w) => {\n        return w.split('').reverse().join('');\n    });\n    return words.join(' ');\n};\n\n// Task 3\nconst check_words = (s) => {\n    let words = s.split(' ');\n    for (let i = 0; i < words.length / 2; i++) {\n        if (words[i]!== words[words.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// Task 4\nconst check_pairs = (s) => {\n    let [s2, isPalindrome] = reverse_words(s);\n    return [s2, isPalindrome];\n};\n\n// Task 5\nconst check_triplets = (s) => {\n    let [s2, isPalindrome] = check_words(s);\n    return [s2, isPalindrome];\n};\n\n// Task 6\nconst check_quads = (s) => {\n    let [s2, isPalindrome] = check_words(s);\n    return [s2, isPalindrome];\n};\n\nconst check_quintuples = (s) => {\n    let [s2, isPalindrome] = check_triplets(s);\n    return [s2, isPalindrome];\n};\n\nconst check_sixuples = (s) => {\n    let [s2, isPalindrome] = check_quads(s);\n    return [s2, isPalindrome];\n};\n\nconst check_sextuples = (s) => {\n    let [s2, isPalindrome] = check_quintuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_septuples = (s) => {\n    let [s2, isPalindrome] = check_sixuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_octuples = (s) => {\n    let [s2, isPalindrome] = check_sextuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nonuples = (s) => {\n    let [s2, isPalindrome] = check_septuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nequuples = (s) => {\n    let [s2, isPalindrome] = check_octuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nexquuples = (s) => {\n    let [s2, isPalindrome] = check_nequuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_sexquuples = (s) => {\n    let [s2, isPalindrome] = check_nexquuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_septuples = (s) => {\n    let [s2, isPalindrome] = check_sexquuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_octuples = (s) => {\n    let [s2, isPalindrome] = check_septuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nonuples = (s) => {\n    let [s2, isPalindrome] = check_octuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nequuples = (s) => {\n    let [s2, isPalindrome] = check_nonuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nexquuples = (s) => {\n    let [s2, isPalindrome] = check_nequuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_sexquuples = (s) => {\n    let [s2, isPalindrome] = check_nexquuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_septuples = (s) => {\n    let [s2, isPalindrome] = check_sexquuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_octuples = (s) => {\n    let [s2, isPalindrome] = check_septuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_nonuples = (s) => {\n    let [s2, isPalindrome] = check_octuples(s);\n    return [s2, isPalindrome];\n};\n\nconst check_"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let count = 0\n  lst.forEach(str => {\n    str = str.replace(/\\d/g, x => x.toString() === '1'? '1' : '0')\n    count += str.split('').filter(n => n.toString() === '1').length\n  })\n  return count.toString()\n}\n\n/*\n  Given a string, print the number of characters that are different between\n  the string and the reversed string.\n\n  >>> print_difference(\"abcd\")\n  4\n  >>> print_difference(\"abcde\")\n  5\n  >>> print_difference(\"abc\")\n  3\n  >>> print_difference(\"abcdefg\")\n  7\n  >>> print_difference(\"\")\n  0\n  */\nconst print_difference = (str) => {\n  let str_reversed = str.split('').reverse().join('')\n  let diff = str.length - str_reversed.length\n  return diff\n}\n\n/*\n  Given a list of words, print the words that are missing from the first list\n  in order.\n\n  >>> print_missing([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"apple\", \"banana\", \"carrot\"])\n  banana\n  >>> print_missing([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"orange\", \"banana\", \"carrot\"])\n  pumpkin\n  >>> print_missing([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"orange\", \"banana\", \"carrot\"])\n  apple\n  */\nconst print_missing = (lst) => {\n  let missing = []\n  lst.forEach(str => {\n    let index = lst.indexOf(str)\n    if (index === -1) missing.push(str)\n  })\n  return missing.join(', ')\n}\n\n/*\n  Given a list of words, print the words that are missing from the first list\n  in any order.\n\n  >>> print_missing([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"apple\", \"banana\", \"carrot\"])\n  banana, orange\n  >>> print_missing([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"orange\", \"banana\", \"carrot\"])\n  pumpkin, apple\n  >>> print_missing([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"orange\", \"banana\", \"carrot\"])\n  pumpkin, orange, banana\n  */\nconst print_missing_any = (lst) => {\n  let missing = []\n  lst.forEach(str => {\n    let index = lst.indexOf(str)\n    if (index === -1) missing.push(str)\n  })\n  return missing.join(', ')\n}\n\n/*\n  Given a list of words, print the words that are missing from the first list\n  in the same order as they appear in the second list.\n\n  >>> print_missing_in_order([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"apple\", \"banana\", \"carrot\"])\n  pumpkin, banana\n  >>> print_missing_in_order([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"orange\", \"banana\", \"carrot\"])\n  pumpkin, orange\n  >>> print_missing_in_order([\"apple\", \"orange\", \"banana\", \"pumpkin\", \"orange\", \"banana\", \"carrot\"])\n  orange, pumpkin, banana\n  */\nconst print_missing_in_order = (lst1, lst2) => {\n  let missing = []\n  lst1.forEach(str => {\n    let index = lst2.indexOf(str)\n    if (index === -1) missing.push(str)\n  })\n  return missing.join(', ')\n}\n\n/*\n  Given two lists of words, return a list of words that are missing in either\n  the first list or the second list.\n\n  >>> print_missing_in_both([[\"apple\", \"orange\", \"banana\"], [\"orange\", \"pumpkin\"]])\n  orange, pumpkin\n  >>> print_missing_in_both([[\"apple\", \"orange\", \"banana\"], [\"orange\", \"pumpkin\"]])\n  orange, banana\n  >>> print_missing_in_both([[\"apple\", \"orange\", \"banana\"], [\"orange\", \"pumpkin\"]])\n  banana, pumpkin\n  */\nconst print_missing_in_both = (lst1, lst2) => {\n  let missing = []\n  lst1.forEach(str => {\n    let index = lst2.indexOf(str)\n    if (index === -1) missing.push(str)\n  })\n  return missing.join(', ')\n}\n\n/*\n  Given two lists of words, return a list of words that are missing in either\n  the first list or the second list.\n\n  >>> print_missing_in_both([[\"apple\", \"orange\", \"banana\"], [\"orange\", \"pumpkin\"]])\n  banana, pumpkin\n  >>> print_missing_in_both([[\"apple\", \"orange\", \"banana\"], [\"orange\", \"pumpkin\"]])\n  orange, pumpkin\n  >>> print_missing_in_both([[\"apple\", \"orange\", \"banana\"], [\"orange\", \"pumpkin\"]])\n  pumpkin, banana\n  */\nconst print_missing_in_either = (lst1, lst2) => {\n  let missing = []\n  lst1.forEach(str => {\n    let index = lst2.indexOf("}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n    let min = null\n    for(let i = 0; i < nums.length; i++) {\n        let sub_array = nums.slice(i)\n        if(min === null || min > sub_array.reduce((a, b) => a + b)) {\n            min = sub_array.reduce((a, b) => a + b)\n        }\n    }\n    return min\n}\n\nconsole.log(min_sub_array_sum([2, 3, 4, 1, 2, 4]))<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const [n, m] = grid.length;\n  let[buckets, grid_count, count, max_count] = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        let [b, c] = [i, j];\n        while (b > 0 && c > 0) {\n          let [row, col] = [b, c];\n          grid[row][col] = 0;\n          count++;\n          b--;\n          c--;\n          grid_count++;\n        }\n        if (grid_count === m) {\n          max_count++;\n          buckets++;\n          grid_count = 0;\n        }\n      }\n    }\n  }\n  return buckets;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  if (!Array.isArray(arr)) {\n    throw new Error('array must be an array');\n  }\n\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n\n    if (a < b) {\n      return -1;\n    }\n\n    return 0;\n  });\n};\n\nexport default sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let result = [];\n  const words = s.split('').map(x => x.toLowerCase());\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < words.length; j++) {\n      if (words[j].indexOf(s[i]) >= 0) {\n        result.push(words[j]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\nGiven a string s and a number n, you have to return a string that has at least \nn lowercase 'a' in it. The string may be empty in which case you have to return \nan empty string.\n\nExamples:\nselect_a_lowercase_from_string(\"Hello\", 2) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 3) ==> \"\"\nselect_a_lowercase_from_string(\"Hello\", 4) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 5) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 6) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 7) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 8) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 9) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 10) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 11) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 12) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 13) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 14) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 15) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 16) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 17) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 18) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 19) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 20) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 21) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 22) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 23) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 24) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 25) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 26) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 27) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 28) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 29) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 30) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 31) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 32) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 33) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 34) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 35) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 36) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 37) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 38) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 39) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 40) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 41) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 42) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 43) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 44) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 45) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 46) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 47) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 48) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 49) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 50) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 51) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 52) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 53) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 54) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 55) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 56) ==> \"hello\"\nselect_a_lowercase_from_string(\"Hello\", 57) ==> \"hello\"\nselect_a_lowercase_"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let len = word.length,\n      start = 0,\n      end = len - 1,\n      prev = 0,\n      curr = 0;\n  \n  // Check the first and last characters\n  if (is_vowel(word[0]) &&!is_vowel(word[end])) {\n    return word[0];\n  }\n  if (is_vowel(word[len - 1]) &&!is_vowel(word[0])) {\n    return word[len - 1];\n  }\n  \n  while (start < end) {\n    prev = curr;\n    curr = start + 1;\n    while (curr < end &&!is_vowel(word[curr])) {\n      curr++;\n    }\n    if (Math.abs(curr - prev) < Math.abs(curr - start)) {\n      start = prev;\n    }\n    if (Math.abs(curr - prev) < Math.abs(curr - start)) {\n      start = prev;\n    }\n    if (Math.abs(curr - prev) < Math.abs(curr - start)) {\n      start = prev;\n    }\n    if (curr < end && Math.abs(curr - prev) < Math.abs(curr - start)) {\n      start = prev;\n    }\n  }\n  \n  return \"\";\n}\n\nconst is_vowel = (letter) => {\n  return letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u';\n}\n\n/*\n  Given a string, remove the duplicate letters from the end of the string.\n  \n  Example:\n  remove_duplicate_end(\"abcbb\") ==> \"abc\"\n  remove_duplicate_end(\"bbbb\") ==> \"b\"\n  remove_duplicate_end(\"abcabc\") ==> \"a\"\n  remove_duplicate_end(\"abacac\") ==> \"a\"\n  remove_duplicate_end(\"abb\") ==> \"b\"\n  remove_duplicate_end(\"bb\") ==> \"b\"\n  remove_duplicate_end(\"ab\") ==> \"a\"\n  remove_duplicate_end(\"aa\") ==> \"a\"\n  */\nconst remove_duplicate_end = (word) => {\n  let prev = \"\",\n      len = word.length,\n      curr = 0,\n      end = len - 1;\n  \n  while (curr < end) {\n    if (prev === word[curr]) {\n      curr++;\n    } else {\n      prev = word[curr];\n      word[curr] = \"\";\n      curr++;\n    }\n  }\n  \n  return word;\n}\n\n/*\n  Given a string, remove the duplicate letters from the beginning of the string.\n  \n  Example:\n  remove_duplicate_start(\"abcbb\") ==> \"bb\"\n  remove_duplicate_start(\"bbbb\") ==> \"\"\n  remove_duplicate_start(\"abcabc\") ==> \"cabc\"\n  remove_duplicate_start(\"abacac\") ==> \"acac\"\n  remove_duplicate_start(\"abb\") ==> \"b\"\n  remove_duplicate_start(\"bb\") ==> \"b\"\n  remove_duplicate_start(\"ab\") ==> \"ab\"\n  remove_duplicate_start(\"aa\") ==> \"a\"\n  */\nconst remove_duplicate_start = (word) => {\n  let curr = 0,\n      end = word.length - 1;\n  \n  while (curr < end) {\n    if (is_vowel(word[curr])) {\n      break;\n    }\n    curr++;\n  }\n  \n  return word.slice(curr + 1);\n}\n\n/*\n  Given a string, remove the duplicate letters from the beginning and the end of the string.\n  \n  Example:\n  remove_duplicate_both(\"abcbb\") ==> \"bb\"\n  remove_duplicate_both(\"bbbb\") ==> \"\"\n  remove_duplicate_both(\"abcabc\") ==> \"cabc\"\n  remove_duplicate_both(\"abacac\") ==> \"acac\"\n  remove_duplicate_both(\"abb\") ==> \"b\"\n  remove_duplicate_both(\"bb\") ==> \"b\"\n  remove_duplicate_both(\"ab\") ==> \"ab\"\n  remove_duplicate_both(\"aa\") ==> \"a\"\n  */\nconst remove_duplicate_both = (word) => {\n  let start = 0,\n      end = word.length - 1,\n      prev = \"\",\n      curr = 0;\n  \n  while (curr <= end) {\n    if (prev === word[curr]) {\n      curr++;\n    } else {\n      word[start] = word[curr];\n      start++;\n      curr++;\n    }\n  }\n  \n  return word.slice(start);\n}\n\n/*\n  Given a string, return the number of vowel words in the string.\n  \n  Example:\n  count_vowel_words(\"abcbb\") ==> 2\n  count_vowel_words(\"bbbb\") ==> 0\n  count_vowel_words(\"abcabc\") ==> 2\n  count_vowel_words(\"abacac\") ==> 2\n  count_vowel_words(\"abb\") ==> 1\n  count_vowel_words(\"bb\") ==> 1\n  count_vowel_words"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'Yes';\n  const matches = match_parens(next(1));\n  if (matches === 'Yes') {\n    return matches;\n  } else {\n    return match_parens(next(2));\n  }\n};\n\nconst test = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'Yes';\n  return match_parens(next(1));\n};\n\nconst test2 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(1));\n};\n\nconst test3 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(2));\n};\n\nconst test4 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(1));\n};\n\nconst test5 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(2));\n};\n\nconst test6 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(2));\n};\n\nconst test7 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(1));\n};\n\nconst test8 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(1));\n};\n\nconst test9 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(1));\n};\n\nconst test10 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.indexOf(p) < 0;\n  const curr_paren = (lst.pop() === '(')? '(' : ')';\n  const next = (i) => lst[i];\n  if (is_balanced(curr_paren)) return 'No';\n  return match_parens(next(1));\n};\n\nconst test11 = (lst) => {\n  if (!lst.length) return 'No';\n  const is_balanced = (p) => lst.index"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let ret = []\n  const len = arr.length\n\n  for (let i = 0; i < len; i++) {\n    if (i === k) {\n      ret.push(arr[i])\n    } else if (i + 1 < len) {\n      if (arr[i] > arr[i + 1]) {\n        ret.push(arr[i])\n      }\n    }\n  }\n\n  return ret\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (n % 2 === 0) {\n      acc += n\n    }\n    return acc\n  }, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n    let res = 0;\n    let prev = 0;\n    let i = 0;\n\n    while (i < k) {\n        res += arr[i];\n        i++;\n    }\n\n    for (; i < arr.length; i++) {\n        if (res.toString().length < 3) {\n            res += arr[i];\n        } else {\n            res += arr[i] - prev;\n        }\n\n        prev = arr[i];\n    }\n\n    return res;\n};\n\nmodule.exports = add_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  if(n === 1) return [1];\n  const odd_collatz = [];\n  const odd_list = [1];\n  while(odd_list.length < n) {\n    let index = odd_list.length - 1;\n    let temp = odd_list[index];\n    let next = temp * 2 + 1;\n    if(next > n) {\n      odd_list.push(next);\n    } else {\n      if(next % 2 === 0) {\n        next = next + 1;\n      }\n      odd_list.push(next);\n    }\n    odd_collatz.push(next);\n  }\n  return odd_collatz.sort();\n};\n\nconst get_odd_collatz_reversed = (n) => {\n  if(n === 1) return [1];\n  const odd_collatz = [];\n  const odd_list = [1];\n  while(odd_list.length < n) {\n    let index = odd_list.length - 1;\n    let temp = odd_list[index];\n    let next = temp * 2 + 1;\n    if(next > n) {\n      odd_list.push(next);\n    } else {\n      if(next % 2 === 0) {\n        next = next + 1;\n      }\n      odd_list.push(next);\n    }\n    odd_collatz.push(next);\n  }\n  return odd_collatz.reverse();\n};\n\nconsole.log(get_odd_collatz(5));\nconsole.log(get_odd_collatz_reversed(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (date.length === 0) return false\n  if (parseInt(date.slice(0,2)) < 1 || parseInt(date.slice(2,4)) > 31) return false\n  if (parseInt(date.slice(4,6)) < 1 || parseInt(date.slice(6,8)) > 30) return false\n  if (parseInt(date.slice(4,6)) < 1 || parseInt(date.slice(6,8)) > 29) return false\n  if (parseInt(date.slice(0,2)) < 1 || parseInt(date.slice(2,4)) > 12) return false\n  return true\n}\n\n/*\n  You have to write a function which validates a given time string and\n  returns true if the time is valid otherwise false.\n  The time is valid if all of the following rules are satisfied:\n  1. The time string is not empty.\n  2. The time string should be in the format: hh:mm:ss.\n  3. The hours should not be less than 0 or higher than 24.\n  4. The minutes should not be less than 0 or higher than 59.\n  5. The seconds should not be less than 0 or higher than 59.\n\n  for example: \n  valid_time('00:00:00') => true\n\n  valid_time('00:00:01') => false\n\n  valid_time('25:00:00') => false\n\n  valid_time('00:00:00.00') => false\n  */\nconst valid_time = (time) => {\n  if (time.length === 0) return false\n  const match = time.match(/^\\d{2}:\\d{2}:\\d{2}\\.?$/)\n  if (!match) return false\n  if (parseInt(time.slice(0,2)) < 0 || parseInt(time.slice(2,4)) > 24) return false\n  if (parseInt(time.slice(4,6)) < 0 || parseInt(time.slice(6,8)) > 59) return false\n  if (parseInt(time.slice(8,10)) < 0 || parseInt(time.slice(10,12)) > 59) return false\n  return true\n}\n\n/*\n  You have to write a function which validates a given date and time string and\n  returns true if the date and time is valid otherwise false.\n  The date and time is valid if all of the following rules are satisfied:\n  1. The date and time string is not empty.\n  2. The date and time string should be in the format: dd-mm-yyyy hh:mm:ss.\n\n  for example: \n  valid_date_and_time('03-11-2000 00:00:00') => true\n\n  valid_date_and_time('15-01-2012 00:00:00') => false\n\n  valid_date_and_time('04-0-2040 00:00:00') => false\n\n  valid_date_and_time('06-04-2020 00:00:00') => true\n\n  valid_date_and_time('06/04/2020 00:00:00') => false\n  */\nconst valid_date_and_time = (date_and_time) => {\n  if (date_and_time.length === 0) return false\n  const match = date_and_time.match(/^\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}:\\d{2}\\.?$/)\n  if (!match) return false\n  return true\n}\n\nconst validate_date = (date) => {\n  if (date.length === 0) return false\n  if (parseInt(date.slice(0,2)) < 1 || parseInt(date.slice(2,4)) > 31) return false\n  if (parseInt(date.slice(4,6)) < 1 || parseInt(date.slice(6,8)) > 30) return false\n  if (parseInt(date.slice(4,6)) < 1 || parseInt(date.slice(6,8)) > 29) return false\n  if (parseInt(date.slice(0,2)) < 1 || parseInt(date.slice(2,4)) > 12) return false\n  return true\n}\n\nconst validate_time = (time) => {\n  if (time.length === 0) return false\n  const match = time.match(/^\\d{2}:\\d{2}:\\d{2}\\.?$/)\n  if (!match) return false\n  if (parseInt(time.slice(0,2)) < 0 || parseInt(time.slice(2,4)) > 24) return false\n  if (parseInt(time.slice(4,6)) < 0 || parseInt(time.slice(6,8)) > 59) return false\n  if (parseInt(time.slice(8,10)) < 0 || parseInt(time.slice(10,12)) > 59) return false\n  return true\n}\n\nconst validate_date_and_time = (date_and_time) => {\n  if (date_and_time.length === 0) return false\n  const match = date_and_time.match(/^\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}:\\d{2}\\.?$/)\n  if (!match) return false\n  return true\n}\n\n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const re = /\\s+/g\n  return txt.split(re).filter((_, index) => index % 2 === 0)\n}\n\n/**\n  * Given a string, return a list of all the words in the string\n  * Examples\n  * words(\"Hello world\") ➞ [\"Hello\", \"world\"]\n  * words(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"!\"]\n  * words(\"Hi, my name is John\") ➞ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  * words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst words = (txt) => {\n  return txt.split(/\\s+/).filter((_, index) => index % 2 === 0)\n}\n\n/**\n  * Given a string, return the number of words in the string\n  * Examples\n  * words(\"Hello world\") ➞ 13\n  * words(\"Hello world!\") ➞ 14\n  * words(\"Hi, my name is John\") ➞ 5\n  */\nconst word_count = (txt) => {\n  return txt.split(/\\s+/).filter((_, index) => index % 2 === 0).length\n}\n\n/**\n  * Given a string, return the number of lower-case letters in the string\n  * Examples\n  * words(\"Hello world!\") ➞ 18\n  * words(\"Hi, my name is John\") ➞ 23\n  */\nconst lower_word_count = (txt) => {\n  return txt.split(/\\s+/).filter((_, index) => index % 2 === 0).reduce((acc, word) => {\n    return acc + word.toLowerCase().length\n  }, 0)\n}\n\n/**\n  * Given a string, return the number of upper-case letters in the string\n  * Examples\n  * words(\"Hello world!\") ➞ 18\n  * words(\"Hi, my name is John\") ➞ 3\n  */\nconst upper_word_count = (txt) => {\n  return txt.split(/\\s+/).filter((_, index) => index % 2 === 0).reduce((acc, word) => {\n    return acc + word.toUpperCase().length\n  }, 0)\n}\n\n/**\n  * Given a string, return the number of upper-case letters and lower-case letters in the string\n  * Examples\n  * words(\"Hello world!\") ➞ 13\n  * words(\"Hi, my name is John\") ➞ 5\n  */\nconst full_word_count = (txt) => {\n  return txt.split(/\\s+/).filter((_, index) => index % 2 === 0).length\n}\n\nexport {\n  split_words,\n  words,\n  word_count,\n  lower_word_count,\n  upper_word_count,\n  full_word_count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = lst.filter((x) => x >= 0);\n  if (sorted.length === 0) return false;\n  if (sorted.length === 1) return true;\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x >= last);\n};\n\n// Tests\n\nconst lst = [1, 2, 2, 3, 4];\n\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted(lst));\n//console.log(is_sorted"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  if (start > end) return \"NO\";\n  if (end - start === 0) return \"NO\";\n  if (isPrime(end - start)) return \"YES\";\n  return \"NO\";\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) return \"NO\";\n  }\n  return \"YES\";\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const result = [1];\n  arr.forEach((num, idx) => {\n    const sign = num > 0? 1 : num < 0? -1 : 0;\n    result.push(num * sign);\n  });\n  return result.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of strings and you need to return\n  sum of magnitudes of characters in each string.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_magnitudes([\n  >>>     '1st',\n  >>>     '2nd',\n  >>>     '3rd',\n  >>>     '4th',\n  >>> ]) == '1st' + '2nd' + '3rd' + '4th'\n  >>> prod_magnitudes([]) == null\n  */\nconst prod_magnitudes = (arr) => {\n  const result = [1];\n  arr.forEach((str, idx) => {\n    result.push(String(str).length);\n  });\n  return result.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of strings and you need to return\n  sum of magnitudes of characters in each string multiplied by sign\n  of each character.\n\n  Example:\n  >>> prod_magnitudes_signs([\n  >>>     '1st',\n  >>>     '2nd',\n  >>>     '3rd',\n  >>>     '4th',\n  >>> ]) == '1st' + '2nd' + '3rd' + '4th'\n  >>> prod_magnitudes_signs([]) == null\n  */\nconst prod_magnitudes_signs = (arr) => {\n  const result = [1];\n  arr.forEach((str, idx) => {\n    const sign = str.length > 0? str.charAt(0) : 0;\n    result.push(sign * String(str).length);\n  });\n  return result.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of strings and you need to return\n  sum of signs multiplied by product of magnitudes of each string.\n\n  Example:\n  >>> prod_signs_magnitudes([\n  >>>     '1st',\n  >>>     '2nd',\n  >>>     '3rd',\n  >>>     '4th',\n  >>> ]) == -4\n  >>> prod_signs_magnitudes([]) == null\n  */\nconst prod_signs_magnitudes = (arr) => {\n  const result = [1];\n  arr.forEach((str, idx) => {\n    result.push(prod_magnitudes(str) * prod_signs(str));\n  });\n  return result.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of strings and you need to return\n  sum of signs multiplied by product of magnitudes of each string multiplied by sign\n  of each character.\n\n  Example:\n  >>> prod_signs_magnitudes_signs([\n  >>>     '1st',\n  >>>     '2nd',\n  >>>     '3rd',\n  >>>     '4th',\n  >>> ]) == '1st' + '2nd' + '3rd' + '4th'\n  >>> prod_signs_magnitudes_signs([]) == null\n  */\nconst prod_signs_magnitudes_signs = (arr) => {\n  const result = [1];\n  arr.forEach((str, idx) => {\n    result.push(prod_signs_magnitudes(str) * prod_signs_magnitudes(str));\n  });\n  return result.reduce((acc, curr) => acc + curr);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const r = grid.length;\n  const c = grid[0].length;\n  const paths = new Array(k);\n  const visited = new Array(r * c);\n  const lst_A = new Array(k);\n  const lst_B = new Array(k);\n  \n  for (let i = 0; i < r * c; ++i) {\n    visited[i] = 0;\n  }\n  \n  let max_r = 0, max_c = 0;\n  \n  for (let r = 0; r < r; ++r) {\n    for (let c = 0; c < c; ++c) {\n      if (grid[r][c] == 0) {\n        continue;\n      }\n      \n      if (visited[r * c] === 0) {\n        lst_A[0] = grid[r][c];\n        \n        for (let i = 1; i < k; ++i) {\n          lst_A[i] = lst_A[i - 1] + grid[r][c];\n        }\n        \n        max_r = r;\n        max_c = c;\n        \n        paths[0] = grid[r][c];\n        visited[r * c] = 1;\n        \n        for (let i = 1; i < k; ++i) {\n          lst_B[i] = lst_A[i];\n          \n          if (lst_A[i] > lst_B[i]) {\n            for (let j = 0; j < k; ++j) {\n              paths[j] = lst_A[i];\n            }\n            \n            return paths;\n          }\n        }\n      }\n    }\n  }\n};\n\nexport default min_path;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 1) {\n      result.unshift(1 + (j / 2))\n      j = (j - 1) / 2\n    }\n    result.unshift(i)\n  }\n  return result\n}\n\nexport default tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1\n  while(n > 0) {\n    res *= n % 10\n    n = Math.floor(n / 10)\n  }\n  return res\n}\n\n/**\n  * Given two integers a and b, return the sum of the squares of the digits of\n  * a and b.\n  */\nconst sumOfSquares = (a, b) => {\n  let res = 0\n  while(a > 0) {\n    res += (a % 10) * (a % 10)\n    a = Math.floor(a / 10)\n  }\n  while(b > 0) {\n    res += (b % 10) * (b % 10)\n    b = Math.floor(b / 10)\n  }\n  return res\n}\n\nmodule.exports = {\n  sumOfSquares,\n  digits\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = []\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '[') {\n      brackets.push(i)\n      i++\n    } else if (string[i] === ']') {\n      const index = brackets.pop()\n      if (index === undefined) {\n        return false\n      } else if (string[index - 1] === '[') {\n        return false\n      }\n      i++\n    } else {\n      i++\n    }\n  }\n  return true\n}\n\nconsole.log(is_nested('[][]'))\nconsole.log(is_nested('[][]]'))\nconsole.log(is_nested('[[][][]'))\nconsole.log(is_nested('[][][]]'))\nconsole.log(is_nested('[][]][][]'))\nconsole.log(is_nested('[][][]]'))\nconsole.log(is_nested('[[]]'))\nconsole.log(is_nested('[[[]]]'))\nconsole.log(is_nested('[[]]]]]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[[]]]'))\nconsole.log(is_nested('[[[]]]]'))\nconsole.log(is_nested('[[]][]]]'))\nconsole.log(is_nested('[[[]]]]'))\nconsole.log(is_nested('[][]][]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[][]][[]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[[][]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[[[]]]'))\nconsole.log(is_nested('[][]]]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[][]]]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[][[]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[[[][]]]'))\nconsole.log(is_nested('[][[]]]'))\nconsole.log(is_nested('[[[]]]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[[[][]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[[[][]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[[[][]]]'))\nconsole.log(is_nested('[][][]]]'))\nconsole.log(is_nested('[[[][]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))\nconsole.log(is_nested('[[[][]]]]]'))"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const sum = lst.reduce((sum, x) => sum + x * x, 0);\n  return sum;\n};\n\nconst test = [\n  [1,2,3],\n  [1,4,9],\n  [1,3,5,7],\n  [1.4,4.2,0]\n];\n\nconst test_sum = sum_squares(test);\nconsole.log(test_sum);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n    const is_alphabetic = (ch) => ch.match(/[A-Za-z]/);\n    const is_not_in_a_word = (ch) =>!ch.match(/[A-Za-z]|[0-9]|\\s/);\n    return txt.lastIndexOf(is_alphabetic()) === txt.length - 1 &&\n        txt.lastIndexOf(is_not_in_a_word()) === -1;\n};\n\nconst check_if_word_is_valid = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_in_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.lastIndexOf(is_not_in_a_word()) === -1;\n};\n\nconst check_if_word_is_valid_as_first_char = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.length > 1 &&\n        txt.lastIndexOf(is_not_a_word()) === -1;\n};\n\nconst check_if_word_is_valid_as_last_char = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.length > 1 &&\n        txt.lastIndexOf(is_not_a_word()) === -1;\n};\n\nconst check_if_word_is_valid_as_middle_char = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.length > 2 &&\n        txt.lastIndexOf(is_not_a_word()) === -1;\n};\n\nconst check_if_word_is_valid_as_middle_char_with_space = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.lastIndexOf(is_not_a_word()) === -1 &&\n        txt.lastIndexOf(' ') > 1;\n};\n\nconst check_if_word_is_valid_as_first_middle_last_char = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.length > 3 &&\n        txt.lastIndexOf(is_not_a_word()) === -1;\n};\n\nconst check_if_word_is_valid_as_first_middle_last_char_with_space = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.length > 3 &&\n        txt.lastIndexOf(is_not_a_word()) === -1 &&\n        txt.lastIndexOf(' ') > 2;\n};\n\nconst check_if_word_is_valid_as_first_middle_last_char_with_space_and_first_char = (txt) => {\n    const is_not_empty = (txt) => txt.length > 0;\n    const is_not_a_word = (txt) =>!txt.match(/[A-Za-z]|[0-9]|\\s/);\n    return is_not_empty(txt) && txt.length > 4 &&\n        txt.lastIndexOf(is_not_a_word()) === -1 &&\n        txt.lastIndexOf(' ') > 2;\n};\n\nmodule.exports = {\n    check_if_last_char_is_a_letter,\n    check_if_word_is_valid,\n    check_if_word_is_valid_as_first_char,\n    check_if_word_is_valid_as_first_middle_last_char,\n    check_if_word_is_valid_as_first_middle_last_char_with_space,\n    check_if_word_is_valid_as_first_middle_last_char_with_space_and_first_char,\n    check_if_word_is_valid_as_middle_char,\n    check_if_word_is_valid_as_middle_char_with_space,\n    check_if_word_is_valid_as_first_middle_last_char"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let smallest = -1\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      smallest = i\n      break\n    }\n  }\n  return smallest\n}\n\n/*\n  Write a function which takes an array of non-negative integers and\n  returns the maximum number of consecutive elements of equal values.\n\n  Examples:\n  equal_consecutive([1,2,3,4,4]) = 4\n  equal_consecutive([1,2,2,3,4]) = 2\n  equal_consecutive([1,2,2,2,2]) = 2\n  equal_consecutive([1,1,2,3,4]) = 2\n  equal_consecutive([1,2,3,4,4]) = 4\n  */\nconst equal_consecutive = (arr) => {\n  let max_equal_index = -1\n  let count = 0\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++\n      if (count > 1) {\n        if (index < max_equal_index) {\n          max_equal_index = index\n        }\n        count = 0\n      }\n      index++\n    } else {\n      if (count) {\n        count = 0\n      } else {\n        index = 0\n      }\n    }\n  }\n  return max_equal_index\n}\n\n/*\n  Write a function which takes an array of non-negative integers and\n  returns the maximum number of consecutive elements of equal values.\n\n  Examples:\n  equal_consecutive([1,2,3,4,4]) = 4\n  equal_consecutive([1,2,2,3,4]) = 2\n  equal_consecutive([1,2,2,2,2]) = 2\n  equal_consecutive([1,1,2,3,4]) = 2\n  equal_consecutive([1,2,3,4,4]) = 4\n  */\nconst equal_consecutive_v2 = (arr) => {\n  let max_equal_index = -1\n  let count = 0\n  let index = 0\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === arr[i - 1]) {\n      count++\n      if (count > 1) {\n        if (index < max_equal_index) {\n          max_equal_index = index\n        }\n        count = 0\n      }\n      index++\n    } else {\n      if (count) {\n        count = 0\n      } else {\n        index = 0\n      }\n    }\n  }\n  return max_equal_index\n}\n\nexport { can_arrange, equal_consecutive, equal_consecutive_v2 }\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const a = null\n  const b = null\n  const max = a\n  const min = b\n\n  if (lst.length === 0) {\n    return (null, null)\n  }\n\n  lst.forEach((x, i) => {\n    if (x < 0) {\n      if (min === null || x < min) {\n        min = x\n      }\n    } else if (x > 0) {\n      if (max === null || x > max) {\n        max = x\n      }\n    }\n  })\n\n  if (min === null) {\n    return (null, null)\n  } else if (max === null) {\n    return (null, min)\n  } else {\n    return (min, max)\n  }\n}\n\n// ==========================================\n// Tests\n// ==========================================\n\nconst tests = [\n  {\n    description: 'largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)',\n    input: [2, 4, 1, 3, 5, 7],\n    output: largest_smallest_integers(input)\n  },\n  {\n    description: 'largest_smallest_integers([]) == (null, null)',\n    input: [],\n    output: largest_smallest_integers(input)\n  },\n  {\n    description: 'largest_smallest_integers([0]) == (null, null)',\n    input: [0],\n    output: largest_smallest_integers(input)\n  }\n]\n\n// ==========================================\n// Run Tests\n// ==========================================\n\ntests.forEach(test => {\n  const result = largest_smallest_integers(test.input)\n  console.log(`${test.description} == ${result}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  const a_type = typeof a\n  const b_type = typeof b\n  if (a_type!== b_type) {\n    return compare_one(b, a)\n  }\n  if (a_type === \"string\") {\n    return compare_one(a, b)\n  }\n  if (a_type === \"number\") {\n    return compare_one(a, b)\n  }\n  if (a_type === \"object\") {\n    if (Array.isArray(a)) {\n      return compare_one(a, b)\n    }\n    if (a instanceof Date) {\n      return compare_one(a, b)\n    }\n  }\n  return a > b? b : a\n}\n\ncompare_one(1, 2.5)\ncompare_one(1, \"2,3\")\ncompare_one(\"5,1\", \"6\")\ncompare_one(\"1\", 1)\ncompare_one(1, \"1\")\n\n//\n//  You might also like to compare two strings, and you can do that with\n//  `compare_two`:\n//\n\nconst compare_two = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (typeof a!== typeof b) {\n    return compare_two(a, b)\n  }\n  if (a instanceof Date) {\n    return compare_two(a, b)\n  }\n  if (a_type === \"object\") {\n    if (Array.isArray(a)) {\n      return compare_two(a, b)\n    }\n    if (a instanceof Date) {\n      return compare_two(a, b)\n    }\n  }\n  if (a_type === \"number\") {\n    return compare_two(a, b)\n  }\n  if (a_type === \"string\") {\n    if (typeof a === \"string\") {\n      return compare_two(a, b)\n    }\n  }\n  return a > b? b : a\n}\n\ncompare_two(\"a\", \"b\")\ncompare_two(1, \"1\")\ncompare_two(\"1\", \"1\")\ncompare_two(1, 1)\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2 === 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 4;\n};\n\n/**\n * Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  is_equal_to_sum_odd(3) == false\n  is_equal_to_sum_odd(8) == true\n  is_equal_to_sum_odd(9) == false\n  */\nconst is_equal_to_sum_odd = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2!== 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 2;\n};\n\n/**\n * Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  is_equal_to_sum_even(9) == false\n  is_equal_to_sum_even(18) == true\n  */\nconst is_equal_to_sum_even_2 = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2 === 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 2;\n};\n\n/**\n * Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n  Example\n  is_equal_to_sum_odd(9) == true\n  is_equal_to_sum_odd(17) == true\n  is_equal_to_sum_odd(18) == false\n  */\nconst is_equal_to_sum_odd_2 = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2!== 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 3;\n};\n\n/**\n * Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  is_equal_to_sum_even(9) == false\n  is_equal_to_sum_even(17) == false\n  is_equal_to_sum_even(18) == true\n  */\nconst is_equal_to_sum_even_3 = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2 === 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 3;\n};\n\n/**\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(9) == true\n  is_equal_to_sum_odd(17) == true\n  is_equal_to_sum_odd(18) == true\n  is_equal_to_sum_odd(25) == true\n  is_equal_to_sum_odd(26) == true\n  is_equal_to_sum_odd(27) == true\n  is_equal_to_sum_odd(28) == false\n  */\nconst is_equal_to_sum_odd_4 = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2!== 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 4;\n};\n\n/**\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(9) == true\n  is_equal_to_sum_even(17) == true\n  is_equal_to_sum_even(18) == true\n  is_equal_to_sum_even(25) == false\n  is_equal_to_sum_even(26) == false\n  is_equal_to_sum_even(27) == false\n  is_equal_to_sum_even(28) == true\n  */\nconst is_equal_to_sum_even_5 = (n) => {\n    const sum = n;\n    const count = 0;\n    while (sum!== 0) {\n        if (sum % 2 === 0 && sum > 0) {\n            count++;\n        }\n        sum = sum / 2;\n    }\n    return count === 4;\n};\n\nconst sum = (n) => {\n    if (is_equal_to_sum_odd(n)) {\n        return n;\n    } else if (is_equal_to_sum_even(n)) {\n        return n;\n    } else if (is_equal_to_sum_odd_2(n)) {\n        return n;\n    } else if (is_equal_to_sum_even_2(n)) {\n        return n;\n    } else if (is_equal_to_sum_odd_3(n)) {\n        return n;\n    } else if (is_equal_to_sum_even_3(n)) {\n        return n;\n    } else if (is_equal_to_sum_odd_4(n)) {\n        return n;\n    } else if (is_equal_to_sum_even_4(n)) {\n        return n;\n    } else if (is_equal_to_sum_odd_5(n)) {\n        return n;\n    } else if (is_equal_to_sum_even_5(n)) {\n        return n;\n    } else {\n        return false;\n    }\n};\n\nmodule.exports = sum"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  const factors = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600];\n  let result = 1;\n\n  for (let i = 1; i <= n; i++) {\n    result *= factors[i];\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\nconst is_space = (char) => {\n  return char ==='';\n}\n\nconst fix_spaces_recursive = (text) => {\n  let result = '';\n  let last_char = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      if (last_char ==='') {\n        result += '-';\n      }\n      else {\n        result +='';\n      }\n    }\n    else {\n      result += char;\n    }\n    last_char = char;\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result += '-';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_alternative = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_alternative_shortcut = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_2 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result += '-';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_3 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_4 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_5 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_6 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result += '-';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_7 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_8 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_9 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result +='';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_10 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (is_space(char)) {\n      result += '-';\n    }\n    else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconst fix_spaces_recursive_shortcut_11 = (text) => {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    let char"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n    let regex = /^([a-zA-Z]{1}[a-zA-Z0-9.]{0,2})[0-9.]{0,1}[^0-9.]{1,2}[0-9]{0,1}[^0-9.]{1,2}$/;\n    let regex_exact = /^([a-zA-Z]{1}[a-zA-Z0-9.]{0,2})[0-9.]{0,1}[^0-9.]{1,2}$/;\n    let regex_dot = /^([a-zA-Z]{1}[a-zA-Z0-9.]{0,2})[0-9.]{0,1}[^0-9.]{1,2}$/;\n    let regex_two_dot = /^([a-zA-Z]{1}[a-zA-Z0-9.]{0,2})[0-9.]{0,1}[^0-9.]{1,2}$/;\n    let regex_exception = /^([a-zA-Z]{1}[a-zA-Z0-9.]{0,2})[0-9.]{0,1}[^0-9.]{1,2}[0-9]{0,1}[^0-9.]{1,2}$/;\n\n    if(regex.test(file_name) && file_name.indexOf(\".\") > 0 && file_name.indexOf(\".\") < file_name.length-1) {\n        if(file_name.indexOf(\".\") > file_name.length-3) {\n            return \"No\";\n        }\n        let match = file_name.match(regex_exact);\n        if(match && file_name.indexOf(\".\") == file_name.length-3) {\n            return \"No\";\n        }\n        match = file_name.match(regex_dot);\n        if(match && file_name.indexOf(\".\") == file_name.length-1) {\n            return \"No\";\n        }\n        match = file_name.match(regex_two_dot);\n        if(match && file_name.indexOf(\".\") == file_name.length-2) {\n            return \"No\";\n        }\n        if(file_name.indexOf(\".\") > file_name.length-3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  an array of all the characters in the string.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.dll\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.exe\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.exe\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"1example.txt\") # => ['e', 'x', 'a','m', 'p', 'l']\n  file_name_check(\"example.txt\") # => ['e', 'x', 'a','m',"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0\n  for (let x of lst) {\n    if ((x % 3) == 0) {\n      sum += x*x\n    }\n    if ((x % 4) == 0) {\n      sum += x*x*x\n    }\n  }\n  return sum\n}\n\nmodule.exports = sum_squares<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  // TODO: use prime number list\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const words = sentence.split(' ')\n  const n = words.length\n  let ret = ''\n  for (let i = 0; i < n; i += 1) {\n    if (words[i].length % 2 === 0) {\n      ret += words[i] +''\n    } else {\n      let j = i\n      while (j < n) {\n        if (words[j].length % 2 === 0) {\n          ret += words[j] +''\n          j += 1\n        } else {\n          break\n        }\n      }\n    }\n  }\n  return ret.trim()\n}\n\n// test\n/*\n  >>> words_in_sentence('This is a test')\n  'is'\n\n  >>> words_in_sentence('lets go for swimming')\n  'go for'\n\n  >>> words_in_sentence('This is a test')\n  'is'\n\n  >>> words_in_sentence('a')\n  'a'\n\n  >>> words_in_sentence('This is a test')\n  'is'\n\n  >>> words_in_sentence('This is a test')\n  'is'\n\n  >>> words_in_sentence('This is a test')\n  'is'\n\n  >>> words_in_sentence('This is a test')\n  'is'\n\n  >>> words_in_sentence('This is a test')\n  'is'\n*/\n\nconsole.log(words_in_sentence('This is a test'))\nconsole.log(words_in_sentence('lets go for swimming'))\nconsole.log(words_in_sentence('This is a test'))\nconsole.log(words_in_sentence('This is a test'))\nconsole.log(words_in_sentence('This is a test'))\nconsole.log(words_in_sentence('This is a test'))\nconsole.log(words_in_sentence('This is a test'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === '0' || n === '0') {\n    return true;\n  }\n  return x.charAt(0) === n.charAt(0)? x === n : x.match(n.match(/(\\d+)/g)) && x.charAt(0) === x.charAt(1);\n};\n\nconsole.log(simplify('1/5', '5/1'));\nconsole.log(simplify('1/6', '2/1'));\nconsole.log(simplify('7/10', '10/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    return a + b === b + a? a - b : a + b;\n  });\n\n  const [n, c] = sorted.slice(0, -1);\n  return [c, n];\n};\n\nconst sum = (nums) => {\n  return nums.reduce((acc, num) => acc + num, 0);\n};\n\nconst order_by_sum = (nums) => {\n  return nums.sort((a, b) => {\n    return sum(a) - sum(b);\n  });\n};\n\nconst main = (args) => {\n  if (!args.length) {\n    return console.log('');\n  }\n\n  const nums = args.slice(1);\n\n  const [points, sum_of_digits] = order_by_points(nums);\n  const [sorted, sum_of_digits_sorted] = order_by_sum(nums);\n\n  console.log(points);\n  console.log(sorted);\n  console.log(sum_of_digits);\n  console.log(sum_of_digits_sorted);\n};\n\nmain(process.argv.slice(2));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const arr = nums.map(n => n % 10)\n  const is_odd = arr[0] % 2 === 1 && arr[arr.length - 1] % 2 === 1\n  return arr.filter(x => x > 10 && is_odd).length\n}\n\nconsole.log(special_filter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  let arr = new Array(n);\n  let a = [1, 3, 7, 13, 21];\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    let j = i + 1;\n    while (j < n) {\n      let k = j + 1;\n      while (k < n) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n        k++;\n      }\n      j++;\n    }\n    arr[i] = a[i];\n  }\n  return count;\n}\n\nconst test = () => {\n  let n = 5;\n  console.log(get_max_triples(n));\n}\n\nconst main = () => {\n  test();\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    if (planet1 === \"Earth\" && planet2 === \"Mercury\") {\n        return (\"Venus\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Saturn\") {\n        return (\"Uranus\", \"Earth\")\n    } else if (planet1 === \"Earth\" && planet2 === \"Saturn\") {\n        return (\"Mars\", \"Jupiter\")\n    } else if (planet1 === \"Earth\" && planet2 === \"Uranus\") {\n        return (\"Venus\", \"Mars\", \"Jupiter\")\n    } else if (planet1 === \"Mercury\" && planet2 === \"Saturn\") {\n        return (\"Venus\", \"Mars\", \"Jupiter\")\n    } else if (planet1 === \"Mercury\" && planet2 === \"Uranus\") {\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\", \"Jupiter\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\", \"Jupiter\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Neptune\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Neptune\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Neptune\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Neptune\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Neptune\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Neptune\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Neptune\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Saturn\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Jupiter\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Uranus\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Uranus\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \"Mars\")\n    } else if (planet1 === \"Saturn\" && planet2 === \"Jupiter\") {\n        return (\"Earth\", \""}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice(0)\n  sorted.sort((a, b) => a.length - b.length)\n  const sum = sorted.reduce((a, b) => a + b)\n  return sorted.map(word => word.length + sum)\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice(0)\n  sorted.sort((a, b) => a - b)\n  const sum = sorted.reduce((a, b) => a + b)\n  return sorted.map(word => word.length + sum)\n}\n\nconst list_sort_custom = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice(0)\n  sorted.sort((a, b) => a - b)\n  const sum = sorted.reduce((a, b) => a + b)\n  return sorted.map(word => word.length + sum)\n}\n\nmodule.exports = {\n  sorted_list_sum,\n  list_sort,\n  list_sort_custom\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 3 === 0) {\n    return false\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(x_or_y(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let n of lst) {\n    if (Math.floor(n) === n) {\n      sum += n * n;\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = [0, 0, 0, 0, 0, 0];\n  let is_correct = game.every(e => e === guess[e]);\n  if (is_correct) {\n    return diff;\n  } else {\n    for (let i = 0; i < game.length; i++) {\n      diff[i] = Math.abs(guess[i] - game[i]);\n    }\n    return diff;\n  }\n};\n\n/*\n  \n  Given an array of integers, return the array of numbers in the given array\n  that have the greatest product. For example,\n  \n  compute([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  \n  should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  \n  \n  \n  \n  \n  */\nconst compute = (nums) => {\n  let i = nums.length - 1;\n  let max_p = 0;\n  let curr_p = 1;\n  while (i >= 0) {\n    curr_p *= nums[i];\n    if (curr_p > max_p) {\n      max_p = curr_p;\n    }\n    i--;\n  }\n  return nums.filter(x => x === max_p);\n};\n\n/*\n  \n  Given an array of numbers, return the index of the first number in the array\n  that has a sum of 1. For example,\n  \n  sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  \n  should return 5\n  \n  \n  \n  \n  \n  */\nconst sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return nums.findIndex(x => x === sum);\n};\n\nmodule.exports = {\n  compare: compare,\n  compute: compute,\n  sum: sum\n};<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const caps = extensions.map(ext => ext.split('.').map(letter => letter.toUpperCase()).join('')).map(cap => cap.length);\n  const sms = extensions.map(ext => ext.split('.').map(letter => letter.toLowerCase()).join('')).map(sm => sm.length);\n\n  let strength = 0;\n  for(let i = 0; i < caps.length; i++) {\n    strength = strength + (caps[i] - sms[i]);\n  }\n\n  const sorted_extensions = extensions.sort((a, b) => strength[a.length] - strength[b.length]);\n\n  for(let i = 0; i < sorted_extensions.length; i++) {\n    if(strength[sorted_extensions[i].length] === -1) {\n      return class_name + '.' + sorted_extensions[i];\n    }\n  }\n}\n\nmodule.exports = strongest_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const n = a.length\n  const m = b.length\n  if (n === 0 || m === 0) {\n    return false\n  }\n  if (n!== m) {\n    return false\n  }\n\n  const pattern = b\n  const nchar = a.length\n  const nrot = Math.pow(2, nchar)\n\n  for (let i = 0; i < nrot; i++) {\n    let a1 = pattern.slice(0)\n    a1 = a1.concat(a.slice(0, nchar - nrot))\n    a1 = a1.concat(a.slice(nchar - nrot, nchar))\n\n    let b1 = a.slice(0, nchar - nrot)\n    b1 = b1.concat(b.slice(0, nchar - nrot))\n    b1 = b1.concat(b.slice(nchar - nrot, nchar))\n\n    if (a1 === b1) {\n      return true\n    }\n  }\n\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  const count = {};\n  let count_odd = 0;\n  let count_even = 0;\n\n  for (let i = 0; i < num.toString().length; i++) {\n    count[num.toString().charAt(i)] = (num.toString().charAt(i) === '0')? 0 : 1;\n  }\n\n  for (let i = 0; i < count.length; i++) {\n    if (count[i] === 0) {\n      count_even += 1;\n    } else {\n      count_odd += 1;\n    }\n  }\n\n  return { count_odd, count_even };\n};\n\nmodule.exports = even_odd_count;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const num = parseInt(number, 10)\n\n  if (num <= 3) {\n    return roman[num]\n  }\n\n  const a = num // Math.floor(num / 4)\n  const b = num % 4\n  const half = a + 1\n\n  return roman[half] + roman[b]\n}\n\n/*\n  Given a roman numeral, return its integer value.\n  Restrictions: roman must be lowercase and must consist of at least 1 letter and at most 3 letters.\n\n  Examples:\n  >>> mini_roman_to_int('M')\n  >>> mini_roman_to_int('xix')\n  >>> mini_roman_to_int('clii')\n  >>> mini_roman_to_int('cdxxvi')\n  */\nconst mini_roman_to_int = (roman) => {\n  const roman_to_int = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'd': 100,\n    'c': 500,\n   'm': 1000\n  }\n\n  const roman_int = roman.toLowerCase()\n\n  return roman_to_int[roman_int]\n}\n\n/*\n  Given a positive integer, find the largest possible value of x, such\n  that roman_numeral(x) = num.\n\n  Example:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_roman = (num) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  const int_to_roman = {\n    'M': 1000,\n    'D': 500,\n    'C': 100,\n    'L': 50,\n    'X': 10,\n    'V': 5,\n    'I': 1\n  }\n\n  const result = []\n  let current_number = 0\n\n  while (current_number < num) {\n    const roman_int = mini_roman_to_int(int_to_mini_roman(current_number))\n    const roman_numeral = roman[roman_int]\n    current_number += roman_numeral\n\n    result.push(roman_numeral)\n  }\n\n  return result.join('')\n}\n\nmodule.exports = {\n  int_to_roman,\n  mini_roman_to_int,\n  int_to_mini_roman\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n    if(a == 0 && b == 0 && c == 0) {\n        return false;\n    }\n    return Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) - Math.pow(a + b, 2) / 4) < epsilon;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length of the\n  right side, or 0 if the triangle is right-angled.\n  Example:\n  missing_length(3, 4, 5) == 1\n  missing_length(1, 2, 3) == 0\n  */\nconst missing_length = (a, b, c) => {\n    if(right_angle_triangle(a, b, c)) {\n        return 0;\n    }\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) - Math.pow(a + b, 2) / 4;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the missing length of the\n  longest side.\n  Example:\n  missing_length_side(3, 4, 5) == 5\n  missing_length_side(1, 2, 3) == 0\n  */\nconst missing_length_side = (a, b, c) => {\n    if(right_angle_triangle(a, b, c)) {\n        return 0;\n    }\n    return Math.max(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)), Math.sqrt(Math.pow(a + b, 2) + Math.pow(b + c, 2) - Math.pow(a + b + c, 2)));\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the missing length of the\n  shortest side.\n  Example:\n  missing_length_side(3, 4, 5) == 1\n  missing_length_side(1, 2, 3) == 0\n  */\nconst missing_length_side2 = (a, b, c) => {\n    if(right_angle_triangle(a, b, c)) {\n        return 0;\n    }\n    return Math.min(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)), Math.sqrt(Math.pow(a + b, 2) + Math.pow(b + c, 2) - Math.pow(a + b + c, 2)));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length of\n  the longest side.\n  Example:\n  missing_length_side(3, 4, 5) == 4\n  missing_length_side(1, 2, 3) == 0\n  */\nconst missing_length_side3 = (a, b, c) => {\n    if(right_angle_triangle(a, b, c)) {\n        return 0;\n    }\n    return Math.max(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)), Math.sqrt(Math.pow(a + b, 2) + Math.pow(b + c, 2) - Math.pow(a + b + c, 2)));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length of\n  the shortest side.\n  Example:\n  missing_length_side(3, 4, 5) == 2\n  missing_length_side(1, 2, 3) == 0\n  */\nconst missing_length_side4 = (a, b, c) => {\n    if(right_angle_triangle(a, b, c)) {\n        return 0;\n    }\n    return Math.min(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)), Math.sqrt(Math.pow(a + b, 2) + Math.pow(b + c, 2) - Math.pow(a + b + c, 2)));\n};\n\nmodule.exports = {\n    right_angle_triangle,\n    missing_length,\n    missing_length_side,\n    missing_length_side2,\n    missing_length_side3,\n    missing_length_side4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const uniq_set = new Set()\n  const max_unique_char = 0\n  for (const word of words) {\n    const word_chars = new Set(word.split(''))\n    if (word_chars.size > max_unique_char) {\n      max_unique_char = word_chars.size\n      uniq_set = new Set(word_chars)\n    } else if (word_chars.size === max_unique_char) {\n      if (word_chars.size < uniq_set.size) {\n        uniq_set = new Set(word_chars)\n      }\n    }\n  }\n  return uniq_set.values().next().value\n}\n\n//find_max([\"name\", \"of\", \"string\"]) === \"string\"\nconsole.log(find_max([\n  \"name\",\n  \"of\",\n  \"string\"\n]))\nconsole.log(find_max([\n  \"name\",\n  \"enam\",\n  \"game\"\n]))\nconsole.log(find_max([\n  \"aaaaaaa\",\n  \"bb\",\"cc\"\n]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const left = remaining - number\n  const eaten = Math.min(left, need)\n  return [eaten, remaining - eaten]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 = (number, need, remaining) => {\n  const left = remaining - number\n  const eaten = Math.min(left, need)\n  return [eaten, remaining - eaten]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 = (number, need, remaining) => {\n  const left = remaining - number\n  const eaten = Math.min(left, need)\n  return [eaten, remaining - eaten]\n}\n\nconst start = () => {\n  const [number, need, remaining] = eat(5, 6, 10)\n  console.log(number, need, remaining)\n}\n\nconst start2 = () => {\n  const [number, need, remaining] = eat2(5, 6, 10)\n  console.log(number, need, remaining)\n}\n\nconst start3 = () => {\n  const [number, need, remaining] = eat3(5, 6, 10)\n  console.log(number, need, remaining)\n}\n\nstart()\nstart2()\nstart3()\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let operand = operands[i]\n\n    if (operators[i] === '+') {\n      result += operand\n    } else if (operators[i] === '-') {\n      result -= operand\n    } else if (operators[i] === '*') {\n      result *= operand\n    } else if (operators[i] === '/') {\n      result /= operand\n    } else if (operators[i] === '**') {\n      result **= operand\n    }\n  }\n  return result\n}\n\nconst do_algebra_iter = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let operand = operands[i]\n\n    if (operators[i] === '+') {\n      result += operand\n    } else if (operators[i] === '-') {\n      result -= operand\n    } else if (operators[i] === '*') {\n      result *= operand\n    } else if (operators[i] === '/') {\n      result /= operand\n    } else if (operators[i] === '**') {\n      result **= operand\n    }\n  }\n  return result\n}\n\nconst do_algebra_iter_2 = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let operand = operands[i]\n\n    if (operators[i] === '+') {\n      result += operand\n    } else if (operators[i] === '-') {\n      result -= operand\n    } else if (operators[i] === '*') {\n      result *= operand\n    } else if (operators[i] === '/') {\n      result /= operand\n    } else if (operators[i] === '**') {\n      result **= operand\n    }\n  }\n  return result\n}\n\nconst do_algebra_iter_3 = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let operand = operands[i]\n\n    if (operators[i] === '+') {\n      result += operand\n    } else if (operators[i] === '-') {\n      result -= operand\n    } else if (operators[i] === '*') {\n      result *= operand\n    } else if (operators[i] === '/') {\n      result /= operand\n    } else if (operators[i] === '**') {\n      result **= operand\n    }\n  }\n  return result\n}\n\nconst do_algebra_iter_4 = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let operand = operands[i]\n\n    if (operators[i] === '+') {\n      result += operand\n    } else if (operators[i] === '-') {\n      result -= operand\n    } else if (operators[i] === '*') {\n      result *= operand\n    } else if (operators[i] === '/') {\n      result /= operand\n    } else if (operators[i] === '**') {\n      result **= operand\n    }\n  }\n  return result\n}\n\nconst do_algebra_iter_5 = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let operand = operands[i]\n\n    if (operators[i] === '+') {\n      result += operand\n    } else if (operators[i] === '-') {\n      result -= operand\n    } else if (operators[i] === '*') {\n      result *= operand\n    } else if (operators[i] === '/') {\n      result /= operand\n    } else if (operators[i] === '**') {\n      result **= operand\n    }\n  }\n  return result\n}\n\nconst do_algebra_iter_6 = (operator, operand) => {\n  const operators = [...operator,...operand]\n  const operands = [...operators,...operand]\n  const result = operators[0]\n\n  for (let i = 1; i < operators.length; i++) {\n    let oper"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    const s = s.split('');\n    let r = [], result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/)) {\n            if (s[i].match(/[A-Z]/)) {\n                r[i] = s[i].toUpperCase();\n            } else {\n                r[i] = s[i].toLowerCase();\n            }\n        } else {\n            r[i] = s[i];\n        }\n    }\n    for (let i = 0; i < r.length; i++) {\n        result += r[i];\n    }\n    return result;\n}\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const buffer = new Buffer(text, 'utf8')\n  const hash = crypto.createHash('md5')\n  return hash.update(buffer).digest('hex')\n}\n\nconst is_md5 = (text) => {\n  if (text.length === 0) {\n    return false\n  }\n\n  const hash = crypto.createHash('md5')\n  return hash.update(text, 'utf8').digest('hex') === text\n}\n\nmodule.exports = {\n  md5_hash,\n  string_to_md5,\n  is_md5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v2 = (a, b) => {\n  const evens = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      evens.push(i);\n    }\n  }\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v3 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v4 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => b - a);\n};\n\nconst generate_integers_v5 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.reverse().sort((a, b) => b - a);\n};\n\nconst generate_integers_v6 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.reverse().sort((a, b) => a - b);\n};\n\nconst generate_integers_v7 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.reverse().sort((a, b) => b - a);\n};\n\nconst generate_integers_v8 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v9 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => b - a);\n};\n\nconst generate_integers_v10 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v11 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => b - a);\n};\n\nconst generate_integers_v12 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => b - a);\n};\n\nconst generate_integers_v13 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v14 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => b - a);\n};\n\nconst generate_integers_v15 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\nconst generate_integers_v16 = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(x => x % 2 === 0);\n  return evens.sort((a, b) => b - a);\n};\n\nconst generate_integers_v17 = (a, b) => {\n  const"}
