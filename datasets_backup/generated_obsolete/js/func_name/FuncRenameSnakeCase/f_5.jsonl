{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const [a, b] = numbers\n  const epsilon = 1e-6\n  return Math.abs(a - b) < epsilon\n}\n\n// Check if all numbers in a list are distinct.\nconst all_distinct = (numbers) => {\n  if (numbers.length === 0) {\n    return false\n  }\n\n  let seen = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i])!== -1) {\n      return false\n    }\n\n    seen.push(numbers[i])\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are strictly increasing.\nconst all_strictly_increasing = (numbers) => {\n  if (numbers.length === 0) {\n    return false\n  }\n\n  const last = numbers[numbers.length - 1]\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < last) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are strictly decreasing.\nconst all_strictly_decreasing = (numbers) => {\n  if (numbers.length === 0) {\n    return false\n  }\n\n  const first = numbers[0]\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > first) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if a number is in a list.\nconst in_list = (num, list) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === num) {\n      return true\n    }\n  }\n  return false\n}\n\n// Check if all numbers in a list are unique.\nconst all_unique = (numbers) => {\n  const unique = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (in_list(numbers[i], unique)) {\n      return false\n    }\n    unique.push(numbers[i])\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are not NaN.\nconst all_not_nan = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (isNaN(numbers[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are not infinity.\nconst all_not_infinity = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (isInfinity(numbers[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are between two given values.\nconst all_between = (numbers, min, max) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min || numbers[i] > max) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are non-zero.\nconst all_not_zero = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are positive.\nconst all_positive = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are negative.\nconst all_negative = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are negative or zero.\nconst all_negative_or_zero = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are positive or zero.\nconst all_positive_or_zero = (numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are within a given threshold.\nconst all_within_threshold = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i]) > threshold) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Check if all numbers in a list are within a given range.\nconst all_within_range = (numbers, min, max) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min || numbers[i] > max) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = {\n  all_distinct,\n  all_strictly_increasing,\n  all_strictly_decreasing,\n  all_unique,\n  all_not_nan,\n  all_not_infinity,\n  all_between,\n  all_not_zero,\n  all_positive,\n  all_negative,\n  all_negative_or_zero,\n  all"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const stack = []\n  const group = []\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(char)\n      group.push(char)\n    }\n    if (char === ')') {\n      stack.pop()\n      group.pop()\n    }\n  })\n  const groups = stack.map(group => group)\n  return groups.filter(g => g.length > 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n    const int_part = Math.floor(number);\n    const decimals = number - int_part;\n    return decimals > 0? decimals : 0;\n};\n\n/* Given a positive integer, it can be decomposed into and integer part\n  (largest integer smaller than given number) and decimals (leftover part\n  always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_integer(5)\n  0\n  >>> truncate_integer(3)\n  0\n  >>> truncate_integer(1)\n  0\n  >>> truncate_integer(10)\n  0\n  >>> truncate_integer(2)\n  1\n  >>> truncate_integer(4)\n  1\n  >>> truncate_integer(8)\n  1\n  >>> truncate_integer(15)\n  1\n  >>> truncate_integer(16)\n  2\n  >>> truncate_integer(17)\n  2\n  >>> truncate_integer(100)\n  2\n  >>> truncate_integer(99)\n  2\n  >>> truncate_integer(1)\n  0\n  >>> truncate_integer(0)\n  0\n  >>> truncate_integer(0.5)\n  0\n  >>> truncate_integer(-0.5)\n  0\n  >>> truncate_integer(-0.5)\n  0\n  >>> truncate_integer(-1.5)\n  0\n  >>> truncate_integer(-1.5)\n  0\n  >>> truncate_integer(-2.5)\n  0\n  >>> truncate_integer(-2.5)\n  0\n  >>> truncate_integer(-3.5)\n  0\n  >>> truncate_integer(-3.5)\n  0\n  >>> truncate_integer(-4.5)\n  0\n  >>> truncate_integer(-4.5)\n  0\n  >>> truncate_integer(-5.5)\n  0\n  >>> truncate_integer(-5.5)\n  0\n  >>> truncate_integer(-6.5)\n  0\n  >>> truncate_integer(-6.5)\n  0\n  >>> truncate_integer(-7.5)\n  0\n  >>> truncate_integer(-7.5)\n  0\n  >>> truncate_integer(-8.5)\n  0\n  >>> truncate_integer(-8.5)\n  0\n  >>> truncate_integer(-9.5)\n  0\n  >>> truncate_integer(-9.5)\n  0\n  >>> truncate_integer(-10.5)\n  0\n  >>> truncate_integer(-10.5)\n  0\n  >>> truncate_integer(-11.5)\n  0\n  >>> truncate_integer(-11.5)\n  0\n  >>> truncate_integer(-12.5)\n  0\n  >>> truncate_integer(-12.5)\n  0\n  >>> truncate_integer(-13.5)\n  0\n  >>> truncate_integer(-13.5)\n  0\n  >>> truncate_integer(-14.5)\n  0\n  >>> truncate_integer(-14.5)\n  0\n  >>> truncate_integer(-15.5)\n  0\n  >>> truncate_integer(-15.5)\n  0\n  >>> truncate_integer(-16.5)\n  0\n  >>> truncate_integer(-16.5)\n  0\n  >>> truncate_integer(-17.5)\n  0\n  >>> truncate_integer(-17.5)\n  0\n  >>> truncate_integer(-18.5)\n  0\n  >>> truncate_integer(-18.5)\n  0\n  >>> truncate_integer(-19.5)\n  0\n  >>> truncate_integer(-19.5)\n  0\n  >>> truncate_integer(-20.5)\n  0\n  >>> truncate_integer(-20.5)\n  0\n  >>> truncate_integer(-21.5)\n  0\n  >>> truncate_integer(-21.5)\n  0\n  >>> truncate_integer(-22.5)\n  0\n  >>> truncate_integer(-22.5)\n  0\n  >>> truncate_integer(-23.5)\n  0\n  >>> truncate_integer(-23.5)\n  0\n  >>> truncate_integer(-24.5)\n  0\n  >>> truncate_integer(-24.5)\n  0\n  >>> truncate_integer(-25.5)\n  0\n  >>> truncate_integer(-25.5)\n  0\n  >>> truncate_integer(-26.5)\n  0\n  >>> truncate_integer(-26.5)\n  0\n  >>> truncate_integer(-27.5)\n  0\n  >>> truncate_integer(-27.5)\n  0\n  >>> truncate_integer(-28.5)\n  0\n  >>> truncate_integer(-28.5)\n  0\n  >>> truncate_integer(-29.5)\n  0\n  >>> truncate_integer(-29.5)\n  0\n  >>> truncate_integer(-30.5)\n  0\n  >>> truncate_integer(-30.5)\n  0\n  >>> truncate_integer(-31.5)\n  0\n  >>> truncate_integer(-31.5)\n  0\n  >>> truncate_integer(-32.5)\n  0\n  >>> truncate_integer(-32.5)\n  0\n  >>> truncate_integer(-33.5)\n  0\n  >>> truncate_integer(-33.5)\n  0\n  >>> truncate_integer(-34.5)\n  0\n  >>> truncate_integer(-34.5)\n  0\n  >>> truncate_integer(-35.5)\n  0\n  >>> truncate_integer(-35.5)\n  0\n  >>> truncate_integer(-36.5)\n  0\n  >>> truncate_integer(-36.5)\n  0\n  >>> truncate_integer(-37.5)\n  0\n  >>> truncate_integer(-37.5)\n  0\n  >>> truncate_integer(-38.5)\n  0\n  >>> truncate"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const map = new Map();\n  const total = 0;\n  const balance = 0;\n\n  operations.forEach((operation) => {\n    if (map.has(operation.amount)) {\n      map.set(operation.amount, map.get(operation.amount) + operation.amount);\n    } else {\n      map.set(operation.amount, 1);\n    }\n\n    if (operation.amount > 0) {\n      total += operation.amount;\n    }\n\n    if (balance < 0) {\n      return true;\n    }\n\n    balance += operation.amount;\n  });\n\n  return balance < total;\n};\n\nexport default below_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce(\n    (a, b) => (a + b) / numbers.length,\n    0\n  )\n\n  return (a) => a - mean\n}\n\n/* For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the average squared differences\n  between each element and the mean:\n  SD = sqrt(average squared differences)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce(\n    (a, b) => (a + b) / numbers.length,\n    0\n  )\n  const variance = (numbers) => numbers.reduce(\n    (a, b) => (a * b - mean * mean) / (numbers.length - 1),\n    0\n  )\n\n  return (a) => Math.sqrt(variance(a))\n}\n\n/* For a given list of input numbers, calculate Variance\n  around the mean of this dataset.\n  Variance is the average of squared differences between each element\n  and the mean:\n  VAR = average squared differences\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce(\n    (a, b) => (a + b) / numbers.length,\n    0\n  )\n  const squared_differences = numbers.reduce(\n    (a, b) => (a * b - mean * mean),\n    0\n  )\n  return (a) => a / (numbers.length - 1)\n}\n\n/* For a given list of input numbers, calculate Population Variance\n  around the mean of this dataset.\n  Population Variance is the average of squared differences between each\n  element and the mean, squared:\n  POP = average squared differences, squared\n  >>> population_variance([1.0, 2.0, 3.0, 4.0])\n  5.0\n  */\nconst population_variance = (numbers) => {\n  const mean = numbers.reduce(\n    (a, b) => (a + b) / numbers.length,\n    0\n  )\n  const squared_differences = numbers.reduce(\n    (a, b) => (a * b - mean * mean),\n    0\n  )\n  return (a) => a / (numbers.length - 1)\n}\n\n/* For a given list of input numbers, calculate the Median\n  around the mean of this dataset.\n  Median is the average of the middle two elements in a list.\n  For example, if the list of numbers was [1, 2, 3, 4], then the\n  median would be 2.5 (2 + 3 / 2)\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst median = (numbers) => {\n  const sorted_numbers = numbers.sort()\n  return sorted_numbers[Math.floor(numbers.length / 2)]\n}\n\n/* For a given list of input numbers, calculate the Mode\n  around the mean of this dataset.\n  Mode is the most frequent element in the list.\n  For example, if the list of numbers was [1, 2, 2, 3, 3, 3], then the\n  mode would be 2.\n  >>> mode([1.0, 2.0, 2.0, 3.0, 3.0, 3.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const unique_elements = {\n    [numbers[0]]: 1,\n    [numbers[1]]: 1,\n    [numbers[2]]: 1,\n   ...numbers.reduce((acc, n, i) => {\n      if (acc[n] === 1) {\n        acc[n] = 2\n      } else {\n        acc[n]++\n      }\n      return acc\n    }, {})\n  }\n\n  return (a) => unique_elements[a]\n}\n\nexport default {\n  mean_absolute_deviation,\n  standard_deviation,\n  variance,\n  population_variance,\n  median,\n  mode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  let index = 0;\n  const result = [];\n\n  while (index < len) {\n    result.push(numbers[index]);\n    index++;\n    if (index < len) {\n      result.push(delimeter);\n    }\n  }\n\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const stack = [];\n  let depth = 0;\n  const index = 0;\n  const length = paren_string.length;\n\n  while (index < length) {\n    const char = paren_string[index];\n    if (char === '(') {\n      depth++;\n    } else if (char === ')') {\n      depth--;\n      if (depth < 0) {\n        return [index + 1];\n      }\n    }\n\n    stack.push(depth);\n    index++;\n  }\n\n  return [];\n};\n\n// This function is used to convert a string to a list of all the parenthesis\n// that are contained within the string.\nconst parse_all_nested_parens = (paren_string) => {\n  const stack = [];\n  let depth = 0;\n  const index = 0;\n  const length = paren_string.length;\n\n  while (index < length) {\n    const char = paren_string[index];\n    if (char === '(') {\n      depth++;\n    } else if (char === ')') {\n      depth--;\n      if (depth < 0) {\n        return stack;\n      }\n    }\n\n    stack.push(depth);\n    index++;\n  }\n\n  return [];\n};\n\nconst paren_tree = {\n  '()': [0, 1, 0, 0, 0],\n  '(()())': [1, 2, 1, 2, 2],\n  '((())())': [1, 2, 2, 2, 3],\n  '((()()))': [1, 2, 3, 3, 3],\n  '(((()())))': [1, 2, 3, 3, 4],\n  '(((())))': [1, 2, 3, 3, 3],\n  '((()()()))': [1, 2, 3, 3, 4],\n  '(((())))': [1, 2, 3, 3, 3],\n  '(((()())()))': [1, 2, 3, 3, 4],\n  '(((())))': [1, 2, 3, 3, 3],\n  '((()())())': [1, 2, 3, 3, 4],\n  '((())())': [1, 2, 3, 3, 3],\n  '((()()()))': [1, 2, 3, 3, 4],\n  '((())))': [1, 2, 3, 3, 3],\n  '((())())': [1, 2, 3, 3, 3],\n  '((())())': [1, 2, 3, 3, 3],\n  '((()())())': [1, 2, 3, 3, 4],\n  '(((())())())': [1, 2, 3, 3, 4],\n  '(((()))())': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3, 4],\n  '(((())))():': [1, 2, 3, 3, 3],\n  '(((()())())())': [1, 2, 3, 3,"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const new_list = []\n  strings.forEach(string => {\n    if (string.includes(substring)) {\n      new_list.push(string)\n    }\n  })\n  return new_list\n}\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'asd')\n  []\n  >>> filter_by_substring([], 'asd')\n  []\n  */\nconst filter_by_substring_1 = (strings, substring) => {\n  const new_list = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      new_list.push(strings[i])\n    }\n  }\n  return new_list\n}\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'asd')\n  []\n  >>> filter_by_substring([], 'asd')\n  []\n  */\nconst filter_by_substring_2 = (strings, substring) => {\n  const new_list = []\n  let index = strings.indexOf(substring)\n  while (index!== -1) {\n    new_list.push(strings[index])\n    index = strings.indexOf(substring, index + 1)\n  }\n  return new_list\n}\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'asd')\n  []\n  >>> filter_by_substring([], 'asd')\n  []\n  */\nconst filter_by_substring_3 = (strings, substring) => {\n  let index = strings.indexOf(substring)\n  while (index!== -1) {\n    strings = strings.slice(index)\n    index = strings.indexOf(substring)\n  }\n  return strings\n}\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'asd')\n  []\n  >>> filter_by_substring([], 'asd')\n  []\n  */\nconst filter_by_substring_4 = (strings, substring) => {\n  const new_list = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      new_list.push(strings[i])\n    }\n  }\n  return new_list\n}\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'asd')\n  []\n  >>> filter_by_substring([], 'asd')\n  []\n  */\nconst filter_by_substring_5 = (strings, substring) => {\n  const new_list = []\n  let index = strings.indexOf(substring)\n  while (index!== -1) {\n    new_list.push(strings[index])\n    index = strings.indexOf(substring, index + 1)\n  }\n  return new_list\n}\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filter_by_substring([], 'asd')\n  []\n  >>> filter_by_substring([], 'asd')\n  []\n  */\nconst filter_by_substring_6 = (strings, substring) => {\n  const new_list = []\n  let index = strings.indexOf(substring)\n  while (index!== -1) {\n    strings = strings.slice(index)\n    index = strings.indexOf(substring)\n  }\n  return strings\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1]\n  }\n  const [n, p] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    n += numbers[i]\n    p *= numbers[i]\n  }\n  return [n, p]\n}\n\n/*\n  Given a number, return a string representation of that number in the\n  form of a binary number in base ten.\n  >>> to_binary(1)\n  '1'\n  >>> to_binary(3)\n  '11'\n  >>> to_binary(6)\n  '1011'\n  >>> to_binary(101)\n  '1011011'\n  */\nconst to_binary = n => {\n  if (n === 0) {\n    return '0'\n  }\n  let binary = []\n  while (n > 0) {\n    binary.unshift(n % 2)\n    n = Math.floor(n / 2)\n  }\n  return binary.join('')\n}\n\n/*\n  Given a list of two numbers, return the smallest pair of numbers\n  that are equal.\n  >>> find_equal_numbers([1, 2, 3, 4, 5, 6, 7])\n  [1, 3]\n  >>> find_equal_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 5]\n  >>> find_equal_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 6]\n  */\nconst find_equal_numbers = (numbers) => {\n  const [n1, n2] = numbers\n  let i = 0\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      return [numbers[i], numbers[i + 1]]\n    }\n    i += 2\n  }\n  return [n1, n2]\n}\n\n/*\n  Given two numbers, return the sum of those two numbers.\n  >>> sum_two([1, 2, 3, 4])\n  9\n  >>> sum_two([-1, -2, -3, -4])\n  -9\n  >>> sum_two([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  */\nconst sum_two = (numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the smallest number\n  in the list.\n  >>> smallest_number([1, 2, 3, 4])\n  1\n  >>> smallest_number([1, 2, 3, 4, 5])\n  1\n  >>> smallest_number([-1, -2, -3, -4])\n  -1\n  >>> smallest_number([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  */\nconst smallest_number = (numbers) => {\n  let smallest = numbers[0]\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i]\n    }\n  }\n  return smallest\n}\n\n/*\n  Given a list of numbers, return the largest number\n  in the list.\n  >>> largest_number([1, 2, 3, 4])\n  4\n  >>> largest_number([1, 2, 3, 4, 5])\n  5\n  >>> largest_number([-1, -2, -3, -4])\n  -4\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst largest_number = (numbers) => {\n  let largest = numbers[0]\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of numbers, return the maximum number\n  in the list.\n  >>> maximum_number([1, 2, 3, 4])\n  4\n  >>> maximum_number([1, 2, 3, 4, 5])\n  5\n  >>> maximum_number([-1, -2, -3, -4])\n  -4\n  >>> maximum_number([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst maximum_number = (numbers) => {\n  let largest = numbers[0]\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of all the numbers in the list.\n  >>> sum_of_squares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  329\n  >>> sum_of_squares([-1, -2, -3, -4])\n  1\n  >>> sum_of_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1329\n  */\nconst sum_of_squares = (numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i], 2)\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of all the numbers in the list.\n  >>> sum_of_squares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  329\n  >>> sum_of_squares([-1, -2, -"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max = numbers.reduce((acc, number, i) => {\n    return (acc > number)? acc : number\n  }, numbers[0]);\n  let result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(numbers[i - 1] > numbers[i]? numbers[i] : max);\n  }\n  return result;\n};\n\nmodule.exports = rolling_max;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  let postfix = '';\n  for (let i = 0; i < prefix.length; i++) {\n    const suffix = prefix.substr(i, prefix.length - i);\n    if (is_palindrome(suffix)) {\n      postfix += suffix;\n    }\n  }\n  return postfix;\n}\n\n/* Test if two strings are anagrams. */\nconst isAnagram = (str1, str2) => {\n  let str1_set = {};\n  let str2_set = {};\n\n  for (let i = 0; i < str1.length; i++) {\n    str1_set[str1[i]] = true;\n  }\n\n  for (let i = 0; i < str2.length; i++) {\n    str2_set[str2[i]] = true;\n  }\n\n  return str1_set.keys().length === str2_set.keys().length &&\n    str1_set.keys().every(item => str1_set.hasOwnProperty(item)) &&\n    str2_set.keys().every(item => str2_set.hasOwnProperty(item));\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome,\n  isAnagram,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  // if length of a and b are not equal,\n  // the string will be in the form a0b1...an b0n...bn\n  // where n is the length of the longer string\n  if (a.length!== b.length) {\n    let length = a.length > b.length? b.length : a.length\n    return a.slice(0, length) + b.slice(length)\n  }\n\n  // if they are equal, then their concatenation will be the same\n  // as the XOR of their characters\n  return a.concat(b).reduce((carry, char) => char ^ carry, '')\n}\n\n// console.log(string_xor('010', '110'))\n// -> '100'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '010'\n  */\nconst string_and = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  // if length of a and b are not equal,\n  // the string will be in the form a0b1...an b0n...bn\n  // where n is the length of the longer string\n  if (a.length!== b.length) {\n    let length = a.length > b.length? b.length : a.length\n    return a.slice(0, length) + b.slice(length)\n  }\n\n  // if they are equal, then their concatenation will be the same\n  // as the XOR of their characters\n  return a.concat(b).reduce((carry, char) => char & carry, '')\n}\n\n// console.log(string_and('010', '110'))\n// -> '010'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '110'\n  */\nconst string_or = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  // if length of a and b are not equal,\n  // the string will be in the form a0b1...an b0n...bn\n  // where n is the length of the longer string\n  if (a.length!== b.length) {\n    let length = a.length > b.length? b.length : a.length\n    return a.slice(0, length) + b.slice(length)\n  }\n\n  // if they are equal, then their concatenation will be the same\n  // as the XOR of their characters\n  return a.concat(b).reduce((carry, char) => char | carry, '')\n}\n\n// console.log(string_or('010', '110'))\n// -> '110'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '101'\n  */\nconst string_not = (a) => {\n  // a and b are strings\n  if (a === '') {\n    return ''\n  }\n\n  return a.concat('').reduce((carry, char) => ~carry | char, 0)\n}\n\n// console.log(string_not('010'))\n// -> '101'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform a string shift on these inputs and return result also as a string.\n  >>> string_shift('010', '1')\n  '001'\n  */\nconst string_shift = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  let length = a.length\n  return a.concat(b.slice(1))\n}\n\n// console.log(string_shift('010', '1'))\n// -> '001'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform a string shift on these inputs and return result also as a string.\n  >>> string_shift('010', '1')\n  '011'\n  */\nconst string_unshift = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  let length = a.length\n  return b.concat(a.slice(1))\n}\n\n// console.log(string_unshift('010', '1'))\n// -> '011'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform a string shift on these inputs and return result also as a string.\n  >>> string_unshift('010', '1')\n  '101'\n  */\nconst string_reverse = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  return b.concat(a.slice(1)).reverse().join('')\n}\n\n// console.log(string_reverse('010', '1'))\n// -> '101'\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform a string shift on these inputs and return result also as a string.\n  >>> string_reverse('010', '1')\n  '011'\n  */\nconst string_rotate = (a, b) => {\n  // a and b are strings\n  if (a === '' || b === '') {\n    return ''\n  }\n\n  return b.concat(a.slice(1)).reverse().join('')\n}\n\n// console.log"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  return strings[0];\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  while (a!== 1) {\n    if (b!== 1) {\n      a = a % b;\n    } else {\n      return a;\n    }\n  }\n  return b;\n};\n\n/*\n  Given a matrix A, return the number of rows that are guaranteed to have a\n  single non-zero value in every row.\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9]]))\n  3\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6]]))\n  2\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9]]))\n  1\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\n  0\n  */\nconst diagonal_matrix = (matrix) => {\n  let matrix_length = matrix.length;\n  let row = matrix_length - 1;\n  let number_of_diagonal_zeroes = 0;\n\n  while (row >= 0) {\n    number_of_diagonal_zeroes += matrix[row][row];\n    row--;\n  }\n\n  return number_of_diagonal_zeroes;\n};\n\n/*\n  Given a matrix A, return a matrix B that is obtained by adding a diagonal to\n  A.  In other words, B[i][i] = A[i][i] + 1 for all i.\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9]]))\n  new Matrix([[1,2,3], [4,5,6], [7,8,9]])\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9]]))\n  new Matrix([[1,2,3], [4,5,6], [7,8,9], [1,2,3]])\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\n  new Matrix([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [1,2,3]])\n  */\nconst add_diagonal = (matrix) => {\n  let matrix_length = matrix.length;\n  let row = matrix_length - 1;\n  let number_of_diagonal_zeroes = 0;\n  let adder = 1;\n\n  while (row >= 0) {\n    number_of_diagonal_zeroes += matrix[row][row];\n    adder++;\n    row--;\n  }\n\n  matrix.push([adder]);\n\n  return matrix;\n};\n\n/*\n  Given a matrix A, return a matrix B that is obtained by adding a diagonal to\n  A.  In other words, B[i][i] = A[i][i] + 1 for all i.\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9]]))\n  new Matrix([[1,2,3], [4,5,6], [7,8,9]])\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9]]))\n  new Matrix([[1,2,3], [4,5,6], [7,8,9], [1,2,3]])\n  >>> diagonal_matrix(new Matrix([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\n  new Matrix([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [1,2,3]])\n  */\nconst add_diagonal_matrix = (matrix) => {\n  let matrix_length = matrix.length;\n  let row = matrix_length - 1;\n  let number_of_diagonal_zeroes = 0;\n  let adder = 1;\n\n  while (row >= 0) {\n    number_of_diagonal_zeroes += matrix[row][row];\n    adder++;\n    row--;\n  }\n\n  matrix.push([adder]);\n  matrix.push([adder]);\n\n  return matrix;\n};\n\nexport { greatest_common_divisor, diagonal_matrix, add_diagonal, add_diagonal_matrix };\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let length = string.length\n  while (length > 0) {\n    prefix = string.slice(0, length)\n    prefixes.push(prefix)\n    length--\n  }\n  return prefixes\n}\n\n/* Return all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['', 'b', 'c', 'cba', 'cbab', 'cbaabc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  let suffixes = []\n  let suffix = ''\n  let length = string.length\n  while (length > 0) {\n    suffix = string.slice(length - 1, length)\n    suffixes.push(suffix)\n    length--\n  }\n  return suffixes\n}\n\n/* Return longest common prefix of all prefixes of the input string\n  >>> longest_common_prefix('abc', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abd')\n  'ab'\n  >>> longest_common_prefix('abc', 'ab')\n  ''\n  >>> longest_common_prefix('abc', 'abce')\n  ''\n  */\nconst longest_common_prefix = (string1, string2) => {\n  if (string1.length === 0) return string2\n  if (string2.length === 0) return string1\n  let i = 0\n  let j = 0\n  let common = ''\n  while (i < string1.length && j < string2.length) {\n    if (string1[i]!== string2[j]) break\n    common += string1[i]\n    i++\n    j++\n  }\n  return common\n}\n\n/* Return longest common suffix of all suffixes of the input string\n  >>> longest_common_suffix('abc', 'abc')\n  'abc'\n  >>> longest_common_suffix('abc', 'abd')\n  'abd'\n  >>> longest_common_suffix('abc', 'ab')\n  'ab'\n  >>> longest_common_suffix('abc', 'abce')\n  ''\n  */\nconst longest_common_suffix = (string1, string2) => {\n  if (string1.length === 0) return string2\n  if (string2.length === 0) return string1\n  let i = 0\n  let j = 0\n  let common = ''\n  while (i < string1.length && j < string2.length) {\n    if (string1[i]!== string2[j]) break\n    i++\n    j++\n  }\n  return string1.slice(i - string1.length, i)\n}\n\n/* Return shortest common prefix of all prefixes of the input string\n  >>> shortest_common_prefix('abc', 'abc')\n  'abc'\n  >>> shortest_common_prefix('abc', 'abd')\n  'ab'\n  >>> shortest_common_prefix('abc', 'ab')\n  ''\n  >>> shortest_common_prefix('abc', 'abce')\n  ''\n  */\nconst shortest_common_prefix = (string1, string2) => {\n  if (string1.length === 0) return string2\n  if (string2.length === 0) return string1\n  let i = 0\n  let j = 0\n  let common = ''\n  while (i < string1.length && j < string2.length) {\n    if (string1[i]!== string2[j]) break\n    common = string1[i]\n    i++\n    j++\n  }\n  return common\n}\n\n/* Return shortest common suffix of all suffixes of the input string\n  >>> shortest_common_suffix('abc', 'abc')\n  'abc'\n  >>> shortest_common_suffix('abc', 'abd')\n  'abd'\n  >>> shortest_common_suffix('abc', 'ab')\n  'ab'\n  >>> shortest_common_suffix('abc', 'abce')\n  ''\n  */\nconst shortest_common_suffix = (string1, string2) => {\n  if (string1.length === 0) return string2\n  if (string2.length === 0) return string1\n  let i = 0\n  let j = 0\n  let common = ''\n  while (i < string1.length && j < string2.length) {\n    if (string1[i]!== string2[j]) break\n    i++\n    j++\n  }\n  return string1.slice(i - string1.length, i)\n}\n\n/* Return all permutations of the input string\n  >>> all_permutations('abc')\n  [['abc'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  >>> all_permutations('abc')\n  [['abc'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst all_permutations = (string) => {\n  let permutations = []\n  for (let i = 0; i < string.length; i++) {\n    let prefix = string.slice(0, i)\n    let suffix = string.slice(i + 1)\n    let permutation = [prefix, suffix]\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return all permutations of the input string with duplicates\n  >>> all_permutations_with_duplicates('abc')\n  [['abc'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'a', 'c'], ['c', 'a', 'b'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  >>> all_permutations_with_du"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a')\n  'a'\n  >>> string_sequence(5, 'a')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_a = (n, a = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b')\n  'ab'\n  >>> string_sequence(5, 'a', 'b')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_b = (n, a = '', b = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b', 'c')\n  'abc'\n  >>> string_sequence(5, 'a', 'b', 'c')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_c = (n, a = '', b = '', c = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b}${c} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b', 'c', 'd')\n  'abcd'\n  >>> string_sequence(5, 'a', 'b', 'c', 'd')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_d = (n, a = '', b = '', c = '', d = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b}${c}${d} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b', 'c', 'd', 'e')\n  'abcde'\n  >>> string_sequence(5, 'a', 'b', 'c', 'd', 'e')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_e = (n, a = '', b = '', c = '', d = '', e = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b}${c}${d}${e} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b', 'c', 'd', 'e', 'f')\n  'abcdef'\n  >>> string_sequence(5, 'a', 'b', 'c', 'd', 'e', 'f')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_f = (n, a = '', b = '', c = '', d = '', e = '', f = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b}${c}${d}${e}${f} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'abcdefg'\n  >>> string_sequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_g = (n, a = '', b = '', c = '', d = '', e = '', f = '', g = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b}${c}${d}${e}${f}${g} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'abcdefgh'\n  >>> string_sequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_h = (n, a = '', b = '', c = '', d = '', e = '', f = '', g = '', h = '') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${a}${b}${c}${d}${e}${f}${g}${h} `;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const counts = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    if (counts[char] === undefined) {\n      counts[char] = 1;\n    } else {\n      counts[char]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n// https://www.hackerrank.com/challenges/count-distinct-characters/problem\n/*\nGiven a string, return the number of unique characters in this string.\n\nA character is unique if it appears exactly once in the string.\n\nThe string may contain duplicate characters.\n\nExamples:\n\nInput: \"abcabcabc\"\nOutput: 6\nExplanation: There are three characters 'a', 'b' and 'c' in the string, and each character\nappears exactly once.\n\nInput: \"aaa\"\nOutput: 3\nExplanation: There are three characters 'a', 'a' and 'a' in the string, and each character\nappears exactly once.\n\nInput: \"a\"\nOutput: 1\nExplanation: There is one character 'a' in the string, and it appears exactly once.\n\nInput: \"a\"\nOutput: 1\nExplanation: There is one character 'a' in the string, and it appears exactly once.\n\nInput: \"aa\"\nOutput: 2\nExplanation: There are two characters 'a' and 'a' in the string, and each character\nappears exactly once.\n\nInput: \"abcd\"\nOutput: 4\nExplanation: There are four characters 'a', 'b', 'c' and 'd' in the string, and each character\nappears exactly once.\n\nInput: \"abcd\"\nOutput: 4\nExplanation: There are four characters 'a', 'b', 'c' and 'd' in the string, and each character\nappears exactly once.\n\nInput: \"abcdefg\"\nOutput: 7\nExplanation: There are six characters 'a', 'b', 'c', 'd', 'e' and 'f' in the string, and each\ncharacter appears exactly once.\n\nInput: \"aaa\"\nOutput: 3\nExplanation: There are three characters 'a', 'a' and 'a' in the string, and each character\nappears exactly once.\n\nInput: \"a\"\nOutput: 1\nExplanation: There is one character 'a' in the string, and it appears exactly once.\n\nInput: \"a\"\nOutput: 1\nExplanation: There is one character 'a' in the string, and it appears exactly once.\n\nInput: \"abcd\"\nOutput: 4\nExplanation: There are four characters 'a', 'b', 'c' and 'd' in the string, and each character\nappears exactly once.\n\nInput: \"aabcd\"\nOutput: 5\nExplanation: There are five characters 'a', 'b', 'c', 'd' and 'a' in the string, and each character\nappears exactly once.\n\nInput: \"aabccd\"\nOutput: 5\nExplanation: There are five characters 'a', 'b', 'c', 'c' and 'd' in the string, and each character\nappears exactly once.\n\nInput: \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\nOutput: 62\nExplanation: There are 62 characters 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m',\n'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z' and 'a' in the string, and each character\nappears exactly once.\n*/\nconst count_distinct_characters = (string) => {\n  let counts = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (counts[char] === undefined) {\n      counts[char] = 1;\n    } else {\n      counts[char]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n// https://www.hackerrank.com/challenges/count-distinct-characters/practice\n/*\n  Given a string, return the number of distinct characters in this string.\n\n  A character is distinct if it appears exactly once in the string.\n\n  Examples:\n\n  Input: \"abcabcabc\"\n  Output: 6\n  Explanation: There are three characters 'a', 'b' and 'c' in the string, and each character\n  appears exactly once.\n\n  Input: \"aaa\"\n  Output: 3\n  Explanation: There are three characters 'a', 'a' and 'a' in the string, and each character\n  appears exactly once.\n\n  Input: \"a\"\n  Output: 1\n  Explanation: There is one character 'a' in the string, and it appears exactly once.\n\n  Input: \"a\"\n  Output: 1\n  Explanation: There is one character 'a' in the string, and it appears exactly once.\n\n  Input: \"aa\"\n  Output: 2\n  Explanation: There are two characters 'a' and 'a' in the string, and each character appears\n  exactly once.\n\n  Input: \"abcd\"\n  Output: 4\n  Explanation: There are four characters 'a', 'b', 'c' and 'd' in the string, and each character\n  appears exactly once.\n\n  Input: \"abcd\"\n  Output: 4\n  Explanation: There are four characters 'a', 'b', 'c' and 'd' in the string, and each character\n  appears exactly once.\n\n  Input: \"aabcd\"\n  Output: 5\n  Explanation: There are five characters 'a', 'b', 'c', 'd' and 'a' in the string, and each character\n  appears exactly once.\n\n  Input: \"aabccd\"\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  let list = []\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      list.push(4)\n    } else if (music_string[i] === 'o|') {\n      list.push(2)\n    } else if (music_string[i] === '.') {\n      list.push(1)\n    } else if (music_string[i] === '|') {\n      list.push(1)\n    }\n  }\n  return list\n}\n\n/*\n  Input:\n    - a string representing a chord\n  Output:\n    - a list of integers representing which notes of the chord are in the chord\n  \n  Example 1:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 2:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 3:\n    >>> chord_to_list('G A B C')\n    [1, 2, 3, 4]\n  \n  Example 4:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 5:\n    >>> chord_to_list('G G# G# G#')\n    [1, 3, 4]\n  \n  Example 6:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 7:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 8:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 9:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 10:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 11:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 12:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 13:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 14:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 15:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 16:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 17:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 18:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 19:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 20:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 21:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 22:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 23:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 24:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 25:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 26:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 27:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 28:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 29:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 30:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 31:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 32:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 33:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 34:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 35:\n    >>> chord_to_list('C C# C# C')\n    [1, 2, 3, 4]\n  \n  Example 36:\n    >>> chord_to_list('C C# C"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const count = 0;\n  const pos = 0;\n  while (pos < string.length) {\n    const substr = string.substr(pos);\n    if (substr === substring) {\n      count += 1;\n    }\n    pos += 1;\n  }\n  return count;\n};\n\nmodule.exports = how_many_times;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n    const sorted_numbers = [];\n    const numbers_split = numbers.split(' ');\n    for (let i = 0; i < numbers_split.length; i++) {\n        const number = parseInt(numbers_split[i]);\n        sorted_numbers.push(number);\n    }\n    return sorted_numbers.join(' ');\n};\n\n/*\n  Question 2\n\n  Write a function that takes an integer n and return the number of\n  times you could add up to n.\n  E.g., for n = 3, the function should return 3.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_add_to_n = (n) => {\n    let times_to_add_to_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_add_to_n += 1;\n    }\n    return times_to_add_to_n;\n};\n\n/*\n  Question 3\n\n  Write a function that takes an integer n and returns the number of\n  times you could multiply together to get n.\n  E.g., for n = 3, the function should return 3.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_multiply_to_n = (n) => {\n    let times_to_multiply_to_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_multiply_to_n *= i;\n    }\n    return times_to_multiply_to_n;\n};\n\n/*\n  Question 4\n\n  Write a function that takes an integer n and returns the number of\n  times you could subtract to get n.\n  E.g., for n = 3, the function should return 2.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_subtract_to_n = (n) => {\n    let times_to_subtract_to_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_subtract_to_n -= 1;\n    }\n    return times_to_subtract_to_n;\n};\n\n/*\n  Question 5\n\n  Write a function that takes an integer n and returns the number of\n  times you could divide to get n.\n  E.g., for n = 3, the function should return 3.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_divide_to_n = (n) => {\n    let times_to_divide_to_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_divide_to_n /= i;\n    }\n    return times_to_divide_to_n;\n};\n\n/*\n  Question 6\n\n  Write a function that takes an integer n and returns the number of\n  times you could take the modulo of n.\n  E.g., for n = 3, the function should return 1.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_modulo_n = (n) => {\n    let times_to_modulo_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_modulo_n *= i;\n    }\n    return times_to_modulo_n;\n};\n\n/*\n  Question 7\n\n  Write a function that takes an integer n and returns the number of\n  times you could take the floor of n.\n  E.g., for n = 3, the function should return 3.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_floor_n = (n) => {\n    let times_to_floor_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_floor_n *= i;\n    }\n    return times_to_floor_n;\n};\n\n/*\n  Question 8\n\n  Write a function that takes an integer n and returns the number of\n  times you could take the ceiling of n.\n  E.g., for n = 3, the function should return 5.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_ceiling_n = (n) => {\n    let times_to_ceiling_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_ceiling_n *= i;\n    }\n    return times_to_ceiling_n;\n};\n\n/*\n  Question 9\n\n  Write a function that takes an integer n and returns the number of\n  times you could take the absolute value of n.\n  E.g., for n = 3, the function should return 3.\n  The function should not use a for loop or any other language feature that could be\n  slower than a for loop.\n  */\nconst number_of_times_to_absolute_n = (n) => {\n    let times_to_absolute_n = 1;\n    for (let i = 2; i <= n; i++) {\n        times_to_absolute_n *= i;\n    }\n    return times_to_absolute_n;\n};\n\n/*\n  Question 10\n\n  Write a function that takes an integer n and returns the number of\n  times you could take the square root of n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let i = 1, j = 0, smallest = numbers[0], closest = numbers[0], next = numbers[0];\n  while (i < numbers.length) {\n    if (Math.abs(smallest - numbers[i]) > Math.abs(next - numbers[i])) {\n      smallest = numbers[i];\n      closest = numbers[i];\n      j = i;\n    }\n    next = numbers[i];\n    i++;\n  }\n  return [smallest, closest];\n};\n\nexport default find_closest_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    const diff = num - acc;\n    if (diff < 0) {\n      acc = num;\n    }\n    return acc;\n  }, 0);\n};\n\n/**\n  * Given a list of numbers, return a list of numbers, with all the negative numbers\n  * removed, and the original positive numbers shifted down one index, to the first index.\n  *\n  * For example, if the list contains [1, 2, -3, 4, -5, 6]\n  * The output will be [-3, 4, -5, 6, 1, 2]\n  *\n  * @param {Array} numbers the array of numbers\n  * @returns {Array} an array with the original list, minus the negative numbers\n  */\nconst remove_negatives = (numbers) => {\n  const new_numbers = numbers.filter((num) => num > 0);\n  new_numbers.unshift(1);\n  return new_numbers;\n};\n\n/**\n  * Given a list of numbers, return a list of numbers, with all the negative numbers\n  * removed, and the original positive numbers shifted down one index, to the first index.\n  *\n  * For example, if the list contains [1, 2, -3, 4, -5, 6]\n  * The output will be [-3, 4, -5, 6, 1, 2]\n  *\n  * @param {Array} numbers the array of numbers\n  * @returns {Array} an array with the original list, minus the negative numbers\n  */\nconst remove_negatives_inverse = (numbers) => {\n  const new_numbers = numbers.filter((num) => num < 0);\n  new_numbers.unshift(1);\n  return new_numbers;\n};\n\nconst remove_negative_zeros = (numbers) => {\n  return numbers.filter((num) => num > 0);\n};\n\nconst remove_negative_zeros_inverse = (numbers) => {\n  return numbers.filter((num) => num < 0);\n};\n\nconst find_smallest = (numbers) => {\n  const min = Math.min(...numbers);\n  return numbers.filter((num) => num === min);\n};\n\nconst find_largest = (numbers) => {\n  const max = Math.max(...numbers);\n  return numbers.filter((num) => num === max);\n};\n\nconst find_smallest_inverse = (numbers) => {\n  const max = Math.max(...numbers);\n  return numbers.filter((num) => num === max);\n};\n\nconst find_largest_inverse = (numbers) => {\n  const min = Math.min(...numbers);\n  return numbers.filter((num) => num === min);\n};\n\nconst find_smallest_to_largest = (numbers) => {\n  const min = Math.min(...numbers);\n  return numbers.filter((num) => num === min);\n};\n\nconst find_largest_to_smallest = (numbers) => {\n  const max = Math.max(...numbers);\n  return numbers.filter((num) => num === max);\n};\n\nconst get_numbers = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_numbers_inverse = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_smallest_to_largest = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_largest_to_smallest = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_smallest_to_largest_inverse = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_largest_to_smallest_inverse = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_numbers_in_order = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_numbers_in_order_inverse = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_largest_to_smallest_in_order = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_smallest_to_largest_in_order = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_numbers_with_min_and_max = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_numbers_with_min_and_max_inverse = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_smallest_to_largest_in_order_with_min_and_max = (numbers) => {\n  const list = [];\n  numbers.forEach((num) => list.push(num));\n  return list;\n};\n\nconst get_largest_"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(item => typeof item === 'number' && item % 1 === 0);\n};\n\nexport { filter_integers };\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const l = string.length\n  const i = 0\n  while (i < l) {\n    if (string.charCodeAt(i++) === 0) {\n      break\n    }\n  }\n  return i\n}\n\n/* Return string of given length\n  >>> str('abc', 0)\n  ''\n  >>> str('abc', 1)\n  'a'\n  >>> str('abc', 2)\n  'ab'\n  >>> str('abc', 3)\n  'abc'\n  >>> str('abc', 4)\n  'abcd'\n  >>> str('abc', 5)\n  'abcde'\n  >>> str('abc', 6)\n  'abcdef'\n  >>> str('abc', 7)\n  'abcdefg'\n  >>> str('abc', 8)\n  'abcdefgh'\n  >>> str('abc', 9)\n  'abcdefghi'\n  >>> str('abc', 10)\n  'abcdefghij'\n  >>> str('abc', 11)\n  'abcdefghijk'\n  >>> str('abc', 12)\n  'abcdefghijkl'\n  >>> str('abc', 13)\n  'abcdefghijklm'\n  >>> str('abc', 14)\n  'abcdefghijklmn'\n  >>> str('abc', 15)\n  'abcdefghijklmno'\n  >>> str('abc', 16)\n  'abcdefghijklmnop'\n  >>> str('abc', 17)\n  'abcdefghijklmnopq'\n  >>> str('abc', 18)\n  'abcdefghijklmnopqr'\n  >>> str('abc', 19)\n  'abcdefghijklmnopqrst'\n  >>> str('abc', 20)\n  'abcdefghijklmnopqrstu'\n  >>> str('abc', 21)\n  'abcdefghijklmnopqrstuv'\n  >>> str('abc', 22)\n  'abcdefghijklmnopqrstuvw'\n  >>> str('abc', 23)\n  'abcdefghijklmnopqrstuvwx'\n  >>> str('abc', 24)\n  'abcdefghijklmnopqrstuvwxg'\n  >>> str('abc', 25)\n  'abcdefghijklmnopqrstuvwxgh'\n  >>> str('abc', 26)\n  'abcdefghijklmnopqrstuvwxghi'\n  >>> str('abc', 27)\n  'abcdefghijklmnopqrstuvwxghij'\n  >>> str('abc', 28)\n  'abcdefghijklmnopqrstuvwxghijk'\n  >>> str('abc', 29)\n  'abcdefghijklmnopqrstuvwxghijkl'\n  >>> str('abc', 30)\n  'abcdefghijklmnopqrstuvwxghijklm'\n  >>> str('abc', 31)\n  'abcdefghijklmnopqrstuvwxghijklmn'\n  >>> str('abc', 32)\n  'abcdefghijklmnopqrstuvwxghijklmno'\n  >>> str('abc', 33)\n  'abcdefghijklmnopqrstuvwxghijklmnop'\n  >>> str('abc', 34)\n  'abcdefghijklmnopqrstuvwxghijklmnopq'\n  >>> str('abc', 35)\n  'abcdefghijklmnopqrstuvwxghijklmnopqr'\n  >>> str('abc', 36)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrst'\n  >>> str('abc', 37)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstu'\n  >>> str('abc', 38)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuv'\n  >>> str('abc', 39)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvw'\n  >>> str('abc', 40)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwx'\n  >>> str('abc', 41)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxg'\n  >>> str('abc', 42)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxgh'\n  >>> str('abc', 43)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghi'\n  >>> str('abc', 44)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghij'\n  >>> str('abc', 45)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijk'\n  >>> str('abc', 46)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijkl'\n  >>> str('abc', 47)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijklm'\n  >>> str('abc', 48)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijklmn'\n  >>> str('abc', 49)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijklmnop'\n  >>> str('abc', 50)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijklmnopq'\n  >>> str('abc', 51)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijklmnopqr'\n  >>> str('abc', 52)\n  'abcdefghijklmnopqrstuvwxghijklmnopqrstuvwxghijklmnopqrst'\n  >>> str('abc', 53)\n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  const i = 0\n  const res = 0\n  while (n > 1) {\n    if (n % i === 0) {\n      res = i\n    }\n    i++\n  }\n  return res\n}\n\n/* For a given number n, find the largest number that divides n evenly,\n  smaller than n.\n  >>> largest_divisor_smaller(15)\n  7\n  */\nconst largest_divisor_smaller = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i < res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\n/* For a given number n, find the largest number that divides n evenly,\n  larger than n.\n  >>> largest_divisor_larger(15)\n  8\n  */\nconst largest_divisor_larger = (n) => {\n  const res = largest_divisor(n)\n  while (res > n) {\n    const i = largest_divisor(res - 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_one = (n) => {\n  const res = largest_divisor(n)\n  while (res <= n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_two = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_three = (n) => {\n  const res = largest_divisor(n)\n  while (res <= n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_four = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_five = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_six = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_seven = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_eight = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_nine = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_ten = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_eleven = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_twelve = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_thirteen = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}\n\nconst largest_divisor_from_fourteen = (n) => {\n  const res = largest_divisor(n)\n  while (res < n) {\n    const i = largest_divisor(res + 1)\n    if (i > res) {\n      break\n    }\n    res = i\n  }\n  return res\n}"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    let factors = [];\n    while (n > 1) {\n        let p = 2;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 3;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 5;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 7;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n    }\n    return factors;\n};\n\n/* Return list of factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the sum of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst sumFactors = (n) => {\n    let factors = [];\n    while (n > 1) {\n        let p = 2;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 3;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 5;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 7;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n    }\n    return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst productFactors = (n) => {\n    let factors = [];\n    while (n > 1) {\n        let p = 2;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 3;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 5;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n        p = 7;\n        while (n % p === 0) {\n            factors.push(p);\n            n = n / p;\n        }\n    }\n    return factors;\n};\n\nconst test = (n) => {\n    console.log(\"The prime factors of \" + n + \" are \" + sumFactors(n) + \" \" + productFactors(n) + \" \" + factorize(n));\n};\n\ntest(8);\ntest(25);\ntest(70);\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  return _.uniq(numbers, true);\n}\n\n/*\n  From a list of numbers, remove all the even numbers.\n  Keep order of elements left the same as in the input.\n  >>> remove_even([1, 2, 3, 4])\n  [1, 3]\n  */\nconst remove_even = (numbers) => {\n  return _.filter(numbers, number => number % 2 === 0);\n}\n\n/*\n  From a list of numbers, remove all the odd numbers.\n  Keep order of elements left the same as in the input.\n  >>> remove_odd([1, 2, 3, 4])\n  [2, 4]\n  */\nconst remove_odd = (numbers) => {\n  return _.filter(numbers, number => number % 2 === 1);\n}\n\n/*\n  From a list of numbers, remove all the multiples of 3.\n  Keep order of elements left the same as in the input.\n  >>> remove_triples([1, 2, 3, 4, 5, 6])\n  [1, 2, 6]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 6, 8]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 9]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25]\n  >>> remove_triples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26]\n  >>> remove_triples([1, 2,"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n    let result = string;\n    for(let i=0; i<string.length; i++) {\n        if(string[i] == string[i].toLowerCase()) {\n            result = result.replace(string[i].toLowerCase(), string[i].toUpperCase());\n        }\n    }\n    return result;\n};\n\n/*\n  Given a list of strings, returns a list of words, where each word is composed of the\n  first letter of each string in the list.\n  >>> words(['hello', 'world', 'cat', 'dog'])\n  ['hello', 'world', 'cat', 'dog']\n  >>> words(['hello', 'world', 'cat', 'dog'], False)\n  ['hello', 'world', 'Cat', 'Dog']\n  >>> words(['hello', 'world', 'cat', 'dog'], True)\n  ['HELLO', 'WORLD', 'CAT', 'DOG']\n  */\nconst words = (strings, capitalize) => {\n    let result = [];\n    for(let i=0; i<strings.length; i++) {\n        result = result.concat(strings[i].split(' '));\n    }\n    if(capitalize) {\n        result = result.map((str) => flip_case(str));\n    }\n    return result;\n};\n\n/*\n  Returns a list of words in the given list, where each word is composed of the first\n  letter of each string in the list.\n  >>> words_in_list(['hello', 'world', 'cat', 'dog'])\n  ['hello', 'world', 'cat', 'dog']\n  >>> words_in_list(['hello', 'world', 'cat', 'dog'], False)\n  ['hello', 'world', 'Cat', 'Dog']\n  >>> words_in_list(['hello', 'world', 'cat', 'dog'], True)\n  ['HELLO', 'WORLD', 'CAT', 'DOG']\n  */\nconst words_in_list = (strings, capitalize) => {\n    let result = [];\n    for(let i=0; i<strings.length; i++) {\n        result = result.concat(words(strings[i].split(' '), capitalize));\n    }\n    return result;\n};\n\n/*\n  Given a list of strings, returns a list of strings, where each string has been split\n  into words and capitalized.\n  >>> words_in_list_capitalized(['hello', 'world', 'cat', 'dog'])\n  ['Hello', 'World', 'Cat', 'Dog']\n  >>> words_in_list_capitalized(['hello', 'world', 'cat', 'dog'], False)\n  ['hello', 'world', 'Cat', 'Dog']\n  >>> words_in_list_capitalized(['hello', 'world', 'cat', 'dog'], True)\n  ['HELLO', 'WORLD', 'CAT', 'DOG']\n  */\nconst words_in_list_capitalized = (strings, capitalize) => {\n    let result = [];\n    for(let i=0; i<strings.length; i++) {\n        result = result.concat(words(strings[i].split(' '), capitalize));\n    }\n    return result;\n};\n\n/*\n  Given a string, returns a list of strings, where each string is composed of the first\n  letter of each word in the given string.\n  >>> words_in_string('Hello World!')\n  ['Hello', 'World!']\n  >>> words_in_string('Hello World!', False)\n  ['Hello', 'World!']\n  >>> words_in_string('Hello World!', True)\n  ['HELLO', 'WORLD!']\n  */\nconst words_in_string = (string, capitalize) => {\n    let result = [];\n    for(let i=0; i<string.length; i++) {\n        result = result.concat(words(string.slice(i, i+1), capitalize));\n    }\n    return result;\n};\n\nmodule.exports = {\n    flip_case,\n    words,\n    words_in_list,\n    words_in_list_capitalized,\n    words_in_string\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Find a substring in a string\n  >>> substr('abcdefg', 1)\n  'bcdefg'\n  >>> substr('abcdefg', 3, 3)\n  'cdefg'\n  >>> substr('abcdefg', 3, 4)\n  ''\n  */\nconst substr = (str, start, length) => {\n  let end = start + length;\n  if (end > str.length) {\n    return '';\n  }\n  return str.substr(start, length);\n};\n\n/* Remove whitespace characters from a string\n  >>> trim(' \\t\\n\\r\\f\\v ')\n  '\\n\\r\\f\\v'\n  */\nconst trim = (str) => {\n  let result = str.replace(/^\\s+|\\s+$/g, '');\n  return result;\n};\n\n/* Get the character code of a string\n  >>> get_code('abc')\n  97\n  */\nconst get_code = (str) => {\n  let code = str.charCodeAt(0);\n  return code;\n};\n\n/* Get the character code of a character\n  >>> get_code('a')\n  97\n  */\nconst get_code_of_character = (char) => {\n  let code = char.charCodeAt(0);\n  return code;\n};\n\n/* Get the character corresponding to a character code\n  >>> get_character_from_code(97)\n  a\n  >>> get_character_from_code(26)\n  z\n  */\nconst get_character_from_code = (code) => {\n  let char = String.fromCharCode(code);\n  return char;\n};\n\n/* Convert a character code to a character\n  >>> get_code_to_character(97)\n  a\n  >>> get_code_to_character(26)\n  z\n  */\nconst get_code_to_character = (code) => {\n  let char = String.fromCharCode(code);\n  return char;\n};\n\n/* Get the index of a character in a string\n  >>> index_of('abc', 'b')\n  1\n  >>> index_of('abc', 'z')\n  -1\n  */\nconst index_of = (str, char) => {\n  let index = str.indexOf(char);\n  return index;\n};\n\n/* Get the index of a character in a string\n  >>> index_of_character('abc', 'a')\n  0\n  >>> index_of_character('abc', 'z')\n  -1\n  */\nconst index_of_character = (str, char) => {\n  let index = str.indexOf(char);\n  return index;\n};\n\n/* Get the index of a character in a string\n  >>> index_of_code(97, 'a')\n  0\n  >>> index_of_code(97, 'z')\n  -1\n  */\nconst index_of_code = (code, char) => {\n  let index = str.indexOf(char);\n  return index;\n};\n\n/* Get the index of a character in a string\n  >>> index_of_character('abc', 97)\n  0\n  >>> index_of_character('abc', 26)\n  -1\n  */\nconst index_of_character_in_code = (char, code) => {\n  let index = str.indexOf(char);\n  return index;\n};\n\n/* Get the index of a character in a string\n  >>> index_of_code(97, 97)\n  0\n  >>> index_of_code(97, 26)\n  -1\n  */\nconst index_of_character_in_code = (char, code) => {\n  let index = str.indexOf(char);\n  return index;\n};\n\n/* Get the number of occurrences of a character in a string\n  >>> occurrences_of('abc', 'a')\n  1\n  >>> occurrences_of('abc', 'z')\n  0\n  */\nconst occurrences_of = (str, char) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str[index] === char) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\n/* Get the number of occurrences of a character in a string\n  >>> occurrences_of_character('abc', 'a')\n  1\n  >>> occurrences_of_character('abc', 'z')\n  0\n  */\nconst occurrences_of_character = (str, char) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str[index] === char) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\n/* Get the number of occurrences of a character in a string\n  >>> occurrences_of_code(97, 97)\n  1\n  >>> occurrences_of_code(97, 26)\n  0\n  */\nconst occurrences_of_code = (code, char) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str[index] === char) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\n/* Get the number of occurrences of a character in a string\n  >>> occurrences_of_character_in_code('abc', 97)\n  1\n  >>> occurrences_of_character_in_code('abc', 26)\n  0\n  */\nconst occurrences_of_character_in_code = (char, code) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str[index] === char) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\n/* Get the number of occurrences of a character in a string\n  >>> occurrences_of_"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  if (strings.length === 0) return []\n  return strings.filter(str => str.startsWith(prefix))\n}\n\n/**\n  * Filter an input list of strings only for ones that do not start with a given\n  * prefix.\n  * @param {string} prefix The prefix to filter out.\n  * @returns {Array} The filtered list.\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  if (strings.length === 0) return []\n  return strings.filter(str =>!str.startsWith(prefix))\n}\n\n/**\n  * Returns the number of elements in the list.\n  * @param {Array} list The list to count.\n  * @returns {number} The number of elements in the list.\n  */\nconst count = (list) => list.length\n\n/**\n  * Returns the elements of the list in order.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst sort = (list) => list.sort()\n\n/**\n  * Returns the elements of the list in reverse order.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst sort_reverse = (list) => list.sort((a, b) => b - a)\n\n/**\n  * Returns the elements of the list without the duplicate elements.\n  * @param {Array} list The list to remove duplicates from.\n  * @returns {Array} The sorted list.\n  */\nconst sort_unique = (list) => list.filter((el, i) => i === list.lastIndexOf(el))\n\n/**\n  * Returns a set containing all the elements of the list.\n  * @param {Array} list The list to convert to a set.\n  * @returns {Set} The set containing all the elements of the list.\n  */\nconst to_set = (list) => new Set(list)\n\n/**\n  * Returns a list of unique values in the list.\n  * @param {Array} list The list to convert to a set.\n  * @returns {Array} The set containing all the elements of the list.\n  */\nconst to_list = (list) => list.map(x => x.toString())\n\n/**\n  * Returns a list of the longest strings in the list.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst longest_first = (list) => list.sort((a, b) => a.length - b.length)\n\n/**\n  * Returns a list of the shortest strings in the list.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst shortest_first = (list) => list.sort((a, b) => b.length - a.length)\n\n/**\n  * Returns a list of the strings in the list in alphabetical order.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst alphabetical = (list) => list.sort((a, b) => a.localeCompare(b))\n\n/**\n  * Returns a list of the strings in the list in alphabetic order, case\n  * insensitive.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst alphabetic_ignore_case = (list) => list.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))\n\n/**\n  * Returns a list of the strings in the list in alphabetic order, case\n  * sensitive.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst alphabetic_case = (list) => list.sort((a, b) => a.localeCompare(b))\n\n/**\n  * Returns a list of the strings in the list in alphabetic order, case\n  * insensitive.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst alphabetic_case_ignore_case = (list) => list.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))\n\n/**\n  * Returns a list of the strings in the list in numeric order.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst numeric = (list) => list.sort((a, b) => parseInt(a) - parseInt(b))\n\n/**\n  * Returns a list of the strings in the list in numeric order, case\n  * insensitive.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst numeric_ignore_case = (list) => list.sort((a, b) => parseInt(a) - parseInt(b))\n\n/**\n  * Returns a list of the strings in the list in numeric order, case\n  * sensitive.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst numeric_case = (list) => list.sort((a, b) => parseInt(a) - parseInt(b))\n\n/**\n  * Returns a list of the strings in the list in numeric order, case\n  * insensitive.\n  * @param {Array} list The list to sort.\n  * @returns {Array} The sorted list.\n  */\nconst numeric_case_ignore_case = (list) => list.sort((a, b) => parseInt(a) - parseInt(b))\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  const list = l.filter((n) => n > 0)\n  return list\n}\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -5, 2, 9, -10]\n  */\nconst get_negative = (l) => {\n  const list = l.filter((n) => n < 0)\n  return list\n}\n\n/*\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive_odd = (l) => {\n  const list = l.filter((n) => n > 0)\n  const odd = list.filter((n) => n % 2)\n  return odd\n}\n\n/*\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive_even = (l) => {\n  const list = l.filter((n) => n > 0)\n  const even = list.filter((n) => n % 2 == 0)\n  return even\n}\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -5, 2, 9, -10]\n  */\nconst get_negative_odd = (l) => {\n  const list = l.filter((n) => n < 0)\n  const odd = list.filter((n) => n % 2 == 0)\n  return odd\n}\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -5, 2, 9, -10]\n  */\nconst get_negative_even = (l) => {\n  const list = l.filter((n) => n < 0)\n  const even = list.filter((n) => n % 2 == 0)\n  return even\n}\n\n/*\n  >>> get_odd([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 6]\n  >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -5, 2, 9, -10]\n  */\nconst get_odd = (l) => {\n  const list = l.filter((n) => n % 2 == 1)\n  return list\n}\n\n/*\n  >>> get_even([-1, 2, -4, 5, 6])\n  []\n  >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst get_even = (l) => {\n  const list = l.filter((n) => n % 2 == 0)\n  return list\n}\n\n/*\n  >>> get_positive_odd([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive_odd_even = (l) => {\n  const list = l.filter((n) => n > 0)\n  const odd = list.filter((n) => n % 2 == 1)\n  return odd\n}\n\n/*\n  >>> get_positive_odd([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive_odd_odd = (l) => {\n  const list = l.filter((n) => n > 0)\n  const odd = list.filter((n) => n % 2 == 1)\n  return odd\n}\n\n/*\n  >>> get_positive_even([-1, 2, -4, 5, 6])\n  []\n  >>> get_positive_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst get_positive_even_odd = (l) => {\n  const list = l.filter((n) => n > 0)\n  const even = list.filter((n) => n % 2 == 0)\n  return even\n}\n\n/*\n  >>> get_positive_even([-1, 2, -4, 5, 6])\n  []\n  >>> get_positive_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst get_positive_even_even = (l) => {\n  const list = l.filter((n) => n > 0)\n  const even = list.filter((n) =>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  let i = 2,\n    j = 0,\n    k = 1,\n    prime = false,\n    tmp = 0;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      j++;\n      while (n % i === 0) {\n        n = n / i;\n      }\n    }\n    k = (k + 1) % (i + 1);\n    i++;\n  }\n\n  if (j === 0) {\n    return false;\n  }\n  if (j === 1) {\n    return true;\n  }\n\n  if (n === 1) {\n    return false;\n  }\n\n  while (k === 0) {\n    k = (k + 1) % (n + 1);\n  }\n\n  for (i = 2; i <= n / 2; i++) {\n    if (n % i === 0) {\n      tmp = i;\n      while (n % i === 0) {\n        n = n / i;\n      }\n    }\n  }\n\n  if (n!== 1) {\n    if (n === tmp) {\n      return true;\n    }\n  }\n\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let {length} = xs\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item > prev? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item < prev? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item < 0? [item, index] : [prev, index]\n  }, [max, min])\n\n  if (length % 2 === 0) {\n    let {max, min} = xs.reduce((prev, item, index) => {\n      return item > prev? [item, index] : [prev, index]\n    }, [max, min])\n\n    if (max > 0) {\n      return findZero(xs.concat([min - 1, max + 1]))\n    } else if (min < 0) {\n      return findZero(xs.concat([min + 1, max - 1]))\n    } else {\n      return 0.0\n    }\n  } else {\n    return findZero(xs.concat([min - 1, min + 1]))\n  }\n}\n\n/*\n  evaluate polynomial on interval [x_0, x_1]\n  x_0 < x_1\n  x_0 <= x_1\n  x_0 <= x_1 <= x_2\n ...\n  */\nconst evaluate = (xs, x_0, x_1) => {\n  return poly(xs, x_0) + poly(xs, x_1) * (x_1 - x_0)\n}\n\n/*\n  Find minimum of a polynomial on interval [x_0, x_1]\n  x_0 < x_1\n  x_0 <= x_1 <= x_2\n ...\n  */\nconst findMin = (xs, x_0, x_1) => {\n  let {length} = xs\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item > prev? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item < prev? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item < 0? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item > 0? [item, index] : [prev, index]\n  }, [max, min])\n\n  if (length % 2 === 0) {\n    let {max, min} = xs.reduce((prev, item, index) => {\n      return item > prev? [item, index] : [prev, index]\n    }, [max, min])\n\n    if (max > 0) {\n      return findMin(xs.concat([min - 1, max + 1]), x_0, x_1)\n    } else if (min < 0) {\n      return findMin(xs.concat([min + 1, max - 1]), x_0, x_1)\n    } else {\n      return findMin(xs.concat([min + 1, min - 1]), x_0, x_1)\n    }\n  } else {\n    return findMin(xs.concat([min + 1, min - 1]), x_0, x_1)\n  }\n}\n\n/*\n  Find maximum of a polynomial on interval [x_0, x_1]\n  x_0 < x_1\n  x_0 <= x_1 <= x_2\n ...\n  */\nconst findMax = (xs, x_0, x_1) => {\n  let {length} = xs\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item > prev? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item < prev? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item < 0? [item, index] : [prev, index]\n  }, [max, min])\n\n  let {max, min} = xs.reduce((prev, item, index) => {\n    return item > 0? [item, index] : [prev, index]\n  }, [max, min])\n\n  if (length % 2 === 0) {\n    let {max, min} = xs.reduce((prev, item, index) => {\n      return item > prev? [item, index] : [prev, index]\n    }, [max, min])\n\n    if (max > 0) {\n      "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted = l.slice();\n  const third = Math.floor(l.length / 3);\n  const sorted_third = [];\n  const sorted_index = [];\n  let i = 0;\n  while (i < sorted.length) {\n    if (i % 3 === 0) {\n      sorted_index.push(sorted[i]);\n    }\n    sorted_third.push(sorted[i]);\n    i++;\n  }\n  sorted.splice(0, third);\n  sorted_index.splice(0, third);\n  sorted_third.sort();\n  sorted.sort();\n  sorted_index.sort();\n  return [...sorted_third,...sorted_index,...sorted];\n};\n\nconst main = () => {\n  const l = [1, 2, 3, 5, 6, 7, 8, 9];\n  console.log(sort_third(l));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = []\n  let index = 0\n  let uniqueValue\n  for (const i of l) {\n    if (index === 0) {\n      uniqueValue = i\n      index++\n    } else {\n      if (i === uniqueValue) {\n        continue\n      } else {\n        uniqueList.push(uniqueValue)\n        uniqueValue = i\n        index++\n      }\n    }\n  }\n  return uniqueList\n}\n\n//TODO: add a test for this function\n/* Return the unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = []\n  for (const i of l) {\n    if (uniqueList.indexOf(i) === -1) {\n      uniqueList.push(i)\n    }\n  }\n  return uniqueList\n}\n\nmodule.exports = {\n  findMax: findMax,\n  findMin: findMin,\n  findSum: findSum,\n  findMaxBy: findMaxBy,\n  findMinBy: findMinBy,\n  findSumBy: findSumBy,\n  findMaxIndex: findMaxIndex,\n  findMinIndex: findMinIndex,\n  findSumIndex: findSumIndex,\n  findMaxKey: findMaxKey,\n  findMinKey: findMinKey,\n  findSumKey: findSumKey,\n  sortBy: sortBy,\n  sort: sort,\n  sortByIndex: sortByIndex,\n  sortIndex: sortIndex,\n  max: max,\n  min: min,\n  sum: sum,\n  count: count,\n  map: map,\n  filter: filter,\n  find: find,\n  findLast: findLast,\n  findLastBy: findLastBy,\n  findLastIndex: findLastIndex,\n  findLastKey: findLastKey,\n  unique: unique,\n  uniqueList: uniqueList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const {length} = l\n  return l[length - 1]\n}\n\n/**\n  * Return the smallest element in the list.\n  *\n  * @param {list} l\n  * @return {any}\n  *\n  * @example\n  *\n  *   min_element([3, 2, 1, 5, 4, 9])\n  *   // => 1\n  *\n  *   min_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 1\n  *\n  *   min_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 1\n  *\n  *   min_element([])\n  *   // => undefined\n  *\n  *   min_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 1\n  */\nconst min_element = (l) => {\n  const {length} = l\n  return l[0]\n}\n\n/**\n  * Return the index of the smallest element in the list.\n  *\n  * @param {list} l\n  * @return {number}\n  *\n  * @example\n  *\n  *   min_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 0\n  *\n  *   min_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 0\n  *\n  *   min_element([])\n  *   // => undefined\n  *\n  *   min_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 0\n  */\nconst min_index = (l) => {\n  const {length} = l\n  return 0\n}\n\n/**\n  * Return the index of the largest element in the list.\n  *\n  * @param {list} l\n  * @return {number}\n  *\n  * @example\n  *\n  *   max_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 4\n  *\n  *   max_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 4\n  *\n  *   max_element([])\n  *   // => undefined\n  *\n  *   max_element([1, 2, 3, 5, 7, 8, 9])\n  *   // => 4\n  */\nconst max_index = (l) => {\n  const {length} = l\n  return length - 1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let res = 0;\n  while (n > 0) {\n    if (n % 3 === 0) {\n      res++;\n    }\n    if (n % 5 === 0) {\n      res++;\n    }\n    if (n % 7 === 0) {\n      res++;\n    }\n    n--;\n  }\n  return res;\n};\n\n/*\n  Write a function that returns the value of the highest digit in a given number.\n  >>> fizz_buzz(1)\n  1\n  >>> fizz_buzz(3)\n  2\n  >>> fizz_buzz(9)\n  3\n  >>> fizz_buzz(15)\n  4\n  >>> fizz_buzz(21)\n  5\n  >>> fizz_buzz(28)\n  6\n  >>> fizz_buzz(30)\n  7\n  >>> fizz_buzz(45)\n  8\n  >>> fizz_buzz(47)\n  9\n  >>> fizz_buzz(54)\n  10\n  >>> fizz_buzz(55)\n  11\n  >>> fizz_buzz(65)\n  12\n  >>> fizz_buzz(66)\n  13\n  >>> fizz_buzz(66)\n  13\n  >>> fizz_buzz(71)\n  14\n  >>> fizz_buzz(72)\n  15\n  >>> fizz_buzz(76)\n  16\n  >>> fizz_buzz(78)\n  17\n  >>> fizz_buzz(79)\n  18\n  */\nconst highest_digit = (n) => {\n  let res = 0;\n  while (n > 0) {\n    if (n % 3 === 0) {\n      res = 3;\n    }\n    if (n % 5 === 0) {\n      res = 5;\n    }\n    if (n % 7 === 0) {\n      res = 7;\n    }\n    n--;\n  }\n  return res;\n};\n\n/*\n  Write a function that returns the number of times that the number can be written as the sum of three odd numbers.\n  >>> fizz_buzz(1)\n  0\n  >>> fizz_buzz(2)\n  0\n  >>> fizz_buzz(3)\n  0\n  >>> fizz_buzz(4)\n  1\n  >>> fizz_buzz(5)\n  2\n  >>> fizz_buzz(6)\n  2\n  >>> fizz_buzz(7)\n  3\n  >>> fizz_buzz(8)\n  3\n  >>> fizz_buzz(9)\n  4\n  >>> fizz_buzz(10)\n  4\n  >>> fizz_buzz(11)\n  5\n  >>> fizz_buzz(12)\n  5\n  >>> fizz_buzz(13)\n  6\n  >>> fizz_buzz(15)\n  6\n  >>> fizz_buzz(16)\n  7\n  >>> fizz_buzz(17)\n  7\n  >>> fizz_buzz(18)\n  8\n  >>> fizz_buzz(20)\n  8\n  >>> fizz_buzz(21)\n  9\n  >>> fizz_buzz(22)\n  9\n  >>> fizz_buzz(24)\n  9\n  >>> fizz_buzz(25)\n  10\n  >>> fizz_buzz(26)\n  10\n  >>> fizz_buzz(28)\n  10\n  >>> fizz_buzz(30)\n  11\n  >>> fizz_buzz(32)\n  11\n  >>> fizz_buzz(33)\n  12\n  >>> fizz_buzz(34)\n  12\n  >>> fizz_buzz(35)\n  13\n  >>> fizz_buzz(36)\n  13\n  >>> fizz_buzz(40)\n  13\n  >>> fizz_buzz(42)\n  14\n  >>> fizz_buzz(43)\n  14\n  >>> fizz_buzz(44)\n  15\n  >>> fizz_buzz(45)\n  15\n  >>> fizz_buzz(46)\n  16\n  >>> fizz_buzz(48)\n  16\n  >>> fizz_buzz(50)\n  17\n  >>> fizz_buzz(52)\n  17\n  >>> fizz_buzz(54)\n  18\n  >>> fizz_buzz(55)\n  19\n  >>> fizz_buzz(56)\n  19\n  >>> fizz_buzz(60)\n  19\n  >>> fizz_buzz(62)\n  20\n  >>> fizz_buzz(63)\n  20\n  >>> fizz_buzz(64)\n  21\n  >>> fizz_buzz(65)\n  22\n  >>> fizz_buzz(66)\n  22\n  >>> fizz_buzz(67)\n  23\n  >>> fizz_buzz(68)\n  23\n  >>> fizz_buzz(70)\n  23\n  >>> fizz_buzz(72)\n  24\n  >>> fizz_buzz(74)\n  24\n  >>> fizz_buzz(76)\n  25\n  >>> fizz_buzz(77)\n  25\n  >>> fizz_buzz(78)\n  26\n  >>> fizz_buzz(79)\n  26\n  >>> fizz_buzz(80)\n  27\n  >>> fizz_buzz(82)\n  27\n  >>> fizz_buzz(84)\n  28\n  >>> fizz_buzz(85)\n  28\n  >>> fizz_buzz(86)\n  29\n  >>> fizz_buzz(88)\n  29\n  >>> fizz_buzz(90)\n  29\n  >>> fizz_buzz(92)\n  30\n  >>> fizz_buzz(94)\n  30\n  >>> fizz_buzz(95)\n  31\n  >>> fizz_buzz(96)"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n    const odd = l.filter((v) => v % 2 === 1);\n    const even = l.filter((v) => v % 2 === 0);\n    const sorted_odd = odd.sort((a, b) => a - b);\n    const sorted_even = even.sort((a, b) => a - b);\n    return sorted_odd.concat(sorted_even);\n};\n\nexport default sort_even;<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode: encode_cyclic,\n  decode: decodeCyclic,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  const fib = [1, 2];\n  const next_fib = [2, 3];\n  for (let i = 0; i < n; i++) {\n    const next = next_fib[1];\n    next_fib = [next_fib[0], next_fib[1] + next];\n    fib = [fib[0] + fib[1], fib[1] + next];\n  }\n  const prime = fib[0] + fib[1];\n  return prime;\n};\n\nconsole.log(prime_fib(3));\n\n/*\n  prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib2(1)\n  2\n  >>> prime_fib2(2)\n  3\n  >>> prime_fib2(3)\n  5\n  >>> prime_fib2(4)\n  13\n  >>> prime_fib2(5)\n  89\n  */\nconst prime_fib2 = (n) => {\n  const fib = [1, 2];\n  const next_fib = [2, 3];\n  for (let i = 0; i < n; i++) {\n    const next = next_fib[1];\n    next_fib = [next_fib[0] + next, next_fib[1] + next];\n    fib = [fib[0] + fib[1], fib[1] + next];\n  }\n  const prime = fib[0] + fib[1];\n  return prime;\n};\n\nconsole.log(prime_fib2(3));\n\n/*\n  prime_fib3 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib3(1)\n  2\n  >>> prime_fib3(2)\n  3\n  >>> prime_fib3(3)\n  5\n  >>> prime_fib3(4)\n  13\n  >>> prime_fib3(5)\n  89\n  */\nconst prime_fib3 = (n) => {\n  const fib = [1, 2];\n  const next_fib = [2, 3];\n  const prime = [];\n  for (let i = 0; i < n; i++) {\n    const next = next_fib[1];\n    next_fib = [next_fib[0] + next, next_fib[1] + next];\n    fib = [fib[0] + fib[1], fib[1] + next];\n    prime.push(fib[0] + fib[1]);\n  }\n  return prime;\n};\n\nconsole.log(prime_fib3(3));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n    const arr = l.slice().sort();\n    const diff = arr.slice(1).map(x => x - arr[0]);\n    const sum = arr.reduce((a, b) => a + b, 0);\n    return diff.reduce((a, b) => a && b, true) && sum === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n    let cars = Array.from({length: n}, () => ({\n        speed: 0,\n        position: 0,\n        direction: -1,\n        colliding: false\n    }));\n    cars.forEach((car, index) => {\n        car.speed = Math.random();\n        car.position = index;\n    });\n\n    let collisions = 0;\n\n    cars.forEach((car, index) => {\n        car.speed = Math.random() + Math.random();\n        car.direction = car.speed > 0? 1 : -1;\n        car.colliding = false;\n\n        cars.forEach((otherCar, otherIndex) => {\n            if (index === otherIndex) {\n                return;\n            }\n\n            if (car.position === otherIndex) {\n                car.colliding = true;\n                collisions++;\n            }\n\n            if (car.direction === otherCar.direction) {\n                if (car.speed < otherCar.speed) {\n                    car.position = otherIndex;\n                } else {\n                    otherCar.position = index;\n                }\n\n                car.colliding = otherCar.colliding;\n                otherCar.colliding = car.colliding;\n                collisions++;\n            }\n        });\n    });\n\n    return collisions;\n};\n\nlet result = car_race_collision(1);\nconsole.log(result);\n\nlet result2 = car_race_collision(2);\nconsole.log(result2);\n\nlet result3 = car_race_collision(3);\nconsole.log(result3);\n\nlet result4 = car_race_collision(4);\nconsole.log(result4);\n\nlet result5 = car_race_collision(5);\nconsole.log(result5);\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  return l.map((x) => x + 1);\n}\n\n/* Return list with elements decremented by 1.\n  >>> decr_list([2, 3, 4])\n  [1, 2, 3]\n  >>> decr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decr_list = (l) => {\n  return l.map((x) => x - 1);\n}\n\n/* Return list with elements incremented by 1.\n  >>> incr_list([2, 3, 4])\n  [3, 4, 5]\n  >>> incr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [7, 5, 6, 4, 5, 5, 11, 2, 125]\n  */\nconst incr_list_by_one = (l) => {\n  return l.map((x) => x + 1);\n}\n\n/* Return list with elements decremented by 1.\n  >>> decr_list([3, 4, 5])\n  [2, 3, 4]\n  >>> decr_list([7, 5, 6, 4, 5, 5, 11, 2, 125])\n  [6, 5, 5, 4, 5, 4, 10, 1, 124]\n  */\nconst decr_list_by_one = (l) => {\n  return l.map((x) => x - 1);\n}\n\nmodule.exports = {\n  incr_list,\n  incr_list_by_one,\n  decr_list,\n  decr_list_by_one\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let set = {};\n  for (let i of l) {\n    for (let j of l) {\n      if (i === j || i === -j) continue;\n      const diff = i - j;\n      if (set[diff]) return false;\n      set[diff] = true;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const b = base\n  const res = []\n  while (x > 0) {\n    res.unshift(x % b)\n    x = Math.floor(x / b)\n  }\n  return res.join('')\n}\n\n// Convert base from 3 to 2\nconst convert_base = (x, base) => {\n  const b = base\n  return (x * b).toString(2)\n}\n\n// Convert base from 2 to 3\nconst convert_base2 = (x, base) => {\n  const b = base\n  return (x / b).toString(2)\n}\n\n// Convert base from 3 to base\nconst convert_base3 = (x, base) => {\n  const b = base\n  return x.toString(b)\n}\n\n// Convert base from 2 to base\nconst convert_base4 = (x, base) => {\n  const b = base\n  return x.toString(b)\n}\n\nconst convert_base_test = (x, base) => {\n  const res = []\n  while (x > 0) {\n    res.unshift(x % base)\n    x = Math.floor(x / base)\n  }\n  return res.join('')\n}\n\n// Test of convert_base function\nconst test_convert_base = () => {\n  const test_cases = [\n    [6, 3],\n    [7, 3],\n    [8, 3],\n    [9, 3],\n    [10, 3],\n    [11, 3],\n    [12, 3],\n    [13, 3],\n    [14, 3],\n    [15, 3],\n    [16, 3],\n    [17, 3],\n    [18, 3],\n    [19, 3],\n    [20, 3],\n    [21, 3],\n    [22, 3],\n    [23, 3],\n    [24, 3],\n    [25, 3],\n    [26, 3],\n    [27, 3],\n    [28, 3],\n    [29, 3],\n    [30, 3],\n    [31, 3],\n    [32, 3],\n    [33, 3],\n    [34, 3],\n    [35, 3],\n    [36, 3],\n    [37, 3],\n    [38, 3],\n    [39, 3],\n    [40, 3],\n    [41, 3],\n    [42, 3],\n    [43, 3],\n    [44, 3],\n    [45, 3],\n    [46, 3],\n    [47, 3],\n    [48, 3],\n    [49, 3],\n    [50, 3],\n    [51, 3],\n    [52, 3],\n    [53, 3],\n    [54, 3],\n    [55, 3],\n    [56, 3],\n    [57, 3],\n    [58, 3],\n    [59, 3],\n    [60, 3],\n    [61, 3],\n    [62, 3],\n    [63, 3],\n    [64, 3],\n    [65, 3],\n    [66, 3],\n    [67, 3],\n    [68, 3],\n    [69, 3],\n    [70, 3],\n    [71, 3],\n    [72, 3],\n    [73, 3],\n    [74, 3],\n    [75, 3],\n    [76, 3],\n    [77, 3],\n    [78, 3],\n    [79, 3],\n    [80, 3],\n    [81, 3],\n    [82, 3],\n    [83, 3],\n    [84, 3],\n    [85, 3],\n    [86, 3],\n    [87, 3],\n    [88, 3],\n    [89, 3],\n    [90, 3],\n    [91, 3],\n    [92, 3],\n    [93, 3],\n    [94, 3],\n    [95, 3],\n    [96, 3],\n    [97, 3],\n    [98, 3],\n    [99, 3],\n    [100, 3],\n    [101, 3],\n    [102, 3],\n    [103, 3],\n    [104, 3],\n    [105, 3],\n    [106, 3],\n    [107, 3],\n    [108, 3],\n    [109, 3],\n    [110, 3],\n    [111, 3],\n    [112, 3],\n    [113, 3],\n    [114, 3],\n    [115, 3],\n    [116, 3],\n    [117, 3],\n    [118, 3],\n    [119, 3],\n    [120, 3],\n    [121, 3],\n    [122, 3],\n    [123, 3],\n    [124, 3],\n    [125, 3],\n    [126, 3],\n    [127, 3],\n    [128, 3],\n    [129, 3],\n    [130, 3],\n    [131, 3],\n    [132, 3],\n    [133, 3],\n    [134, 3],\n    [135, 3],\n    [136, 3],\n    [137, 3],\n    [138, 3],\n    [139, 3],\n    [140, 3],\n    [141, 3],\n    [142, 3],\n    [143, 3],\n    [144, 3],\n    [145, 3],\n    [146, 3],\n    [147, 3],\n    [148, 3],\n    [149, 3],\n    [150, 3],\n    [151, 3],\n    [152, 3],\n    [153, 3],\n    [154, 3],\n    [155, 3],\n    [156, 3],\n    [157, 3],\n    [158, 3],\n    [159, 3],\n    [160, 3],\n    [161, 3],\n    [162, 3],\n    [163, 3],\n    [164, 3],\n    [165, 3"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  let x = Math.sqrt(h * (h - 2 * a) * (h - 2 * a));\n  return x;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 4)\n  10\n  */\nconst triangle_area_2 = (a, h) => {\n  let x = (a * a) + (h * h) - 2 * a * h;\n  return Math.sqrt(x);\n};\n\nconst triangle_area_3 = (a, h) => {\n  let x = a * a * h;\n  return Math.sqrt(x);\n};\n\nconst triangle_area_4 = (a, h) => {\n  let x = Math.pow(a, 2) * h;\n  return Math.sqrt(x);\n};\n\nconst triangle_area_5 = (a, h) => {\n  let x = (a * a * h) + (a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_6 = (a, h) => {\n  let x = Math.pow(a, 2) * h;\n  return Math.sqrt(x);\n};\n\nconst triangle_area_7 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_8 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_9 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_10 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_11 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_12 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_13 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a) + (7 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_14 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a) + (7 * a * a) + (8 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_15 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a) + (7 * a * a) + (8 * a * a) + (9 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_16 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a) + (7 * a * a) + (8 * a * a) + (9 * a * a) + (10 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_17 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a) + (7 * a * a) + (8 * a * a) + (9 * a * a) + (10 * a * a) + (11 * a * a);\n  return Math.sqrt(x);\n};\n\nconst triangle_area_18 = (a, h) => {\n  let x = (a * a * h) + (a * a) + (a * h) + (h * h) + (2 * a * h) + (3 * a * a) + (4 * a * a) + (5 * a * a) + (6 * a * a) + (7 * a * a) + (8 * a * a) + (9 * a * a) + (10 * a * a) + ("}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n <= 0) {\n        return 0;\n    } else if (n <= 2) {\n        return 1;\n    } else if (n <= 4) {\n        return 2;\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n};\n\n//# sourceMappingURL=fib4.js.map<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const half = Math.floor(l.length / 2);\n  const first = l[half];\n  const second = l[half - 1];\n  return (first <= second)? first : second;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5, 6])\n  4.0\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  const first = sorted[half];\n  const second = sorted[half - 1];\n  return (first <= second)? first : second;\n};\n\n/*Return the number of times the given number occurs in the given list.\n  >>> count(1, [1, 1, 2, 3, 4])\n  2\n  >>> count(4, [1, 1, 2, 3, 4])\n  3\n  >>> count(2, [1, 2, 3, 4, 5])\n  1\n  >>> count(3, [1, 2, 3, 4, 5])\n  2\n  */\nconst count = (n, l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the given number occurs in the given list.\n  >>> count2(1, [1, 1, 2, 3, 4])\n  2\n  >>> count2(4, [1, 1, 2, 3, 4])\n  3\n  >>> count2(2, [1, 2, 3, 4, 5])\n  1\n  >>> count2(3, [1, 2, 3, 4, 5])\n  2\n  */\nconst count2 = (n, l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> sum([1, 2, 3, 4, 5, 6])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  46\n  >>> sum([-10, 4, 6, 1000, 10, 20], 0)\n  0\n  >>> sum([-10, 4, 6, 1000, 10, 20], 1)\n  -10\n  >>> sum([-10, 4, 6, 1000, 10, 20], 2)\n  4\n  >>> sum([-10, 4, 6, 1000, 10, 20], 3)\n  6\n  >>> sum([-10, 4, 6, 1000, 10, 20], 4)\n  10\n  >>> sum([-10, 4, 6, 1000, 10, 20], 5)\n  20\n  >>> sum([-10, 4, 6, 1000, 10, 20], 6)\n  30\n  >>> sum([-10, 4, 6, 1000, 10, 20], 7)\n  40\n  >>> sum([-10, 4, 6, 1000, 10, 20], 8)\n  50\n  >>> sum([-10, 4, 6, 1000, 10, 20], 9)\n  60\n  >>> sum([-10, 4, 6, 1000, 10, 20], 10)\n  70\n  >>> sum([-10, 4, 6, 1000, 10, 20], 11)\n  80\n  >>> sum([-10, 4, 6, 1000, 10, 20], 12)\n  90\n  >>> sum([-10, 4, 6, 1000, 10, 20], 13)\n  100\n  >>> sum([-10, 4, 6, 1000, 10, 20], 14)\n  110\n  >>> sum([-10, 4, 6, 1000, 10, 20], 15)\n  120\n  >>> sum([-10, 4, 6, 1000, 10, 20], 16)\n  130\n  >>> sum([-10, 4, 6, 1000, 10, 20], 17)\n  140\n  >>> sum([-10, 4, 6, 1000, 10, 20], 18)\n  150\n  >>> sum([-10, 4, 6, 1000, 10, 20], 19)\n  160\n  >>> sum([-10, 4, 6, 1000, 10, 20], 20)\n  170\n  >>> sum([-10, 4, 6, 1000, 10, 20], 21)\n  180\n  >>> sum([-10, 4, 6, 1000, 10, 20], 22)\n  190\n  >>> sum([-10, 4, 6, 1000, 10, 20], 23)\n  200\n  >>> sum([-10, 4, 6, 1000, 10, 20], 24)\n  210\n  >>> sum([-10, 4, 6, 1000, 10, 20], 25)\n  220\n  >>> sum([-10, 4, 6, 1000, 10, 20], 26)\n  230\n  >>> sum([-10, 4, 6, 1000, 10, 20], 27)\n  240\n  >>> sum([-10, 4, 6, 1000, 10, 20], 28)\n  250\n  >>> sum([-10, 4, 6, 1000, 10, 20], 29)\n  260\n  >>> sum([-10, 4, 6, 1000, 10, 20], 30)\n  270\n  >>> sum([-10, 4, 6, 1000, 10, 20], 31)\n  280\n  >>> sum([-10, 4, 6, 1000, 10, 20], 32)\n  290\n  >>> sum([-10, 4, 6, 1000, 10, 20], 33)\n  300\n  >>> sum([-10, 4, 6, 1000, 10, 20], 34)\n  310\n  >>> sum([-10, 4, 6, 1000, 10, 20], 35)\n  320\n  >>> sum([-10, 4, 6, 1000, 10, 20], 36)\n  330\n  >>> sum([-10, 4, 6, 1000, 10, 20], 37)\n  340\n  >>> sum([-10, 4, 6, 1000, 10, 20],"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('a')\n  true\n  >>> is_palindrome('aa')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('bbaa')\n  true\n  >>> is_palindrome('ab')\n  false\n  >>> is_palindrome('abaa')\n  false\n  */\nconst is_palindrome_2 = (text) => {\n    return text.split('').reverse().join('') === text;\n};\n\nexport { is_palindrome, is_palindrome_2 };\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n % p\n  while (n >= p) {\n    n -= p\n  }\n  return n\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (str) => {\n  let encoded_string = \"\";\n  for (let i = 0; i < str.length; i++) {\n    encoded_string += encode_shift(str[i]);\n  }\n  return encoded_string;\n}\n\nconst decode = (str) => {\n  let decoded_string = \"\";\n  for (let i = 0; i < str.length; i++) {\n    decoded_string += decodeShift(str[i]);\n  }\n  return decoded_string;\n}\n\nexport default {\n  encode,\n  decode,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n    let r = '';\n    for (let i = 0; i < text.length; i++) {\n        if (text.charAt(i).charCodeAt(0) > 64 && text.charAt(i).charCodeAt(0) < 91) {\n            r += text.charAt(i);\n        }\n    }\n    return r;\n};\n\n//console.log(remove_vowels('aaBAA'));\n//console.log(remove_vowels('zbcd'));<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > t) {\n      return false\n    }\n    if (l[j] < t) {\n      j--\n    } else {\n      i++\n    }\n  }\n  return true\n}\n\nmodule.exports = below_threshold\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport { add };\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n    let i = 0;\n    let n = s0.length;\n    let j = 0;\n    let m = s1.length;\n\n    while (i < n && j < m) {\n        if (s0[i] === s1[j]) {\n            i++;\n            j++;\n        }\n        else if (s0[i] < s1[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return i === n && j === m;\n};\n\nmodule.exports = same_chars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let last_index = -1\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      if (last_index === -1) {\n        last_index = i\n      } else {\n        if (brackets[last_index]!== '>') {\n          return false\n        }\n      }\n    } else if (brackets[i] === '>') {\n      if (last_index === -1) {\n        last_index = i\n      } else {\n        if (brackets[last_index]!== '<') {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n//------------------------------------------------------------------------------\n\n/**\n  Returns a random valid bracketing.\n  This is the algorithm described in the original paper.\n\n  >>> random_bracketing(\"<>\")\n  '<>'\n  >>> random_bracketing(\"<\")\n  '<'\n  >>> random_bracketing(\">>\")\n  '>'\n  >>> random_bracketing(\"<>\")\n  '<>'\n  >>> random_bracketing(\"<><>\")\n  '<><>'\n  >>> random_bracketing(\"<><\")\n  '<><'\n  >>> random_bracketing(\"<><>\")\n  '<><>'\n  >>> random_bracketing(\"<><<>\")\n  '<><<>'\n  >>> random_bracketing(\"<><<>\")\n  '<><<>'\n  >>> random_bracketing(\"<><><>\")\n  '<><><>'\n  >>> random_bracketing(\"<><><><>\")\n  '<><><><>'\n  >>> random_bracketing(\"<><><><><>\")\n  '<><><><><>'\n  >>> random_bracketing(\"<><><><><><>\")\n  '<><><><><><>'\n  */\nconst random_bracketing = (brackets) => {\n  let current_bracket = brackets[0]\n  for (let i = 1; i < brackets.length; i++) {\n    if (brackets[i] === current_bracket) {\n      if (i === brackets.length - 1) {\n        return current_bracket\n      }\n      current_bracket = brackets[i + 1]\n    }\n  }\n  throw new Error(\"Cannot find bracketing\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (!Array.isArray(l)) {\n    return false;\n  }\n  if (l.length === 0) {\n    return false;\n  }\n  if (l.length === 1) {\n    return true;\n  }\n  if (l.length === 2) {\n    return l[0] < l[1];\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0;\n  let j = 0;\n  let c = 0;\n  const a = Array.from(l1);\n  const b = Array.from(l2);\n  const intersection = [];\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      intersection.push(a[i]);\n      c++;\n      i++;\n      j++;\n    } else if (a[i] < b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return intersection;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n    let p = 2;\n    while (p < n) {\n        while (n % p === 0) {\n            n = n / p;\n        }\n        p += 1;\n    }\n    return n;\n};\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * largest_factor(12)\n  * // => 6\n  */\nconst largest_factor = (n) => {\n    let p = largest_prime_factor(n);\n    return largest_factor(p);\n};\n\nexport { largest_prime_factor, largest_factor };\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 3\n  */\nconst sum_to_n_faster = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 4\n  */\nconst sum_to_n_faster2 = (n) => {\n  let sum = 0\n  for (let i = 2; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 5\n  */\nconst sum_to_n_faster3 = (n) => {\n  let sum = 0\n  for (let i = 3; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 6\n  */\nconst sum_to_n_faster4 = (n) => {\n  let sum = 0\n  for (let i = 4; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 7\n  */\nconst sum_to_n_faster5 = (n) => {\n  let sum = 0\n  for (let i = 5; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 8\n  */\nconst sum_to_n_faster6 = (n) => {\n  let sum = 0\n  for (let i = 6; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 9\n  */\nconst sum_to_n_faster7 = (n) => {\n  let sum = 0\n  for (let i = 7; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 10\n  */\nconst sum_to_n_faster8 = (n) => {\n  let sum = 0\n  for (let i = 8; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 11\n  */\nconst sum_to_n_faster9 = (n) => {\n  let sum = 0\n  for (let i = 9; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 12\n  */\nconst sum_to_n_faster10 = (n) => {\n  let sum = 0\n  for (let i = 10; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 13\n  */\nconst sum_to_n_faster11 = (n) => {\n  let sum = 0\n  for (let i = 11; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 14\n  */\nconst sum_to_n_faster12 = (n) => {\n  let sum = 0\n  for (let i = 12; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 15\n  */\nconst sum_to_n_faster13 = (n) => {\n  let sum = 0\n  for (let i = 13; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 16\n  */\nconst sum_to_n_faster14 = (n) => {\n  let sum = 0\n  for (let i = 14; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 17\n  */\nconst sum_to_n_faster15 = (n) => {\n  let sum = 0\n  for (let i = 15; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 18\n  */\nconst sum_to_n_faster16 = (n) => {\n  let sum = 0\n  for (let i = 16; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 19\n  */\nconst sum_to_n_faster17 = (n) => {\n  let sum = 0\n  for (let i = 17; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 20\n  */\nconst sum_to_n_faster18 = (n) => {\n  let sum = 0\n  for (let i = 18; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 21\n  */\nconst sum_to_n_faster19 = (n) => {\n  let sum = 0\n  for (let i = 19; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 22\n  */\nconst sum_to_n_faster20 = (n) => {\n  let sum = 0\n  for (let i = 20; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 23\n  */\nconst sum_to_n_faster21 = (n) => {\n  let sum = 0\n  for (let i = 21; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 24\n  */\nconst sum_to_n_faster22 = (n) => {\n  let sum = 0\n  for (let i = 22; i < n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Problem 25\n  */\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [].concat(brackets);\n  let stack_length = stack.length;\n  let index = stack_length - 1;\n  while (index >= 0) {\n    if (stack[index] === \")\") {\n      stack_length--;\n      if (stack_length === index) {\n        return false;\n      }\n    }\n    index--;\n  }\n  return stack_length === 0;\n};\n\nexport {\n  correct_bracketing,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const f = (x) => {\n    return xs[len - 1]\n  }\n  for (let i = 0; i < len - 1; i++) {\n    d[i] = f(xs[i])\n    d[i] = d[i] + f(xs[i + 1]) * (xs[i] - xs[i + 1])\n    d[i] = d[i] + f(xs[i + 1]) * (xs[i + 2] - xs[i])\n  }\n  d[len - 1] = f(xs[len - 1])\n  return d\n}\n\n/*\n  polynomial: array of numbers\n  returns: polynomial of the same form\n  \n  This is a \"wrapper\" around the \"f\" function that returns the\n  polynomial as a string.\n  \n  >>> print poly(polynomial)\n  [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n */\nconst poly = (xs) => {\n  return `[${xs.join(', ')}]`\n}\n\n/*\n  polynomial: string\n  returns: polynomial of the same form\n  \n  This is a \"wrapper\" around the \"f\" function that returns the\n  polynomial as a string.\n  \n  >>> print poly(polynomial)\n  [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n */\nconst poly = (xs) => {\n  return `[${xs.join(', ')}]`\n}\n\n/*\n  a: number\n  b: number\n  returns: number\n  \n  This is a \"wrapper\" around the \"f\" function that returns the\n  polynomial as a string.\n  \n  >>> poly(a, b)\n  [1, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 9801, 59049, 265721,\n   1319427, 6967289, 33488981, 16777216, 9227465, 48898291, 244888193, 125829123,\n   70368743, 37368789, 24151827, 15268897, 95366569, 57898361, 38743969, 28633233,\n   22254741, 16246093, 120795947, 86438279, 64516473, 464948899, 37351297, 30904525,\n   26954029, 23869571, 209469603, 183539175, 16786769]\n */\nconst poly = (a, b) => {\n  return `[${a}, ${b}]`\n}\n\n/*\n  a: number\n  b: number\n  returns: number\n  \n  This is a \"wrapper\" around the \"f\" function that returns the\n  polynomial as a string.\n  \n  >>> poly(a, b)\n  [1, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 9801, 59049, 265721,\n   1319427, 6967289, 33488981, 16777216, 9227465, 48898291, 244888193, 125829123,\n   70368743, 37368789, 24151827, 15268897, 95366569, 57898361, 38743969, 28633233,\n   22254741, 16246093, 120795947, 86438279, 64516473, 464948899, 37351297, 30904525,\n   26954029, 23869571, 209469603, 183539175, 16786769]\n */\nconst poly = (a, b) => {\n  return `[${a}, ${b}]`\n}\n\n/*\n  a: number\n  returns: number\n  \n  This is a \"wrapper\" around the \"f\" function that returns the\n  polynomial as a string.\n  \n  >>> poly(a)\n  [1, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 9801, 59049, 265721,\n   1319427, 6967289, 33488981, 16777216, 9227465, 48898291, 244888193, 125829123,\n   70368743, 37368789, 24151827, 15268897, 95366569, 57898361, 38743969, 28633233,\n   22254741, 16246093, 120795947, 86438279, 64516473, 464948899, 37351297, 30904525,\n   26954029, 23869571, 209469603, 183539175, 16786769]\n */\nconst poly = (a) => {\n  return `[${a}, 1]`\n}\n\n/*\n  a: number\n  returns: number\n  \n  This is a \"wrapper\" around the \"f\" function that returns the\n  polynomial as a string.\n  \n  >>> poly(a)\n  [1, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 9801, 59049, 265721,\n   1319427, 6967289, 33488981, 16777216, 9227465, 48898291, 244888193, 125829123,\n   70368743, 37368789, 24151827, 15268897, 95366569, 57898361, 38743969, 28633233,\n   22254741, 16246093, 120795947, 86438279, 64516473, 464948899, 37351297, 30904525,\n   "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0,\n    b = 1;\n\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n\n  return b;\n}\n\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let i = 0\n  let vowel = false\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowel = true\n    }\n    i++\n  }\n  if (vowel) {\n    if (s[s.length - 1] === 'y') {\n      return vowels_count(s.slice(0, s.length - 1)) + 1\n    }\n    return vowels_count(s.slice(1))\n  }\n  return 0\n}\n\nmodule.exports = vowels_count\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n    let res = x;\n    for (let i = 0; i < shift; i++) {\n        res = res * 10 + x % 10;\n    }\n    if (shift > 0) {\n        for (let i = 0; i < shift; i++) {\n            res = res / 10;\n        }\n    }\n    return res.toString();\n}\n\nconst test = () => {\n    const numbers = [1, 10, 100, 1000, 10000, 100000, 1000000];\n    for (const i of numbers) {\n        for (const j of numbers) {\n            if (i === j) {\n                console.log(`${i} === ${j}`);\n            } else if (i < j) {\n                console.log(`${i} < ${j}`);\n            } else {\n                console.log(`${i} > ${j}`);\n            }\n        }\n    }\n    console.log('\\n');\n    for (const i of numbers) {\n        for (const j of numbers) {\n            if (i === j) {\n                console.log(`${i} === ${j}`);\n            } else if (i < j) {\n                console.log(`${i} < ${j}`);\n            } else {\n                console.log(`${i} > ${j}`);\n            }\n        }\n    }\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0\n  s.split('').forEach(e => {\n    const x = e.charCodeAt(0)\n    sum += x - 97\n  })\n  return sum\n}\n\nmodule.exports = digit_sum\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const apples = s.split(\" \").map(e => parseInt(e, 10));\n  const oranges = apples.filter((a, i) => i < apples.length - 1).map(a => a + oranges[i + 1]);\n  const mango = apples.filter((a, i) => i < apples.length - 1).map(a => a + apples[i + 1]).filter((a, i) => a < n);\n\n  return mango.length;\n}\n\nexport default fruit_distribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr.length;\n  let minIndex = -1;\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min > arr[i]) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n\n  if (minIndex === -1) {\n    return [];\n  }\n\n  result.push(min);\n  result.push(minIndex);\n\n  return result;\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  const maxFrequency = {}\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] > max) {\n      max = lst[i]\n      maxFrequency[max] = 1\n    } else if(lst[i] === max) {\n      maxFrequency[max] += 1\n    }\n  }\n  for(let i = 0; i < lst.length; i++) {\n    if(maxFrequency[lst[i]] >= lst[i]) {\n      return lst[i]\n    }\n  }\n  return -1\n}\n\n/*\n  Given a positive integer, return the next larger number that can be written as the sum of the positive\n  integers in the list.\n  Examples:\n      nextLarger(1) == 2\n      nextLarger(4) == 5\n      nextLarger(6) == 7\n  */\nconst nextLarger = (num) => {\n  const lst = []\n  let i = 1\n  while(i <= num) {\n    lst.push(i)\n    i++\n  }\n  return search(lst)\n}\n\nconst solve = (n) => {\n  let a = 0\n  while(a <= n) {\n    let b = nextLarger(a)\n    if(b > n) {\n      return -1\n    }\n    a = b\n  }\n  return a\n}\n\nconsole.log(solve(10))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (lst.length === 0) return [];\n  const sorted_lst = lst.slice().sort((a, b) => a - b);\n  const reverse_lst = sorted_lst.slice().reverse();\n  return [...reverse_lst,...sorted_lst];\n};\n\n/*\n  Given list of integers, return list in reverse order.\n  Reverse sorting is when you start with the maximum value,\n  then minimum of the remaining integers, then maximum and so on.\n\n  Examples:\n  reverse_sort_list([1, 2, 3, 4]) == [4, 3, 2, 1]\n  reverse_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  reverse_sort_list([]) == []\n  */\nconst reverse_sort_list = (lst) => {\n  if (lst.length === 0) return [];\n  const sorted_lst = lst.slice().sort((a, b) => b - a);\n  const reverse_lst = sorted_lst.slice().reverse();\n  return [...reverse_lst,...sorted_lst];\n};\n\n/*\n  Given list of integers, return list in sorted order,\n  by adding one to the largest number first.\n\n  Examples:\n  add_one_to_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n  add_one_to_list([5, 5, 5, 5]) == [6, 7, 8, 9]\n  add_one_to_list([]) == []\n  */\nconst add_one_to_list = (lst) => {\n  if (lst.length === 0) return [];\n  const sorted_lst = lst.slice().sort((a, b) => a - b);\n  const reverse_lst = sorted_lst.slice().reverse();\n  const add_one_lst = [];\n  reverse_lst.forEach(item => add_one_lst.push(item + 1));\n  return [...add_one_lst,...sorted_lst];\n};\n\nconst main = () => {\n  const lst = [1, 2, 3, 4, 5, 6];\n  console.log(strange_sort_list(lst));\n  console.log(reverse_sort_list(lst));\n  console.log(add_one_to_list(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c) {\n    return -1;\n  }\n  if (b > c + a) {\n    return -1;\n  }\n  if (c > b + a) {\n    return -1;\n  }\n\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return Math.round(area * 100) / 100;\n};\n\nexport default triangle_area;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n    let is_palindrome = false;\n    let total = 0;\n    for(let i = 0; i < q.length / 2; i++) {\n        if(q[i]!== q[q.length - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n        total += q[i];\n    }\n    if(is_palindrome && total <= w) {\n        return true;\n    }\n    return false;\n};\n\n// Test\nconsole.log(will_it_fly([1, 2], 5));\nconsole.log(will_it_fly([3, 2, 3], 1));\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let smallest = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      j--;\n      smallest++;\n    } else if (arr[i] < arr[j]) {\n      i++;\n      smallest++;\n    } else {\n      j--;\n      k++;\n      if (k > smallest) {\n        smallest = k;\n      }\n    }\n  }\n  return smallest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n\n  if (lst1.length === 1 && lst2.length === 1) {\n    return lst1\n  }\n\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      break\n    }\n    result.push(lst1[i])\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a * a) && is_prime(a * a * a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the sum of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_add_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_add_prime = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a + a) && is_prime(a + a + a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the sum of three prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_add_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_add_prime_3 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a + a + a) && is_prime(a + a + a + a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the product of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime_2 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a * a) && is_prime(a * a * a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the product of three prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime_3 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a * a * a) && is_prime(a * a * a * a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the difference of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_difference_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_difference_prime = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a + a - a) && is_prime(a + a + a - a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the difference of three prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_difference_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_difference_prime_3 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a + a + a - a) && is_prime(a + a + a + a - a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the difference of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_difference_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_difference_prime_2 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a * a - a) && is_prime(a * a * a - a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the difference of three prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_difference_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_difference_prime_3_2 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a * a * a - a) && is_prime(a * a * a * a - a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the sum of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_add_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_add_prime_2 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a + a) && is_prime(a + a + a);\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the sum of three prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_add_prime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst is_add_prime_3_2 = (a) => {\n  if (is_prime(a)) {\n    return is_prime(a + a + a) && is_prime(a + a + a + a);\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  const a = x % n;\n  return a === 0 && (x / n === 1);\n};\n\nconst is_simple_power_test = [\n  [1, 4],\n  [2, 2],\n  [8, 2],\n  [3, 2],\n  [3, 1],\n  [5, 3],\n];\n\nfor (const [x, n] of is_simple_power_test) {\n  console.log(`${x} is ${is_simple_power(x, n)}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a % a === 0) return true\n  return false\n}\n\n// write your code here\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n    var num_len = num.length;\n    var num_chr = num.split('');\n    var prime_index = 0;\n    var prime_key = 2;\n    var prime_flag = true;\n    for (var i = 0; i < num_chr.length; i++) {\n        if (isPrime(parseInt(num_chr[i] + '', 16))) {\n            prime_index++;\n            if (prime_index == num_len) {\n                prime_key = parseInt(num_chr[i] + '', 16);\n                prime_flag = false;\n            }\n        }\n    }\n    if (prime_flag) {\n        prime_key = parseInt(num_chr[prime_index] + '', 16);\n        prime_flag = false;\n    }\n    return prime_key;\n}\n\nfunction isPrime(num) {\n    if (num == 2) {\n        return true;\n    } else if (num < 2) {\n        return false;\n    }\n    if (num % 2 == 0) {\n        return false;\n    }\n    for (var i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction prime_digit_count(num) {\n    var num_len = num.length;\n    var num_chr = num.split('');\n    var prime_index = 0;\n    var prime_key = 2;\n    var prime_flag = true;\n    for (var i = 0; i < num_chr.length; i++) {\n        if (isPrime(parseInt(num_chr[i] + '', 16))) {\n            prime_index++;\n            if (prime_index == num_len) {\n                prime_key = parseInt(num_chr[i] + '', 16);\n                prime_flag = false;\n            }\n        }\n    }\n    if (prime_flag) {\n        prime_key = parseInt(num_chr[prime_index] + '', 16);\n        prime_flag = false;\n    }\n    return prime_key;\n}\n\nconsole.log(hex_key('1077E'));\nconsole.log(prime_digit_count('1077E'));\nconsole.log(prime_digit_count('ABED1A33'));\nconsole.log(prime_digit_count('123456789ABCDEF0'));\nconsole.log(prime_digit_count('2020'));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  const binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + \"db\";\n};\n\n/*\n  Convert a binary number to decimal.\n\n  Examples:\n  binary_to_decimal(\"db1111db\") -> 15\n  binary_to_decimal(\"db100000db\") -> 32\n  */\nconst binary_to_decimal = (binary) => {\n  const decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += (binary.charAt(i) === \"1\")? 1 : 0;\n  }\n  return decimal;\n};\n\n/*\n  Convert a decimal number to binary.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_2 = (decimal) => {\n  const binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n// This is the interface that allows for creating nested commentaries\n/*\n  You are given a number in decimal form and you need to convert it to binary form.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_3 = (decimal) => {\n  const binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + \"db\";\n};\n\n// This is the interface that allows for creating nested commentaries\n/*\n  You are given a number in decimal form and you need to convert it to binary form.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_4 = (decimal) => {\n  const binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + \"db\";\n};\n\n// This is the interface that allows for creating nested commentaries\n/*\n  You are given a number in decimal form and you need to convert it to binary form.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_5 = (decimal) => {\n  const binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + \"db\";\n};\n\n// This is the interface that allows for creating nested commentaries\n/*\n  You are given a number in decimal form and you need to convert it to binary form.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_6 = (decimal) => {\n  const binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + \"db\";\n};\n\n// This is the interface that allows for creating nested commentaries\n/*\n  You are given a number in decimal form and you need to convert it to binary form.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_7 = (decimal) => {\n  const binary = \""}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n    let result = true;\n    for(let i = 0; i < s.length - 2; i++) {\n        if(s[i] === s[i + 1] && s[i + 2] === s[i + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconsole.log(is_happy('abc'));\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('abcd'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const len = grades.length\n  let grades_arr = []\n  for (let i = 0; i < len; i++) {\n    const gpa = grades[i]\n    let grade = 'E'\n    if (gpa > 3.7) {\n      grade = 'A'\n    } else if (gpa > 3.3) {\n      grade = 'B'\n    } else if (gpa > 3.0) {\n      grade = 'C'\n    } else if (gpa > 2.7) {\n      grade = 'D'\n    } else if (gpa > 2.3) {\n      grade = 'E'\n    } else if (gpa > 2.0) {\n      grade = 'F'\n    } else if (gpa > 1.7) {\n      grade = 'G'\n    } else if (gpa > 1.3) {\n      grade = 'H'\n    } else if (gpa > 1.0) {\n      grade = 'I'\n    }\n    grades_arr.push(grade)\n  }\n  return grades_arr\n}\n\n/*\n  The student has to write a function that returns a list of\n  the minimum and maximum GPA for all the students.\n  It has to return the list in the following format:\n      [min GPA, max GPA]\n\n  Example:\n  find_max_and_min_gpa([4, 3, 1.7, 2, 3.5]) ==> [4.0, 3.0]\n  */\nconst find_max_and_min_gpa = (grades) => {\n  const len = grades.length\n  let max_gpa = grades[0]\n  let min_gpa = grades[0]\n  for (let i = 1; i < len; i++) {\n    const gpa = grades[i]\n    if (gpa > max_gpa) {\n      max_gpa = gpa\n    }\n    if (gpa < min_gpa) {\n      min_gpa = gpa\n    }\n  }\n  return [min_gpa, max_gpa]\n}\n\n/*\n  The student has to write a function that returns the minimum GPA\n  for all the students.\n  It has to return the list in the following format:\n      min GPA\n\n  Example:\n  find_min_gpa([4, 3, 1.7, 2, 3.5]) ==> 4.0\n  */\nconst find_min_gpa = (grades) => {\n  const len = grades.length\n  let min_gpa = grades[0]\n  for (let i = 1; i < len; i++) {\n    const gpa = grades[i]\n    if (gpa < min_gpa) {\n      min_gpa = gpa\n    }\n  }\n  return min_gpa\n}\n\n/*\n  The student has to write a function that returns a list of\n  the GPA for all the students.\n  It has to return the list in the following format:\n      [GPA1, GPA2,..., GPAN]\n\n  Example:\n  gpa_list([4, 3, 1.7, 2, 3.5]) ==> [4.0, 3.0, 1.7, 2.0]\n  */\nconst gpa_list = (grades) => {\n  const len = grades.length\n  let gpa_list = []\n  for (let i = 0; i < len; i++) {\n    gpa_list.push(grades[i])\n  }\n  return gpa_list\n}\n\n/*\n  The student has to write a function that returns the\n  GPA for the students with the maximum GPA.\n  It has to return the list in the following format:\n      max GPA\n\n  Example:\n  find_max_gpa(gpa_list) ==> 3.5\n  */\nconst find_max_gpa = (grades) => {\n  const len = grades.length\n  let max_gpa = grades[0]\n  for (let i = 1; i < len; i++) {\n    const gpa = grades[i]\n    if (gpa > max_gpa) {\n      max_gpa = gpa\n    }\n  }\n  return max_gpa\n}\n\n/*\n  The student has to write a function that returns the\n  GPA for the students with the minimum GPA.\n  It has to return the list in the following format:\n      min GPA\n\n  Example:\n  find_min_gpa(gpa_list) ==> 2.0\n  */\nconst find_min_gpa = (grades) => {\n  const len = grades.length\n  let min_gpa = grades[0]\n  for (let i = 1; i < len; i++) {\n    const gpa = grades[i]\n    if (gpa < min_gpa) {\n      min_gpa = gpa\n    }\n  }\n  return min_gpa\n}\n\n/*\n  The student has to write a function that returns a list of\n  the minimum and maximum GPA for all the students.\n  It has to return the list in the following format:\n      [min GPA, max GPA]\n\n  Example:\n  gpa_list_max_min([4, 3, 1.7, 2, 3.5]) ==> [2"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  const n = parseInt(string)\n  if (n <= 1) return false\n\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns the length of the longest\ncommon prefix. The function should return -1 if the string has no common\nprefix.\n*/\nconst longest_common_prefix = (string) => {\n  if (string.length === 0) return 0\n\n  let prefix = ''\n  let max = 0\n\n  for (let i = 0; i < string.length; i++) {\n    let sub = string.slice(i)\n    if (sub.length === 0) break\n\n    let sub_prefix = longest_common_prefix(sub)\n    if (sub_prefix === -1) return -1\n    if (sub_prefix > max) {\n      max = sub_prefix\n      prefix = sub\n    }\n  }\n  return prefix.length\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix. The function should return false if the strings do not have the same\nprefix.\n*/\nconst same_prefix = (string1, string2) => {\n  return longest_common_prefix(string1) === longest_common_prefix(string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nsuffix. The function should return false if the strings do not have the same\nsuffix.\n*/\nconst same_suffix = (string1, string2) => {\n  return longest_common_prefix(string1) === longest_common_prefix(string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix and suffix. The function should return false if the strings do not have\nthe same prefix or suffix.\n*/\nconst same_prefix_and_suffix = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix_and_suffix_and_contents = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n    && same_contents(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix_and_suffix_and_contents_with_hyphens = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix_and_suffix_and_contents_with_underscores = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix_and_suffix_and_contents_with_hyphens_and_underscores = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix_and_suffix_and_contents_with_hyphens_and_underscores_with_hyphens = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix_and_suffix_and_contents_with_hyphens_and_underscores_with_underscores = (string1, string2) => {\n  return same_prefix(string1, string2) && same_suffix(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n    && same_contents(string1, string2)\n}\n\n/*\nWrite a function that takes two strings and returns true if they have the same\nprefix, suffix, and contents. The function should return false if the strings do\nnot have the same prefix, suffix, or contents.\n*/\nconst same_prefix"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i < 10) {\n      res += 1\n    } else {\n      if (i % 10 === 1) {\n        res += 1\n      }\n      i -= i % 10\n    }\n  }\n  return res\n}\n\nconst starts_one_ends_one = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_two = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_three = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_four = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_five = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_six = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111 && i % 1000000!== 111111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_seven = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111 && i % 1000000!== 111111 && i % 10000000!== 1111111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_eight = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111 && i % 1000000!== 111111 && i % 10000000!== 1111111 && i % 100000000!== 1111111111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_nine = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111 && i % 1000000!== 111111 && i % 10000000!== 1111111 && i % 100000000!== 1111111111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_ten = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111 && i % 1000000!== 111111 && i % 10000000!== 1111111 && i % 100000000!== 1111111111 && i % 1000000000!== 11111111111111111111111) {\n      res += 1\n    }\n    i -= i % 10\n  }\n  return res\n}\n\nconst starts_one_ends_eleven = (n) => {\n  let res = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 && i % 100!== 11 && i % 1000!== 111 && i % 10000!== 1111 && i % 100000!== 11111 && i % 1000000!== 111111 && i % 10000000!== 1111111 && i % 100000000!== 1111111111 && i % 1000000000!== 11111111111111111111111 && i}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const num = N.toString(2).split('');\n    const str = '';\n    for (let i = 0; i < num.length; i++) {\n        str += num[i];\n    }\n    return str;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    res += lst[i];\n  }\n  return res;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let arr = s.split(' ');\n  let s_arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let s_arr_str = arr[i];\n    let arr_str = s_arr_str.split('');\n    for (let j = 0; j < arr_str.length; j++) {\n      if (is_valid_char(arr_str[j])) {\n        s_arr.push(arr_str[j]);\n      }\n    }\n  }\n  return s_arr.join(' ');\n}\n\nconst is_valid_char = (c) => {\n  return c!=='';\n}\n\n//console.log(anti_shuffle('Hi'));\n//console.log(anti_shuffle('hello'));\n//console.log(anti_shuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  let l = lst.length\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < l) {\n    let row = lst[i]\n    if (row) {\n      let row_length = row.length\n      while (j < row_length) {\n        res.push((x, row[j]))\n        j++\n      }\n    }\n    i++\n  }\n  res.sort((a, b) => a[0] - b[0])\n  let r = []\n  for (let i = 0; i < res.length; i++) {\n    r.push(res[i][1])\n  }\n  r.sort((a, b) => b - a)\n  return r\n}\n\n/*\n  Given a nested list, return a list of elements in the list\n  where the elements are sorted in ascending order.\n  \n  Examples:\n  get_sorted_list([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ]) == [1, 1, 1, 2, 2, 3, 4, 5, 6]\n  get_sorted_list([]) == []\n  get_sorted_list([[], [1], [1, 2, 3]]) == [1, 1, 2, 3]\n  */\nconst get_sorted_list = lst => {\n  let l = lst.length\n  let res = []\n  let i = 0\n  while (i < l) {\n    let row = lst[i]\n    if (row) {\n      let row_length = row.length\n      res.push(row[0])\n      while (i < l) {\n        let row2 = lst[i]\n        if (row2) {\n          res.push(row2[0])\n          i++\n        } else {\n          break\n        }\n      }\n    }\n    i++\n  }\n  return res\n}\n\nconst get_row_and_sorted_list = (lst, x) => {\n  let l = lst.length\n  let res = []\n  let i = 0\n  while (i < l) {\n    let row = lst[i]\n    if (row) {\n      let row_length = row.length\n      res.push((x, row[0]))\n      while (i < l) {\n        let row2 = lst[i]\n        if (row2) {\n          res.push((x, row2[0]))\n          i++\n        } else {\n          break\n        }\n      }\n    }\n    i++\n  }\n  res.sort((a, b) => a[0] - b[0])\n  return res\n}\n\n/*\n  Given a 2 dimensional data, a nested list,\n  find the largest row sum\n  \n  Examples:\n  get_largest_row_sum([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ], 0) == 10\n  get_largest_row_sum([[], [1], [1, 2, 3]], 1) == 7\n  get_largest_row_sum([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == 15\n  */\nconst get_largest_row_sum = (lst, row_index) => {\n  let l = lst.length\n  let res = 0\n  let i = 0\n  while (i < l) {\n    let row = lst[i]\n    if (row) {\n      let row_length = row.length\n      let sum = 0\n      for (let j = 0; j < row_length; j++) {\n        sum += row[j]\n      }\n      if (row_index == 0) {\n        if (sum > res) {\n          res = sum\n        }\n      } else {\n        if (sum < res) {\n          res = sum\n        }\n      }\n      i++\n    }\n  }\n  return res\n}\n\nconst get_largest_sum = (lst) => {\n  let l = lst.length\n  let res = 0\n  let i = 0\n  while (i < l) {\n    let row = lst[i]\n    if (row) {\n      let row_length = row.length\n      let sum = 0\n      for (let j = 0; j < row_length; j++) {\n        sum += row[j]\n      }\n      if (sum > res) {\n        res = sum\n      }\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given a 2 dimensional data, a nested list,\n  find the largest column sum\n  \n  Examples:\n  get_largest_column_sum([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  "}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let copy = [...array];\n  return copy.sort((a, b) => {\n    const sum = a + b;\n    return sum % 2? a - b : b - a;\n  });\n};\n\nexport default sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = [...s]\n  let shifted = alphabet.shift()\n  let rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet.pop()\n  rotated = alphabet.push(shifted)\n  rotated = alphabet."}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  const min = lst[0]\n  let i = 1\n  while (i < lst.length) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    i++\n  }\n  return min\n}\n\n/*\n  Write a function that sorts a list of strings in place.\n  Use a comparison function to compare two strings.\n  If the comparison function returns 0, the elements are considered equal.\n  The comparison function must not modify the original list.\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\" ])\n  \n  [ \"B\", \"A\", \"D\", \"C\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\" ])\n  \n  [ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\" ]\n  \n  sort_in_place([ \"A\", \"C\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const [s] = S.split('');\n  const count = s.length > 0 && s.charAt(0) === 'I';\n  return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return x >= y && x >= z && x === y + z;\n}\n\nexport default any_int;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    // return message.replace(/([a-z]|[A-Z])/g, function(letter) {\n    //     if (letter === letter.toLowerCase()) {\n    //         return letter.toUpperCase();\n    //     } else {\n    //         return letter.toLowerCase();\n    //     }\n    // });\n    return message.replace(/([a-z]|[A-Z])/g, function(letter) {\n        if (letter === letter.toUpperCase()) {\n            return letter.toLowerCase();\n        } else {\n            return letter.toUpperCase();\n        }\n    });\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const digits = []\n  let largest = 1\n  let sum = 0\n\n  //Find largest prime number\n  for (let i = 0; i < lst.length; i++) {\n    let prime = 0\n    let temp = parseInt(lst[i])\n    let start = 0\n    let end = temp\n    let loop = 1\n    while (start <= end) {\n      let mid = (start + end) / 2\n      if (mid % 2 === 1) {\n        end = mid - 1\n      } else {\n        start = mid + 1\n      }\n      if (prime <= start) {\n        prime = start\n      }\n      if (prime > end) {\n        break\n      }\n      loop += 1\n    }\n    if (prime > largest) {\n      largest = prime\n    }\n  }\n\n  //Find sum of digits of largest prime number\n  for (let i = 0; i < largest; i++) {\n    digits[i] = lst.length\n  }\n  for (let i = largest; i < lst.length; i++) {\n    digits[i] = sum % 10\n    sum = sum / 10\n  }\n  for (let i = largest; i < lst.length; i++) {\n    sum += parseInt(lst[i]) * digits[i]\n  }\n  return sum\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]))\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  const keys = Object.keys(dict)\n  let result = true\n  for(let i = 0; i < keys.length; i++) {\n    if(!isString(keys[i])){\n      return false\n    }\n    if(keys[i].length > 1 && keys[i].toLowerCase()!== keys[i]) {\n      result = false\n    }\n  }\n  return result\n}\n\nconst check_dict_case_no_keys = (dict) => {\n  let result = true\n  if(dict.length === 0) {\n    return false\n  }\n  for(let i = 0; i < dict.length; i++) {\n    if(!isString(dict[i])) {\n      return false\n    }\n    if(dict[i].length > 1 && dict[i].toLowerCase()!== dict[i]) {\n      result = false\n    }\n  }\n  return result\n}\n\nconst check_dict_case_empty = (dict) => {\n  let result = true\n  if(dict.length === 0) {\n    return true\n  }\n  for(let i = 0; i < dict.length; i++) {\n    if(!isString(dict[i])) {\n      return false\n    }\n    if(dict[i].length > 1 && dict[i].toLowerCase()!== dict[i]) {\n      result = false\n    }\n  }\n  return result\n}\n\nconst isString = (str) => {\n  if(typeof str ==='string') {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = {\n  check_dict_case,\n  check_dict_case_no_keys,\n  check_dict_case_empty\n}<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  if (n === 0) {\n    return []\n  }\n\n  let arr = []\n  for (let i = 2; i <= Math.ceil(Math.sqrt(n)); i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        n = n / i\n      }\n      arr.push(i)\n    }\n  }\n\n  if (n > 1) {\n    arr.push(n)\n  }\n\n  return arr\n}\n\nconsole.log(count_up_to(10))\n\n/*\nImplement a function that takes a number n and returns a string of the first n\ncharacters of the number represented as a string.\nfor example:\nfirst_n(1) => \"1\"\nfirst_n(3) => \"3\"\nfirst_n(4) => \"12\"\nfirst_n(100) => \"236789\"\nfirst_n(999) => \"236789\"\nfirst_n(2000) => \"236789\"\nfirst_n(1000000) => \"236789\"\nfirst_n(100000000) => \"236789\"\n*/\nconst first_n = (n) => {\n  const str = []\n  for (let i = 0; i < n; i++) {\n    str.push(Math.floor(Math.random() * 10))\n  }\n  return str.join('')\n}\n\nconsole.log(first_n(1))\nconsole.log(first_n(3))\nconsole.log(first_n(4))\nconsole.log(first_n(100))\nconsole.log(first_n(999))\nconsole.log(first_n(2000))\nconsole.log(first_n(1000000))\nconsole.log(first_n(10000000))\nconsole.log(first_n(100000000))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return b\n  }\n  if (b === 1) {\n    return a\n  }\n  if (a < 0) {\n    a = -a\n  }\n  if (b < 0) {\n    b = -b\n  }\n  let a_unit = a % 10\n  let b_unit = b % 10\n  let result = multiply(a_unit, b_unit)\n  return result\n}\n\nconsole.log(multiply(148, 412))\nconsole.log(multiply(19, 28))\nconsole.log(multiply(2020, 1851))\nconsole.log(multiply(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 1\n  count_vowels('abcdefg') returns 1\n  count_vowels('dBBE') returns 2\n  */\nconst count_vowels = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 3\n  */\nconst count_consonants_odd = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 2\n  count_vowels('abcdefg') returns 1\n  count_vowels('dBBE') returns 3\n  */\nconst count_vowels_odd = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of consonants in the middle of s.\n  \n  For example:\n  count_middle_consonants('aBCdEf') returns 1\n  count_middle_consonants('abcdefg') returns 1\n  count_middle_consonants('dBBE') returns 0\n  */\nconst count_middle_consonants = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of vowels in the middle of s.\n  \n  For example:\n  count_middle_vowels('aBCdEf') returns 1\n  count_middle_vowels('abcdefg') returns 1\n  count_middle_vowels('dBBE') returns 1\n  */\nconst count_middle_vowels = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of consonants in the middle of s.\n  \n  For example:\n  count_middle_consonants('aBCdEf') returns 1\n  count_middle_consonants('abcdefg') returns 1\n  count_middle_consonants('dBBE') returns 1\n  */\nconst count_middle_consonants_odd = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of vowels in the middle of s.\n  \n  For example:\n  count_middle_vowels('aBCdEf') returns 1\n  count_middle_vowels('abcdefg') returns 1\n  count_middle_vowels('dBBE') returns 2\n  */\nconst count_middle_vowels_odd = (s) => {\n  const result = [];\n  for (let i = 1; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of consonants in the middle of s.\n  \n  For example:\n  count_middle_consonants('aBCdEf') returns 1\n  count_middle_consonants('abcdefg') returns 1\n  count_middle_consonants('dBBE') returns 1\n  */\nconst count_middle_consonants_even = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 2) {\n    result.push(s.charAt(i).toUpperCase());\n  }\n  return result;\n}\n\n/*\n  Given a string s, count the number of vowels in the middle of s.\n  \n  For example:\n  count_middle_vowels('aBCdEf') returns 1\n  count_middle_vowels('abcdefg') returns 1\n  count_middle_vowels('dBBE') returns 1\n  */\nconst"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n    const int_part = parseInt(value, 10);\n    const float_part = parseFloat(value);\n    let closest_int = int_part;\n\n    if (Math.abs(int_part - float_part) < Math.abs(closest_int - float_part)) {\n        closest_int = int_part;\n    }\n\n    return closest_int;\n};\n\nexport default closest_integer;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let levels = []\n  while (n > 0) {\n    const n1 = n - 1\n    const n2 = n1 - 1\n    let stone = n1\n    if (stone % 2 === 1) {\n      stone = n2\n    }\n    levels.push(stone)\n    n -= 1\n  }\n  return levels\n}\n\n// @see https://en.wikipedia.org/wiki/Ceiling_function\nconst ceiling = (n) => {\n  return (Math.ceil(n) || n)\n}\n\nexport default {\n  make_a_pile,\n  ceiling\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n    const split = (s) => s.split('');\n    return split(s);\n};\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbers_string(\"1, 2, 3, 4, 5\") == [1, 2, 3, 4, 5]\n  numbers_string(\"1, 2, 3, 4, 5\") == [1, 2, 3, 4, 5]\n  numbers_string(\"1, 2, 3, 4, 5\") == [1, 2, 3, 4, 5]\n  */\nconst numbers_string = (s) => {\n    const split = (s) => s.split('');\n    return split(s);\n};\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbers_string(\"1, 2, 3, 4, 5\") == [1, 2, 3, 4, 5]\n  numbers_string(\"1, 2, 3, 4, 5\") == [1, 2, 3, 4, 5]\n  numbers_string(\"1, 2, 3, 4, 5\") == [1, 2, 3, 4, 5]\n  */\nconst string_of_numbers = (s) => {\n    const split = (s) => s.split('');\n    return split(s);\n};\n\nconst words = words_string('One, two, three, four, five, six');\nconst numbers = numbers_string('1, 2, 3, 4, 5');\nconst string_of_numbers = string_of_numbers('1, 2, 3, 4, 5');\n\nconst string_of_words = (s) => words_string(s);\nconst string_of_numbers = (s) => numbers_string(s);\n\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\nconsole.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_words(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(string_of_numbers(\"1, 2, 3, 4, 5\"));\n//console.log(words(\"1, 2, 3, 4, 5\")"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  const x_i = x;\n  const y_i = y;\n  const len = x_i - y_i + 1;\n  const x_i_mod_2 = x_i % 2;\n  const y_i_mod_2 = y_i % 2;\n  const result = (x_i_mod_2 === y_i_mod_2)? x_i : -1;\n\n  return result;\n}\n\nexport default choose_num;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  const n_max = Math.floor(n);\n  const m_min = Math.floor(m);\n  const n_min = Math.ceil(n);\n  const m_max = Math.ceil(m);\n  const sum = (n_max - n_min) + (m_max - m_min);\n  const half = sum / 2;\n  const round_sum = Math.round(sum);\n  const n_half = n_min + half;\n  const m_half = m_min + half;\n  let n_sum = 0;\n  let m_sum = 0;\n  let num = 0;\n  for (let i = n_half; i <= m_half; i++) {\n    n_sum += i;\n  }\n  for (let i = n_half; i <= m_half; i++) {\n    m_sum += i;\n  }\n  num = n_sum * m_sum;\n  num = Math.round(num);\n  return num;\n}\n\nmodule.exports = rounded_avg;<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const ret = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue;\n    }\n    ret.push(x[i]);\n  }\n  return ret;\n};\n\n//TODO: test\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  let sorted = arr.sort((a, b) => a - b)\n  let reverse = sorted.reverse()\n  let digit_name_map = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine'\n  }\n  return reverse.map(n => digit_name_map[n])\n}\n\nconst get_arr = (arr) => {\n  return by_length(arr)\n}\n\nconst test = (arr) => {\n  console.log(get_arr(arr))\n}\n\ntest([1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n/*\n  Given an array of ints, return the sum of the numbers in the array.\n\n  Examples:\n    arr = [1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return 15\n    arr = []\n    return 0\n*/\nconst sum = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst test_sum = (arr) => {\n  console.log(sum(arr))\n}\n\ntest([1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n/*\n  Given an array of ints, return the largest number in the array.\n\n  Examples:\n    arr = [1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return 9\n    arr = []\n    return 0\n*/\nconst largest = (arr) => {\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return max\n}\n\nconst test_largest = (arr) => {\n  console.log(largest(arr))\n}\n\ntest([1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n/*\n  Given an array of ints, return the smallest number in the array.\n\n  Examples:\n    arr = [1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return 1\n    arr = []\n    return 0\n*/\nconst smallest = (arr) => {\n  let min = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return min\n}\n\nconst test_smallest = (arr) => {\n  console.log(smallest(arr))\n}\n\ntest([1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n/*\n  Given an array of ints, return the product of the numbers in the array.\n\n  Examples:\n    arr = [1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return 720\n    arr = []\n    return 0\n*/\nconst product = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\nconst test_product = (arr) => {\n  console.log(product(arr))\n}\n\ntest([1, 3, 2, 4, 8, 9, 7, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * factorial(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  return (n <= 1)? 1 : n * factorial(n - 1);\n};\n\nmodule.exports = f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  let counter = 0;\n  let odd = 0;\n  let even = 0;\n  let half = 0;\n  while (half <= n) {\n    half += 1;\n    if (is_palindrome(half)) {\n      counter += 1;\n      if (half % 2 === 0) {\n        even += 1;\n      } else {\n        odd += 1;\n      }\n    }\n  }\n  return [counter, even, odd];\n};\n\nexport default even_odd_palindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  arr.forEach((val) => {\n    if (val > 0) {\n      const abs = Math.abs(val);\n      const sum = abs.toString().split('').reduce((sum, digit) => {\n        const isNegative = parseInt(digit) < 0;\n        return sum + (isNegative? parseInt(digit) * Math.pow(-1, abs) : digit);\n      }, 0);\n      if (sum > 0) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  const len = arr.length\n  if(len <= 1) return true\n  const start = arr[len - 1]\n  const min = start\n  let i = 0\n  while(i < len - 1) {\n    arr[i] = arr[i + 1]\n    if(arr[i] < min) {\n      min = arr[i]\n      i = 0\n    } else {\n      i++\n    }\n  }\n  arr[i] = min\n  return (arr.every(x => x > min))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (!lst1 ||!lst2) return false;\n  if (lst1.length!== lst2.length) return false;\n\n  let i = 0,\n    j = 0,\n    index = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2!== lst2[j] % 2) return false;\n    i++;\n    j++;\n    index++;\n  }\n  return true;\n};\n\nconst _ = require('underscore');\nconst expect = require('chai').expect;\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\n\ndescribe('Exchange', () => {\n  it('return \"YES\" when lst1 is an even list and lst2 is an even list', () => {\n    expect(exchange(lst1, lst2)).to.equal('YES');\n  });\n\n  it('return \"NO\" when lst1 is an even list and lst2 is not an even list', () => {\n    expect(exchange(lst1, lst2)).to.equal('NO');\n  });\n\n  it('return \"YES\" when lst1 is not an even list and lst2 is an even list', () => {\n    expect(exchange(lst1, lst2)).to.equal('YES');\n  });\n\n  it('return \"NO\" when lst1 is not an even list and lst2 is not an even list', () => {\n    expect(exchange(lst1, lst2)).to.equal('NO');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const chars = test.split(' ')\n  chars.forEach((char, index) => {\n    if(histogram.hasOwnProperty(char)) {\n      histogram[char]++\n    } else {\n      histogram[char] = 1\n    }\n  })\n  return histogram\n}\n\nconst letterCount = (test) => {\n  const chars = test.split(' ')\n  const histogram = {}\n  chars.forEach((char, index) => {\n    if(histogram.hasOwnProperty(char)) {\n      histogram[char]++\n    } else {\n      histogram[char] = 1\n    }\n  })\n  return histogram\n}\n\nconst maxLetter = (histogram) => {\n  const maxCount = Object.keys(histogram).sort()[0]\n  return histogram[maxCount]\n}\n\nconst test = histogram('a b c')\nconsole.log(maxLetter(test))\n\ntest = histogram('a b c a b')\nconsole.log(maxLetter(test))\n\ntest = histogram('b b b b a')\nconsole.log(maxLetter(test))\n\ntest = histogram('')\nconsole.log(maxLetter(test))\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  const new_s = s.replace(new RegExp(`[${c}]`, 'g'), '');\n  const new_c = new_s.split('').reverse().join('');\n  return [new_s, new_c === s];\n};\n\nconst reverse = (s) => {\n  return new RegExp(`[${s}]`, 'g').split('').reverse().join('');\n};\n\nconst check_palindrome = (s) => {\n  const [c, is_palindrome] = reverse_delete(s, s);\n  return is_palindrome;\n};\n\nconst test = (s, c) => {\n  console.log(`Input: ${s} ${c}`);\n  const [s_r, c_r] = reverse_delete(s, c);\n  console.log(`Output: ${s_r} ${c_r}`);\n  console.log(`Is Palindrome: ${check_palindrome(s)}`);\n};\n\ntest('abcdef', 'ae');\ntest('abcdedcba', 'ab');\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let ret = [], n = 0, p = 0, i = 0, j = 0;\n\n  for (i = 0; i < lst.length; i++) {\n    n = lst[i].length;\n    while (n--) {\n      p = lst[i].indexOf(parseInt(n), p);\n      if (p === -1) {\n        break;\n      }\n      j++;\n      p++;\n    }\n    if (p === -1) {\n      ret.push(i + 1);\n    } else {\n      ret.push(j);\n    }\n  }\n  return ret;\n};\n\nmodule.exports = odd_count;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let current_sum = 0;\n  let min_sum = null;\n  let min_sum_index = null;\n  for(let i = 0; i < nums.length; i++) {\n    current_sum += nums[i];\n    if(min_sum === null || current_sum < min_sum) {\n      min_sum = current_sum;\n      min_sum_index = i;\n    }\n  }\n  return min_sum_index;\n};\n\n// console.log(min_sub_array_sum([2, 3, 4, 1, 2, 4]));\n// console.log(min_sub_array_sum([-1, -2, -3]));<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const row_size = grid.length\n  const column_size = grid[0].length\n  const max_row = row_size - 1\n\n  // a list of row numbers, the first number is the current row number\n  const row_fill = []\n\n  // a list of column numbers, the first number is the current column number\n  const column_fill = []\n\n  // a list of row numbers, the first number is the current row number\n  const current_row = 0\n  \n  // a list of column numbers, the first number is the current column number\n  const current_column = 0\n\n  // the current row index\n  let row_index = 0\n\n  // the current column index\n  let column_index = 0\n\n  // initialize row fill list\n  row_fill.push(row_index)\n\n  // initialize column fill list\n  column_fill.push(column_index)\n\n  // initialize row number list\n  let current_row_number = 0\n\n  // initialize column number list\n  let current_column_number = 0\n\n  // initialize index\n  let index = 0\n\n  while (row_fill.length > 0) {\n    row_index = row_fill.pop()\n    column_index = column_fill.pop()\n\n    // current row\n    if (row_index > current_row) {\n      current_row = row_index\n      current_row_number = current_row_number + 1\n\n      // new row\n      if (current_row_number > row_size) {\n        row_fill.push(row_index)\n        row_index = row_index - 1\n        column_fill.push(column_index)\n        column_index = column_index - 1\n        current_row_number = 0\n      }\n    }\n\n    // current column\n    if (column_index > current_column) {\n      current_column = column_index\n      current_column_number = current_column_number + 1\n\n      // new column\n      if (current_column_number > column_size) {\n        column_fill.push(column_index)\n        column_index = column_index - 1\n        current_column_number = 0\n      }\n    }\n\n    // if current row is not zero, the current row should be filled with the index\n    if (row_index > 0) {\n      index = index + 1\n      if (grid[row_index][column_index] == 1) {\n        grid[row_index][column_index] = index\n      }\n    }\n  }\n\n  // the final row index\n  index = index + 1\n  if (grid[row_size - 1][column_size - 1] == 1) {\n    grid[row_size - 1][column_size - 1] = index\n  }\n\n  return grid\n}\n\nconst grid = [\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1]\n]\n\nconst capacity = 1\nconst expected = 6\n\nconsole.log(max_fill(grid, capacity))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    sorted.push(arr[i]);\n  }\n  sorted.sort((a, b) => {\n    if (a < b) return 1;\n    if (a > b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n// console.log(sort_array([1, 5, 2, 3, 4])); // [1, 2, 3, 4, 5]\n// console.log(sort_array([-2, -3, -4, -5, -6])); // [-6, -5, -4, -3, -2]\n// console.log(sort_array([1, 0, 2, 3, 4])); //[0, 1, 2, 3, 4]\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const words = s.split('').filter((c) => c.match(/\\w/))\n  const words_list = []\n  words.forEach((word) => {\n    let n_consonants = 0\n    let index = 0\n    while(n_consonants < n && index < word.length) {\n      if(word[index].match(/[a-z]/i)) {\n        n_consonants++\n      }\n      index++\n    }\n    if(n_consonants == n) {\n      words_list.push(word)\n    }\n  })\n  return words_list\n}\n\n/*Given a string s and a non-empty string p, you have been tasked to implement a \n  function that returns true if the string s contains all the substrings that p \n  contains.\n  Examples:\n  substring_in(\"word\", \"red\") ==> true\n  substring_in(\"pant\", \"ants\") ==> true\n  substring_in(\"red\", \"red\") ==> true\n  substring_in(\"red\", \"pant\") ==> false\n  substring_in(\"red\", \"red green\") ==> false\n  substring_in(\"red\", \"red green blue\") ==> false\n  substring_in(\"red green\", \"green\") ==> true\n  substring_in(\"red green\", \"red green\") ==> true\n  substring_in(\"red green\", \"red green blue\") ==> false\n  substring_in(\"red green blue\", \"green\") ==> true\n  substring_in(\"red green blue\", \"red green\") ==> true\n  substring_in(\"red green blue\", \"red green blue\") ==> true\n  substring_in(\"red green blue\", \"red green blue red\") ==> false\n  substring_in(\"red green blue red\", \"red green blue red\") ==> true\n  substring_in(\"red green blue red\", \"red green blue red green\") ==> false\n  substring_in(\"red green blue red\", \"red green blue red green\") ==> true\n  */\nconst substring_in = (s, p) => {\n  const string_length = s.length\n  const p_length = p.length\n  const all_substrings = s.split('').map(str => str.split('').map(str => str))\n  let result = true\n  all_substrings.forEach((substrings) => {\n    for(let i = 0; i < p_length; i++) {\n      if(substrings.find((substring) => p[i] == substring[0]) === undefined) {\n        result = false\n        return\n      }\n    }\n  })\n  return result\n}\n\n/*Given a string s, you have been tasked to implement a function that returns true \n  if s is a palindrome.\n  Example:\n  is_palindrome(\"A man, a plan, a canal-Panama\") ==> true\n  is_palindrome(\"race a car\") ==> false\n  is_palindrome(\"race a car a\") ==> false\n  is_palindrome(\"race a car\") ==> true\n  is_palindrome(\"race a car\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  is_palindrome(\"race a car\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  is_palindrome(\"race a car a\") ==> true\n  */\nconst is_palindrome = (s) => {\n  const length = s.length\n  let half_length = Math.floor(length / 2)\n  let left_half = s.slice(0, half_length)\n  let right_half = s.slice(half_length)\n  return (left_half === right_half)\n}\n\nconst is_palindrome = (s) => {\n  const length = s.length\n  let half_length = Math.floor(length / 2)\n  let left_half = s.slice(0, half_length)\n  let right_half = s.slice(half_length)\n  let mid_half = s.slice(half_length)\n  return (left_half === right_half)\n}\n\nconst is_palindrome = (s) => {\n  const length = s.length\n  let half_length = Math.floor(length / 2)\n  let left_half = s.slice(0, half_length)\n  let right_half = s.slice(half_length)\n  return (left_half === right_half)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  const words = word.split(' ');\n  for (let i = words.length - 2; i >= 0; i--) {\n    if (vowel_check(words[i + 1], words[i])) {\n      return words[i + 1];\n    }\n  }\n  return '';\n};\n\nconst vowel_check = (letter1, letter2) => {\n  return (letter1 === letter2) || (letter1 === 'a' && letter2 === 'e') ||\n    (letter1 === 'e' && letter2 === 'a') || (letter1 === 'i' && letter2 === 'o') ||\n    (letter1 === 'o' && letter2 === 'i') || (letter1 === 'u' && letter2 === 'u') ||\n    (letter1 === 'u' && letter2 === 'y') || (letter1 === 'y' && letter2 === 'u') ||\n    (letter1 === 'y' && letter2 === 'y');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let is_good = false;\n\n  for (let i = 0; i < lst.length - 1; i += 2) {\n    if (lst[i] === '(' && lst[i + 1] === ')') {\n      is_good = true;\n      break;\n    }\n  }\n\n  if (is_good) {\n    for (let i = 0; i < lst.length - 1; i += 2) {\n      if (lst[i] === ')' && lst[i + 1] === '(') {\n        return 'No';\n      }\n    }\n  }\n\n  return 'Yes';\n};\n\n// TEST\n\nconsole.log(match_parens([]));\nconsole.log(match_parens}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let len = Math.min(k, arrLen)\n  let start = arr[0]\n  let end = arr[arrLen - 1]\n  let result = []\n  for (let i = 0; i < len; i++) {\n    result.push(arr[Math.floor((end - start) / (len - i))])\n    start += (end - start) / (len - i)\n  }\n  return result\n}\n\nconst maximumK = (arr, k) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let start = arr[0]\n  let end = arr[arrLen - 1]\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    start += (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithStart = (arr, k, start) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let end = arr[arrLen - 1]\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    start += (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithEnd = (arr, k, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let start = arr[0]\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    end -= (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithStartAndEnd = (arr, k, start, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    start += (end - start) / (k - i)\n    end -= (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithCustomStart = (arr, k, start) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let end = arr[arrLen - 1]\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    start += (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithCustomEnd = (arr, k, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let start = arr[0]\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    end -= (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithCustomStartAndEnd = (arr, k, start, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    start += (end - start) / (k - i)\n    end -= (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithCustomStartAndEndAndCustomStart = (arr, k, start, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    start += (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithCustomStartAndCustomEnd = (arr, k, start, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[Math.floor((end - start) / (k - i))])\n    end -= (end - start) / (k - i)\n  }\n  return result\n}\n\nconst maximumKWithCustomStartAndCustomEndAndCustomStart = (arr, k, start, end) => {\n  let arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result."}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += Math.pow(10, i - k) * arr[i]\n  }\n  return sum\n}\n\nexport default add_elements_2\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n    var result = [];\n    if (n === 1) {\n        result.push(1);\n    }\n    else if (n === 2) {\n        result.push(1);\n        result.push(2);\n    }\n    else if (n === 3) {\n        result.push(1);\n        result.push(3);\n        result.push(6);\n    }\n    else {\n        var n_1 = n / 2;\n        var n_2 = n - n_1;\n        result.push(1);\n        result.push(n_1);\n        result.push(n_2);\n        result.push(n_1);\n        result.push(n_2);\n    }\n    return result.reverse();\n};\n\n// Test Code\nconst get_odd_collatz_test = (n) => {\n    const odd_collatz = get_odd_collatz(n);\n    console.log(odd_collatz);\n    return odd_collatz;\n};\n\nget_odd_collatz_test(5);\nget_odd_collatz_test(7);\nget_odd_collatz_test(8);\nget_odd_collatz_test(9);\nget_odd_collatz_test(10);\nget_odd_collatz_test(12);\nget_odd_collatz_test(16);\nget_odd_collatz_test(17);\nget_odd_collatz_test(18);\nget_odd_collatz_test(20);\nget_odd_collatz_test(21);\nget_odd_collatz_test(22);\nget_odd_collatz_test(24);\nget_odd_collatz_test(25);\nget_odd_collatz_test(26);\nget_odd_collatz_test(28);\nget_odd_collatz_test(32);\nget_odd_collatz_test(36);\nget_odd_collatz_test(40);\nget_odd_collatz_test(42);\nget_odd_collatz_test(48);\nget_odd_collatz_test(52);\nget_odd_collatz_test(64);\nget_odd_collatz_test(128);\nget_odd_collatz_test(256);\nget_odd_collatz_test(512);\nget_odd_collatz_test(1024);\nget_odd_collatz_test(2048);\nget_odd_collatz_test(4096);\nget_odd_collatz_test(8192);\nget_odd_collatz_test(16384);\nget_odd_collatz_test(32768);\nget_odd_collatz_test(65536);\nget_odd_collatz_test(131072);\nget_odd_collatz_test(262144);\nget_odd_collatz_test(524288);\nget_odd_collatz_test(1048576);\nget_odd_collatz_test(2097152);\nget_odd_collatz_test(4194304);\nget_odd_collatz_test(8388608);\nget_odd_collatz_test(16777216);\nget_odd_collatz_test(33554432);\nget_odd_collatz_test(67108864);\nget_odd_collatz_test(134217728);\nget_odd_collatz_test(268435456);\nget_odd_collatz_test(536870912);\nget_odd_collatz_test(1073741824);\nget_odd_collatz_test(2147483648);\nget_odd_collatz_test(4294967296);\nget_odd_collatz_test(8589934592);\nget_odd_collatz_test(17179869184);\nget_odd_collatz_test(34359738368);\nget_odd_collatz_test(68719476736);\nget_odd_collatz_test(137438953472);\nget_odd_collatz_test(274877906944);\nget_odd_collatz_test(549755813888);\nget_odd_collatz_test(1099511627776);\nget_odd_collatz_test(2199023255552);\nget_odd_collatz_test(4398046511104);\nget_odd_collatz_test(8796093022208);\nget_odd_collatz_test(17592186044416);\nget_odd_collatz_test(35184372088832);\nget_odd_collatz_test(70368744177664);\nget_odd_collatz_test(140737488355328);\nget_odd_collatz_test(281474976710656);\nget_odd_collatz_test(562949953421312);\nget_odd_collatz_test(1125899906842624);\nget_odd_collatz_test(2251799813685248);\nget_odd_collatz_test(4503599627370496);\nget_odd_collatz_test(9007199254740992);\nget_odd_collatz_test(18014398509481984);\nget_odd_collatz_test(36028797018963968);\nget_odd_collatz_test(720575940379279360);\nget_odd_collatz_test(144115188075855872);\nget_odd_collatz_"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n    if (!date) {\n        return false;\n    }\n    const month = parseInt(date.substring(0, 2));\n    const day = parseInt(date.substring(3, 5));\n    const year = parseInt(date.substring(6, 10));\n    const max_day = 31;\n    const max_day_for_month_4 = 30;\n    const max_day_for_month_6 = 29;\n    const max_day_for_month_9 = 28;\n    const max_day_for_month_11 = 31;\n    const max_day_for_month_12 = 30;\n    const max_day_for_month_2 = 31;\n    if (month === 2) {\n        if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n            max_day = max_day_for_month_2;\n        } else {\n            max_day = max_day_for_month_2;\n        }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n        max_day = max_day_for_month_4;\n    } else if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n        max_day = max_day_for_month_6;\n    } else if (month === 12) {\n        max_day = max_day_for_month_12;\n    }\n    if (day > max_day) {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (year < 0 || year > 2099) {\n        return false;\n    }\n    return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date_2 = (date) => {\n    if (!date) {\n        return false;\n    }\n    const month = parseInt(date.substring(0, 2));\n    const day = parseInt(date.substring(3, 5));\n    const year = parseInt(date.substring(6, 10));\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n            if (day > 29) {\n                return false;\n            }\n        } else {\n            if (day > 28) {\n                return false;\n            }\n        }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return false;\n        }\n    } else if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n        if (day > 31) {\n            return false;\n        }\n    } else if (month === 12) {\n        if (day > 31) {\n            return false;\n        }\n    }\n    if (year < 0 || year > 2099) {\n        return false;\n    }\n    return true;\n};\n\nconst date = '04-01-2020';\nconsole.log(valid_date(date));\nconsole.log(valid_date_2(date));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(/\\s+/g)\n  let num = 0\n  const ret = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === 0) {\n      continue\n    }\n    if (word.length === 1) {\n      const code = word.charCodeAt(0)\n      if (code >= 97 && code <= 122) {\n        num += 1\n      }\n    } else {\n      ret.push(word)\n      num = 0\n    }\n  }\n  return ret\n}\n\n/* Given a list of words, return a list of words where all the words are in upper-case\n  Example\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"world!\", \"a\", \"b\", \"c\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"world!\"]) ➞ [\"HELLO\", \"WORLD!\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"World!\"]) ➞ [\"HELLO\", \"WORLD!\"]\n  all_upper_case_words([\"Hello\", \"World!\"]) ➞ [\"HELLO\", \"WORLD!\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  all_upper_case_words([\"Hello\", \"World!\", \"A\", \"B\", \"C\"]) ➞ [\"HELLO\", \"WORLD!\", \"A\", \"B\", \"C\"]\n  */\nconst all_upper_case_words = (words) => {\n  const ret = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === 0) {\n      continue\n    }\n    if (word.length === 1) {\n      const code = word.charCodeAt(0)\n      if (code >= 97 && code <= 122) {\n        ret.push(word)\n      }\n    } else {\n      ret.push(word)\n    }\n  }\n  return ret\n}\n\n/* Given a string of words, return a list of words split on commas ','\n  Example\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  split_words_on_commas(\"Hello,World!,A,B,C\") ➞ [\"Hello\", \"World!\", \"A\", \"B\", \"C\"]\n  */\nconst split_words_on_commas = (txt) => {\n  const words = txt.split(/\\s*,\\s*/g)\n  let num = 0\n  const ret = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === 0) {\n      continue\n    }\n    if (word.length === 1) {\n      const code = word.charCodeAt(0)\n      if (code >= 97 && code <= 122) {\n        num += 1\n      }\n    } else {\n"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  if (!lst ||!Array.isArray(lst)) {\n    return false;\n  }\n  return (\n    lst.length === 1 ||\n    lst.every((i) => i <= lst[lst.length - 2] + 1)\n  );\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([5]) ➞ true\n  is_sorted_desc([1, 2, 3, 4, 5]) ➞ false\n  is_sorted_desc([1, 3, 2, 4, 5]) ➞ true\n  is_sorted_desc([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted_desc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted_desc([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted_desc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  if (!lst ||!Array.isArray(lst)) {\n    return false;\n  }\n  return (\n    lst.length === 1 ||\n    lst.every((i) => i >= lst[lst.length - 2] + 1)\n  );\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted\n  in ascending order with no duplicates. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted_no_dups([1, 2, 3, 4, 5]) ➞ true\n  is_sorted_no_dups([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted_no_dups([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted_no_dups([1, 2, 2, 2, 3, 4]) ➞ false\n  is_sorted_no_dups([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  */\nconst is_sorted_no_dups = (lst) => {\n  if (!lst ||!Array.isArray(lst)) {\n    return false;\n  }\n  return lst.every((i) => i <= lst[lst.length - 2] + 1);\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted\n  in ascending order with no duplicates. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted_no_dups_desc([1, 2, 3, 4, 5]) ➞ false\n  is_sorted_no_dups_desc([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted_no_dups_desc([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted_no_dups_desc([1, 2, 2, 2, 3, 4]) ➞ false\n  is_sorted_no_dups_desc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  */\nconst is_sorted_no_dups_desc = (lst) => {\n  if (!lst ||!Array.isArray(lst)) {\n    return false;\n  }\n  return lst.every((i) => i >= lst[lst.length - 2] + 1);\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted\n  in ascending order with no duplicates, and no negative numbers.\n  Examples\n  is_sorted_no_dups_no_neg([1, 2, 3, 4, 5]) ➞ true\n  is_sorted_no_dups_no_neg([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted_no_dups_no_neg([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted_no_dups_no_neg([1, 2, 2, 2, 3, 4]) ➞ false\n  is_sorted_no_dups_no_neg([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  */\nconst is_sorted_no_dups_no_neg = (lst) => {\n  if (!lst ||!Array.isArray(lst)) {\n    return false;\n  }\n  return lst.every((i) => i >= 0);\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted\n  in ascending order with no duplicates, and no negative numbers.\n  Examples\n  is_sorted_no_dups_no_neg_desc([1, 2, 3, 4, 5]) ➞ true\n  is_sorted_no_dups_no_neg_desc([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted_no_dups_no_neg_desc([1, 2, 2, 3, 3, 4]) ➞ true\n  is_"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [min1, max1] = interval1\n  const [min2, max2] = interval2\n\n  const min = Math.min(min1, min2)\n  const max = Math.max(max1, max2)\n\n  const length = max - min + 1\n  return!(length % 2)? \"YES\" : \"NO\"\n}\n\nconsole.log(intersection([1, 2], [2, 3]))\nconsole.log(intersection([-1, 1], [0, 4]))\nconsole.log(intersection([-3, -1], [-5, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const total = 0\n  const signs = [0, 1, -1, 0]\n  for (let i = 0; i < arr.length; i++) {\n    total += Math.abs(arr[i]) * signs[arr[i]]\n  }\n  return total\n}\n\nconst multiply_signs = (arr) => {\n  const signs = [0, 1, -1, 0]\n  const total = 0\n  for (let i = 0; i < arr.length; i++) {\n    total += Math.abs(arr[i]) * signs[arr[i]]\n  }\n  return total\n}\n\nconst arr = [1, 2, 2, -4]\nconsole.log(prod_signs(arr)) // -9\nconsole.log(multiply_signs(arr)) // -9\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const dp = new Array(grid.length).fill(0);\n  const dp_index = 0;\n\n  const find_min_path = (grid, k) => {\n    if (dp[dp_index] === 0) {\n      return grid[dp_index];\n    }\n\n    if (k === 1) {\n      return grid[dp_index];\n    }\n\n    let min_index = 0;\n    for (let i = 1; i < grid.length; i++) {\n      if (dp[dp_index] + i < grid.length && dp[dp_index] + i >= 1) {\n        if (dp[dp_index + i] === 0) {\n          dp[dp_index + i] = grid[dp_index] + i;\n          min_index = dp[dp_index] + i;\n          break;\n        }\n        if (dp[dp_index + i] + i < grid.length && dp[dp_index + i] + i >= 1) {\n          if (grid[dp[dp_index + i] + i] < grid[min_index]) {\n            min_index = dp[dp_index + i] + i;\n          }\n        }\n      }\n    }\n    if (dp[dp_index] === 0) {\n      dp[dp_index] = min_index;\n    }\n    return find_min_path(grid, k - 1);\n  };\n\n  return find_min_path(grid, k);\n};\n\n// console.log(min_path([[1,2,3], [4,5,6], [7,8,9]], 3));\n// console.log(min_path([[5,9,3], [4,1,6], [7,8,2]], 1));\nconsole.log(min_path([[1,2,3], [4,5,6], [7,8,9]], 3));\nconsole.log(min_path([[5,9,3], [4,1,6], [7,8,2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const arr = [];\n  let tri = 1;\n  let x = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(tri);\n      tri = tri + x;\n    } else {\n      arr.push(tri);\n      tri = tri + x + tri;\n    }\n  }\n  return arr;\n};\n\ntri(3).forEach(x => console.log(x));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  let count = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      product *= count;\n    }\n    n /= 10;\n    count++;\n  }\n  return product;\n};\n\n/*\n  Given a number n, return the number of divisors of n.\n  The number of divisors of a number is the number of numbers\n  that divide evenly into the number. For example, the number\n  2 has 2 divisors: 1 and 1.\n  The number of divisors of a number is also equal to the sum of\n  the digits of the number (i.e. the number of digits of the\n  number that are greater than 1).\n  */\nconst numberOfDivisors = (n) => {\n  return digits(n) + 1;\n};\n\n/*\n  Given a positive integer n, return the largest prime number that is\n  less than or equal to n.\n  For example:\n  prime_less_than_or_equal_to(1) == 1\n  prime_less_than_or_equal_to(10) == 2\n  prime_less_than_or_equal_to(100) == 3\n  prime_less_than_or_equal_to(1000) == 4\n  prime_less_than_or_equal_to(10000) == 5\n  prime_less_than_or_equal_to(100000) == 6\n  prime_less_than_or_equal_to(1000000) == 7\n  prime_less_than_or_equal_to(10000000) == 8\n  prime_less_than_or_equal_to(100000000) == 9\n  prime_less_than_or_equal_to(1000000000) == 10\n  prime_less_than_or_equal_to(10000000000) == 11\n  prime_less_than_or_equal_to(100000000000) == 12\n  prime_less_than_or_equal_to(1000000000000) == 13\n  prime_less_than_or_equal_to(10000000000000) == 14\n  prime_less_than_or_equal_to(100000000000000) == 15\n  prime_less_than_or_equal_to(1000000000000000) == 16\n  */\nconst prime_less_than_or_equal_to = (n) => {\n  const prime_number_array = [];\n  let i = 2;\n  while (i <= n) {\n    if (numberOfDivisors(i) === i) {\n      prime_number_array.push(i);\n    }\n    i++;\n  }\n  return prime_number_array.sort()[0];\n};\n\n/*\n  Given a positive integer n, return the sum of the numbers\n  that are less than or equal to n.\n  For example:\n  sum_less_than_or_equal_to(1) == 1\n  sum_less_than_or_equal_to(2) == 2\n  sum_less_than_or_equal_to(3) == 3\n  sum_less_than_or_equal_to(4) == 4\n  sum_less_than_or_equal_to(5) == 5\n  sum_less_than_or_equal_to(6) == 6\n  sum_less_than_or_equal_to(7) == 7\n  sum_less_than_or_equal_to(8) == 8\n  sum_less_than_or_equal_to(9) == 9\n  sum_less_than_or_equal_to(10) == 10\n  sum_less_than_or_equal_to(100) == 100\n  sum_less_than_or_equal_to(1000) == 1000\n  sum_less_than_or_equal_to(10000) == 10000\n  sum_less_than_or_equal_to(100000) == 100000\n  sum_less_than_or_equal_to(1000000) == 1000000\n  sum_less_than_or_equal_to(10000000) == 10000000\n  sum_less_than_or_equal_to(100000000) == 100000000\n  sum_less_than_or_equal_to(1000000000) == 1000000000\n  sum_less_than_or_equal_to(10000000000) == 10000000000\n  sum_less_than_or_equal_to(100000000000) == 100000000000\n  sum_less_than_or_equal_to(1000000000000) == 1000000000000\n  sum_less_than_or_equal_to(10000000000000) == 10000000000000\n  sum_less_than_or_equal_to(100000000000000) == 100000000000000\n  sum_less_than_or_equal_to(1000000000000000) == 1000000000000000\n  sum_less_than_or_equal_to(1000000000000000000) == 1000000000000000000\n  */\nconst sum_less_than_or_equal_to = (n) => {\n  const sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = n - prime_less_than_or_equal_to(n);\n  }\n  return sum;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the numbers\n  that are less than or equal to a and less than or equal to b.\n  For example:\n  sum_less_than_or_equal_to(1, 2) == 1\n  sum_less_than_or_equal_to(1, 3) == 2\n  sum_less_than_or_equal_to(1, 4) == 3\n  sum_less_than_or_equal_to(1, 5) == 4\n  sum_less_than_or_equal_to(1, 6) == 5\n  sum_less_than_or_equal_to(1, 7) == 6\n  sum_less_than_or_equal_to(1, 8) == 7\n  sum_less_than_or_equal_to(1, 9) == 8\n  sum_less_than_or_equal_to(1, 10) == 9\n  sum_less_than_"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  return new RegExp(`(${string.split(/[][]/).join('\\\\[\\\\]')})\\\\1+`).test(string);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const lst = lst.map(e => Number(e));\n  return lst.reduce((prev, curr) => prev + curr * curr, 0);\n};\n\nexport default sum_squares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  if(txt.length > 0) {\n    return txt.charAt(txt.length-1).match(/[a-zA-Z]/) &&!(txt.match(/[\\W\\d]+/));\n  }\n  else {\n    return false;\n  }\n};\n\n\n/* Create a function that returns true if the first character of\n  a given string is an alphabetical character and is not a\n  part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_first_char_is_a_letter(\"apple pie\") ➞ true\n  check_if_first_char_is_a_letter(\"apple pi e\") ➞ false\n  check_if_first_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_first_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_first_char_is_a_letter = (txt) => {\n  if(txt.length > 0) {\n    return txt.charAt(0).match(/[a-zA-Z]/) &&!(txt.match(/[\\W\\d]+/));\n  }\n  else {\n    return false;\n  }\n};\n\n\n/* Create a function that returns true if the last two characters\n  of a given string are an alphabetical character and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_two_chars_are_a_letter(\"apple pie\") ➞ false\n  check_if_last_two_chars_are_a_letter(\"apple pi e\") ➞ true\n  check_if_last_two_chars_are_a_letter(\"apple pi e \") ➞ false\n  check_if_last_two_chars_are_a_letter(\"\") ➞ false\n  */\nconst check_if_last_two_chars_are_a_letter = (txt) => {\n  if(txt.length > 1) {\n    return txt.charAt(txt.length-2).match(/[a-zA-Z]/) && txt.charAt(txt.length-1).match(/[a-zA-Z]/) &&!(txt.match(/[\\W\\d]+/));\n  }\n  else {\n    return false;\n  }\n};\n\n\n/* Create a function that returns true if the last two characters\n  of a given string are both letters and are not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_both_chars_are_letters(\"apple pie\") ➞ true\n  check_if_both_chars_are_letters(\"apple pi e\") ➞ false\n  check_if_both_chars_are_letters(\"apple pi e \") ➞ false\n  check_if_both_chars_are_letters(\"\") ➞ false\n  */\nconst check_if_both_chars_are_letters = (txt) => {\n  if(txt.length > 1) {\n    return txt.charAt(txt.length-2).match(/[a-zA-Z]/) && txt.charAt(txt.length-1).match(/[a-zA-Z]/) &&!(txt.match(/[\\W\\d]+/));\n  }\n  else {\n    return false;\n  }\n};\n\n\n/* Create a function that returns true if the last four characters\n  of a given string are a letter and two letters, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_four_chars_are_a_and_two_letters(\"apple pie\") ➞ true\n  check_if_last_four_chars_are_a_and_two_letters(\"apple pi e\") ➞ false\n  check_if_last_four_chars_are_a_and_two_letters(\"apple pi e \") ➞ false\n  check_if_last_four_chars_are_a_and_two_letters(\"\") ➞ false\n  */\nconst check_if_last_four_chars_are_a_and_two_letters = (txt) => {\n  if(txt.length > 3) {\n    return txt.charAt(txt.length-4).match(/[a-zA-Z]/) && txt.charAt(txt.length-3).match(/[a-zA-Z]/) && txt.charAt(txt.length-2).match(/[a-zA-Z]/) && txt.charAt(txt.length-1).match(/[a-zA-Z]/) &&!(txt.match(/[\\W\\d]+/));\n  }\n  else {\n    return false;\n  }\n};\n\n\n/* Create a function that returns true if the last three characters\n  of a given string are a letter and two letters, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_three_chars_are_a_and_two_letters(\"apple pie\") ➞ true\n  check_if_last_three_chars_are_a_and_two_letters(\"apple pi e\") ➞ false\n  check_if_last_three_ch"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let max_index = -1;\n  let max_element = arr[0];\n  let index = 0;\n  let j = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      j = i;\n      max_index = i;\n      max_element = arr[i];\n    }\n  }\n  return max_index;\n};\n\nconst test = require('ava');\nconst can_arrange = require('../../src/index.js');\n\ntest('Can arrange a given array of numbers', (t) => {\n  const arr = [1, 2, 3, 4, 5];\n  const index = can_arrange(arr);\n  t.true(index === 3, 'index is 3');\n});\n\ntest('Can arrange a given array of strings', (t) => {\n  const arr = ['A', 'B', 'C', 'D', 'E'];\n  const index = can_arrange(arr);\n  t.true(index === -1, 'index is -1');\n});\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest, smallest,\n    max = -Infinity,\n    min = Infinity;\n  lst.forEach((n) => {\n    if (n > max) {\n      max = n;\n    }\n    if (n < min) {\n      min = n;\n    }\n  });\n  if (max === -Infinity) {\n    largest = null;\n  } else {\n    largest = max;\n  }\n  if (min === Infinity) {\n    smallest = null;\n  } else {\n    smallest = min;\n  }\n  return largest === null? (smallest, null) : (largest, smallest);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of a set of numbers, and 'b' is the smallest\n  of a set of numbers.\n  If there is no largest, smallest, or set, return them as null.\n  Examples:\n  largest_smallest_numbers([1, 2, 4, 3, 5, 7]) == (null, 1)\n  largest_smallest_numbers([]) == (null, null)\n  largest_smallest_numbers([0]) == (null, null)\n  */\nconst largest_smallest_numbers = (lst) => {\n  let largest, smallest,\n    max = -Infinity,\n    min = Infinity;\n  lst.forEach((n) => {\n    if (n > max) {\n      max = n;\n    }\n    if (n < min) {\n      min = n;\n    }\n  });\n  if (max === -Infinity) {\n    largest = null;\n  } else {\n    largest = max;\n  }\n  if (min === Infinity) {\n    smallest = null;\n  } else {\n    smallest = min;\n  }\n  return largest === null? (smallest, null) : (largest, smallest);\n};\n\nconst largest_smallest_integers_tuple = largest_smallest_integers([2, 4, 1, 3, 5, 7]);\nconst largest_smallest_numbers_tuple = largest_smallest_numbers([1, 2, 4, 3, 5, 7]);\n\nconst largest_smallest_integers_map = largest_smallest_integers([2, 4, 1, 3, 5, 7]).map;\nconst largest_smallest_numbers_map = largest_smallest_numbers([1, 2, 4, 3, 5, 7]).map;\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of a set of integers, and 'b' is the smallest\n  of a set of integers.\n  If there is no largest, smallest, or set, return them as null.\n  Examples:\n  largest_smallest_numbers_tuple([1, 2, 4, 3, 5, 7]) == (null, 1)\n  largest_smallest_numbers_tuple([]) == (null, null)\n  largest_smallest_numbers_tuple([0]) == (null, null)\n  */\nconst largest_smallest_numbers_tuple = largest_smallest_numbers([1, 2, 4, 3, 5, 7]);\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of a set of numbers, and 'b' is the smallest\n  of a set of numbers.\n  If there is no largest, smallest, or set, return them as null.\n  Examples:\n  largest_smallest_numbers_tuple([1, 2, 4, 3, 5, 7]) == (null, 1)\n  largest_smallest_numbers_tuple([]) == (null, null)\n  largest_smallest_numbers_tuple([0]) == (null, null)\n  */\nconst largest_smallest_numbers_tuple = largest_smallest_numbers([1, 2, 4, 3, 5, 7]);\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  const isNumber = isNumber(a) && isNumber(b);\n  const isString = isString(a) && isString(b);\n  const isFloat = isFloat(a) && isFloat(b);\n  const floatA = parseFloat(a);\n  const floatB = parseFloat(b);\n\n  if (isNumber) {\n    if (a > b) {\n      return b;\n    } else if (a < b) {\n      return a;\n    } else {\n      return null;\n    }\n  }\n\n  if (isString) {\n    return compare_one(a, floatB);\n  }\n\n  if (isFloat) {\n    return compare_one(floatA, b);\n  }\n};\n\n/*\n  The largest number, a, can be computed as\n  (1 + (2 * 3) + (3 * 4) + (4 * 5) + (5 * 6) + (6 * 7) + (7 * 8) +... + (8 * 9)) + (9 * 10) + (10 * 11) + (11 * 12) + (12 * 13) + (13 * 14) +... + (14 * 15) + (15 * 16) + (16 * 17) +... + (17 * 18) + (18 * 19) + (19 * 20) + (20 * 21) +...)\n  */\nconst find_largest = (n) => {\n  return (a) => {\n    if (isNumber(a)) {\n      return a;\n    }\n\n    if (isString(a)) {\n      return parseFloat(a);\n    }\n\n    if (isFloat(a)) {\n      return a;\n    }\n\n    if (a.length === 1) {\n      return a;\n    }\n\n    if (a.length === 2) {\n      return parseInt(a, 10);\n    }\n\n    if (a.length === 3) {\n      return parseInt(a, 10) * 10;\n    }\n\n    if (a.length === 4) {\n      return parseInt(a, 10) * 100;\n    }\n\n    if (a.length === 5) {\n      return parseInt(a, 10) * 1000;\n    }\n\n    if (a.length === 6) {\n      return parseInt(a, 10) * 10000;\n    }\n\n    if (a.length === 7) {\n      return parseInt(a, 10) * 100000;\n    }\n\n    if (a.length === 8) {\n      return parseInt(a, 10) * 1000000;\n    }\n\n    if (a.length === 9) {\n      return parseInt(a, 10) * 10000000;\n    }\n\n    if (a.length === 10) {\n      return parseInt(a, 10) * 100000000;\n    }\n\n    if (a.length === 11) {\n      return parseInt(a, 10) * 1000000000;\n    }\n\n    if (a.length === 12) {\n      return parseInt(a, 10) * 10000000000;\n    }\n\n    if (a.length === 13) {\n      return parseInt(a, 10) * 100000000000;\n    }\n\n    if (a.length === 14) {\n      return parseInt(a, 10) * 1000000000000;\n    }\n\n    if (a.length === 15) {\n      return parseInt(a, 10) * 10000000000000;\n    }\n\n    if (a.length === 16) {\n      return parseInt(a, 10) * 100000000000000;\n    }\n\n    if (a.length === 17) {\n      return parseInt(a, 10) * 1000000000000000;\n    }\n\n    if (a.length === 18) {\n      return parseInt(a, 10) * 10000000000000000;\n    }\n\n    if (a.length === 19) {\n      return parseInt(a, 10) * 100000000000000000;\n    }\n\n    if (a.length === 20) {\n      return parseInt(a, 10) * 1000000000000000000;\n    }\n\n    if (a.length === 21) {\n      return parseInt(a, 10) * 10000000000000000000;\n    }\n\n    if (a.length === 22) {\n      return parseInt(a, 10) * 100000000000000000000;\n    }\n\n    if (a.length === 23) {\n      return parseInt(a, 10) * 1000000000000000000000;\n    }\n\n    if (a.length === 24) {\n      return parseInt(a, 10) * 10000000000000000000000;\n    }\n\n    if (a.length === 25) {\n      return parseInt(a, 10) * 100000000000000000000000;\n    }\n\n    if (a.length === 26) {\n      return parseInt(a, 10) * 1000000000000000000000000;\n    }\n\n    if (a.length === 27) {\n      return parseInt(a, 10) * 10000000000000000000000000;\n    }\n\n    if (a.length === 28) {\n      return parseInt(a, 10) * 100000000000000000000000000;\n    }\n\n    if (a.length === 29) {\n      return parseInt(a, 10) * 1000000000000000000000000000;\n    }\n\n    if (a.length === 30) {\n      return parseInt(a, 10) * 10000000000000000000000000000;\n    }\n\n    if (a.length === 31) {\n      return parseInt(a, 10) * 100000000000000000000000000000;\n    }\n\n    if (a.length === 32) {\n      return parseInt(a, 10) * 1000000000000000000000000000000;\n    }\n\n    if (a.length === 33) {\n      return parseInt(a, 10) * 10000000000000000000000000000000;\n    }\n\n    if (a.length === 34) {\n      return parseInt(a, 10) * 100000000000000000000000000000000;\n    }\n\n    if (a.length === 35) {\n      return parseInt(a, 10) *"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  const a = [];\n  for (let i = 1; i < n; i += 2) {\n    a.push(i);\n  }\n  const s = a.reduce((a, v) => a + v, 0);\n  return s % 2 === 0;\n};\n\nexport default is_equal_to_sum_even;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n <= 0) return 1;\n  return n * special_factorial(n - 1);\n};\n\nconst brazilian_factorial = (n) => {\n  if (n <= 0) return 1;\n  return (n-1) * (n-2) * (n-3) * special_factorial(n - 4);\n};\n\nconst fib_seq = (n) => {\n  if (n <= 1) return 1;\n  return fib_seq(n - 1) + fib_seq(n - 2);\n};\n\nconst fib_seq_brazilian = (n) => {\n  if (n <= 1) return 1;\n  return (n - 1) * (n - 2) * special_factorial(n - 3);\n};\n\nexport {\n  special_factorial,\n  brazilian_factorial,\n  fib_seq,\n  fib_seq_brazilian,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s/g, '_').replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst split_spaces = (text) => {\n  return text.replace(/\\s/g, '_').replace(/\\s+/g, '-');\n}\n\nconst to_camel_case = (text) => {\n  return text.replace(/[a-z]/g, (letter) => {\n    return letter.toUpperCase();\n  });\n}\n\nconst to_lower_case = (text) => {\n  return text.toLowerCase();\n}\n\nconst to_title_case = (text) => {\n  return text.replace(/\\w\\S*/g, to_camel_case);\n}\n\nconst to_upper_case = (text) => {\n  return text.toUpperCase();\n}\n\nconst to_hyphen_case = (text) => {\n  return text.replace(/\\w\\S*/g, (letter) => {\n    return letter.replace(/\\s/g, '-').toUpperCase();\n  });\n}\n\nconst to_capital_first = (text) => {\n  return text.replace(/\\w\\S*/g, (letter) => {\n    return letter.toUpperCase().charAt(0) + letter.toLowerCase().slice(1);\n  });\n}\n\nconst to_lower_first = (text) => {\n  return text.replace(/\\w\\S*/g, (letter) => {\n    return letter.toLowerCase().charAt(0) + letter.toUpperCase().slice(1);\n  });\n}\n\nconst capitalize_first = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nconst get_file_extension = (filename) => {\n  return filename.split('.').pop();\n}\n\nconst remove_file_extension = (filename) => {\n  return filename.split('.').shift();\n}\n\nconst get_file_name = (filename) => {\n  return remove_file_extension(filename);\n}\n\nconst is_file_name_valid = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    extension.toLowerCase() === 'csv'\n  );\n}\n\nconst is_file_name_valid_to_import = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'xls'\n    )\n  );\n}\n\nconst is_file_name_valid_to_export = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'csv'\n    )\n  );\n}\n\nconst is_file_name_valid_to_delete = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'xls'\n    )\n  );\n}\n\nconst is_file_name_valid_to_rename = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'xls'\n    )\n  );\n}\n\nconst is_file_name_valid_to_rename_or_import = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'xls' ||\n      extension.toLowerCase() === 'csv'\n    )\n  );\n}\n\nconst is_file_name_valid_to_export_to_folder = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'csv'\n    )\n  );\n}\n\nconst is_file_name_valid_to_delete_from_folder = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty_string(extension) &&\n    (\n      extension.toLowerCase() === 'xlsx' ||\n      extension.toLowerCase() === 'csv'\n    )\n  );\n}\n\nconst is_file_name_valid_to_rename_from_folder = (filename) => {\n  const extension = get_file_extension(filename);\n  return (\n   !is_empty"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  if (!file_name) {\n    return 'No';\n  }\n\n  let file_name_list = file_name.split('.');\n  if (file_name_list.length > 3 || file_name_list.length < 1) {\n    return 'No';\n  }\n\n  let first_letter_index = file_name_list[0].length - 1;\n  let second_letter_index = file_name_list[0].length - 1;\n\n  if (first_letter_index === 0 || second_letter_index === 0 || file_name_list[0][0] < 'a' || file_name_list[0][0] > 'z' || file_name_list[0][1] < 'A' || file_name_list[0][1] > 'z') {\n    return 'No';\n  }\n\n  let last_letter_index = file_name_list[file_name_list.length - 1].length - 1;\n  if (file_name_list[file_name_list.length - 1][0] === '.' || file_name_list[file_name_list.length - 1][0] < 'a' || file_name_list[file_name_list.length - 1][0] > 'z' || file_name_list[file_name_list.length - 1][1] < 'A' || file_name_list[file_name_list.length - 1][1] > 'z' || file_name_list[file_name_list.length - 1][last_letter_index]!== 'txt' && file_name_list[file_name_list.length - 1][last_letter_index]!== 'exe' && file_name_list[file_name_list.length - 1][last_letter_index]!== 'dll') {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n\n/*\nCreate a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_two = (file_name) => {\n  if (!file_name) {\n    return 'No';\n  }\n\n  let file_name_list = file_name.split('.');\n  if (file_name_list.length > 3 || file_name_list.length < 1) {\n    return 'No';\n  }\n\n  let first_letter_index = file_name_list[0].length - 1;\n  let second_letter_index = file_name_list[0].length - 1;\n\n  if (first_letter_index === 0 || second_letter_index === 0 || file_name_list[0][0] < 'a' || file_name_list[0][0] > 'z' || file_name_list[0][1] < 'A' || file_name_list[0][1] > 'z') {\n    return 'No';\n  }\n\n  let last_letter_index = file_name_list[file_name_list.length - 1].length - 1;\n  if (file_name_list[file_name_list.length - 1][0] === '.' || file_name_list[file_name_list.length - 1][0] < 'a' || file_name_list[file_name_list.length - 1][0] > 'z' || file_name_list[file_name_list.length - 1][1] < 'A' || file_name_list[file_name_list.length - 1][1] > 'z' || file_name_list[file_name_list.length - 1][last_letter_index]!== 'txt' && file_name_list[file_name_list.length - 1][last_letter_index]!== 'exe' && file_name_list[file_name_list.length - 1][last_letter_index]!== 'dll') {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n\nconst file_name_check_three = (file_name) => {\n  if (!file_name) {\n    return 'No';\n  }\n\n  let file_name_list = file_name.split('.');\n  if (file_name_list.length > 3 || file_name_list.length < 1) {\n    return 'No';\n  }\n\n  let first_letter_index = file_name_list[0].length - 1;\n  let second_letter_index = file_name_list[0].length - 1;\n\n  if (first_letter_index === 0 || second_letter_index === 0 || file_name_list[0][0] < 'a'"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n    if(lst.length === 0) {\n        return 0;\n    }\n    \n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(i % 3 === 0) {\n            sum += lst[i] * lst[i];\n        }\n        if(i % 4 === 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    \n    return sum;\n};\n\nconsole.log(sum_squares([1,2,3]));\nconsole.log(sum_squares([]));\nconsole.log(sum_squares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  let words = sentence.split(' ')\n  let new_words = []\n  let max_index = words.length\n  for (let i = 0; i < words.length; i += 1) {\n    let num = nextPrimeNumber(i)\n    for (let j = 0; j < words.length; j += 1) {\n      if (words[j].length === num) {\n        new_words.push(words[j])\n        break\n      }\n    }\n  }\n  return new_words.join(' ')\n}\n\nfunction nextPrimeNumber(index) {\n  let num = index + 1\n  while (isPrimeNumber(num)) {\n    num += 1\n  }\n  return num\n}\n\nfunction isPrimeNumber(num) {\n  if (num === 2) {\n    return true\n  }\n  for (let i = 2; i * i <= num; i += 1) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(words_in_sentence(\"This is a test\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xe = x.split(\"/\")\n  const ne = n.split(\"/\")\n\n  if (x === n) {\n    return true\n  }\n\n  const xf = parseInt(xe[1], 10)\n  const nf = parseInt(ne[1], 10)\n\n  if (xf!== 0) {\n    return false\n  }\n\n  if (nf!== 0) {\n    return false\n  }\n\n  return true\n}\n\nexport {\n  simplify,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    sorted.push(sum);\n  });\n  return sorted;\n}\n\nconst sum = (nums) => {\n  let sum = 0;\n  nums.forEach(n => sum += n);\n  return sum;\n}\n\nconst order_by_points2 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum >= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points3 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum < 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points4 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum <= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points5 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum > 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points6 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum < 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points7 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum >= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points8 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum < 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points9 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum > 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points10 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum <= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points11 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum >= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points12 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum < 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points13 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum > 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points14 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum <= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points15 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum < 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points16 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum >= 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return sorted;\n}\n\nconst order_by_points17 = (nums) => {\n  const sorted = [];\n  let sum = 0;\n  nums.forEach(n => {\n    sum += n;\n    if (sum > 0) {\n      sorted.push(sum);\n      sum = 0;\n    }\n  });\n  return"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const len = nums.length\n  const odd_len = nums.filter((num) => num % 2 === 1 && num > 10)\n  const even_len = nums.filter((num) => num % 2 === 0 && num > 10)\n  return (odd_len.length === 1 && even_len.length === 1)? 1 : (odd_len.length + even_len.length)\n}\n\nconsole.log(special_filter([15, -73, 14, -15]))\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n    let i, j, k, a = [1, 3, 7, 13, 21];\n    let result = 0;\n\n    for(i = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            for(k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] % 3 === 0){\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Input: n = 3\n  Output: 1\n  Explanation:\n  The only valid triple is (1, 2, 3).\n*/\nconst get_max_triples_2 = (n) => {\n    let result = 0;\n    let i, j;\n    for(i = 1; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            if(i + j + (i * j) % 3 === 0){\n                result++;\n            }\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    get_max_triples: get_max_triples,\n    get_max_triples_2: get_max_triples_2\n};<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const d = (planet1, planet2) => {\n        const a = getDist(planet1, planet2);\n        const b = getDist(planet2, planet1);\n        return a <= b? a : b;\n    }\n    return names.filter((name) => {\n        const p = { name, dist: d(name, planet1) };\n        return d(name, planet2) <= p.dist;\n    })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  return list_sort(lst).map((str) => str.length).sort((a, b) => a - b);\n};\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n    if (x_or_y.isPrime(n)) {\n        return x;\n    }\n    else {\n        return y;\n    }\n}\n\nconst x_or_y.isPrime = (n) => {\n    for (let i = 1; i < n; i += 1) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst x_or_y.x = (n) => {\n    if (x_or_y.isPrime(n)) {\n        return x;\n    }\n    else {\n        return y;\n    }\n}\n\nconst x_or_y.y = (n) => {\n    if (x_or_y.isPrime(n)) {\n        return y;\n    }\n    else {\n        return x;\n    }\n}\n\nconst x_or_y.random = (n) => {\n    if (x_or_y.isPrime(n)) {\n        return x;\n    }\n    else {\n        return y;\n    }\n}\n\nconst x_or_y.isPrime = (n) => {\n    for (let i = 1; i < n; i += 1) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nmodule.exports = x_or_y;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  const sum = (acc, num) => {\n    if (isNaN(num)) return acc;\n    return acc + (num * num);\n  };\n  const square = (num) => num * num;\n  return list.reduce(sum, 0);\n};\n\nmodule.exports = {\n  double_the_difference\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const n = game.length\n  const correct = game.filter(x => x === guess[x])\n  const incorrect = game.filter(x => x!== guess[x])\n  const correctLength = correct.length\n  const incorrectLength = incorrect.length\n\n  const difference = incorrectLength - correctLength\n  const wrong = incorrect.filter(x => x!== correct[x])\n  const wrongLength = wrong.length\n\n  return [difference, wrongLength, correctLength]\n}\n\nconst getRandom = () => Math.floor(Math.random() * 9)\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const strength = class_name.split('.').reduce((sum, extension) => {\n    const cap = extension.split('').reduce((total, letter, index) => {\n      return total + (letter.toUpperCase() === letter? index : -1);\n    }, 0);\n    const lower = extension.split('').reduce((total, letter, index) => {\n      return total + (letter.toLowerCase() === letter? index : -1);\n    }, 0);\n    return sum + cap - lower;\n  }, 0);\n\n  const strongest = extensions.find(extension => strength >= 0);\n\n  if (!strongest) {\n    throw new Error(`No extension for ${class_name} found`);\n  }\n\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongest_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const arr = b.split(\"\");\n  const lena = a.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < lena) {\n    while (j < arr.length) {\n      if (a.charAt(i) === arr[j]) {\n        j += 1;\n      }\n    }\n    i += 1;\n    j = 0;\n  }\n\n  return (i === lena)? true : false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  if (num === 0) {\n    return (0, 0)\n  }\n  const even = Math.floor(num / 2)\n  const odd = num - even\n  return (even, odd)\n}\n\n/*Given a list of numbers. Return a list with the even elements\n   in front of the odd elements.\n*/\nconst even_odd_list = (num_list) => {\n  const even_count = 0\n  const odd_count = 0\n  const even_list = []\n  const odd_list = []\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] % 2 === 0) {\n      even_count++\n      even_list.push(num_list[i])\n    } else {\n      odd_count++\n      odd_list.push(num_list[i])\n    }\n  }\n  return (even_list, odd_list)\n}\n\n/*Given an array of numbers. Return an array with the even elements\n   in front of the odd elements.\n*/\nconst even_odd_array = (num_list) => {\n  const even_count = 0\n  const odd_count = 0\n  const even_list = []\n  const odd_list = []\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] % 2 === 0) {\n      even_count++\n      even_list.push(num_list[i])\n    } else {\n      odd_count++\n      odd_list.push(num_list[i])\n    }\n  }\n  return (even_list, odd_list)\n}\n\n/*Given a list of numbers. Return the first number that is divisible by\n   the others in the list.\n*/\nconst first_divisible_number = (num_list) => {\n  let index = 0\n  let num = 0\n  let count = 0\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] % num === 0) {\n      count++\n      if (count === num_list.length) {\n        return num_list[index]\n      }\n    }\n    num++\n  }\n}\n\n/* Given a number. Return the number of digits that it has.\n*/\nconst num_of_digits = (num) => {\n  let count = 1\n  while (num > 0) {\n    num = num / 10\n    count++\n  }\n  return count\n}\n\n/* Given an integer. Return the number of digits it has.\n*/\nconst num_of_digits_array = (num_list) => {\n  let count = 1\n  for (let i = 0; i < num_list.length; i++) {\n    count = count + num_of_digits(num_list[i])\n  }\n  return count\n}\n\n/* Given an array of numbers. Return the number of digits\n   they have.\n*/\nconst num_of_digits_array_num = (num_list) => {\n  let count = 1\n  for (let i = 0; i < num_list.length; i++) {\n    count = count + num_of_digits(num_list[i])\n  }\n  return count\n}\n\n/*Given a list of numbers. Return the largest number in the list.\n*/\nconst largest_number = (num_list) => {\n  let largest = num_list[0]\n  for (let i = 1; i < num_list.length; i++) {\n    if (num_list[i] > largest) {\n      largest = num_list[i]\n    }\n  }\n  return largest\n}\n\n/*Given an array of numbers. Return the largest number in the array.\n*/\nconst largest_number_array = (num_list) => {\n  let largest = num_list[0]\n  for (let i = 1; i < num_list.length; i++) {\n    if (num_list[i] > largest) {\n      largest = num_list[i]\n    }\n  }\n  return largest\n}\n\n/* Given an array of numbers. Return the sum of the numbers.\n*/\nconst sum_array = (num_list) => {\n  let sum = 0\n  for (let i = 0; i < num_list.length; i++) {\n    sum += num_list[i]\n  }\n  return sum\n}\n\n/* Given an array of numbers. Return the largest number in the array.\n*/\nconst largest_number_array_sum = (num_list) => {\n  let largest = num_list[0]\n  for (let i = 1; i < num_list.length; i++) {\n    if (num_list[i] > largest) {\n      largest = num_list[i]\n    }\n  }\n  return largest\n}\n\n/* Given an array of numbers. Return the sum of the squares of the numbers.\n*/\nconst sum_of_squares = (num_list) => {\n  let sum = 0\n  for (let i = 0; i < num_list.length; i++) {\n    sum += num_list[i] * num_list[i]\n  }\n  return sum\n}\n\n/* Given an array of numbers. Return the sum of the squares of the numbers.\n*/\nconst largest_number_array_sum_of_squares = (num_list) => {\n  let largest = num_list[0]\n  for (let i = 1; i < num_list.length; i++) {\n    if (num_list[i] > largest) {\n      largest = num_list[i]\n    }\n  }\n  return largest\n}\n\n/* Given an array of numbers. Return the sum of the cubes of the numbers.\n*/\nconst sum_of_cubes = (num_list) => {\n  let sum = 0\n  for (let i = 0; i < num_list.length; i++) {\n    sum += num_list[i] * num_list[i] * num_list[i]\n  }\n  return sum"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman.toLowerCase()\n}\n\n/**\n  * @param {number} number\n  * @returns {number}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman\n}\n\n/**\n  * @param {number} number\n  * @returns {string}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman\n}\n\n/**\n  * @param {number} number\n  * @returns {string}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman\n}\n\n/**\n  * @param {number} number\n  * @returns {string}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman\n}\n\n/**\n  * @param {number} number\n  * @returns {string}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman\n}\n\n/**\n  * @param {number} number\n  * @returns {string}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xv',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cc',\n        500: 'd',\n        900:'m',\n    }\n    let roman = ''\n    for (let i = number; i >= 1; i--) {\n        roman = number_to_roman[i] + roman\n    }\n    return roman\n}\n\n/**\n  * @param {number} number\n  * @returns {string}\n  * @example\n  * int_to_roman(19)\n  */\nconst int_to_roman = (number) => {\n    const number_to_roman = {\n        1: '"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n    return (a > b && a > c)\n        || (b > c && b > a)\n        || (c > a && c > b);\n};\n\n/*\n Given the lengths of the two sides of a triangle, return the length of the\n  third side.\n  Example:\n  length_of_the_third_side(4, 3, 5) == 8\n  length_of_the_third_side(6, 5, 4) == 0\n  length_of_the_third_side(3, 2, 4) == 0\n  */\nconst length_of_the_third_side = (a, b, c) => {\n    if (right_angle_triangle(a, b, c)) {\n        return (b + c) / 2;\n    } else {\n        return 0;\n    }\n};\n\n/*\n Given the length of the side of a triangle and the length of the other two\n  sides, return the length of the third side.\n  Example:\n  length_of_the_third_side(5, 3, 4) == 5\n  length_of_the_third_side(6, 4, 5) == 8\n  length_of_the_third_side(6, 5, 4) == 8\n  */\nconst length_of_the_third_side = (length_of_side, a, b) => {\n    if (a === length_of_side && b === length_of_side) {\n        return length_of_side;\n    } else {\n        return length_of_side + length_of_the_third_side(a, b, length_of_side);\n    }\n};\n\nexport default length_of_the_third_side;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const words_without_duplicates = new Set(words)\n  const max = words_without_duplicates.reduce((prev, next) => {\n    const [current_length, next_length] = [next.length, next.length]\n    const [char_1, char_2] = next.split(\"\")\n\n    while (next_length < current_length) {\n      const char = char_1\n      next_length = char_2\n      char_1 = char_2\n      char_2 = char\n    }\n    return prev.length < next_length? [next_length, next] : [prev, next]\n  }, [0, words[0]])\n  return max[1][0]\n}\n\n// TESTING\nconsole.log(find_max([\"name\", \"enam\", \"game\"]))\nconsole.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  //console.log('eat', number, need, remaining);\n  //return [number, remaining];\n  const number_eaten = number - need;\n  const remaining_eaten = remaining - number;\n  \n  if(remaining_eaten < 0){\n    //console.log('eat', number, need, remaining);\n    return [remaining_eaten, remaining];\n  }\n  //console.log('eat', number, need, remaining);\n  return [number_eaten, remaining_eaten];\n};\n\n//let result = eat(5, 6, 10);\n//console.log(result[0], result[1]);\n//result = eat(4, 8, 9);\n//console.log(result[0], result[1]);\n//result = eat(1, 10, 10);\n//console.log(result[0], result[1]);\n//result = eat(2, 11, 5);\n//console.log(result[0], result[1]);\n\n//const result = eat(5, 6, 9);\n//console.log(result[0], result[1]);\n//const result = eat(4, 8, 10);\n//console.log(result[0], result[1]);\n//const result = eat(1, 10, 10);\n//console.log(result[0], result[1]);\n//const result = eat(2, 11, 5);\n//console.log(result[0], result[1]);<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let operator_list = Array.from(operator.slice(0, operator.length - 1));\n  let operand_list = Array.from(operand.slice(0, operand.length - 1));\n\n  let result = operand_list[0];\n\n  for (let i = 1; i < operand_list.length; i++) {\n    if (operator_list[0] === '+') {\n      result += operand_list[i];\n    } else if (operator_list[0] === '-') {\n      result -= operand_list[i];\n    } else if (operator_list[0] === '*') {\n      result *= operand_list[i];\n    } else if (operator_list[0] === '/') {\n      result /= operand_list[i];\n    } else if (operator_list[0] === '**') {\n      result = Math.pow(result, operand_list[i]);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = do_algebra;<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const result = []\n  for(let i = 0, len = s.length; i < len; i += 1){\n    if(s[i].toUpperCase() === s[i].toLowerCase()){\n      result.push(s[i].toUpperCase())\n    }else{\n      result.push(s[i].toLowerCase())\n    }\n  }\n  return result.join('')\n}\n\nconsole.log(solve(\"1234\"))<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_md5(text);\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '3d3f9a7e7b5e70b08a1e5b69e3e9f4ee6f0b1c0'\n  */\nconst string_to_sha1 = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha1(text);\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == '5cac3ed4d9e3c8a5e7f0bcb23e0b6d1d9f3f5b1a0a1d5'\n  */\nconst string_to_sha256 = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha256(text);\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '4b6bbe4d2c8d8d7b7bc2c2e5f8e8d0e1e1d1b9c7f9e3e4f0e5e3e2f4f1e1d2c'\n  */\nconst string_to_sha512 = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha512(text);\n}\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == 'aeb7fec6b8c7e0c2c3ec2ed2d8f4f2b3d3e6d6a0a3d5b0a0a3d2d1c7f3d0a3d1'\n  */\nconst string_to_sha384 = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha384(text);\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '8a945c9f7b0f7d2a9d0d3b4e3d9f4f0e0f1e0d2c3e4d4f5e5d6f6f7e7d8d9e9fafb'\n  */\nconst string_to_sha512_b = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha512_b(text);\n}\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == '5a8f5d9c3e2f7a5e9ccf9a6b9d5e7e6d8dae5aeae1a6d6a0a6d5b0a0'\n  */\nconst string_to_sha384_b = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha384_b(text);\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512_b('Hello world') == '4b6bbe4d2c8d8d7b7bc2c2e5f8e8d0e1e1d1b9c7f9e3e4f0e5e3e2f4f1e1d2c'\n  */\nconst string_to_sha512_b_b = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha512_b_b(text);\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512_b('Hello world') == '8a945c9f7b0f7d2a9d0d3b4e3d9f4f0e0f1e0d2c3e4d4f5e5d6f6f7e7d8d9e9fafb'\n  */\nconst string_to_sha512_b_b_b = (text) => {\n    if (text === '') {\n        return null;\n    }\n    return hex_sha512_b_b_b(text);\n}\n\nmodule.exports = {\n    string_to_md5,\n    string_to_sha1,\n    string_to_sha256,\n    string_to_sha512,\n    string_to_sha384,\n    string_to_sha512_b,\n    string_to_sha384_b,\n    string_to_sha512_b_b,\n    string_to_sha384_b_b,\n    string_to_sha512_b_b_b,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const i = a\n  const j = b\n  const a_i = i\n  const b_j = j\n\n  const start = (i <= j)? a_i : b_j\n\n  const end = (i <= j)? b_j : a_i\n\n  const arr = []\n\n  while (i <= end) {\n    arr.push(i)\n    i += 2\n  }\n\n  return arr\n}\n\nconst generate_integers_with_bounds = (a, b) => {\n  const i = a\n  const j = b\n  const a_i = i\n  const b_j = j\n\n  const start = (i <= j)? a_i : b_j\n\n  const end = (i <= j)? b_j : a_i\n\n  const arr = []\n\n  while (i <= end) {\n    arr.push(i)\n    i += 2\n  }\n\n  return arr\n}\n\nconst generate_integers_with_bounds_reverse = (a, b) => {\n  const i = a\n  const j = b\n  const a_i = i\n  const b_j = j\n\n  const start = (i <= j)? a_i : b_j\n\n  const end = (i <= j)? b_j : a_i\n\n  const arr = []\n\n  while (i <= end) {\n    arr.push(i)\n    i += 2\n  }\n\n  return arr\n}\n\nexport {\n  generate_integers,\n  generate_integers_with_bounds,\n  generate_integers_with_bounds_reverse,\n}\n<|endoftext|>"}
